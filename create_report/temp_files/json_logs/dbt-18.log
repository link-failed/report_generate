{"code": "A001", "data": {"v": "=1.1.1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "Running with dbt=1.1.1", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.144993Z", "type": "log_line"}
{"code": "A002", "data": {"args": {"event_buffer_size": 100000, "indirect_selection": "eager", "log_format": "json", "no_print": false, "partial_parse": true, "printer_width": 80, "profiles_dir": "/home/ceci/.dbt", "quiet": false, "rpc_method": "run", "send_anonymous_usage_stats": true, "static_parser": true, "use_colors": true, "version_check": true, "which": "run", "write_json": true}}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "running dbt with arguments {'log_format': 'json', 'write_json': True, 'use_colors': True, 'printer_width': 80, 'version_check': True, 'partial_parse': True, 'static_parser': True, 'profiles_dir': '/home/ceci/.dbt', 'send_anonymous_usage_stats': True, 'event_buffer_size': 100000, 'quiet': False, 'no_print': False, 'which': 'run', 'rpc_method': 'run', 'indirect_selection': 'eager'}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.146056Z", "type": "log_line"}
{"code": "A003", "data": {"user_state": "tracking"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Tracking: tracking", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.146311Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a220>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a130>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab0a220>]}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.152972Z", "type": "log_line"}
{"code": "I040", "data": {"added": 0, "changed": 0, "deleted": 0}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.278384Z", "type": "log_line"}
{"code": "I017", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled, no changes found, skipping parsing", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.278684Z", "type": "log_line"}
{"code": "Z046", "data": {"log_fmt": "[\u001b[33mWARNING\u001b[0m]: {}", "msg": "Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.diagnosis\n- models.mimic.example\n"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "warn", "log_version": 2, "msg": "[\u001b[33mWARNING\u001b[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.diagnosis\n- models.mimic.example\n", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.280887Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab1ef40>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab1ef40>]}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.288454Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab41400>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab41400>]}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.310808Z", "type": "log_line"}
{"code": "W006", "data": {"stat_line": "107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "Found 107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.311383Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab41a60>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab41a60>]}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.312110Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.320217Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"list_postgres\"", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.325365Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"list_postgres\"", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.338238Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "list_postgres", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  "}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  ", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.338573Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "init"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state init", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.338833Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 8"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 8 in 0.01 seconds", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.347662Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "list_postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres: Close", "pid": 109348, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T00:09:27.353357Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "list_postgres_public", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"list_postgres_public\"", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.360462Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "list_postgres_public", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"list_postgres_public\"", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.366613Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "list_postgres_public", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres_public: BEGIN", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.367084Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.367636Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.0 seconds", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.372458Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "list_postgres_public", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"list_postgres_public\"", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.372740Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "list_postgres_public", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres_public\"} */\nselect\n      'postgres' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'postgres' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n  "}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres_public: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres_public\"} */\nselect\n      'postgres' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'postgres' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n  ", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.372873Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "SELECT 339"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 339 in 0.0 seconds", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.375858Z", "type": "log_line"}
{"code": "E012", "data": {"conn_name": "list_postgres_public"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres_public: ROLLBACK", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.385420Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "list_postgres_public"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On list_postgres_public: Close", "pid": 109348, "thread_name": "ThreadPoolExecutor-1_0", "ts": "2022-07-18T00:09:27.386155Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.397041Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: BEGIN", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.397315Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "init"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state init", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.397436Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.403629Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.404022Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"master\"} */\nwith relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"master\"} */\nwith relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.404333Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.412095Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c9ae970>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c9ae970>]}", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.416917Z", "type": "log_line"}
{"code": "E012", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: ROLLBACK", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.417387Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.418074Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: BEGIN", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.418399Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.0 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.419256Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: COMMIT", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.419570Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.419838Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: COMMIT", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.420069Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.420560Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: Close", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.420904Z", "type": "log_line"}
{"code": "Q026", "data": {"num_threads": 1, "target_name": "dev"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "Concurrency: 1 threads (target='dev')", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:09:27.421693Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": "2022-07-18T00:09:27.426725", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.abx_prescriptions_list", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.426805Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.abx_prescriptions_list", "index": 1, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": "2022-07-18T00:09:27.426725", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "1 of 107 START table model public.abx_prescriptions_list ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.427270Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.428395Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": "2022-07-18T00:09:27.426725", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.abx_prescriptions_list", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.428821Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.abx_prescriptions_list", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.429245Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.433675Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.435674Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.abx_prescriptions_list", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.436172Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.abx_prescriptions_list\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.475703Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.476220Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.476476Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.476604Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.481509Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.481965Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\n\n\n  create  table \"postgres\".\"public\".\"abx_prescriptions_list__dbt_tmp\"\n  as (\n     \nwith t1 as\n(\n  select\n    drug, drug_name_generic\n    , route\n    , case\n      when lower(drug) like '%adoxa%' then 1\n      when lower(drug) like '%ala-tet%' then 1\n      when lower(drug) like '%alodox%' then 1\n      when lower(drug) like '%amikacin%' then 1\n      when lower(drug) like '%amikin%' then 1\n      when lower(drug) like '%amoxicillin%' then 1\n      when lower(drug) like '%amoxicillin%clavulanate%' then 1\n      when lower(drug) like '%clavulanate%' then 1\n      when lower(drug) like '%ampicillin%' then 1\n      when lower(drug) like '%augmentin%' then 1\n      when lower(drug) like '%avelox%' then 1\n      when lower(drug) like '%avidoxy%' then 1\n      when lower(drug) like '%azactam%' then 1\n      when lower(drug) like '%azithromycin%' then 1\n      when lower(drug) like '%aztreonam%' then 1\n      when lower(drug) like '%axetil%' then 1\n      when lower(drug) like '%bactocill%' then 1\n      when lower(drug) like '%bactrim%' then 1\n      when lower(drug) like '%bethkis%' then 1\n      when lower(drug) like '%biaxin%' then 1\n      when lower(drug) like '%bicillin l-a%' then 1\n      when lower(drug) like '%cayston%' then 1\n      when lower(drug) like '%cefazolin%' then 1\n      when lower(drug) like '%cedax%' then 1\n      when lower(drug) like '%cefoxitin%' then 1\n      when lower(drug) like '%ceftazidime%' then 1\n      when lower(drug) like '%cefaclor%' then 1\n      when lower(drug) like '%cefadroxil%' then 1\n      when lower(drug) like '%cefdinir%' then 1\n      when lower(drug) like '%cefditoren%' then 1\n      when lower(drug) like '%cefepime%' then 1\n      when lower(drug) like '%cefotetan%' then 1\n      when lower(drug) like '%cefotaxime%' then 1\n      when lower(drug) like '%cefpodoxime%' then 1\n      when lower(drug) like '%cefprozil%' then 1\n      when lower(drug) like '%ceftibuten%' then 1\n      when lower(drug) like '%ceftin%' then 1\n      when lower(drug) like '%cefuroxime %' then 1\n      when lower(drug) like '%cefuroxime%' then 1\n      when lower(drug) like '%cephalexin%' then 1\n      when lower(drug) like '%chloramphenicol%' then 1\n      when lower(drug) like '%cipro%' then 1\n      when lower(drug) like '%ciprofloxacin%' then 1\n      when lower(drug) like '%claforan%' then 1\n      when lower(drug) like '%clarithromycin%' then 1\n      when lower(drug) like '%cleocin%' then 1\n      when lower(drug) like '%clindamycin%' then 1\n      when lower(drug) like '%cubicin%' then 1\n      when lower(drug) like '%dicloxacillin%' then 1\n      when lower(drug) like '%doryx%' then 1\n      when lower(drug) like '%doxycycline%' then 1\n      when lower(drug) like '%duricef%' then 1\n      when lower(drug) like '%dynacin%' then 1\n      when lower(drug) like '%ery-tab%' then 1\n      when lower(drug) like '%eryped%' then 1\n      when lower(drug) like '%eryc%' then 1\n      when lower(drug) like '%erythrocin%' then 1\n      when lower(drug) like '%erythromycin%' then 1\n      when lower(drug) like '%factive%' then 1\n      when lower(drug) like '%flagyl%' then 1\n      when lower(drug) like '%fortaz%' then 1\n      when lower(drug) like '%furadantin%' then 1\n      when lower(drug) like '%garamycin%' then 1\n      when lower(drug) like '%gentamicin%' then 1\n      when lower(drug) like '%kanamycin%' then 1\n      when lower(drug) like '%keflex%' then 1\n      when lower(drug) like '%ketek%' then 1\n      when lower(drug) like '%levaquin%' then 1\n      when lower(drug) like '%levofloxacin%' then 1\n      when lower(drug) like '%lincocin%' then 1\n      when lower(drug) like '%macrobid%' then 1\n      when lower(drug) like '%macrodantin%' then 1\n      when lower(drug) like '%maxipime%' then 1\n      when lower(drug) like '%mefoxin%' then 1\n      when lower(drug) like '%metronidazole%' then 1\n      when lower(drug) like '%minocin%' then 1\n      when lower(drug) like '%minocycline%' then 1\n      when lower(drug) like '%monodox%' then 1\n      when lower(drug) like '%monurol%' then 1\n      when lower(drug) like '%morgidox%' then 1\n      when lower(drug) like '%moxatag%' then 1\n      when lower(drug) like '%moxifloxacin%' then 1\n      when lower(drug) like '%myrac%' then 1\n      when lower(drug) like '%nafcillin sodium%' then 1\n      when lower(drug) like '%nicazel doxy 30%' then 1\n      when lower(drug) like '%nitrofurantoin%' then 1\n      when lower(drug) like '%noroxin%' then 1\n      when lower(drug) like '%ocudox%' then 1\n      when lower(drug) like '%ofloxacin%' then 1\n      when lower(drug) like '%omnicef%' then 1\n      when lower(drug) like '%oracea%' then 1\n      when lower(drug) like '%oraxyl%' then 1\n      when lower(drug) like '%oxacillin%' then 1\n      when lower(drug) like '%pc pen vk%' then 1\n      when lower(drug) like '%pce dispertab%' then 1\n      when lower(drug) like '%panixine%' then 1\n      when lower(drug) like '%pediazole%' then 1\n      when lower(drug) like '%penicillin%' then 1\n      when lower(drug) like '%periostat%' then 1\n      when lower(drug) like '%pfizerpen%' then 1\n      when lower(drug) like '%piperacillin%' then 1\n      when lower(drug) like '%tazobactam%' then 1\n      when lower(drug) like '%primsol%' then 1\n      when lower(drug) like '%proquin%' then 1\n      when lower(drug) like '%raniclor%' then 1\n      when lower(drug) like '%rifadin%' then 1\n      when lower(drug) like '%rifampin%' then 1\n      when lower(drug) like '%rocephin%' then 1\n      when lower(drug) like '%smz-tmp%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%septra ds%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%solodyn%' then 1\n      when lower(drug) like '%spectracef%' then 1\n      when lower(drug) like '%streptomycin sulfate%' then 1\n      when lower(drug) like '%sulfadiazine%' then 1\n      when lower(drug) like '%sulfamethoxazole%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%sulfatrim%' then 1\n      when lower(drug) like '%sulfisoxazole%' then 1\n      when lower(drug) like '%suprax%' then 1\n      when lower(drug) like '%synercid%' then 1\n      when lower(drug) like '%tazicef%' then 1\n      when lower(drug) like '%tetracycline%' then 1\n      when lower(drug) like '%timentin%' then 1\n      when lower(drug) like '%tobi%' then 1\n      when lower(drug) like '%tobramycin%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%unasyn%' then 1\n      when lower(drug) like '%vancocin%' then 1\n      when lower(drug) like '%vancomycin%' then 1\n      when lower(drug) like '%vantin%' then 1\n      when lower(drug) like '%vibativ%' then 1\n      when lower(drug) like '%vibra-tabs%' then 1\n      when lower(drug) like '%vibramycin%' then 1\n      when lower(drug) like '%zinacef%' then 1\n      when lower(drug) like '%zithromax%' then 1\n      when lower(drug) like '%zmax%' then 1\n      when lower(drug) like '%zosyn%' then 1\n      when lower(drug) like '%zyvox%' then 1\n    else 0\n    end as antibiotic\n  from prescriptions\n  where drug_type in ('MAIN','ADDITIVE')\n  -- we exclude routes via the eye, ears, or topically\n  and route not in ('OU','OS','OD','AU','AS','AD', 'TP')\n  and lower(route) not like '%ear%'\n  and lower(route) not like '%eye%'\n  -- we exclude certain types of antibiotics: topical creams, gels, desens, etc\n  and lower(drug) not like '%cream%'\n  and lower(drug) not like '%desensitization%'\n  and lower(drug) not like '%ophth oint%'\n  and lower(drug) not like '%gel%'\n  -- other routes not sure about...\n  -- for sure keep: ('IV','PO','PO/NG','ORAL', 'IV DRIP', 'IV BOLUS')\n  -- ? VT, PB, PR, PL, NS, NG, NEB, NAS, LOCK, J TUBE, IVT\n  -- ? IT, IRR, IP, IO, INHALATION, IN, IM\n  -- ? IJ, IH, G TUBE, DIALYS\n  -- ?? enemas??\n)\nselect\n  drug --, drug_name_generic\n  , count(*) as numobs\nfrom t1\nwhere antibiotic = 1\ngroup by drug --, drug_name_generic\norder by numobs desc\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\n\n\n  create  table \"postgres\".\"public\".\"abx_prescriptions_list__dbt_tmp\"\n  as (\n     \nwith t1 as\n(\n  select\n    drug, drug_name_generic\n    , route\n    , case\n      when lower(drug) like '%adoxa%' then 1\n      when lower(drug) like '%ala-tet%' then 1\n      when lower(drug) like '%alodox%' then 1\n      when lower(drug) like '%amikacin%' then 1\n      when lower(drug) like '%amikin%' then 1\n      when lower(drug) like '%amoxicillin%' then 1\n      when lower(drug) like '%amoxicillin%clavulanate%' then 1\n      when lower(drug) like '%clavulanate%' then 1\n      when lower(drug) like '%ampicillin%' then 1\n      when lower(drug) like '%augmentin%' then 1\n      when lower(drug) like '%avelox%' then 1\n      when lower(drug) like '%avidoxy%' then 1\n      when lower(drug) like '%azactam%' then 1\n      when lower(drug) like '%azithromycin%' then 1\n      when lower(drug) like '%aztreonam%' then 1\n      when lower(drug) like '%axetil%' then 1\n      when lower(drug) like '%bactocill%' then 1\n      when lower(drug) like '%bactrim%' then 1\n      when lower(drug) like '%bethkis%' then 1\n      when lower(drug) like '%biaxin%' then 1\n      when lower(drug) like '%bicillin l-a%' then 1\n      when lower(drug) like '%cayston%' then 1\n      when lower(drug) like '%cefazolin%' then 1\n      when lower(drug) like '%cedax%' then 1\n      when lower(drug) like '%cefoxitin%' then 1\n      when lower(drug) like '%ceftazidime%' then 1\n      when lower(drug) like '%cefaclor%' then 1\n      when lower(drug) like '%cefadroxil%' then 1\n      when lower(drug) like '%cefdinir%' then 1\n      when lower(drug) like '%cefditoren%' then 1\n      when lower(drug) like '%cefepime%' then 1\n      when lower(drug) like '%cefotetan%' then 1\n      when lower(drug) like '%cefotaxime%' then 1\n      when lower(drug) like '%cefpodoxime%' then 1\n      when lower(drug) like '%cefprozil%' then 1\n      when lower(drug) like '%ceftibuten%' then 1\n      when lower(drug) like '%ceftin%' then 1\n      when lower(drug) like '%cefuroxime %' then 1\n      when lower(drug) like '%cefuroxime%' then 1\n      when lower(drug) like '%cephalexin%' then 1\n      when lower(drug) like '%chloramphenicol%' then 1\n      when lower(drug) like '%cipro%' then 1\n      when lower(drug) like '%ciprofloxacin%' then 1\n      when lower(drug) like '%claforan%' then 1\n      when lower(drug) like '%clarithromycin%' then 1\n      when lower(drug) like '%cleocin%' then 1\n      when lower(drug) like '%clindamycin%' then 1\n      when lower(drug) like '%cubicin%' then 1\n      when lower(drug) like '%dicloxacillin%' then 1\n      when lower(drug) like '%doryx%' then 1\n      when lower(drug) like '%doxycycline%' then 1\n      when lower(drug) like '%duricef%' then 1\n      when lower(drug) like '%dynacin%' then 1\n      when lower(drug) like '%ery-tab%' then 1\n      when lower(drug) like '%eryped%' then 1\n      when lower(drug) like '%eryc%' then 1\n      when lower(drug) like '%erythrocin%' then 1\n      when lower(drug) like '%erythromycin%' then 1\n      when lower(drug) like '%factive%' then 1\n      when lower(drug) like '%flagyl%' then 1\n      when lower(drug) like '%fortaz%' then 1\n      when lower(drug) like '%furadantin%' then 1\n      when lower(drug) like '%garamycin%' then 1\n      when lower(drug) like '%gentamicin%' then 1\n      when lower(drug) like '%kanamycin%' then 1\n      when lower(drug) like '%keflex%' then 1\n      when lower(drug) like '%ketek%' then 1\n      when lower(drug) like '%levaquin%' then 1\n      when lower(drug) like '%levofloxacin%' then 1\n      when lower(drug) like '%lincocin%' then 1\n      when lower(drug) like '%macrobid%' then 1\n      when lower(drug) like '%macrodantin%' then 1\n      when lower(drug) like '%maxipime%' then 1\n      when lower(drug) like '%mefoxin%' then 1\n      when lower(drug) like '%metronidazole%' then 1\n      when lower(drug) like '%minocin%' then 1\n      when lower(drug) like '%minocycline%' then 1\n      when lower(drug) like '%monodox%' then 1\n      when lower(drug) like '%monurol%' then 1\n      when lower(drug) like '%morgidox%' then 1\n      when lower(drug) like '%moxatag%' then 1\n      when lower(drug) like '%moxifloxacin%' then 1\n      when lower(drug) like '%myrac%' then 1\n      when lower(drug) like '%nafcillin sodium%' then 1\n      when lower(drug) like '%nicazel doxy 30%' then 1\n      when lower(drug) like '%nitrofurantoin%' then 1\n      when lower(drug) like '%noroxin%' then 1\n      when lower(drug) like '%ocudox%' then 1\n      when lower(drug) like '%ofloxacin%' then 1\n      when lower(drug) like '%omnicef%' then 1\n      when lower(drug) like '%oracea%' then 1\n      when lower(drug) like '%oraxyl%' then 1\n      when lower(drug) like '%oxacillin%' then 1\n      when lower(drug) like '%pc pen vk%' then 1\n      when lower(drug) like '%pce dispertab%' then 1\n      when lower(drug) like '%panixine%' then 1\n      when lower(drug) like '%pediazole%' then 1\n      when lower(drug) like '%penicillin%' then 1\n      when lower(drug) like '%periostat%' then 1\n      when lower(drug) like '%pfizerpen%' then 1\n      when lower(drug) like '%piperacillin%' then 1\n      when lower(drug) like '%tazobactam%' then 1\n      when lower(drug) like '%primsol%' then 1\n      when lower(drug) like '%proquin%' then 1\n      when lower(drug) like '%raniclor%' then 1\n      when lower(drug) like '%rifadin%' then 1\n      when lower(drug) like '%rifampin%' then 1\n      when lower(drug) like '%rocephin%' then 1\n      when lower(drug) like '%smz-tmp%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%septra ds%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%solodyn%' then 1\n      when lower(drug) like '%spectracef%' then 1\n      when lower(drug) like '%streptomycin sulfate%' then 1\n      when lower(drug) like '%sulfadiazine%' then 1\n      when lower(drug) like '%sulfamethoxazole%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%sulfatrim%' then 1\n      when lower(drug) like '%sulfisoxazole%' then 1\n      when lower(drug) like '%suprax%' then 1\n      when lower(drug) like '%synercid%' then 1\n      when lower(drug) like '%tazicef%' then 1\n      when lower(drug) like '%tetracycline%' then 1\n      when lower(drug) like '%timentin%' then 1\n      when lower(drug) like '%tobi%' then 1\n      when lower(drug) like '%tobramycin%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%unasyn%' then 1\n      when lower(drug) like '%vancocin%' then 1\n      when lower(drug) like '%vancomycin%' then 1\n      when lower(drug) like '%vantin%' then 1\n      when lower(drug) like '%vibativ%' then 1\n      when lower(drug) like '%vibra-tabs%' then 1\n      when lower(drug) like '%vibramycin%' then 1\n      when lower(drug) like '%zinacef%' then 1\n      when lower(drug) like '%zithromax%' then 1\n      when lower(drug) like '%zmax%' then 1\n      when lower(drug) like '%zosyn%' then 1\n      when lower(drug) like '%zyvox%' then 1\n    else 0\n    end as antibiotic\n  from prescriptions\n  where drug_type in ('MAIN','ADDITIVE')\n  -- we exclude routes via the eye, ears, or topically\n  and route not in ('OU','OS','OD','AU','AS','AD', 'TP')\n  and lower(route) not like '%ear%'\n  and lower(route) not like '%eye%'\n  -- we exclude certain types of antibiotics: topical creams, gels, desens, etc\n  and lower(drug) not like '%cream%'\n  and lower(drug) not like '%desensitization%'\n  and lower(drug) not like '%ophth oint%'\n  and lower(drug) not like '%gel%'\n  -- other routes not sure about...\n  -- for sure keep: ('IV','PO','PO/NG','ORAL', 'IV DRIP', 'IV BOLUS')\n  -- ? VT, PB, PR, PL, NS, NG, NEB, NAS, LOCK, J TUBE, IVT\n  -- ? IT, IRR, IP, IO, INHALATION, IN, IM\n  -- ? IJ, IH, G TUBE, DIALYS\n  -- ?? enemas??\n)\nselect\n  drug --, drug_name_generic\n  , count(*) as numobs\nfrom t1\nwhere antibiotic = 1\ngroup by drug --, drug_name_generic\norder by numobs desc\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:09:27.482126Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 33.15, "status": "SELECT 156"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 156 in 33.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.631843Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.644490Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\nalter table \"postgres\".\"public\".\"abx_prescriptions_list\" rename to \"abx_prescriptions_list__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\nalter table \"postgres\".\"public\".\"abx_prescriptions_list\" rename to \"abx_prescriptions_list__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.644736Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.645727Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.649199Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\nalter table \"postgres\".\"public\".\"abx_prescriptions_list__dbt_tmp\" rename to \"abx_prescriptions_list\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\nalter table \"postgres\".\"public\".\"abx_prescriptions_list__dbt_tmp\" rename to \"abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.649439Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.650297Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.660864Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.661141Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.661313Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.662595Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.abx_prescriptions_list\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.667004Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.abx_prescriptions_list", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\ndrop table if exists \"postgres\".\"public\".\"abx_prescriptions_list__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.abx_prescriptions_list\"} */\ndrop table if exists \"postgres\".\"public\".\"abx_prescriptions_list__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.667255Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.669460Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.672832Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.abx_prescriptions_list: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.673102Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a0530a0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a0530a0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.673949Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.abx_prescriptions_list", "execution_time": 33, "index": 1, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": "2022-07-18T00:09:27.426725", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "status": "SELECT 156", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "1 of 107 OK created table model public.abx_prescriptions_list .................. [\u001b[32mSELECT 156\u001b[0m in 33.25s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.674542Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:00.675082", "node_name": "abx_prescriptions_list", "node_path": "treatment/abx_prescriptions_list.sql", "node_started_at": "2022-07-18T00:09:27.426725", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.abx_prescriptions_list"}, "run_result": {"adapter_response": {"_message": "SELECT 156", "code": "SELECT", "rows_affected": 156}, "agate_table": null, "execution_time": 33.245901107788086, "failures": null, "message": "SELECT 156", "node": {"alias": "abx_prescriptions_list", "build_path": "target/run/mimic/models/treatment/abx_prescriptions_list.sql", "checksum": {"checksum": "57bfe86b6968a1143dd63473d753eb935ebdcf3241c576785df6ce0461b31e05", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/treatment/abx_prescriptions_list.sql", "compiled_sql": " \nwith t1 as\n(\n  select\n    drug, drug_name_generic\n    , route\n    , case\n      when lower(drug) like '%adoxa%' then 1\n      when lower(drug) like '%ala-tet%' then 1\n      when lower(drug) like '%alodox%' then 1\n      when lower(drug) like '%amikacin%' then 1\n      when lower(drug) like '%amikin%' then 1\n      when lower(drug) like '%amoxicillin%' then 1\n      when lower(drug) like '%amoxicillin%clavulanate%' then 1\n      when lower(drug) like '%clavulanate%' then 1\n      when lower(drug) like '%ampicillin%' then 1\n      when lower(drug) like '%augmentin%' then 1\n      when lower(drug) like '%avelox%' then 1\n      when lower(drug) like '%avidoxy%' then 1\n      when lower(drug) like '%azactam%' then 1\n      when lower(drug) like '%azithromycin%' then 1\n      when lower(drug) like '%aztreonam%' then 1\n      when lower(drug) like '%axetil%' then 1\n      when lower(drug) like '%bactocill%' then 1\n      when lower(drug) like '%bactrim%' then 1\n      when lower(drug) like '%bethkis%' then 1\n      when lower(drug) like '%biaxin%' then 1\n      when lower(drug) like '%bicillin l-a%' then 1\n      when lower(drug) like '%cayston%' then 1\n      when lower(drug) like '%cefazolin%' then 1\n      when lower(drug) like '%cedax%' then 1\n      when lower(drug) like '%cefoxitin%' then 1\n      when lower(drug) like '%ceftazidime%' then 1\n      when lower(drug) like '%cefaclor%' then 1\n      when lower(drug) like '%cefadroxil%' then 1\n      when lower(drug) like '%cefdinir%' then 1\n      when lower(drug) like '%cefditoren%' then 1\n      when lower(drug) like '%cefepime%' then 1\n      when lower(drug) like '%cefotetan%' then 1\n      when lower(drug) like '%cefotaxime%' then 1\n      when lower(drug) like '%cefpodoxime%' then 1\n      when lower(drug) like '%cefprozil%' then 1\n      when lower(drug) like '%ceftibuten%' then 1\n      when lower(drug) like '%ceftin%' then 1\n      when lower(drug) like '%cefuroxime %' then 1\n      when lower(drug) like '%cefuroxime%' then 1\n      when lower(drug) like '%cephalexin%' then 1\n      when lower(drug) like '%chloramphenicol%' then 1\n      when lower(drug) like '%cipro%' then 1\n      when lower(drug) like '%ciprofloxacin%' then 1\n      when lower(drug) like '%claforan%' then 1\n      when lower(drug) like '%clarithromycin%' then 1\n      when lower(drug) like '%cleocin%' then 1\n      when lower(drug) like '%clindamycin%' then 1\n      when lower(drug) like '%cubicin%' then 1\n      when lower(drug) like '%dicloxacillin%' then 1\n      when lower(drug) like '%doryx%' then 1\n      when lower(drug) like '%doxycycline%' then 1\n      when lower(drug) like '%duricef%' then 1\n      when lower(drug) like '%dynacin%' then 1\n      when lower(drug) like '%ery-tab%' then 1\n      when lower(drug) like '%eryped%' then 1\n      when lower(drug) like '%eryc%' then 1\n      when lower(drug) like '%erythrocin%' then 1\n      when lower(drug) like '%erythromycin%' then 1\n      when lower(drug) like '%factive%' then 1\n      when lower(drug) like '%flagyl%' then 1\n      when lower(drug) like '%fortaz%' then 1\n      when lower(drug) like '%furadantin%' then 1\n      when lower(drug) like '%garamycin%' then 1\n      when lower(drug) like '%gentamicin%' then 1\n      when lower(drug) like '%kanamycin%' then 1\n      when lower(drug) like '%keflex%' then 1\n      when lower(drug) like '%ketek%' then 1\n      when lower(drug) like '%levaquin%' then 1\n      when lower(drug) like '%levofloxacin%' then 1\n      when lower(drug) like '%lincocin%' then 1\n      when lower(drug) like '%macrobid%' then 1\n      when lower(drug) like '%macrodantin%' then 1\n      when lower(drug) like '%maxipime%' then 1\n      when lower(drug) like '%mefoxin%' then 1\n      when lower(drug) like '%metronidazole%' then 1\n      when lower(drug) like '%minocin%' then 1\n      when lower(drug) like '%minocycline%' then 1\n      when lower(drug) like '%monodox%' then 1\n      when lower(drug) like '%monurol%' then 1\n      when lower(drug) like '%morgidox%' then 1\n      when lower(drug) like '%moxatag%' then 1\n      when lower(drug) like '%moxifloxacin%' then 1\n      when lower(drug) like '%myrac%' then 1\n      when lower(drug) like '%nafcillin sodium%' then 1\n      when lower(drug) like '%nicazel doxy 30%' then 1\n      when lower(drug) like '%nitrofurantoin%' then 1\n      when lower(drug) like '%noroxin%' then 1\n      when lower(drug) like '%ocudox%' then 1\n      when lower(drug) like '%ofloxacin%' then 1\n      when lower(drug) like '%omnicef%' then 1\n      when lower(drug) like '%oracea%' then 1\n      when lower(drug) like '%oraxyl%' then 1\n      when lower(drug) like '%oxacillin%' then 1\n      when lower(drug) like '%pc pen vk%' then 1\n      when lower(drug) like '%pce dispertab%' then 1\n      when lower(drug) like '%panixine%' then 1\n      when lower(drug) like '%pediazole%' then 1\n      when lower(drug) like '%penicillin%' then 1\n      when lower(drug) like '%periostat%' then 1\n      when lower(drug) like '%pfizerpen%' then 1\n      when lower(drug) like '%piperacillin%' then 1\n      when lower(drug) like '%tazobactam%' then 1\n      when lower(drug) like '%primsol%' then 1\n      when lower(drug) like '%proquin%' then 1\n      when lower(drug) like '%raniclor%' then 1\n      when lower(drug) like '%rifadin%' then 1\n      when lower(drug) like '%rifampin%' then 1\n      when lower(drug) like '%rocephin%' then 1\n      when lower(drug) like '%smz-tmp%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%septra ds%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%solodyn%' then 1\n      when lower(drug) like '%spectracef%' then 1\n      when lower(drug) like '%streptomycin sulfate%' then 1\n      when lower(drug) like '%sulfadiazine%' then 1\n      when lower(drug) like '%sulfamethoxazole%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%sulfatrim%' then 1\n      when lower(drug) like '%sulfisoxazole%' then 1\n      when lower(drug) like '%suprax%' then 1\n      when lower(drug) like '%synercid%' then 1\n      when lower(drug) like '%tazicef%' then 1\n      when lower(drug) like '%tetracycline%' then 1\n      when lower(drug) like '%timentin%' then 1\n      when lower(drug) like '%tobi%' then 1\n      when lower(drug) like '%tobramycin%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%unasyn%' then 1\n      when lower(drug) like '%vancocin%' then 1\n      when lower(drug) like '%vancomycin%' then 1\n      when lower(drug) like '%vantin%' then 1\n      when lower(drug) like '%vibativ%' then 1\n      when lower(drug) like '%vibra-tabs%' then 1\n      when lower(drug) like '%vibramycin%' then 1\n      when lower(drug) like '%zinacef%' then 1\n      when lower(drug) like '%zithromax%' then 1\n      when lower(drug) like '%zmax%' then 1\n      when lower(drug) like '%zosyn%' then 1\n      when lower(drug) like '%zyvox%' then 1\n    else 0\n    end as antibiotic\n  from prescriptions\n  where drug_type in ('MAIN','ADDITIVE')\n  -- we exclude routes via the eye, ears, or topically\n  and route not in ('OU','OS','OD','AU','AS','AD', 'TP')\n  and lower(route) not like '%ear%'\n  and lower(route) not like '%eye%'\n  -- we exclude certain types of antibiotics: topical creams, gels, desens, etc\n  and lower(drug) not like '%cream%'\n  and lower(drug) not like '%desensitization%'\n  and lower(drug) not like '%ophth oint%'\n  and lower(drug) not like '%gel%'\n  -- other routes not sure about...\n  -- for sure keep: ('IV','PO','PO/NG','ORAL', 'IV DRIP', 'IV BOLUS')\n  -- ? VT, PB, PR, PL, NS, NG, NEB, NAS, LOCK, J TUBE, IVT\n  -- ? IT, IRR, IP, IO, INHALATION, IN, IM\n  -- ? IJ, IH, G TUBE, DIALYS\n  -- ?? enemas??\n)\nselect\n  drug --, drug_name_generic\n  , count(*) as numobs\nfrom t1\nwhere antibiotic = 1\ngroup by drug --, drug_name_generic\norder by numobs desc", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.736002, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "treatment", "abx_prescriptions_list"], "meta": {}, "name": "abx_prescriptions_list", "original_file_path": "models/treatment/abx_prescriptions_list.sql", "package_name": "mimic", "patch_path": null, "path": "treatment/abx_prescriptions_list.sql", "raw_sql": "{{ config(materialized = 'table') }} \nwith t1 as\n(\n  select\n    drug, drug_name_generic\n    , route\n    , case\n      when lower(drug) like '%adoxa%' then 1\n      when lower(drug) like '%ala-tet%' then 1\n      when lower(drug) like '%alodox%' then 1\n      when lower(drug) like '%amikacin%' then 1\n      when lower(drug) like '%amikin%' then 1\n      when lower(drug) like '%amoxicillin%' then 1\n      when lower(drug) like '%amoxicillin%clavulanate%' then 1\n      when lower(drug) like '%clavulanate%' then 1\n      when lower(drug) like '%ampicillin%' then 1\n      when lower(drug) like '%augmentin%' then 1\n      when lower(drug) like '%avelox%' then 1\n      when lower(drug) like '%avidoxy%' then 1\n      when lower(drug) like '%azactam%' then 1\n      when lower(drug) like '%azithromycin%' then 1\n      when lower(drug) like '%aztreonam%' then 1\n      when lower(drug) like '%axetil%' then 1\n      when lower(drug) like '%bactocill%' then 1\n      when lower(drug) like '%bactrim%' then 1\n      when lower(drug) like '%bethkis%' then 1\n      when lower(drug) like '%biaxin%' then 1\n      when lower(drug) like '%bicillin l-a%' then 1\n      when lower(drug) like '%cayston%' then 1\n      when lower(drug) like '%cefazolin%' then 1\n      when lower(drug) like '%cedax%' then 1\n      when lower(drug) like '%cefoxitin%' then 1\n      when lower(drug) like '%ceftazidime%' then 1\n      when lower(drug) like '%cefaclor%' then 1\n      when lower(drug) like '%cefadroxil%' then 1\n      when lower(drug) like '%cefdinir%' then 1\n      when lower(drug) like '%cefditoren%' then 1\n      when lower(drug) like '%cefepime%' then 1\n      when lower(drug) like '%cefotetan%' then 1\n      when lower(drug) like '%cefotaxime%' then 1\n      when lower(drug) like '%cefpodoxime%' then 1\n      when lower(drug) like '%cefprozil%' then 1\n      when lower(drug) like '%ceftibuten%' then 1\n      when lower(drug) like '%ceftin%' then 1\n      when lower(drug) like '%cefuroxime %' then 1\n      when lower(drug) like '%cefuroxime%' then 1\n      when lower(drug) like '%cephalexin%' then 1\n      when lower(drug) like '%chloramphenicol%' then 1\n      when lower(drug) like '%cipro%' then 1\n      when lower(drug) like '%ciprofloxacin%' then 1\n      when lower(drug) like '%claforan%' then 1\n      when lower(drug) like '%clarithromycin%' then 1\n      when lower(drug) like '%cleocin%' then 1\n      when lower(drug) like '%clindamycin%' then 1\n      when lower(drug) like '%cubicin%' then 1\n      when lower(drug) like '%dicloxacillin%' then 1\n      when lower(drug) like '%doryx%' then 1\n      when lower(drug) like '%doxycycline%' then 1\n      when lower(drug) like '%duricef%' then 1\n      when lower(drug) like '%dynacin%' then 1\n      when lower(drug) like '%ery-tab%' then 1\n      when lower(drug) like '%eryped%' then 1\n      when lower(drug) like '%eryc%' then 1\n      when lower(drug) like '%erythrocin%' then 1\n      when lower(drug) like '%erythromycin%' then 1\n      when lower(drug) like '%factive%' then 1\n      when lower(drug) like '%flagyl%' then 1\n      when lower(drug) like '%fortaz%' then 1\n      when lower(drug) like '%furadantin%' then 1\n      when lower(drug) like '%garamycin%' then 1\n      when lower(drug) like '%gentamicin%' then 1\n      when lower(drug) like '%kanamycin%' then 1\n      when lower(drug) like '%keflex%' then 1\n      when lower(drug) like '%ketek%' then 1\n      when lower(drug) like '%levaquin%' then 1\n      when lower(drug) like '%levofloxacin%' then 1\n      when lower(drug) like '%lincocin%' then 1\n      when lower(drug) like '%macrobid%' then 1\n      when lower(drug) like '%macrodantin%' then 1\n      when lower(drug) like '%maxipime%' then 1\n      when lower(drug) like '%mefoxin%' then 1\n      when lower(drug) like '%metronidazole%' then 1\n      when lower(drug) like '%minocin%' then 1\n      when lower(drug) like '%minocycline%' then 1\n      when lower(drug) like '%monodox%' then 1\n      when lower(drug) like '%monurol%' then 1\n      when lower(drug) like '%morgidox%' then 1\n      when lower(drug) like '%moxatag%' then 1\n      when lower(drug) like '%moxifloxacin%' then 1\n      when lower(drug) like '%myrac%' then 1\n      when lower(drug) like '%nafcillin sodium%' then 1\n      when lower(drug) like '%nicazel doxy 30%' then 1\n      when lower(drug) like '%nitrofurantoin%' then 1\n      when lower(drug) like '%noroxin%' then 1\n      when lower(drug) like '%ocudox%' then 1\n      when lower(drug) like '%ofloxacin%' then 1\n      when lower(drug) like '%omnicef%' then 1\n      when lower(drug) like '%oracea%' then 1\n      when lower(drug) like '%oraxyl%' then 1\n      when lower(drug) like '%oxacillin%' then 1\n      when lower(drug) like '%pc pen vk%' then 1\n      when lower(drug) like '%pce dispertab%' then 1\n      when lower(drug) like '%panixine%' then 1\n      when lower(drug) like '%pediazole%' then 1\n      when lower(drug) like '%penicillin%' then 1\n      when lower(drug) like '%periostat%' then 1\n      when lower(drug) like '%pfizerpen%' then 1\n      when lower(drug) like '%piperacillin%' then 1\n      when lower(drug) like '%tazobactam%' then 1\n      when lower(drug) like '%primsol%' then 1\n      when lower(drug) like '%proquin%' then 1\n      when lower(drug) like '%raniclor%' then 1\n      when lower(drug) like '%rifadin%' then 1\n      when lower(drug) like '%rifampin%' then 1\n      when lower(drug) like '%rocephin%' then 1\n      when lower(drug) like '%smz-tmp%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%septra ds%' then 1\n      when lower(drug) like '%septra%' then 1\n      when lower(drug) like '%solodyn%' then 1\n      when lower(drug) like '%spectracef%' then 1\n      when lower(drug) like '%streptomycin sulfate%' then 1\n      when lower(drug) like '%sulfadiazine%' then 1\n      when lower(drug) like '%sulfamethoxazole%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%sulfatrim%' then 1\n      when lower(drug) like '%sulfisoxazole%' then 1\n      when lower(drug) like '%suprax%' then 1\n      when lower(drug) like '%synercid%' then 1\n      when lower(drug) like '%tazicef%' then 1\n      when lower(drug) like '%tetracycline%' then 1\n      when lower(drug) like '%timentin%' then 1\n      when lower(drug) like '%tobi%' then 1\n      when lower(drug) like '%tobramycin%' then 1\n      when lower(drug) like '%trimethoprim%' then 1\n      when lower(drug) like '%unasyn%' then 1\n      when lower(drug) like '%vancocin%' then 1\n      when lower(drug) like '%vancomycin%' then 1\n      when lower(drug) like '%vantin%' then 1\n      when lower(drug) like '%vibativ%' then 1\n      when lower(drug) like '%vibra-tabs%' then 1\n      when lower(drug) like '%vibramycin%' then 1\n      when lower(drug) like '%zinacef%' then 1\n      when lower(drug) like '%zithromax%' then 1\n      when lower(drug) like '%zmax%' then 1\n      when lower(drug) like '%zosyn%' then 1\n      when lower(drug) like '%zyvox%' then 1\n    else 0\n    end as antibiotic\n  from prescriptions\n  where drug_type in ('MAIN','ADDITIVE')\n  -- we exclude routes via the eye, ears, or topically\n  and route not in ('OU','OS','OD','AU','AS','AD', 'TP')\n  and lower(route) not like '%ear%'\n  and lower(route) not like '%eye%'\n  -- we exclude certain types of antibiotics: topical creams, gels, desens, etc\n  and lower(drug) not like '%cream%'\n  and lower(drug) not like '%desensitization%'\n  and lower(drug) not like '%ophth oint%'\n  and lower(drug) not like '%gel%'\n  -- other routes not sure about...\n  -- for sure keep: ('IV','PO','PO/NG','ORAL', 'IV DRIP', 'IV BOLUS')\n  -- ? VT, PB, PR, PL, NS, NG, NEB, NAS, LOCK, J TUBE, IVT\n  -- ? IT, IRR, IP, IO, INHALATION, IN, IM\n  -- ? IJ, IH, G TUBE, DIALYS\n  -- ?? enemas??\n)\nselect\n  drug --, drug_name_generic\n  , count(*) as numobs\nfrom t1\nwhere antibiotic = 1\ngroup by drug --, drug_name_generic\norder by numobs desc", "refs": [], "relation_name": "\"postgres\".\"public\".\"abx_prescriptions_list\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.abx_prescriptions_list", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:09:27.435596Z", "name": "compile", "started_at": "2022-07-18T00:09:27.429178Z"}, {"completed_at": "2022-07-18T00:10:00.672800Z", "name": "execute", "started_at": "2022-07-18T00:09:27.436682Z"}]}, "unique_id": "model.mimic.abx_prescriptions_list"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.abx_prescriptions_list", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.675273Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": "2022-07-18T00:10:00.675826", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.adenosine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.675928Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.adenosine_durations", "index": 2, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": "2022-07-18T00:10:00.675826", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "2 of 107 START table model public.adenosine_durations .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.676698Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.678108Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": "2022-07-18T00:10:00.675826", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.adenosine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.678625Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.adenosine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.679077Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.680574Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.681133Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.adenosine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.681426Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.adenosine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.690853Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.691825Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.692090Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.692327Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.700015Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.700673Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"adenosine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of adenosine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- *** COULD NOT FIND ADENOSINE IN THE INPUTEVENTS_MV TABLE ***\n-- This drug is rarely used - it could just be that it was never used in MetaVision.\n-- If using this code, ensure the durations make sense for carevue patients first\n\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 4649 then 1 else 0 end) as vaso -- adenosine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , 0 as vaso_stopped\n    , max(case when itemid = 4649 and valuenum is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_rate\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_amount\n\n  FROM chartevents\n  where itemid = 4649 -- adenosine\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221282 -- adenosine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"adenosine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of adenosine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- *** COULD NOT FIND ADENOSINE IN THE INPUTEVENTS_MV TABLE ***\n-- This drug is rarely used - it could just be that it was never used in MetaVision.\n-- If using this code, ensure the durations make sense for carevue patients first\n\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 4649 then 1 else 0 end) as vaso -- adenosine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , 0 as vaso_stopped\n    , max(case when itemid = 4649 and valuenum is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_rate\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_amount\n\n  FROM chartevents\n  where itemid = 4649 -- adenosine\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221282 -- adenosine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.701221Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "SELECT 160"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 160 in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.722669Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.729107Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\nalter table \"postgres\".\"public\".\"adenosine_durations\" rename to \"adenosine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\nalter table \"postgres\".\"public\".\"adenosine_durations\" rename to \"adenosine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.729497Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.730860Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.737100Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\nalter table \"postgres\".\"public\".\"adenosine_durations__dbt_tmp\" rename to \"adenosine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\nalter table \"postgres\".\"public\".\"adenosine_durations__dbt_tmp\" rename to \"adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.737808Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.738761Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.745558Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.746110Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.746363Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.747902Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.adenosine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.adenosine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.751216Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.adenosine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"adenosine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.adenosine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"adenosine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.751701Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.754919Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.760203Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.adenosine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.760535Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a0530a0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a0530a0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.761245Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.adenosine_durations", "execution_time": 0, "index": 2, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": "2022-07-18T00:10:00.675826", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "status": "SELECT 160", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "2 of 107 OK created table model public.adenosine_durations ..................... [\u001b[32mSELECT 160\u001b[0m in 0.08s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.761679Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:00.762044", "node_name": "adenosine_durations", "node_path": "durations/adenosine_durations.sql", "node_started_at": "2022-07-18T00:10:00.675826", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.adenosine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 160", "code": "SELECT", "rows_affected": 160}, "agate_table": null, "execution_time": 0.0835719108581543, "failures": null, "message": "SELECT 160", "node": {"alias": "adenosine_durations", "build_path": "target/run/mimic/models/durations/adenosine_durations.sql", "checksum": {"checksum": "49a48e3271e5f037cc442bcd9fcf0830ee3d1f9729428deaee71c27c6f49154c", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/adenosine_durations.sql", "compiled_sql": "-- This query extracts durations of adenosine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- *** COULD NOT FIND ADENOSINE IN THE INPUTEVENTS_MV TABLE ***\n-- This drug is rarely used - it could just be that it was never used in MetaVision.\n-- If using this code, ensure the durations make sense for carevue patients first\n\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 4649 then 1 else 0 end) as vaso -- adenosine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , 0 as vaso_stopped\n    , max(case when itemid = 4649 and valuenum is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_rate\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_amount\n\n  FROM chartevents\n  where itemid = 4649 -- adenosine\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221282 -- adenosine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4902658, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "adenosine_durations"], "meta": {}, "name": "adenosine_durations", "original_file_path": "models/durations/adenosine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/adenosine_durations.sql", "raw_sql": "-- This query extracts durations of adenosine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- *** COULD NOT FIND ADENOSINE IN THE INPUTEVENTS_MV TABLE ***\n-- This drug is rarely used - it could just be that it was never used in MetaVision.\n-- If using this code, ensure the durations make sense for carevue patients first\n\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 4649 then 1 else 0 end) as vaso -- adenosine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , 0 as vaso_stopped\n    , max(case when itemid = 4649 and valuenum is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_rate\n    , max(case when itemid = 4649 then valuenum else null end) as vaso_amount\n\n  FROM chartevents\n  where itemid = 4649 -- adenosine\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221282 -- adenosine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"adenosine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.adenosine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:00.681082Z", "name": "compile", "started_at": "2022-07-18T00:10:00.679041Z"}, {"completed_at": "2022-07-18T00:10:00.760163Z", "name": "execute", "started_at": "2022-07-18T00:10:00.681920Z"}]}, "unique_id": "model.mimic.adenosine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.adenosine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.762182Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": "2022-07-18T00:10:00.762476", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.age_histogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.762502Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.age_histogram", "index": 3, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": "2022-07-18T00:10:00.762476", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "3 of 107 START table model public.age_histogram ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.763295Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.764083Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": "2022-07-18T00:10:00.762476", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.age_histogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.764265Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.age_histogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.764435Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.766308Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.766919Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.age_histogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.767104Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.age_histogram\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.780074Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.781129Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.781415Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.781754Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.788403Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.788829Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\n\n\n  create  table \"postgres\".\"public\".\"age_histogram__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of hospital admissions in equally sized bins of age\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') AS age\n      FROM admissions ad\n      INNER JOIN patients p\n      ON ad.subject_id = p.subject_id\n)\n, agebin AS\n(\n      SELECT age, width_bucket(age, 15, 100, 85) AS bucket\n      FROM agetbl\n)\nSELECT bucket+15 as age, count(*)\nFROM agebin\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\n\n\n  create  table \"postgres\".\"public\".\"age_histogram__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of hospital admissions in equally sized bins of age\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') AS age\n      FROM admissions ad\n      INNER JOIN patients p\n      ON ad.subject_id = p.subject_id\n)\n, agebin AS\n(\n      SELECT age, width_bucket(age, 15, 100, 85) AS bucket\n      FROM agetbl\n)\nSELECT bucket+15 as age, count(*)\nFROM agebin\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.789156Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.19, "status": "SELECT 77"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 77 in 0.19 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.975588Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.980415Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\nalter table \"postgres\".\"public\".\"age_histogram\" rename to \"age_histogram__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\nalter table \"postgres\".\"public\".\"age_histogram\" rename to \"age_histogram__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.980689Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.981458Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.985437Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\nalter table \"postgres\".\"public\".\"age_histogram__dbt_tmp\" rename to \"age_histogram\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\nalter table \"postgres\".\"public\".\"age_histogram__dbt_tmp\" rename to \"age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.985862Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.986648Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.991546Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.992121Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.992407Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.993672Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.age_histogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.age_histogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.995391Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.age_histogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\ndrop table if exists \"postgres\".\"public\".\"age_histogram__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.age_histogram\"} */\ndrop table if exists \"postgres\".\"public\".\"age_histogram__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.995615Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:00.997475Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.001302Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.age_histogram: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.001734Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887a5430>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887a5430>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.002931Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.age_histogram", "execution_time": 0, "index": 3, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": "2022-07-18T00:10:00.762476", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "status": "SELECT 77", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "3 of 107 OK created table model public.age_histogram ........................... [\u001b[32mSELECT 77\u001b[0m in 0.24s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.003653Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:01.004108", "node_name": "age_histogram", "node_path": "cookbook/age_histogram.sql", "node_started_at": "2022-07-18T00:10:00.762476", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.age_histogram"}, "run_result": {"adapter_response": {"_message": "SELECT 77", "code": "SELECT", "rows_affected": 77}, "agate_table": null, "execution_time": 0.23903250694274902, "failures": null, "message": "SELECT 77", "node": {"alias": "age_histogram", "build_path": "target/run/mimic/models/cookbook/age_histogram.sql", "checksum": {"checksum": "7c97005b3196a2d2480141effdc9c0a88af65b709d76fbfe0bfebab15ad7c55d", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/age_histogram.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of hospital admissions in equally sized bins of age\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') AS age\n      FROM admissions ad\n      INNER JOIN patients p\n      ON ad.subject_id = p.subject_id\n)\n, agebin AS\n(\n      SELECT age, width_bucket(age, 15, 100, 85) AS bucket\n      FROM agetbl\n)\nSELECT bucket+15 as age, count(*)\nFROM agebin\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6838932, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "age_histogram"], "meta": {}, "name": "age_histogram", "original_file_path": "models/cookbook/age_histogram.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/age_histogram.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of hospital admissions in equally sized bins of age\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') AS age\n      FROM admissions ad\n      INNER JOIN patients p\n      ON ad.subject_id = p.subject_id\n)\n, agebin AS\n(\n      SELECT age, width_bucket(age, 15, 100, 85) AS bucket\n      FROM agetbl\n)\nSELECT bucket+15 as age, count(*)\nFROM agebin\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"age_histogram\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.age_histogram", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:00.766882Z", "name": "compile", "started_at": "2022-07-18T00:10:00.764418Z"}, {"completed_at": "2022-07-18T00:10:01.001266Z", "name": "execute", "started_at": "2022-07-18T00:10:00.767233Z"}]}, "unique_id": "model.mimic.age_histogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.age_histogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.004260Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": "2022-07-18T00:10:01.004509", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.angus"}, "unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.angus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.004536Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.angus", "index": 4, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": "2022-07-18T00:10:01.004509", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.angus"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "4 of 107 START table model public.angus ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.005198Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.006269Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": "2022-07-18T00:10:01.004509", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.angus"}, "unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.angus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.007342Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.angus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.007665Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.011098Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.011798Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.angus"}, "unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.angus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.012151Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.angus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.022229Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.023482Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.024110Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.024394Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.030376Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.030652Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\n\n\n  create  table \"postgres\".\"public\".\"angus__dbt_tmp\"\n  as (\n    -- ICD-9 codes for Angus criteria of sepsis\n\n-- Angus et al, 2001. Epidemiology of severe sepsis in the United States\n-- http://www.ncbi.nlm.nih.gov/pubmed/11445675\n\n-- Case selection and definitions\n-- To identify cases with severe sepsis, we selected all acute care\n-- hospitalizations with ICD-9-CM codes for both:\n-- (a) a bacterial or fungal infectious process AND\n-- (b) a diagnosis of acute organ dysfunction (Appendix 2).\n\n-- ICD-9 codes for infection - as sourced from Appendix 1 of above paper\n \n\nWITH infection_group AS\n(\n\tSELECT subject_id, hadm_id,\n\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('001','002','003','004','005','008',\n\t\t\t   '009','010','011','012','013','014','015','016','017','018',\n\t\t\t   '020','021','022','023','024','025','026','027','030','031',\n\t\t\t   '032','033','034','035','036','037','038','039','040','041',\n\t\t\t   '090','091','092','093','094','095','096','097','098','100',\n\t\t\t   '101','102','103','104','110','111','112','114','115','116',\n\t\t\t   '117','118','320','322','324','325','420','421','451','461',\n\t\t\t   '462','463','464','465','481','482','485','486','494','510',\n\t\t\t   '513','540','541','542','566','567','590','597','601','614',\n\t\t\t   '615','616','681','682','683','686','730') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('5695','5720','5721','5750','5990','7110',\n\t\t\t\t'7907','9966','9985','9993') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('49121','56201','56203','56211','56213',\n\t\t\t\t'56983') THEN 1\n\t\tELSE 0 END AS infection\n\tfrom diagnoses_icd\n),\n-- ICD-9 codes for organ dysfunction - as sourced from Appendix 2 of above paper\norgan_diag_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t-- Acute Organ Dysfunction Diagnosis Codes\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('458','293','570','584') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('7855','3483','3481',\n\t\t\t\t'2874','2875','2869','2866','5734')  THEN 1\n\t\tELSE 0 END AS organ_dysfunction,\n\t\t-- Explicit diagnosis of severe sepsis or septic shock\n\t\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('99592','78552')  THEN 1\n\t\tELSE 0 END AS explicit_sepsis\n\tfrom diagnoses_icd\n),\n-- Mechanical ventilation\norgan_proc_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\tWHEN icd9_code IN ('9670', '9671', '9672') THEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM procedures_icd\n),\n-- Aggregate above views together\naggregate as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM infection_group\n\t\t\t\t\tWHERE infection = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS infection,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE explicit_sepsis = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS explicit_sepsis,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE organ_dysfunction = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS organ_dysfunction,\n\t\tCASE\n\t\tWHEN hadm_id in\n\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\tFROM organ_proc_group\n\t\t\t\tWHERE mech_vent = 1)\n\t\t\tTHEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM admissions\n)\n-- Output component flags (explicit sepsis, organ dysfunction) and final flag (angus)\nSELECT subject_id, hadm_id, infection,\n   explicit_sepsis, organ_dysfunction, mech_vent,\nCASE\n\tWHEN explicit_sepsis = 1 THEN 1\n\tWHEN infection = 1 AND organ_dysfunction = 1 THEN 1\n\tWHEN infection = 1 AND mech_vent = 1 THEN 1\n\tELSE 0 END\nAS angus\nFROM aggregate\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\n\n\n  create  table \"postgres\".\"public\".\"angus__dbt_tmp\"\n  as (\n    -- ICD-9 codes for Angus criteria of sepsis\n\n-- Angus et al, 2001. Epidemiology of severe sepsis in the United States\n-- http://www.ncbi.nlm.nih.gov/pubmed/11445675\n\n-- Case selection and definitions\n-- To identify cases with severe sepsis, we selected all acute care\n-- hospitalizations with ICD-9-CM codes for both:\n-- (a) a bacterial or fungal infectious process AND\n-- (b) a diagnosis of acute organ dysfunction (Appendix 2).\n\n-- ICD-9 codes for infection - as sourced from Appendix 1 of above paper\n \n\nWITH infection_group AS\n(\n\tSELECT subject_id, hadm_id,\n\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('001','002','003','004','005','008',\n\t\t\t   '009','010','011','012','013','014','015','016','017','018',\n\t\t\t   '020','021','022','023','024','025','026','027','030','031',\n\t\t\t   '032','033','034','035','036','037','038','039','040','041',\n\t\t\t   '090','091','092','093','094','095','096','097','098','100',\n\t\t\t   '101','102','103','104','110','111','112','114','115','116',\n\t\t\t   '117','118','320','322','324','325','420','421','451','461',\n\t\t\t   '462','463','464','465','481','482','485','486','494','510',\n\t\t\t   '513','540','541','542','566','567','590','597','601','614',\n\t\t\t   '615','616','681','682','683','686','730') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('5695','5720','5721','5750','5990','7110',\n\t\t\t\t'7907','9966','9985','9993') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('49121','56201','56203','56211','56213',\n\t\t\t\t'56983') THEN 1\n\t\tELSE 0 END AS infection\n\tfrom diagnoses_icd\n),\n-- ICD-9 codes for organ dysfunction - as sourced from Appendix 2 of above paper\norgan_diag_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t-- Acute Organ Dysfunction Diagnosis Codes\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('458','293','570','584') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('7855','3483','3481',\n\t\t\t\t'2874','2875','2869','2866','5734')  THEN 1\n\t\tELSE 0 END AS organ_dysfunction,\n\t\t-- Explicit diagnosis of severe sepsis or septic shock\n\t\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('99592','78552')  THEN 1\n\t\tELSE 0 END AS explicit_sepsis\n\tfrom diagnoses_icd\n),\n-- Mechanical ventilation\norgan_proc_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\tWHEN icd9_code IN ('9670', '9671', '9672') THEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM procedures_icd\n),\n-- Aggregate above views together\naggregate as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM infection_group\n\t\t\t\t\tWHERE infection = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS infection,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE explicit_sepsis = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS explicit_sepsis,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE organ_dysfunction = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS organ_dysfunction,\n\t\tCASE\n\t\tWHEN hadm_id in\n\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\tFROM organ_proc_group\n\t\t\t\tWHERE mech_vent = 1)\n\t\t\tTHEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM admissions\n)\n-- Output component flags (explicit sepsis, organ dysfunction) and final flag (angus)\nSELECT subject_id, hadm_id, infection,\n   explicit_sepsis, organ_dysfunction, mech_vent,\nCASE\n\tWHEN explicit_sepsis = 1 THEN 1\n\tWHEN infection = 1 AND organ_dysfunction = 1 THEN 1\n\tWHEN infection = 1 AND mech_vent = 1 THEN 1\n\tELSE 0 END\nAS angus\nFROM aggregate\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:01.030852Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 2.28, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 2.28 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.315641Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.323537Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\nalter table \"postgres\".\"public\".\"angus\" rename to \"angus__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\nalter table \"postgres\".\"public\".\"angus\" rename to \"angus__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.323998Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.325398Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.329025Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\nalter table \"postgres\".\"public\".\"angus__dbt_tmp\" rename to \"angus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\nalter table \"postgres\".\"public\".\"angus__dbt_tmp\" rename to \"angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.329231Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.330017Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.333142Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.333349Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.333469Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.338168Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.angus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.angus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.340439Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.angus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\ndrop table if exists \"postgres\".\"public\".\"angus__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.angus\"} */\ndrop table if exists \"postgres\".\"public\".\"angus__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.340661Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.342675Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.346068Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.angus: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.346347Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887b8a30>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887b8a30>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.347106Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.angus", "execution_time": 2, "index": 4, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": "2022-07-18T00:10:01.004509", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.angus"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "4 of 107 OK created table model public.angus ................................... [\u001b[32mSELECT 58976\u001b[0m in 2.34s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.347623Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:03.348102", "node_name": "angus", "node_path": "sepsis/angus.sql", "node_started_at": "2022-07-18T00:10:01.004509", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.angus"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 2.3411998748779297, "failures": null, "message": "SELECT 58976", "node": {"alias": "angus", "build_path": "target/run/mimic/models/sepsis/angus.sql", "checksum": {"checksum": "cb65a43a357ba593ecea1f331fa1881020d98ffca9086476c1ca5ee87f5a66c1", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/sepsis/angus.sql", "compiled_sql": "-- ICD-9 codes for Angus criteria of sepsis\n\n-- Angus et al, 2001. Epidemiology of severe sepsis in the United States\n-- http://www.ncbi.nlm.nih.gov/pubmed/11445675\n\n-- Case selection and definitions\n-- To identify cases with severe sepsis, we selected all acute care\n-- hospitalizations with ICD-9-CM codes for both:\n-- (a) a bacterial or fungal infectious process AND\n-- (b) a diagnosis of acute organ dysfunction (Appendix 2).\n\n-- ICD-9 codes for infection - as sourced from Appendix 1 of above paper\n \n\nWITH infection_group AS\n(\n\tSELECT subject_id, hadm_id,\n\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('001','002','003','004','005','008',\n\t\t\t   '009','010','011','012','013','014','015','016','017','018',\n\t\t\t   '020','021','022','023','024','025','026','027','030','031',\n\t\t\t   '032','033','034','035','036','037','038','039','040','041',\n\t\t\t   '090','091','092','093','094','095','096','097','098','100',\n\t\t\t   '101','102','103','104','110','111','112','114','115','116',\n\t\t\t   '117','118','320','322','324','325','420','421','451','461',\n\t\t\t   '462','463','464','465','481','482','485','486','494','510',\n\t\t\t   '513','540','541','542','566','567','590','597','601','614',\n\t\t\t   '615','616','681','682','683','686','730') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('5695','5720','5721','5750','5990','7110',\n\t\t\t\t'7907','9966','9985','9993') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('49121','56201','56203','56211','56213',\n\t\t\t\t'56983') THEN 1\n\t\tELSE 0 END AS infection\n\tfrom diagnoses_icd\n),\n-- ICD-9 codes for organ dysfunction - as sourced from Appendix 2 of above paper\norgan_diag_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t-- Acute Organ Dysfunction Diagnosis Codes\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('458','293','570','584') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('7855','3483','3481',\n\t\t\t\t'2874','2875','2869','2866','5734')  THEN 1\n\t\tELSE 0 END AS organ_dysfunction,\n\t\t-- Explicit diagnosis of severe sepsis or septic shock\n\t\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('99592','78552')  THEN 1\n\t\tELSE 0 END AS explicit_sepsis\n\tfrom diagnoses_icd\n),\n-- Mechanical ventilation\norgan_proc_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\tWHEN icd9_code IN ('9670', '9671', '9672') THEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM procedures_icd\n),\n-- Aggregate above views together\naggregate as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM infection_group\n\t\t\t\t\tWHERE infection = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS infection,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE explicit_sepsis = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS explicit_sepsis,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE organ_dysfunction = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS organ_dysfunction,\n\t\tCASE\n\t\tWHEN hadm_id in\n\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\tFROM organ_proc_group\n\t\t\t\tWHERE mech_vent = 1)\n\t\t\tTHEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM admissions\n)\n-- Output component flags (explicit sepsis, organ dysfunction) and final flag (angus)\nSELECT subject_id, hadm_id, infection,\n   explicit_sepsis, organ_dysfunction, mech_vent,\nCASE\n\tWHEN explicit_sepsis = 1 THEN 1\n\tWHEN infection = 1 AND organ_dysfunction = 1 THEN 1\n\tWHEN infection = 1 AND mech_vent = 1 THEN 1\n\tELSE 0 END\nAS angus\nFROM aggregate", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.526026, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "sepsis", "angus"], "meta": {}, "name": "angus", "original_file_path": "models/sepsis/angus.sql", "package_name": "mimic", "patch_path": null, "path": "sepsis/angus.sql", "raw_sql": "-- ICD-9 codes for Angus criteria of sepsis\n\n-- Angus et al, 2001. Epidemiology of severe sepsis in the United States\n-- http://www.ncbi.nlm.nih.gov/pubmed/11445675\n\n-- Case selection and definitions\n-- To identify cases with severe sepsis, we selected all acute care\n-- hospitalizations with ICD-9-CM codes for both:\n-- (a) a bacterial or fungal infectious process AND\n-- (b) a diagnosis of acute organ dysfunction (Appendix 2).\n\n-- ICD-9 codes for infection - as sourced from Appendix 1 of above paper\n{{ config(materialized = 'table') }} \n\nWITH infection_group AS\n(\n\tSELECT subject_id, hadm_id,\n\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('001','002','003','004','005','008',\n\t\t\t   '009','010','011','012','013','014','015','016','017','018',\n\t\t\t   '020','021','022','023','024','025','026','027','030','031',\n\t\t\t   '032','033','034','035','036','037','038','039','040','041',\n\t\t\t   '090','091','092','093','094','095','096','097','098','100',\n\t\t\t   '101','102','103','104','110','111','112','114','115','116',\n\t\t\t   '117','118','320','322','324','325','420','421','451','461',\n\t\t\t   '462','463','464','465','481','482','485','486','494','510',\n\t\t\t   '513','540','541','542','566','567','590','597','601','614',\n\t\t\t   '615','616','681','682','683','686','730') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('5695','5720','5721','5750','5990','7110',\n\t\t\t\t'7907','9966','9985','9993') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('49121','56201','56203','56211','56213',\n\t\t\t\t'56983') THEN 1\n\t\tELSE 0 END AS infection\n\tfrom diagnoses_icd\n),\n-- ICD-9 codes for organ dysfunction - as sourced from Appendix 2 of above paper\norgan_diag_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t-- Acute Organ Dysfunction Diagnosis Codes\n\t\tWHEN SUBSTR(icd9_code,1,3) IN ('458','293','570','584') THEN 1\n\t\tWHEN SUBSTR(icd9_code,1,4) IN ('7855','3483','3481',\n\t\t\t\t'2874','2875','2869','2866','5734')  THEN 1\n\t\tELSE 0 END AS organ_dysfunction,\n\t\t-- Explicit diagnosis of severe sepsis or septic shock\n\t\tCASE\n\t\tWHEN SUBSTR(icd9_code,1,5) IN ('99592','78552')  THEN 1\n\t\tELSE 0 END AS explicit_sepsis\n\tfrom diagnoses_icd\n),\n-- Mechanical ventilation\norgan_proc_group as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\tWHEN icd9_code IN ('9670', '9671', '9672') THEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM procedures_icd\n),\n-- Aggregate above views together\naggregate as\n(\n\tSELECT subject_id, hadm_id,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM infection_group\n\t\t\t\t\tWHERE infection = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS infection,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE explicit_sepsis = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS explicit_sepsis,\n\t\tCASE\n\t\t\tWHEN hadm_id in\n\t\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\t\tFROM organ_diag_group\n\t\t\t\t\tWHERE organ_dysfunction = 1)\n\t\t\t\tTHEN 1\n\t\t\tELSE 0 END AS organ_dysfunction,\n\t\tCASE\n\t\tWHEN hadm_id in\n\t\t\t\t(SELECT DISTINCT hadm_id\n\t\t\t\tFROM organ_proc_group\n\t\t\t\tWHERE mech_vent = 1)\n\t\t\tTHEN 1\n\t\tELSE 0 END AS mech_vent\n\tFROM admissions\n)\n-- Output component flags (explicit sepsis, organ dysfunction) and final flag (angus)\nSELECT subject_id, hadm_id, infection,\n   explicit_sepsis, organ_dysfunction, mech_vent,\nCASE\n\tWHEN explicit_sepsis = 1 THEN 1\n\tWHEN infection = 1 AND organ_dysfunction = 1 THEN 1\n\tWHEN infection = 1 AND mech_vent = 1 THEN 1\n\tELSE 0 END\nAS angus\nFROM aggregate", "refs": [], "relation_name": "\"postgres\".\"public\".\"angus\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.angus", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:01.011713Z", "name": "compile", "started_at": "2022-07-18T00:10:01.007640Z"}, {"completed_at": "2022-07-18T00:10:03.346033Z", "name": "execute", "started_at": "2022-07-18T00:10:01.012399Z"}]}, "unique_id": "model.mimic.angus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.angus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.348283Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": "2022-07-18T00:10:03.348698", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.arterial_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.348766Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.arterial_line_durations", "index": 5, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": "2022-07-18T00:10:03.348698", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "5 of 107 START table model public.arterial_line_durations ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.349397Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.350355Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": "2022-07-18T00:10:03.348698", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.arterial_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.350700Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.arterial_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.351239Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.352907Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.353507Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.arterial_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.354015Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.arterial_line_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.362654Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.364647Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.365079Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.365536Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.372611Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.372874Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"arterial_line_durations__dbt_tmp\"\n  as (\n    with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n  , case\n      when itemid in (225752, 224272)\n        then 1\n      when pe.locationcategory = 'Invasive Arterial'\n        then 1\n      when itemid = 225789 and pe.locationcategory IS NULL\n        then 1\n      else 0\n    end as arterial_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    -- , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    -- , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    -- , 225203 -- Pheresis Catheter | None | 12 | Processes\n    -- , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 225789 -- Sheath\n    , 224272 -- IABP Line\n    -- , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('A-Line', 'IABP'))\n     OR (inv2_type in ('A-Line', 'IABP'))\n     OR (inv3_type in ('A-Line', 'IABP'))\n     OR (inv4_type in ('A-Line', 'IABP'))\n     OR (inv5_type in ('A-Line', 'IABP'))\n     OR (inv6_type in ('A-Line', 'IABP'))\n     OR (inv7_type in ('A-Line', 'IABP'))\n     OR (inv8_type in ('A-Line', 'IABP'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as arterial_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as arterial_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( arterial_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as arterial_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , arterial_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, arterial_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , arterial_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as arterial_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere arterial_line = 1\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"arterial_line_durations__dbt_tmp\"\n  as (\n    with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n  , case\n      when itemid in (225752, 224272)\n        then 1\n      when pe.locationcategory = 'Invasive Arterial'\n        then 1\n      when itemid = 225789 and pe.locationcategory IS NULL\n        then 1\n      else 0\n    end as arterial_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    -- , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    -- , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    -- , 225203 -- Pheresis Catheter | None | 12 | Processes\n    -- , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 225789 -- Sheath\n    , 224272 -- IABP Line\n    -- , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('A-Line', 'IABP'))\n     OR (inv2_type in ('A-Line', 'IABP'))\n     OR (inv3_type in ('A-Line', 'IABP'))\n     OR (inv4_type in ('A-Line', 'IABP'))\n     OR (inv5_type in ('A-Line', 'IABP'))\n     OR (inv6_type in ('A-Line', 'IABP'))\n     OR (inv7_type in ('A-Line', 'IABP'))\n     OR (inv8_type in ('A-Line', 'IABP'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as arterial_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as arterial_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( arterial_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as arterial_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , arterial_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, arterial_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , arterial_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as arterial_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere arterial_line = 1\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.373014Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.08, "status": "SELECT 13059"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 13059 in 0.08 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.455469Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.461176Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\nalter table \"postgres\".\"public\".\"arterial_line_durations\" rename to \"arterial_line_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\nalter table \"postgres\".\"public\".\"arterial_line_durations\" rename to \"arterial_line_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.461447Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.462295Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.466280Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\nalter table \"postgres\".\"public\".\"arterial_line_durations__dbt_tmp\" rename to \"arterial_line_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\nalter table \"postgres\".\"public\".\"arterial_line_durations__dbt_tmp\" rename to \"arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.466526Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.467252Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.471113Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.471836Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.472148Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.475866Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.arterial_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.arterial_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.477543Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.arterial_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"arterial_line_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.arterial_line_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"arterial_line_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.477937Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.479948Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.483083Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.arterial_line_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.483380Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037ac0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037ac0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.484135Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.arterial_line_durations", "execution_time": 0, "index": 5, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": "2022-07-18T00:10:03.348698", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "status": "SELECT 13059", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "5 of 107 OK created table model public.arterial_line_durations ................. [\u001b[32mSELECT 13059\u001b[0m in 0.13s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.484559Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:03.484811", "node_name": "arterial_line_durations", "node_path": "durations/arterial_line_durations.sql", "node_started_at": "2022-07-18T00:10:03.348698", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.arterial_line_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 13059", "code": "SELECT", "rows_affected": 13059}, "agate_table": null, "execution_time": 0.13404202461242676, "failures": null, "message": "SELECT 13059", "node": {"alias": "arterial_line_durations", "build_path": "target/run/mimic/models/durations/arterial_line_durations.sql", "checksum": {"checksum": "4b82ee6b12836839a316055d24a2f020ce1bff0268b06c7089b776edd7d2824a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/arterial_line_durations.sql", "compiled_sql": "with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n  , case\n      when itemid in (225752, 224272)\n        then 1\n      when pe.locationcategory = 'Invasive Arterial'\n        then 1\n      when itemid = 225789 and pe.locationcategory IS NULL\n        then 1\n      else 0\n    end as arterial_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    -- , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    -- , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    -- , 225203 -- Pheresis Catheter | None | 12 | Processes\n    -- , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 225789 -- Sheath\n    , 224272 -- IABP Line\n    -- , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('A-Line', 'IABP'))\n     OR (inv2_type in ('A-Line', 'IABP'))\n     OR (inv3_type in ('A-Line', 'IABP'))\n     OR (inv4_type in ('A-Line', 'IABP'))\n     OR (inv5_type in ('A-Line', 'IABP'))\n     OR (inv6_type in ('A-Line', 'IABP'))\n     OR (inv7_type in ('A-Line', 'IABP'))\n     OR (inv8_type in ('A-Line', 'IABP'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as arterial_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as arterial_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( arterial_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as arterial_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , arterial_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, arterial_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , arterial_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as arterial_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere arterial_line = 1\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5080013, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "arterial_line_durations"], "meta": {}, "name": "arterial_line_durations", "original_file_path": "models/durations/arterial_line_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/arterial_line_durations.sql", "raw_sql": "with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n  , case\n      when itemid in (225752, 224272)\n        then 1\n      when pe.locationcategory = 'Invasive Arterial'\n        then 1\n      when itemid = 225789 and pe.locationcategory IS NULL\n        then 1\n      else 0\n    end as arterial_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    -- , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    -- , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    -- , 225203 -- Pheresis Catheter | None | 12 | Processes\n    -- , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 225789 -- Sheath\n    , 224272 -- IABP Line\n    -- , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('A-Line', 'IABP'))\n     OR (inv2_type in ('A-Line', 'IABP'))\n     OR (inv3_type in ('A-Line', 'IABP'))\n     OR (inv4_type in ('A-Line', 'IABP'))\n     OR (inv5_type in ('A-Line', 'IABP'))\n     OR (inv6_type in ('A-Line', 'IABP'))\n     OR (inv7_type in ('A-Line', 'IABP'))\n     OR (inv8_type in ('A-Line', 'IABP'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as arterial_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as arterial_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( arterial_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as arterial_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , arterial_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, arterial_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , arterial_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as arterial_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere arterial_line = 1\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"arterial_line_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.arterial_line_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:03.353414Z", "name": "compile", "started_at": "2022-07-18T00:10:03.351199Z"}, {"completed_at": "2022-07-18T00:10:03.482998Z", "name": "execute", "started_at": "2022-07-18T00:10:03.354382Z"}]}, "unique_id": "model.mimic.arterial_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.arterial_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.485022Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": "2022-07-18T00:10:03.485369", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.auroc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.485390Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.auroc", "index": 6, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": "2022-07-18T00:10:03.485369", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "6 of 107 START table model public.auroc ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.486034Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.486929Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": "2022-07-18T00:10:03.485369", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.auroc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.487421Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.auroc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.488172Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.490613Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.491067Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.auroc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.491361Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.auroc\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.498278Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.498927Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.499181Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.499417Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.508447Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.508775Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\n\n\n  create  table \"postgres\".\"public\".\"auroc__dbt_tmp\"\n  as (\n    -- Calculate the AUROC of age for predicting in-hospital mortality\n-- You can easily calculate the AUROC of any model you'd like by:\n--  Replacing \"PRED\" with your predictor\n--  Replacing \"TAR\" with the target (*must* be a binary target)\n\nwith datatable as (\nselect\n  -- name the predictor \"PRED\"\n  cast(adm.admittime as date) - cast(pat.dob as date) as PRED -- age is our predictor\n  -- name the target variable \"TAR\"\n  , case when adm.deathtime is not null then 1 else 0 end as TAR -- in-hospital mortality\nFROM admissions adm\ninner join patients pat\n  on adm.subject_id = pat.subject_id\n)\n, datacs as (\nselect\n  TAR\n  -- calculate the cumulative sum of negative targets, then multiply by positive targets\n  -- this has the effect of returning 0 for negative targets, and the # of negative targets below each positive target\n  , TAR * SUM(1-TAR) OVER (ORDER BY PRED ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AUROC\nfrom datatable\n)\nselect\n  -- Calculate the AUROC as:\n  --    SUM( number of negative targets below each positive target )\n  -- /  number of possible negative/positive target pairs\n  round(sum(AUROC) / (sum(TAR)*sum(1-TAR)),4) as AUROC\nfrom datacs\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\n\n\n  create  table \"postgres\".\"public\".\"auroc__dbt_tmp\"\n  as (\n    -- Calculate the AUROC of age for predicting in-hospital mortality\n-- You can easily calculate the AUROC of any model you'd like by:\n--  Replacing \"PRED\" with your predictor\n--  Replacing \"TAR\" with the target (*must* be a binary target)\n\nwith datatable as (\nselect\n  -- name the predictor \"PRED\"\n  cast(adm.admittime as date) - cast(pat.dob as date) as PRED -- age is our predictor\n  -- name the target variable \"TAR\"\n  , case when adm.deathtime is not null then 1 else 0 end as TAR -- in-hospital mortality\nFROM admissions adm\ninner join patients pat\n  on adm.subject_id = pat.subject_id\n)\n, datacs as (\nselect\n  TAR\n  -- calculate the cumulative sum of negative targets, then multiply by positive targets\n  -- this has the effect of returning 0 for negative targets, and the # of negative targets below each positive target\n  , TAR * SUM(1-TAR) OVER (ORDER BY PRED ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AUROC\nfrom datatable\n)\nselect\n  -- Calculate the AUROC as:\n  --    SUM( number of negative targets below each positive target )\n  -- /  number of possible negative/positive target pairs\n  round(sum(AUROC) / (sum(TAR)*sum(1-TAR)),4) as AUROC\nfrom datacs\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.509082Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.07, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.07 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.583474Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.591752Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\nalter table \"postgres\".\"public\".\"auroc\" rename to \"auroc__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\nalter table \"postgres\".\"public\".\"auroc\" rename to \"auroc__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.592283Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.593330Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.597302Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\nalter table \"postgres\".\"public\".\"auroc__dbt_tmp\" rename to \"auroc\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\nalter table \"postgres\".\"public\".\"auroc__dbt_tmp\" rename to \"auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.597525Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.598505Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.602276Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.602516Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.602728Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.605446Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.auroc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.auroc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.608661Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.auroc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\ndrop table if exists \"postgres\".\"public\".\"auroc__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.auroc\"} */\ndrop table if exists \"postgres\".\"public\".\"auroc__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.609097Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.611732Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.615246Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.auroc: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.615609Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887da2e0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887da2e0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.616330Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.auroc", "execution_time": 0, "index": 6, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": "2022-07-18T00:10:03.485369", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "6 of 107 OK created table model public.auroc ................................... [\u001b[32mSELECT 1\u001b[0m in 0.13s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.616644Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:03.616891", "node_name": "auroc", "node_path": "functions/auroc.sql", "node_started_at": "2022-07-18T00:10:03.485369", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.auroc"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.12967252731323242, "failures": null, "message": "SELECT 1", "node": {"alias": "auroc", "build_path": "target/run/mimic/models/functions/auroc.sql", "checksum": {"checksum": "f358738a132cd1132096d185c9505dcaf1d21efb55181da723b28689908e67eb", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/functions/auroc.sql", "compiled_sql": "-- Calculate the AUROC of age for predicting in-hospital mortality\n-- You can easily calculate the AUROC of any model you'd like by:\n--  Replacing \"PRED\" with your predictor\n--  Replacing \"TAR\" with the target (*must* be a binary target)\n\nwith datatable as (\nselect\n  -- name the predictor \"PRED\"\n  cast(adm.admittime as date) - cast(pat.dob as date) as PRED -- age is our predictor\n  -- name the target variable \"TAR\"\n  , case when adm.deathtime is not null then 1 else 0 end as TAR -- in-hospital mortality\nFROM admissions adm\ninner join patients pat\n  on adm.subject_id = pat.subject_id\n)\n, datacs as (\nselect\n  TAR\n  -- calculate the cumulative sum of negative targets, then multiply by positive targets\n  -- this has the effect of returning 0 for negative targets, and the # of negative targets below each positive target\n  , TAR * SUM(1-TAR) OVER (ORDER BY PRED ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AUROC\nfrom datatable\n)\nselect\n  -- Calculate the AUROC as:\n  --    SUM( number of negative targets below each positive target )\n  -- /  number of possible negative/positive target pairs\n  round(sum(AUROC) / (sum(TAR)*sum(1-TAR)),4) as AUROC\nfrom datacs", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5690477, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "functions", "auroc"], "meta": {}, "name": "auroc", "original_file_path": "models/functions/auroc.sql", "package_name": "mimic", "patch_path": null, "path": "functions/auroc.sql", "raw_sql": "-- Calculate the AUROC of age for predicting in-hospital mortality\n-- You can easily calculate the AUROC of any model you'd like by:\n--  Replacing \"PRED\" with your predictor\n--  Replacing \"TAR\" with the target (*must* be a binary target)\n\nwith datatable as (\nselect\n  -- name the predictor \"PRED\"\n  cast(adm.admittime as date) - cast(pat.dob as date) as PRED -- age is our predictor\n  -- name the target variable \"TAR\"\n  , case when adm.deathtime is not null then 1 else 0 end as TAR -- in-hospital mortality\nFROM admissions adm\ninner join patients pat\n  on adm.subject_id = pat.subject_id\n)\n, datacs as (\nselect\n  TAR\n  -- calculate the cumulative sum of negative targets, then multiply by positive targets\n  -- this has the effect of returning 0 for negative targets, and the # of negative targets below each positive target\n  , TAR * SUM(1-TAR) OVER (ORDER BY PRED ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AUROC\nfrom datatable\n)\nselect\n  -- Calculate the AUROC as:\n  --    SUM( number of negative targets below each positive target )\n  -- /  number of possible negative/positive target pairs\n  round(sum(AUROC) / (sum(TAR)*sum(1-TAR)),4) as AUROC\nfrom datacs", "refs": [], "relation_name": "\"postgres\".\"public\".\"auroc\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.auroc", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:03.491018Z", "name": "compile", "started_at": "2022-07-18T00:10:03.488082Z"}, {"completed_at": "2022-07-18T00:10:03.615214Z", "name": "execute", "started_at": "2022-07-18T00:10:03.491485Z"}]}, "unique_id": "model.mimic.auroc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.auroc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.617124Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": "2022-07-18T00:10:03.617514", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.basic_patient_info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.617539Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.basic_patient_info", "index": 7, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": "2022-07-18T00:10:03.617514", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "7 of 107 START table model public.basic_patient_info ........................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.618301Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.619272Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": "2022-07-18T00:10:03.617514", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.basic_patient_info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.619650Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.basic_patient_info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.619895Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.622589Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.623772Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.basic_patient_info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.624426Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.basic_patient_info\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.633369Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.633998Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.634323Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.634569Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.642114Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.642419Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\n\n\n  create  table \"postgres\".\"public\".\"basic_patient_info__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Retrieves basic patient information from the patients table\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\n\nSELECT subject_id, gender, dob\nFROM patients\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\n\n\n  create  table \"postgres\".\"public\".\"basic_patient_info__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Retrieves basic patient information from the patients table\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\n\nSELECT subject_id, gender, dob\nFROM patients\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.642641Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "SELECT 46520"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 46520 in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.663343Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.668851Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\nalter table \"postgres\".\"public\".\"basic_patient_info\" rename to \"basic_patient_info__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\nalter table \"postgres\".\"public\".\"basic_patient_info\" rename to \"basic_patient_info__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.669078Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.670082Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.678693Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\nalter table \"postgres\".\"public\".\"basic_patient_info__dbt_tmp\" rename to \"basic_patient_info\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\nalter table \"postgres\".\"public\".\"basic_patient_info__dbt_tmp\" rename to \"basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.678957Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.679665Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.685511Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.686154Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.686370Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.695484Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.basic_patient_info", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.basic_patient_info\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.701337Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.basic_patient_info", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\ndrop table if exists \"postgres\".\"public\".\"basic_patient_info__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.basic_patient_info\"} */\ndrop table if exists \"postgres\".\"public\".\"basic_patient_info__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.701723Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.703649Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.708316Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.basic_patient_info: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.708592Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037d00>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037d00>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.709188Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.basic_patient_info", "execution_time": 0, "index": 7, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": "2022-07-18T00:10:03.617514", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "status": "SELECT 46520", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "7 of 107 OK created table model public.basic_patient_info ...................... [\u001b[32mSELECT 46520\u001b[0m in 0.09s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.709708Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:03.710498", "node_name": "basic_patient_info", "node_path": "cookbook/basic_patient_info.sql", "node_started_at": "2022-07-18T00:10:03.617514", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.basic_patient_info"}, "run_result": {"adapter_response": {"_message": "SELECT 46520", "code": "SELECT", "rows_affected": 46520}, "agate_table": null, "execution_time": 0.09033370018005371, "failures": null, "message": "SELECT 46520", "node": {"alias": "basic_patient_info", "build_path": "target/run/mimic/models/cookbook/basic_patient_info.sql", "checksum": {"checksum": "430a9cf8a118d1299ed2cbae6fe17d413e1b0aad12064286826f2f682a330d3b", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/basic_patient_info.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Retrieves basic patient information from the patients table\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\n\nSELECT subject_id, gender, dob\nFROM patients", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6979945, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "basic_patient_info"], "meta": {}, "name": "basic_patient_info", "original_file_path": "models/cookbook/basic_patient_info.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/basic_patient_info.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Retrieves basic patient information from the patients table\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- ------------------------------------------------------------------\n\n\nSELECT subject_id, gender, dob\nFROM patients", "refs": [], "relation_name": "\"postgres\".\"public\".\"basic_patient_info\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.basic_patient_info", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:03.623675Z", "name": "compile", "started_at": "2022-07-18T00:10:03.619878Z"}, {"completed_at": "2022-07-18T00:10:03.708283Z", "name": "execute", "started_at": "2022-07-18T00:10:03.624835Z"}]}, "unique_id": "model.mimic.basic_patient_info"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.basic_patient_info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.710681Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": "2022-07-18T00:10:03.710952", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.blood_gas_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.710978Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.blood_gas_first_day", "index": 8, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": "2022-07-18T00:10:03.710952", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "8 of 107 START table model public.blood_gas_first_day .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.711252Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.711932Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": "2022-07-18T00:10:03.710952", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.blood_gas_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.712083Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.blood_gas_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.712218Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.713208Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.713545Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.blood_gas_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.714227Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.blood_gas_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.723913Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.725253Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.725469Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.725860Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.732077Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.732348Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"blood_gas_first_day__dbt_tmp\"\n  as (\n    -- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- things to check:\n--  when a mixed venous/arterial blood sample are taken at the same time, is the store time different?\n\nwith pvt as\n( -- begin query that extracts the data\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 and itemid != 50802 then null -- allow negative baseexcess\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n\n    FROM icustays ie\n    left join labevents le\n      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n      and le.charttime between (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n      and le.ITEMID in\n      -- blood gases\n      (\n        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n        , 51545\n      )\n)\nselect pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME\n, max(case when label = 'SPECIMEN' then value else null end) as specimen\n, max(case when label = 'AADO2' then valuenum else null end) as aado2\n, max(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n, max(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n, max(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n, max(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n, max(case when label = 'CALCIUM' then valuenum else null end) as calcium\n, max(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n, max(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n, max(case when label = 'INTUBATED' then valuenum else null end) as intubated\n, max(case when label = 'LACTATE' then valuenum else null end) as lactate\n, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n, max(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n, max(case when label = 'FIO2' then valuenum else null end) as fio2\n, max(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n, max(case when label = 'PCO2' then valuenum else null end) as pco2\n, max(case when label = 'PEEP' then valuenum else null end) as peep\n, max(case when label = 'PH' then valuenum else null end) as ph\n, max(case when label = 'PO2' then valuenum else null end) as po2\n, max(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n, max(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n, max(case when label = 'SODIUM' then valuenum else null end) as sodium\n, max(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n, max(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n, max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\nfrom pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"blood_gas_first_day__dbt_tmp\"\n  as (\n    -- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- things to check:\n--  when a mixed venous/arterial blood sample are taken at the same time, is the store time different?\n\nwith pvt as\n( -- begin query that extracts the data\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 and itemid != 50802 then null -- allow negative baseexcess\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n\n    FROM icustays ie\n    left join labevents le\n      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n      and le.charttime between (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n      and le.ITEMID in\n      -- blood gases\n      (\n        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n        , 51545\n      )\n)\nselect pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME\n, max(case when label = 'SPECIMEN' then value else null end) as specimen\n, max(case when label = 'AADO2' then valuenum else null end) as aado2\n, max(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n, max(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n, max(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n, max(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n, max(case when label = 'CALCIUM' then valuenum else null end) as calcium\n, max(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n, max(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n, max(case when label = 'INTUBATED' then valuenum else null end) as intubated\n, max(case when label = 'LACTATE' then valuenum else null end) as lactate\n, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n, max(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n, max(case when label = 'FIO2' then valuenum else null end) as fio2\n, max(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n, max(case when label = 'PCO2' then valuenum else null end) as pco2\n, max(case when label = 'PEEP' then valuenum else null end) as peep\n, max(case when label = 'PH' then valuenum else null end) as ph\n, max(case when label = 'PO2' then valuenum else null end) as po2\n, max(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n, max(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n, max(case when label = 'SODIUM' then valuenum else null end) as sodium\n, max(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n, max(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n, max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\nfrom pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.732719Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.15, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.882882Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.888508Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day\" rename to \"blood_gas_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day\" rename to \"blood_gas_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.888759Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.889476Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.893334Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day__dbt_tmp\" rename to \"blood_gas_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day__dbt_tmp\" rename to \"blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.893689Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.894454Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.897557Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.898239Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.898518Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.903652Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.905840Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"blood_gas_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"blood_gas_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.906119Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.908558Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.911497Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.911861Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887ecc10>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887ecc10>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.912663Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.blood_gas_first_day", "execution_time": 0, "index": 8, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": "2022-07-18T00:10:03.710952", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "8 of 107 OK created table model public.blood_gas_first_day ..................... [\u001b[32mSELECT 61532\u001b[0m in 0.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.913309Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:03.914023", "node_name": "blood_gas_first_day", "node_path": "firstday/blood_gas_first_day.sql", "node_started_at": "2022-07-18T00:10:03.710952", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.20087718963623047, "failures": null, "message": "SELECT 61532", "node": {"alias": "blood_gas_first_day", "build_path": "target/run/mimic/models/firstday/blood_gas_first_day.sql", "checksum": {"checksum": "35567eeef9fd84231bfcb7dce518c41a9ea48fa42608880536058f53e7ddca67", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/blood_gas_first_day.sql", "compiled_sql": "-- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- things to check:\n--  when a mixed venous/arterial blood sample are taken at the same time, is the store time different?\n\nwith pvt as\n( -- begin query that extracts the data\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 and itemid != 50802 then null -- allow negative baseexcess\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n\n    FROM icustays ie\n    left join labevents le\n      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n      and le.charttime between (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n      and le.ITEMID in\n      -- blood gases\n      (\n        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n        , 51545\n      )\n)\nselect pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME\n, max(case when label = 'SPECIMEN' then value else null end) as specimen\n, max(case when label = 'AADO2' then valuenum else null end) as aado2\n, max(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n, max(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n, max(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n, max(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n, max(case when label = 'CALCIUM' then valuenum else null end) as calcium\n, max(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n, max(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n, max(case when label = 'INTUBATED' then valuenum else null end) as intubated\n, max(case when label = 'LACTATE' then valuenum else null end) as lactate\n, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n, max(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n, max(case when label = 'FIO2' then valuenum else null end) as fio2\n, max(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n, max(case when label = 'PCO2' then valuenum else null end) as pco2\n, max(case when label = 'PEEP' then valuenum else null end) as peep\n, max(case when label = 'PH' then valuenum else null end) as ph\n, max(case when label = 'PO2' then valuenum else null end) as po2\n, max(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n, max(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n, max(case when label = 'SODIUM' then valuenum else null end) as sodium\n, max(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n, max(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n, max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\nfrom pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5476153, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "blood_gas_first_day"], "meta": {}, "name": "blood_gas_first_day", "original_file_path": "models/firstday/blood_gas_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/blood_gas_first_day.sql", "raw_sql": "-- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- things to check:\n--  when a mixed venous/arterial blood sample are taken at the same time, is the store time different?\n\nwith pvt as\n( -- begin query that extracts the data\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 and itemid != 50802 then null -- allow negative baseexcess\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n\n    FROM icustays ie\n    left join labevents le\n      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n      and le.charttime between (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n      and le.ITEMID in\n      -- blood gases\n      (\n        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n        , 51545\n      )\n)\nselect pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME\n, max(case when label = 'SPECIMEN' then value else null end) as specimen\n, max(case when label = 'AADO2' then valuenum else null end) as aado2\n, max(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n, max(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n, max(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n, max(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n, max(case when label = 'CALCIUM' then valuenum else null end) as calcium\n, max(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n, max(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n, max(case when label = 'INTUBATED' then valuenum else null end) as intubated\n, max(case when label = 'LACTATE' then valuenum else null end) as lactate\n, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n, max(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n, max(case when label = 'FIO2' then valuenum else null end) as fio2\n, max(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n, max(case when label = 'PCO2' then valuenum else null end) as pco2\n, max(case when label = 'PEEP' then valuenum else null end) as peep\n, max(case when label = 'PH' then valuenum else null end) as ph\n, max(case when label = 'PO2' then valuenum else null end) as po2\n, max(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n, max(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n, max(case when label = 'SODIUM' then valuenum else null end) as sodium\n, max(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n, max(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n, max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\nfrom pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME", "refs": [], "relation_name": "\"postgres\".\"public\".\"blood_gas_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.blood_gas_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:03.713504Z", "name": "compile", "started_at": "2022-07-18T00:10:03.712200Z"}, {"completed_at": "2022-07-18T00:10:03.911465Z", "name": "execute", "started_at": "2022-07-18T00:10:03.714516Z"}]}, "unique_id": "model.mimic.blood_gas_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.blood_gas_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.914236Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": "2022-07-18T00:10:03.914839", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.bun"}, "unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.bun", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.914912Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.bun", "index": 9, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": "2022-07-18T00:10:03.914839", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.bun"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "9 of 107 START table model public.bun .......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.915829Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.917134Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": "2022-07-18T00:10:03.914839", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.bun"}, "unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.bun", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.917394Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.bun", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.917555Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.918802Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.919264Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.bun"}, "unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.bun", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.919538Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.bun\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.928986Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.929432Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.929555Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.929905Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.936492Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.936964Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\n\n\n  create  table \"postgres\".\"public\".\"bun__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a distribution of BUN values for adult hospital admissions\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, bun as\n(\n  SELECT width_bucket(valuenum, 0, 280, 280) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (51006)\n)\nSELECT bucket as blood_urea_nitrogen, count(*)\nFROM bun\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\n\n\n  create  table \"postgres\".\"public\".\"bun__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a distribution of BUN values for adult hospital admissions\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, bun as\n(\n  SELECT width_bucket(valuenum, 0, 280, 280) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (51006)\n)\nSELECT bucket as blood_urea_nitrogen, count(*)\nFROM bun\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:03.937154Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.15, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.089857Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.096158Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\nalter table \"postgres\".\"public\".\"bun\" rename to \"bun__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\nalter table \"postgres\".\"public\".\"bun\" rename to \"bun__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.096399Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.097393Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.100864Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\nalter table \"postgres\".\"public\".\"bun__dbt_tmp\" rename to \"bun\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\nalter table \"postgres\".\"public\".\"bun__dbt_tmp\" rename to \"bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.101079Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.101889Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.107410Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.107820Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.108045Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.109117Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.bun", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.bun\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.111129Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.bun", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\ndrop table if exists \"postgres\".\"public\".\"bun__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.bun\"} */\ndrop table if exists \"postgres\".\"public\".\"bun__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.111354Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.113219Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.115921Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.bun: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.116175Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d040>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d040>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.116978Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.bun", "execution_time": 0, "index": 9, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": "2022-07-18T00:10:03.914839", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.bun"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "9 of 107 OK created table model public.bun ..................................... [\u001b[32mSELECT 0\u001b[0m in 0.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.117371Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:04.117766", "node_name": "bun", "node_path": "cookbook/bun.sql", "node_started_at": "2022-07-18T00:10:03.914839", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.bun"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.20012593269348145, "failures": null, "message": "SELECT 0", "node": {"alias": "bun", "build_path": "target/run/mimic/models/cookbook/bun.sql", "checksum": {"checksum": "d07082a348779850c46012e5917bd5bf52eea25daf05af494f17a9a381392224", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/bun.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Create a distribution of BUN values for adult hospital admissions\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, bun as\n(\n  SELECT width_bucket(valuenum, 0, 280, 280) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (51006)\n)\nSELECT bucket as blood_urea_nitrogen, count(*)\nFROM bun\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6955647, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "bun"], "meta": {}, "name": "bun", "original_file_path": "models/cookbook/bun.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/bun.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Create a distribution of BUN values for adult hospital admissions\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, bun as\n(\n  SELECT width_bucket(valuenum, 0, 280, 280) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (51006)\n)\nSELECT bucket as blood_urea_nitrogen, count(*)\nFROM bun\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"bun\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.bun", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:03.919165Z", "name": "compile", "started_at": "2022-07-18T00:10:03.917540Z"}, {"completed_at": "2022-07-18T00:10:04.115890Z", "name": "execute", "started_at": "2022-07-18T00:10:03.919757Z"}]}, "unique_id": "model.mimic.bun"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.bun", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.117938Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": "2022-07-18T00:10:04.118355", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.central_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.118452Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.central_line_durations", "index": 10, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": "2022-07-18T00:10:04.118355", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "10 of 107 START table model public.central_line_durations ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.119229Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.120078Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": "2022-07-18T00:10:04.118355", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.central_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.120555Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.central_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.121076Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.122412Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.122994Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.central_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.123263Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.central_line_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.135630Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.136103Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.136232Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.136344Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.143399Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.143692Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"central_line_durations__dbt_tmp\"\n  as (\n    with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n    , case\n        when (locationcategory <> 'Invasive Arterial' or locationcategory is null)\n          then 1\n        else 0\n      end as central_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    , 225203 -- Pheresis Catheter | None | 12 | Processes\n    , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n    , 224270 -- Dialysis Catheter\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv2_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv3_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv4_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv5_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv6_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv7_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv8_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as central_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as central_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( central_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as central_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , central_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, central_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , central_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as central_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere central_line = 1\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"central_line_durations__dbt_tmp\"\n  as (\n    with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n    , case\n        when (locationcategory <> 'Invasive Arterial' or locationcategory is null)\n          then 1\n        else 0\n      end as central_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    , 225203 -- Pheresis Catheter | None | 12 | Processes\n    , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n    , 224270 -- Dialysis Catheter\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv2_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv3_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv4_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv5_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv6_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv7_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv8_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as central_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as central_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( central_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as central_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , central_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, central_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , central_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as central_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere central_line = 1\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.143826Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.09, "status": "SELECT 21211"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 21211 in 0.09 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.230339Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.236318Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\nalter table \"postgres\".\"public\".\"central_line_durations\" rename to \"central_line_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\nalter table \"postgres\".\"public\".\"central_line_durations\" rename to \"central_line_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.236715Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.238291Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.244430Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\nalter table \"postgres\".\"public\".\"central_line_durations__dbt_tmp\" rename to \"central_line_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\nalter table \"postgres\".\"public\".\"central_line_durations__dbt_tmp\" rename to \"central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.244786Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.245677Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.251736Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.252057Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.252358Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.258056Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.central_line_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.central_line_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.262170Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.central_line_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"central_line_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.central_line_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"central_line_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.262507Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.264574Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.268586Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.central_line_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.268898Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037d30>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a037d30>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.269799Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.central_line_durations", "execution_time": 0, "index": 10, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": "2022-07-18T00:10:04.118355", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "status": "SELECT 21211", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "10 of 107 OK created table model public.central_line_durations ................. [\u001b[32mSELECT 21211\u001b[0m in 0.15s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.271131Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:04.272319", "node_name": "central_line_durations", "node_path": "durations/central_line_durations.sql", "node_started_at": "2022-07-18T00:10:04.118355", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.central_line_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 21211", "code": "SELECT", "rows_affected": 21211}, "agate_table": null, "execution_time": 0.1498706340789795, "failures": null, "message": "SELECT 21211", "node": {"alias": "central_line_durations", "build_path": "target/run/mimic/models/durations/central_line_durations.sql", "checksum": {"checksum": "a6f1a12e057330dffa84f6f7de31bf7c0fe60bd49e47d50d32029a0edb9f9748", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/central_line_durations.sql", "compiled_sql": "with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n    , case\n        when (locationcategory <> 'Invasive Arterial' or locationcategory is null)\n          then 1\n        else 0\n      end as central_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    , 225203 -- Pheresis Catheter | None | 12 | Processes\n    , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n    , 224270 -- Dialysis Catheter\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv2_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv3_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv4_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv5_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv6_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv7_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv8_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as central_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as central_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( central_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as central_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , central_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, central_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , central_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as central_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere central_line = 1\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.479722, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "central_line_durations"], "meta": {}, "name": "central_line_durations", "original_file_path": "models/durations/central_line_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/central_line_durations.sql", "raw_sql": "with mv as\n(\n  select\n    pe.icustay_id\n  , pe.starttime, pe.endtime\n    , case\n        when (locationcategory <> 'Invasive Arterial' or locationcategory is null)\n          then 1\n        else 0\n      end as central_line\n  FROM procedureevents_mv pe\n  where pe.itemid in\n  (\n      224263 -- Multi Lumen | None | 12 | Processes\n    , 224264 -- PICC Line | None | 12 | Processes\n    , 224267 -- Cordis/Introducer | None | 12 | Processes\n    , 224268 -- Trauma line | None | 12 | Processes\n    , 225199 -- Triple Introducer | None | 12 | Processes\n    , 225202 -- Indwelling Port (PortaCath) | None | 12 | Processes\n    , 225203 -- Pheresis Catheter | None | 12 | Processes\n    , 225315 -- Tunneled (Hickman) Line | None | 12 | Processes\n    , 225752 -- Arterial Line | None | 12 | Processes\n    , 227719 -- AVA Line | None | 12 | Processes\n    -- , 228286 -- Intraosseous Device | None | 12 | Processes\n    , 224270 -- Dialysis Catheter\n  )\n)\n, cv_grp as\n(\n  -- group type+site\n  select ce.icustay_id, ce.charttime\n    , max(case when itemid =  229  then value else null end) as INV1_Type\n    , max(case when itemid =  8392 then value else null end) as INV1_Site\n    , max(case when itemid =  235  then value else null end) as INV2_Type\n    , max(case when itemid =  8393 then value else null end) as INV2_Site\n    , max(case when itemid =  241  then value else null end) as INV3_Type\n    , max(case when itemid =  8394 then value else null end) as INV3_Site\n    , max(case when itemid =  247  then value else null end) as INV4_Type\n    , max(case when itemid =  8395 then value else null end) as INV4_Site\n    , max(case when itemid =  253  then value else null end) as INV5_Type\n    , max(case when itemid =  8396 then value else null end) as INV5_Site\n    , max(case when itemid =  259  then value else null end) as INV6_Type\n    , max(case when itemid =  8397 then value else null end) as INV6_Site\n    , max(case when itemid =  265  then value else null end) as INV7_Type\n    , max(case when itemid =  8398 then value else null end) as INV7_Site\n    , max(case when itemid =  271  then value else null end) as INV8_Type\n    , max(case when itemid =  8399 then value else null end) as INV8_Site\n  FROM chartevents ce\n  where ce.itemid in\n  (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n  )\n  and ce.value is not null\n  group by ce.icustay_id, ce.charttime\n)\n-- types of invasive lines in carevue\n--       value       | count\n-- ------------------+--------\n--  A-Line           | 460627\n--  Multi-lumen      | 345858\n--  PICC line        |  92285\n--  PA line          |  65702\n--  Dialysis Line    |  57579\n--  Introducer       |  36027\n--  CCO PA Line      |  24831\n--                   |  22369\n--  Trauma Line      |  15530\n--  Portacath        |  12927\n--  Ventriculostomy  |  10295\n--  Pre-Sep Catheter |   9678\n--  IABP             |   8819\n--  Other/Remarks    |   8725\n--  Midline          |   5067\n--  Venous Access    |   4278\n--  Hickman          |   3783\n--  PacerIntroducer  |   2663\n--  TripleIntroducer |   2262\n--  RIC              |   1625\n--  PermaCath        |   1066\n--  Camino Bolt      |    913\n--  Lumbar Drain     |    361\n-- (23 rows)\n, cv as\n(\n  select distinct icustay_id, charttime\n  from cv_grp\n  where (inv1_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv2_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv3_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv4_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv5_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv6_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv7_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n     OR (inv8_type in ('Multi-lumen', 'PICC line', 'Dialysis Line', 'Introducer','Trauma Line', 'Portacath', 'Venous Access', 'Hickman', 'PacerIntroducer', 'TripleIntroducer'))\n)\n-- transform carevue data into durations\n, cv0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER (partition by icustay_id order by charttime) as charttime_lag\n    , charttime\n  from cv\n)\n, cv1 as\n(\n  select\n    icustay_id\n    , charttime\n    , charttime_lag\n    -- if the current observation indicates a line is present\n    -- calculate the time since the last charted line\n    , charttime - charttime_lag as central_line_duration\n    -- now we determine if the current line is \"new\"\n    -- new == no documentation for 16 hours\n    , case\n        when DATETIME_DIFF(charttime, charttime_lag, 'HOUR') > 16\n          then 1\n      else 0\n      end as central_line_new\n  FROM cv0\n)\n, cv2 as\n(\n  select cv1.*\n  -- create a cumulative sum of the instances of new events\n  -- this results in a monotonic integer assigned to each new instance of a line\n  , SUM( central_line_new )\n    OVER ( partition by icustay_id order by charttime )\n    as central_line_rownum\n  from cv1\n)\n-- create the durations for each line\n, cv_dur as\n(\n  select icustay_id\n    , central_line_rownum\n    , min(charttime) as starttime\n    , max(charttime) as endtime\n    , DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  from cv2\n  group by icustay_id, central_line_rownum\n  having min(charttime) != max(charttime)\n)\nselect icustay_id\n  -- , central_line_rownum\n  , starttime, endtime, duration_hours\nfrom cv_dur\nUNION ALL\n--TODO: collapse metavision durations if they overlap\nselect icustay_id\n  -- , ROW_NUMBER() over (PARTITION BY icustay_id ORDER BY starttime) as central_line_rownum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\nfrom mv\nwhere central_line = 1\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"central_line_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.central_line_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:04.122924Z", "name": "compile", "started_at": "2022-07-18T00:10:04.121014Z"}, {"completed_at": "2022-07-18T00:10:04.268552Z", "name": "execute", "started_at": "2022-07-18T00:10:04.123395Z"}]}, "unique_id": "model.mimic.central_line_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.central_line_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.272704Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": "2022-07-18T00:10:04.273436", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.code_status", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.273464Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.code_status", "index": 11, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": "2022-07-18T00:10:04.273436", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "11 of 107 START table model public.code_status ................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.274479Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.275512Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": "2022-07-18T00:10:04.273436", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.code_status", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.275876Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.code_status", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.276197Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.279165Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.279874Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.code_status", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.280258Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.code_status\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.291903Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.292676Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.292993Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.293232Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.298992Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.299339Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\n\n\n  create  table \"postgres\".\"public\".\"code_status__dbt_tmp\"\n  as (\n    -- This query extracts:\n--    i) a patient's first code status\n--    ii) a patient's last code status\n--    iii) the time of the first entry of DNR or CMO\n\n\n\nwith t1 as\n(\n  select icustay_id, charttime, value\n  -- use row number to identify first and last code status\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnfirst\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime desc) as rnlast\n\n  -- coalesce the values\n  , case\n      when value in ('Full Code','Full code') then 1\n    else 0 end as fullcode\n  , case\n      when value in ('Comfort Measures','Comfort measures only') then 1\n    else 0 end as cmo\n  , case\n      when value = 'CPR Not Indicate' then 1\n    else 0 end as dncpr -- only in CareVue, i.e. only possible for ~60-70% of patients\n  , case\n      when value in ('Do Not Intubate','DNI (do not intubate)','DNR / DNI') then 1\n    else 0 end as dni\n  , case\n      when value in ('Do Not Resuscita','DNR (do not resuscitate)','DNR / DNI') then 1\n    else 0 end as dnr\n  FROM chartevents\n  where itemid in (128, 223758)\n  and value is not null\n  and value != 'Other/Remarks'\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- first recorded code status\n  , max(case when rnfirst = 1 then t1.fullcode else null end) as fullcode_first\n  , max(case when rnfirst = 1 then t1.cmo else null end) as cmo_first\n  , max(case when rnfirst = 1 then t1.dnr else null end) as dnr_first\n  , max(case when rnfirst = 1 then t1.dni else null end) as dni_first\n  , max(case when rnfirst = 1 then t1.dncpr else null end) as dncpr_first\n\n  -- last recorded code status\n  , max(case when  rnlast = 1 then t1.fullcode else null end) as fullcode_last\n  , max(case when  rnlast = 1 then t1.cmo else null end) as cmo_last\n  , max(case when  rnlast = 1 then t1.dnr else null end) as dnr_last\n  , max(case when  rnlast = 1 then t1.dni else null end) as dni_last\n  , max(case when  rnlast = 1 then t1.dncpr else null end) as DNCPR_last\n\n  -- were they *at any time* given a certain code status\n  , max(t1.fullcode) as fullcode\n  , max(t1.cmo) as cmo\n  , max(t1.dnr) as dnr\n  , max(t1.dni) as dni\n  , max(t1.dncpr) as dncpr\n\n  -- time until their first DNR\n  , min(case when t1.dnr = 1 then t1.charttime else null end)\n        as dnr_first_charttime\n  , min(case when t1.dni = 1 then t1.charttime else null end)\n        as dni_first_charttime\n  , min(case when t1.dncpr = 1 then t1.charttime else null end)\n        as dncpr_first_charttime\n\n  -- first code status of CMO\n  , min(case when t1.cmo = 1 then t1.charttime else null end)\n        as timecmo_chart\n\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id, ie.intime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\n\n\n  create  table \"postgres\".\"public\".\"code_status__dbt_tmp\"\n  as (\n    -- This query extracts:\n--    i) a patient's first code status\n--    ii) a patient's last code status\n--    iii) the time of the first entry of DNR or CMO\n\n\n\nwith t1 as\n(\n  select icustay_id, charttime, value\n  -- use row number to identify first and last code status\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnfirst\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime desc) as rnlast\n\n  -- coalesce the values\n  , case\n      when value in ('Full Code','Full code') then 1\n    else 0 end as fullcode\n  , case\n      when value in ('Comfort Measures','Comfort measures only') then 1\n    else 0 end as cmo\n  , case\n      when value = 'CPR Not Indicate' then 1\n    else 0 end as dncpr -- only in CareVue, i.e. only possible for ~60-70% of patients\n  , case\n      when value in ('Do Not Intubate','DNI (do not intubate)','DNR / DNI') then 1\n    else 0 end as dni\n  , case\n      when value in ('Do Not Resuscita','DNR (do not resuscitate)','DNR / DNI') then 1\n    else 0 end as dnr\n  FROM chartevents\n  where itemid in (128, 223758)\n  and value is not null\n  and value != 'Other/Remarks'\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- first recorded code status\n  , max(case when rnfirst = 1 then t1.fullcode else null end) as fullcode_first\n  , max(case when rnfirst = 1 then t1.cmo else null end) as cmo_first\n  , max(case when rnfirst = 1 then t1.dnr else null end) as dnr_first\n  , max(case when rnfirst = 1 then t1.dni else null end) as dni_first\n  , max(case when rnfirst = 1 then t1.dncpr else null end) as dncpr_first\n\n  -- last recorded code status\n  , max(case when  rnlast = 1 then t1.fullcode else null end) as fullcode_last\n  , max(case when  rnlast = 1 then t1.cmo else null end) as cmo_last\n  , max(case when  rnlast = 1 then t1.dnr else null end) as dnr_last\n  , max(case when  rnlast = 1 then t1.dni else null end) as dni_last\n  , max(case when  rnlast = 1 then t1.dncpr else null end) as DNCPR_last\n\n  -- were they *at any time* given a certain code status\n  , max(t1.fullcode) as fullcode\n  , max(t1.cmo) as cmo\n  , max(t1.dnr) as dnr\n  , max(t1.dni) as dni\n  , max(t1.dncpr) as dncpr\n\n  -- time until their first DNR\n  , min(case when t1.dnr = 1 then t1.charttime else null end)\n        as dnr_first_charttime\n  , min(case when t1.dni = 1 then t1.charttime else null end)\n        as dni_first_charttime\n  , min(case when t1.dncpr = 1 then t1.charttime else null end)\n        as dncpr_first_charttime\n\n  -- first code status of CMO\n  , min(case when t1.cmo = 1 then t1.charttime else null end)\n        as timecmo_chart\n\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id, ie.intime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.299578Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.1, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.1 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.403219Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.409848Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\nalter table \"postgres\".\"public\".\"code_status\" rename to \"code_status__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\nalter table \"postgres\".\"public\".\"code_status\" rename to \"code_status__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.410197Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.411064Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.414963Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\nalter table \"postgres\".\"public\".\"code_status__dbt_tmp\" rename to \"code_status\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\nalter table \"postgres\".\"public\".\"code_status__dbt_tmp\" rename to \"code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.415200Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.416026Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.419390Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.419713Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.420299Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.428008Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.code_status", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.code_status\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.430440Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.code_status", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\ndrop table if exists \"postgres\".\"public\".\"code_status__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.code_status\"} */\ndrop table if exists \"postgres\".\"public\".\"code_status__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.430692Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.432704Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.435402Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.code_status: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.435653Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c8bc040>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c8bc040>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.436306Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.code_status", "execution_time": 0, "index": 11, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": "2022-07-18T00:10:04.273436", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "11 of 107 OK created table model public.code_status ............................ [\u001b[32mSELECT 61532\u001b[0m in 0.16s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.436983Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:04.437366", "node_name": "code_status", "node_path": "code_status.sql", "node_started_at": "2022-07-18T00:10:04.273436", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.code_status"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.16092824935913086, "failures": null, "message": "SELECT 61532", "node": {"alias": "code_status", "build_path": "target/run/mimic/models/code_status.sql", "checksum": {"checksum": "f4ab2a46215522669db17b84c43a0211b617d341e7a1911f8e4b91a156686879", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/code_status.sql", "compiled_sql": "-- This query extracts:\n--    i) a patient's first code status\n--    ii) a patient's last code status\n--    iii) the time of the first entry of DNR or CMO\n\n\n\nwith t1 as\n(\n  select icustay_id, charttime, value\n  -- use row number to identify first and last code status\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnfirst\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime desc) as rnlast\n\n  -- coalesce the values\n  , case\n      when value in ('Full Code','Full code') then 1\n    else 0 end as fullcode\n  , case\n      when value in ('Comfort Measures','Comfort measures only') then 1\n    else 0 end as cmo\n  , case\n      when value = 'CPR Not Indicate' then 1\n    else 0 end as dncpr -- only in CareVue, i.e. only possible for ~60-70% of patients\n  , case\n      when value in ('Do Not Intubate','DNI (do not intubate)','DNR / DNI') then 1\n    else 0 end as dni\n  , case\n      when value in ('Do Not Resuscita','DNR (do not resuscitate)','DNR / DNI') then 1\n    else 0 end as dnr\n  FROM chartevents\n  where itemid in (128, 223758)\n  and value is not null\n  and value != 'Other/Remarks'\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- first recorded code status\n  , max(case when rnfirst = 1 then t1.fullcode else null end) as fullcode_first\n  , max(case when rnfirst = 1 then t1.cmo else null end) as cmo_first\n  , max(case when rnfirst = 1 then t1.dnr else null end) as dnr_first\n  , max(case when rnfirst = 1 then t1.dni else null end) as dni_first\n  , max(case when rnfirst = 1 then t1.dncpr else null end) as dncpr_first\n\n  -- last recorded code status\n  , max(case when  rnlast = 1 then t1.fullcode else null end) as fullcode_last\n  , max(case when  rnlast = 1 then t1.cmo else null end) as cmo_last\n  , max(case when  rnlast = 1 then t1.dnr else null end) as dnr_last\n  , max(case when  rnlast = 1 then t1.dni else null end) as dni_last\n  , max(case when  rnlast = 1 then t1.dncpr else null end) as DNCPR_last\n\n  -- were they *at any time* given a certain code status\n  , max(t1.fullcode) as fullcode\n  , max(t1.cmo) as cmo\n  , max(t1.dnr) as dnr\n  , max(t1.dni) as dni\n  , max(t1.dncpr) as dncpr\n\n  -- time until their first DNR\n  , min(case when t1.dnr = 1 then t1.charttime else null end)\n        as dnr_first_charttime\n  , min(case when t1.dni = 1 then t1.charttime else null end)\n        as dni_first_charttime\n  , min(case when t1.dncpr = 1 then t1.charttime else null end)\n        as dncpr_first_charttime\n\n  -- first code status of CMO\n  , min(case when t1.cmo = 1 then t1.charttime else null end)\n        as timecmo_chart\n\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id, ie.intime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4580917, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "code_status"], "meta": {}, "name": "code_status", "original_file_path": "models/code_status.sql", "package_name": "mimic", "patch_path": null, "path": "code_status.sql", "raw_sql": "-- This query extracts:\n--    i) a patient's first code status\n--    ii) a patient's last code status\n--    iii) the time of the first entry of DNR or CMO\n{{ config(materialized='table') }}\n\n\nwith t1 as\n(\n  select icustay_id, charttime, value\n  -- use row number to identify first and last code status\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime) as rnfirst\n  , ROW_NUMBER() over (PARTITION BY icustay_id order by charttime desc) as rnlast\n\n  -- coalesce the values\n  , case\n      when value in ('Full Code','Full code') then 1\n    else 0 end as fullcode\n  , case\n      when value in ('Comfort Measures','Comfort measures only') then 1\n    else 0 end as cmo\n  , case\n      when value = 'CPR Not Indicate' then 1\n    else 0 end as dncpr -- only in CareVue, i.e. only possible for ~60-70% of patients\n  , case\n      when value in ('Do Not Intubate','DNI (do not intubate)','DNR / DNI') then 1\n    else 0 end as dni\n  , case\n      when value in ('Do Not Resuscita','DNR (do not resuscitate)','DNR / DNI') then 1\n    else 0 end as dnr\n  FROM chartevents\n  where itemid in (128, 223758)\n  and value is not null\n  and value != 'Other/Remarks'\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- first recorded code status\n  , max(case when rnfirst = 1 then t1.fullcode else null end) as fullcode_first\n  , max(case when rnfirst = 1 then t1.cmo else null end) as cmo_first\n  , max(case when rnfirst = 1 then t1.dnr else null end) as dnr_first\n  , max(case when rnfirst = 1 then t1.dni else null end) as dni_first\n  , max(case when rnfirst = 1 then t1.dncpr else null end) as dncpr_first\n\n  -- last recorded code status\n  , max(case when  rnlast = 1 then t1.fullcode else null end) as fullcode_last\n  , max(case when  rnlast = 1 then t1.cmo else null end) as cmo_last\n  , max(case when  rnlast = 1 then t1.dnr else null end) as dnr_last\n  , max(case when  rnlast = 1 then t1.dni else null end) as dni_last\n  , max(case when  rnlast = 1 then t1.dncpr else null end) as DNCPR_last\n\n  -- were they *at any time* given a certain code status\n  , max(t1.fullcode) as fullcode\n  , max(t1.cmo) as cmo\n  , max(t1.dnr) as dnr\n  , max(t1.dni) as dni\n  , max(t1.dncpr) as dncpr\n\n  -- time until their first DNR\n  , min(case when t1.dnr = 1 then t1.charttime else null end)\n        as dnr_first_charttime\n  , min(case when t1.dni = 1 then t1.charttime else null end)\n        as dni_first_charttime\n  , min(case when t1.dncpr = 1 then t1.charttime else null end)\n        as dncpr_first_charttime\n\n  -- first code status of CMO\n  , min(case when t1.cmo = 1 then t1.charttime else null end)\n        as timecmo_chart\n\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id, ie.intime", "refs": [], "relation_name": "\"postgres\".\"public\".\"code_status\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.code_status", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:04.279809Z", "name": "compile", "started_at": "2022-07-18T00:10:04.276178Z"}, {"completed_at": "2022-07-18T00:10:04.435373Z", "name": "execute", "started_at": "2022-07-18T00:10:04.280550Z"}]}, "unique_id": "model.mimic.code_status"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.code_status", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.437485Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": "2022-07-18T00:10:04.437969", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.colloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.438094Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.colloid_bolus", "index": 12, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": "2022-07-18T00:10:04.437969", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "12 of 107 START table model public.colloid_bolus ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.438867Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.439848Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": "2022-07-18T00:10:04.437969", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.colloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.440105Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.colloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.440431Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.441871Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.442576Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.colloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.442866Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.colloid_bolus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.450385Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.451116Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.451372Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.451628Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.457104Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.457510Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\n\n\n  create  table \"postgres\".\"public\".\"colloid_bolus__dbt_tmp\"\n  as (\n    -- received colloid before admission\n-- 226365  --  OR Colloid Intake\n-- 226376  --  PACU Colloid Intake\n\nwith t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    220864, --\tAlbumin 5%\t7466 132 7466\n    220862, --\tAlbumin 25%\t9851 174 9851\n    225174, --\tHetastarch (Hespan) 6%\t82 1 82\n    225795, --\tDextran 40\t38 3 38\n    225796  --  Dextran 70\n    -- below ITEMIDs not in use\n   -- 220861 | Albumin (Human) 20%\n   -- 220863 | Albumin (Human) 4%\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs never appear with a null rate\n  -- so it is sufficient to check the rate is > 100\n    (\n      (mv.rateuom = 'mL/hour' and mv.rate > 100)\n      OR (mv.rateuom = 'mL/min' and mv.rate > (100/60.0))\n      OR (mv.rateuom = 'mL/kg/hour' and (mv.rate*mv.patientweight) > 100)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n   30008 --\tAlbumin 5%\n  ,30009 --\tAlbumin 25%\n  ,42832 --\talbumin 12.5%\n  ,40548 --\tALBUMIN\n  ,45403 --\talbumin\n  ,44203 --\tAlbumin 12.5%\n  ,30181 -- Serum Albumin 5%\n  ,46564 -- Albumin\n  ,43237 -- 25% Albumin\n  ,43353 -- Albumin (human) 25%\n\n  ,30012 --\tHespan\n  ,46313 --\t6% Hespan\n\n  ,30011 -- Dextran 40\n  ,30016 -- Dextrose 10%\n  ,42975 --\tDEXTRAN DRIP\n  ,42944 --\tdextran\n  ,46336 --\t10% Dextran 40/D5W\n  ,46729 --\tDextran\n  ,40033 --\tDEXTRAN\n  ,45410 --\t10% Dextran 40\n  ,42731 -- Dextran40 10%\n  )\n  and cv.amount > 100\n  and cv.amount < 2000\n)\n-- some colloids are charted in chartevents\n, t3 as\n(\n  select\n    ce.icustay_id\n  , ce.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(ce.valuenum) as amount\n  from chartevents ce\n  where ce.itemid in\n  (\n      2510 --\tDEXTRAN LML 10%\n    , 3087 --\tDEXTRAN 40  10%\n    , 6937 --\tDextran\n    , 3087 -- DEXTRAN 40  10%\n    , 3088 --\tDEXTRAN 40%\n  )\n  and ce.valuenum is not null\n  and ce.valuenum > 100\n  and ce.valuenum < 2000\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 100\ngroup by t1.icustay_id, t1.charttime\nUNION ALL\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\nUNION ALL \nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t3\ngroup by t3.icustay_id, t3.charttime\norder by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\n\n\n  create  table \"postgres\".\"public\".\"colloid_bolus__dbt_tmp\"\n  as (\n    -- received colloid before admission\n-- 226365  --  OR Colloid Intake\n-- 226376  --  PACU Colloid Intake\n\nwith t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    220864, --\tAlbumin 5%\t7466 132 7466\n    220862, --\tAlbumin 25%\t9851 174 9851\n    225174, --\tHetastarch (Hespan) 6%\t82 1 82\n    225795, --\tDextran 40\t38 3 38\n    225796  --  Dextran 70\n    -- below ITEMIDs not in use\n   -- 220861 | Albumin (Human) 20%\n   -- 220863 | Albumin (Human) 4%\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs never appear with a null rate\n  -- so it is sufficient to check the rate is > 100\n    (\n      (mv.rateuom = 'mL/hour' and mv.rate > 100)\n      OR (mv.rateuom = 'mL/min' and mv.rate > (100/60.0))\n      OR (mv.rateuom = 'mL/kg/hour' and (mv.rate*mv.patientweight) > 100)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n   30008 --\tAlbumin 5%\n  ,30009 --\tAlbumin 25%\n  ,42832 --\talbumin 12.5%\n  ,40548 --\tALBUMIN\n  ,45403 --\talbumin\n  ,44203 --\tAlbumin 12.5%\n  ,30181 -- Serum Albumin 5%\n  ,46564 -- Albumin\n  ,43237 -- 25% Albumin\n  ,43353 -- Albumin (human) 25%\n\n  ,30012 --\tHespan\n  ,46313 --\t6% Hespan\n\n  ,30011 -- Dextran 40\n  ,30016 -- Dextrose 10%\n  ,42975 --\tDEXTRAN DRIP\n  ,42944 --\tdextran\n  ,46336 --\t10% Dextran 40/D5W\n  ,46729 --\tDextran\n  ,40033 --\tDEXTRAN\n  ,45410 --\t10% Dextran 40\n  ,42731 -- Dextran40 10%\n  )\n  and cv.amount > 100\n  and cv.amount < 2000\n)\n-- some colloids are charted in chartevents\n, t3 as\n(\n  select\n    ce.icustay_id\n  , ce.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(ce.valuenum) as amount\n  from chartevents ce\n  where ce.itemid in\n  (\n      2510 --\tDEXTRAN LML 10%\n    , 3087 --\tDEXTRAN 40  10%\n    , 6937 --\tDextran\n    , 3087 -- DEXTRAN 40  10%\n    , 3088 --\tDEXTRAN 40%\n  )\n  and ce.valuenum is not null\n  and ce.valuenum > 100\n  and ce.valuenum < 2000\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 100\ngroup by t1.icustay_id, t1.charttime\nUNION ALL\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\nUNION ALL \nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t3\ngroup by t3.icustay_id, t3.charttime\norder by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:04.457977Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.83, "status": "SELECT 12209"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 12209 in 0.83 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.292120Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.297216Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\nalter table \"postgres\".\"public\".\"colloid_bolus\" rename to \"colloid_bolus__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\nalter table \"postgres\".\"public\".\"colloid_bolus\" rename to \"colloid_bolus__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.297452Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.298402Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.302205Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\nalter table \"postgres\".\"public\".\"colloid_bolus__dbt_tmp\" rename to \"colloid_bolus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\nalter table \"postgres\".\"public\".\"colloid_bolus__dbt_tmp\" rename to \"colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.302739Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.304680Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.309144Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.309393Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.309756Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.312303Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.colloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.colloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.314586Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.colloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\ndrop table if exists \"postgres\".\"public\".\"colloid_bolus__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.colloid_bolus\"} */\ndrop table if exists \"postgres\".\"public\".\"colloid_bolus__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.314834Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.316591Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.321402Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.colloid_bolus: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.322315Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d3d0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d3d0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.323485Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.colloid_bolus", "execution_time": 0, "index": 12, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": "2022-07-18T00:10:04.437969", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "status": "SELECT 12209", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "12 of 107 OK created table model public.colloid_bolus .......................... [\u001b[32mSELECT 12209\u001b[0m in 0.88s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.324357Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:05.324930", "node_name": "colloid_bolus", "node_path": "fluid_balance/colloid_bolus.sql", "node_started_at": "2022-07-18T00:10:04.437969", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.colloid_bolus"}, "run_result": {"adapter_response": {"_message": "SELECT 12209", "code": "SELECT", "rows_affected": 12209}, "agate_table": null, "execution_time": 0.8839113712310791, "failures": null, "message": "SELECT 12209", "node": {"alias": "colloid_bolus", "build_path": "target/run/mimic/models/fluid_balance/colloid_bolus.sql", "checksum": {"checksum": "0f3014a284ef8963ee687e4eebfea832164fab6b1d8ae939e7a8f0595b4dad8d", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/fluid_balance/colloid_bolus.sql", "compiled_sql": "-- received colloid before admission\n-- 226365  --  OR Colloid Intake\n-- 226376  --  PACU Colloid Intake\n\nwith t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    220864, --\tAlbumin 5%\t7466 132 7466\n    220862, --\tAlbumin 25%\t9851 174 9851\n    225174, --\tHetastarch (Hespan) 6%\t82 1 82\n    225795, --\tDextran 40\t38 3 38\n    225796  --  Dextran 70\n    -- below ITEMIDs not in use\n   -- 220861 | Albumin (Human) 20%\n   -- 220863 | Albumin (Human) 4%\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs never appear with a null rate\n  -- so it is sufficient to check the rate is > 100\n    (\n      (mv.rateuom = 'mL/hour' and mv.rate > 100)\n      OR (mv.rateuom = 'mL/min' and mv.rate > (100/60.0))\n      OR (mv.rateuom = 'mL/kg/hour' and (mv.rate*mv.patientweight) > 100)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n   30008 --\tAlbumin 5%\n  ,30009 --\tAlbumin 25%\n  ,42832 --\talbumin 12.5%\n  ,40548 --\tALBUMIN\n  ,45403 --\talbumin\n  ,44203 --\tAlbumin 12.5%\n  ,30181 -- Serum Albumin 5%\n  ,46564 -- Albumin\n  ,43237 -- 25% Albumin\n  ,43353 -- Albumin (human) 25%\n\n  ,30012 --\tHespan\n  ,46313 --\t6% Hespan\n\n  ,30011 -- Dextran 40\n  ,30016 -- Dextrose 10%\n  ,42975 --\tDEXTRAN DRIP\n  ,42944 --\tdextran\n  ,46336 --\t10% Dextran 40/D5W\n  ,46729 --\tDextran\n  ,40033 --\tDEXTRAN\n  ,45410 --\t10% Dextran 40\n  ,42731 -- Dextran40 10%\n  )\n  and cv.amount > 100\n  and cv.amount < 2000\n)\n-- some colloids are charted in chartevents\n, t3 as\n(\n  select\n    ce.icustay_id\n  , ce.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(ce.valuenum) as amount\n  from chartevents ce\n  where ce.itemid in\n  (\n      2510 --\tDEXTRAN LML 10%\n    , 3087 --\tDEXTRAN 40  10%\n    , 6937 --\tDextran\n    , 3087 -- DEXTRAN 40  10%\n    , 3088 --\tDEXTRAN 40%\n  )\n  and ce.valuenum is not null\n  and ce.valuenum > 100\n  and ce.valuenum < 2000\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 100\ngroup by t1.icustay_id, t1.charttime\nUNION ALL\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\nUNION ALL \nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t3\ngroup by t3.icustay_id, t3.charttime\norder by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6253757, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "fluid_balance", "colloid_bolus"], "meta": {}, "name": "colloid_bolus", "original_file_path": "models/fluid_balance/colloid_bolus.sql", "package_name": "mimic", "patch_path": null, "path": "fluid_balance/colloid_bolus.sql", "raw_sql": "-- received colloid before admission\n-- 226365  --  OR Colloid Intake\n-- 226376  --  PACU Colloid Intake\n\nwith t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    220864, --\tAlbumin 5%\t7466 132 7466\n    220862, --\tAlbumin 25%\t9851 174 9851\n    225174, --\tHetastarch (Hespan) 6%\t82 1 82\n    225795, --\tDextran 40\t38 3 38\n    225796  --  Dextran 70\n    -- below ITEMIDs not in use\n   -- 220861 | Albumin (Human) 20%\n   -- 220863 | Albumin (Human) 4%\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs never appear with a null rate\n  -- so it is sufficient to check the rate is > 100\n    (\n      (mv.rateuom = 'mL/hour' and mv.rate > 100)\n      OR (mv.rateuom = 'mL/min' and mv.rate > (100/60.0))\n      OR (mv.rateuom = 'mL/kg/hour' and (mv.rate*mv.patientweight) > 100)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n   30008 --\tAlbumin 5%\n  ,30009 --\tAlbumin 25%\n  ,42832 --\talbumin 12.5%\n  ,40548 --\tALBUMIN\n  ,45403 --\talbumin\n  ,44203 --\tAlbumin 12.5%\n  ,30181 -- Serum Albumin 5%\n  ,46564 -- Albumin\n  ,43237 -- 25% Albumin\n  ,43353 -- Albumin (human) 25%\n\n  ,30012 --\tHespan\n  ,46313 --\t6% Hespan\n\n  ,30011 -- Dextran 40\n  ,30016 -- Dextrose 10%\n  ,42975 --\tDEXTRAN DRIP\n  ,42944 --\tdextran\n  ,46336 --\t10% Dextran 40/D5W\n  ,46729 --\tDextran\n  ,40033 --\tDEXTRAN\n  ,45410 --\t10% Dextran 40\n  ,42731 -- Dextran40 10%\n  )\n  and cv.amount > 100\n  and cv.amount < 2000\n)\n-- some colloids are charted in chartevents\n, t3 as\n(\n  select\n    ce.icustay_id\n  , ce.charttime\n  -- carevue always has units in millilitres (or null)\n  , round(ce.valuenum) as amount\n  from chartevents ce\n  where ce.itemid in\n  (\n      2510 --\tDEXTRAN LML 10%\n    , 3087 --\tDEXTRAN 40  10%\n    , 6937 --\tDextran\n    , 3087 -- DEXTRAN 40  10%\n    , 3088 --\tDEXTRAN 40%\n  )\n  and ce.valuenum is not null\n  and ce.valuenum > 100\n  and ce.valuenum < 2000\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 100\ngroup by t1.icustay_id, t1.charttime\nUNION ALL\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\nUNION ALL \nselect\n    icustay_id\n  , charttime\n  , sum(amount) as colloid_bolus\nfrom t3\ngroup by t3.icustay_id, t3.charttime\norder by icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"colloid_bolus\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.colloid_bolus", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:04.442487Z", "name": "compile", "started_at": "2022-07-18T00:10:04.440403Z"}, {"completed_at": "2022-07-18T00:10:05.321240Z", "name": "execute", "started_at": "2022-07-18T00:10:04.443151Z"}]}, "unique_id": "model.mimic.colloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.colloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.325107Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": "2022-07-18T00:10:05.325530", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.crrt_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.325755Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.crrt_durations", "index": 13, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": "2022-07-18T00:10:05.325530", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "13 of 107 START table model public.crrt_durations .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.326497Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.327334Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": "2022-07-18T00:10:05.325530", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.crrt_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.327860Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.crrt_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.328212Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.329851Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.330581Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.crrt_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.330978Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.crrt_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.343182Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.344179Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.344432Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.344732Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.352490Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.353150Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"crrt_durations__dbt_tmp\"\n  as (\n    with crrt_settings as\n(\n  select ce.icustay_id, ce.charttime\n  , max(\n      case\n        when ce.itemid in\n        (\n          224149, -- Access Pressure\n          224144, -- Blood Flow (ml/min)\n          228004, -- Citrate (ACD-A)\n          225183, -- Current Goal\n          225977, -- Dialysate Fluid\n          224154, -- Dialysate Rate\n          224151, -- Effluent Pressure\n          224150, -- Filter Pressure\n          225958, -- Heparin Concentration (units/mL)\n          224145, -- Heparin Dose (per hour)\n          224191, -- Hourly Patient Fluid Removal\n          228005, -- PBP (Prefilter) Replacement Rate\n          228006, -- Post Filter Replacement Rate\n          225976, -- Replacement Fluid\n          224153, -- Replacement Rate\n          224152, -- Return Pressure\n          226457  -- Ultrafiltrate Output\n        ) then 1\n      when ce.itemid in\n        (\n        29,  -- Access mmHg\n        173, -- Effluent Press mmHg\n        192, -- Filter Pressure mmHg\n        624, -- Return Pressure mmHg\n        79, -- Blood Flow ml/min\n        142, -- Current Goal\n        146, -- Dialysate Flow ml/hr\n        611, -- Replace Rate ml/hr\n        5683 -- Hourly PFR\n        ) then 1\n      when ce.itemid = 665 and value in ('Active','Clot Increasing','Clots Present','No Clot Present')\n         then 1\n      when ce.itemid = 147 and value = 'Yes'\n         then 1\n      else 0 end)\n      as RRT\n  -- Below indicates that a new instance of CRRT has started\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('New Filter','Reinitiated')\n        then 1\n      when ce.itemid = 665 and value in ('Initiated')\n        then 1\n    else 0\n   end ) as RRT_start\n  -- Below indicates that the current instance of CRRT has ended\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('Discontinued','Recirculating')\n        then 1\n      -- the only value like DC is \"DC'D\", use like to avoid apostrophe\n      when ce.itemid = 665 and (value = 'Clotted' OR value LIKE 'DC%')\n        then 1\n      -- Reason for CRRT filter change\n      when ce.itemid = 225956\n        then 1\n    else 0\n   end ) as RRT_end\n  FROM chartevents ce\n  where ce.itemid in\n  (\n    -- MetaVision ITEMIDs\n    -- Below require special handling\n    224146, -- System Integrity\n    225956,  -- Reason for CRRT Filter Change\n    -- Below are settings which indicate CRRT is started/continuing\n    224149, -- Access Pressure\n    224144, -- Blood Flow (ml/min)\n    228004, -- Citrate (ACD-A)\n    225183, -- Current Goal\n    225977, -- Dialysate Fluid\n    224154, -- Dialysate Rate\n    224151, -- Effluent Pressure\n    224150, -- Filter Pressure\n    225958, -- Heparin Concentration (units/mL)\n    224145, -- Heparin Dose (per hour)\n    224191, -- Hourly Patient Fluid Removal\n    228005, -- PBP (Prefilter) Replacement Rate\n    228006, -- Post Filter Replacement Rate\n    225976, -- Replacement Fluid\n    224153, -- Replacement Rate\n    224152, -- Return Pressure\n    226457, -- Ultrafiltrate Output\n    -- CareVue ITEMIDs\n    -- Below require special handling\n    665,  -- System integrity\n    147, -- Dialysate Infusing\n    612, -- Replace.Fluid Infuse\n    -- Below are settings which indicate CRRT is started/continuing\n    29,  -- Access mmHg\n    173, -- Effluent Press mmHg\n    192, -- Filter Pressure mmHg\n    624, -- Return Pressure mmHg\n    142, -- Current Goal\n    79, -- Blood Flow ml/min\n    146, -- Dialysate Flow ml/hr\n    611, -- Replace Rate ml/hr\n    5683 -- Hourly PFR\n  )\n  and ce.value is not null\n  and coalesce(ce.valuenum,1) != 0 -- non-zero rates/values\n  group by icustay_id, charttime\n)\n-- create various lagged variables for future query\n, vd_lag AS\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER W AS charttime_prev_row\n    , charttime\n    , RRT\n    , RRT_start\n    , RRT_end\n    , LAG(RRT_end, 1) OVER W AS rrt_ended_prev_row\n  FROM crrt_settings\n  WINDOW w AS \n  (\n    partition by icustay_id, case when RRT=1 or RRT_end=1 then 1 else 0 end\n    order by charttime\n  )\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime\n      , RRT\n      , RRT_start\n      , RRT_end\n\n      -- now we determine if the current event is a new instantiation\n      , case\n          when RRT_start = 1\n            then 1\n        -- if there is an end flag, we mark any subsequent event as new\n          when RRT_end = 1\n            -- note the end is *not* a new event, the *subsequent* row is\n            -- so here we output 0\n            then 0\n          when rrt_ended_prev_row = 1\n            then 1\n            -- if there is less than 2 hours between CRRT settings, we do not treat this as a new CRRT event\n          when DATETIME_DIFF(charttime, charttime_prev_row, 'HOUR') <= 2\n            then 0\n        else 1\n      end as NewCRRT\n  -- use the temp table with only settings FROM chartevents\n  FROM vd_lag\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new CRRT\n  -- this results in a monotonically increasing integer assigned to each CRRT\n  , case when RRT_start = 1 or RRT=1 or RRT_end = 1 then\n      SUM( NewCRRT )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as num\n  --- now we convert CHARTTIME of CRRT settings into durations\n  from vd1\n  -- now we can isolate to just rows with settings\n  -- (before we had rows with start/end flags)\n  -- this removes any null values for NewCRRT\n  where\n    RRT_start = 1 or RRT = 1 or RRT_end = 1\n)\n-- create the durations for each CRRT instance\n, fin as\n(\nselect icustay_id\n  , num\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n \t, DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  -- add durations\nfrom vd2\ngroup by icustay_id, num\nhaving min(charttime) != max(charttime)\n)\nselect icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as num\n  , starttime, endtime, duration_hours\nfrom fin\norder by icustay_id, num\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"crrt_durations__dbt_tmp\"\n  as (\n    with crrt_settings as\n(\n  select ce.icustay_id, ce.charttime\n  , max(\n      case\n        when ce.itemid in\n        (\n          224149, -- Access Pressure\n          224144, -- Blood Flow (ml/min)\n          228004, -- Citrate (ACD-A)\n          225183, -- Current Goal\n          225977, -- Dialysate Fluid\n          224154, -- Dialysate Rate\n          224151, -- Effluent Pressure\n          224150, -- Filter Pressure\n          225958, -- Heparin Concentration (units/mL)\n          224145, -- Heparin Dose (per hour)\n          224191, -- Hourly Patient Fluid Removal\n          228005, -- PBP (Prefilter) Replacement Rate\n          228006, -- Post Filter Replacement Rate\n          225976, -- Replacement Fluid\n          224153, -- Replacement Rate\n          224152, -- Return Pressure\n          226457  -- Ultrafiltrate Output\n        ) then 1\n      when ce.itemid in\n        (\n        29,  -- Access mmHg\n        173, -- Effluent Press mmHg\n        192, -- Filter Pressure mmHg\n        624, -- Return Pressure mmHg\n        79, -- Blood Flow ml/min\n        142, -- Current Goal\n        146, -- Dialysate Flow ml/hr\n        611, -- Replace Rate ml/hr\n        5683 -- Hourly PFR\n        ) then 1\n      when ce.itemid = 665 and value in ('Active','Clot Increasing','Clots Present','No Clot Present')\n         then 1\n      when ce.itemid = 147 and value = 'Yes'\n         then 1\n      else 0 end)\n      as RRT\n  -- Below indicates that a new instance of CRRT has started\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('New Filter','Reinitiated')\n        then 1\n      when ce.itemid = 665 and value in ('Initiated')\n        then 1\n    else 0\n   end ) as RRT_start\n  -- Below indicates that the current instance of CRRT has ended\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('Discontinued','Recirculating')\n        then 1\n      -- the only value like DC is \"DC'D\", use like to avoid apostrophe\n      when ce.itemid = 665 and (value = 'Clotted' OR value LIKE 'DC%')\n        then 1\n      -- Reason for CRRT filter change\n      when ce.itemid = 225956\n        then 1\n    else 0\n   end ) as RRT_end\n  FROM chartevents ce\n  where ce.itemid in\n  (\n    -- MetaVision ITEMIDs\n    -- Below require special handling\n    224146, -- System Integrity\n    225956,  -- Reason for CRRT Filter Change\n    -- Below are settings which indicate CRRT is started/continuing\n    224149, -- Access Pressure\n    224144, -- Blood Flow (ml/min)\n    228004, -- Citrate (ACD-A)\n    225183, -- Current Goal\n    225977, -- Dialysate Fluid\n    224154, -- Dialysate Rate\n    224151, -- Effluent Pressure\n    224150, -- Filter Pressure\n    225958, -- Heparin Concentration (units/mL)\n    224145, -- Heparin Dose (per hour)\n    224191, -- Hourly Patient Fluid Removal\n    228005, -- PBP (Prefilter) Replacement Rate\n    228006, -- Post Filter Replacement Rate\n    225976, -- Replacement Fluid\n    224153, -- Replacement Rate\n    224152, -- Return Pressure\n    226457, -- Ultrafiltrate Output\n    -- CareVue ITEMIDs\n    -- Below require special handling\n    665,  -- System integrity\n    147, -- Dialysate Infusing\n    612, -- Replace.Fluid Infuse\n    -- Below are settings which indicate CRRT is started/continuing\n    29,  -- Access mmHg\n    173, -- Effluent Press mmHg\n    192, -- Filter Pressure mmHg\n    624, -- Return Pressure mmHg\n    142, -- Current Goal\n    79, -- Blood Flow ml/min\n    146, -- Dialysate Flow ml/hr\n    611, -- Replace Rate ml/hr\n    5683 -- Hourly PFR\n  )\n  and ce.value is not null\n  and coalesce(ce.valuenum,1) != 0 -- non-zero rates/values\n  group by icustay_id, charttime\n)\n-- create various lagged variables for future query\n, vd_lag AS\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER W AS charttime_prev_row\n    , charttime\n    , RRT\n    , RRT_start\n    , RRT_end\n    , LAG(RRT_end, 1) OVER W AS rrt_ended_prev_row\n  FROM crrt_settings\n  WINDOW w AS \n  (\n    partition by icustay_id, case when RRT=1 or RRT_end=1 then 1 else 0 end\n    order by charttime\n  )\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime\n      , RRT\n      , RRT_start\n      , RRT_end\n\n      -- now we determine if the current event is a new instantiation\n      , case\n          when RRT_start = 1\n            then 1\n        -- if there is an end flag, we mark any subsequent event as new\n          when RRT_end = 1\n            -- note the end is *not* a new event, the *subsequent* row is\n            -- so here we output 0\n            then 0\n          when rrt_ended_prev_row = 1\n            then 1\n            -- if there is less than 2 hours between CRRT settings, we do not treat this as a new CRRT event\n          when DATETIME_DIFF(charttime, charttime_prev_row, 'HOUR') <= 2\n            then 0\n        else 1\n      end as NewCRRT\n  -- use the temp table with only settings FROM chartevents\n  FROM vd_lag\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new CRRT\n  -- this results in a monotonically increasing integer assigned to each CRRT\n  , case when RRT_start = 1 or RRT=1 or RRT_end = 1 then\n      SUM( NewCRRT )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as num\n  --- now we convert CHARTTIME of CRRT settings into durations\n  from vd1\n  -- now we can isolate to just rows with settings\n  -- (before we had rows with start/end flags)\n  -- this removes any null values for NewCRRT\n  where\n    RRT_start = 1 or RRT = 1 or RRT_end = 1\n)\n-- create the durations for each CRRT instance\n, fin as\n(\nselect icustay_id\n  , num\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n \t, DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  -- add durations\nfrom vd2\ngroup by icustay_id, num\nhaving min(charttime) != max(charttime)\n)\nselect icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as num\n  , starttime, endtime, duration_hours\nfrom fin\norder by icustay_id, num\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.353343Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.365147Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.370424Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\nalter table \"postgres\".\"public\".\"crrt_durations\" rename to \"crrt_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\nalter table \"postgres\".\"public\".\"crrt_durations\" rename to \"crrt_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.371098Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.372699Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.379868Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\nalter table \"postgres\".\"public\".\"crrt_durations__dbt_tmp\" rename to \"crrt_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\nalter table \"postgres\".\"public\".\"crrt_durations__dbt_tmp\" rename to \"crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.380564Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.381173Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.385639Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.386456Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.387124Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.389101Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crrt_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crrt_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.391575Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crrt_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"crrt_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crrt_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"crrt_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.391794Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.394012Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.397335Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crrt_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.397588Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c993400>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8c993400>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.398423Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.crrt_durations", "execution_time": 0, "index": 13, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": "2022-07-18T00:10:05.325530", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "13 of 107 OK created table model public.crrt_durations ......................... [\u001b[32mSELECT 0\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.398908Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:05.399359", "node_name": "crrt_durations", "node_path": "durations/crrt_durations.sql", "node_started_at": "2022-07-18T00:10:05.325530", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.crrt_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.07129478454589844, "failures": null, "message": "SELECT 0", "node": {"alias": "crrt_durations", "build_path": "target/run/mimic/models/durations/crrt_durations.sql", "checksum": {"checksum": "90e5c3a3713ad73e7073474b3ea4279720aa7e2bee7add0a520a4761fa555425", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/crrt_durations.sql", "compiled_sql": "with crrt_settings as\n(\n  select ce.icustay_id, ce.charttime\n  , max(\n      case\n        when ce.itemid in\n        (\n          224149, -- Access Pressure\n          224144, -- Blood Flow (ml/min)\n          228004, -- Citrate (ACD-A)\n          225183, -- Current Goal\n          225977, -- Dialysate Fluid\n          224154, -- Dialysate Rate\n          224151, -- Effluent Pressure\n          224150, -- Filter Pressure\n          225958, -- Heparin Concentration (units/mL)\n          224145, -- Heparin Dose (per hour)\n          224191, -- Hourly Patient Fluid Removal\n          228005, -- PBP (Prefilter) Replacement Rate\n          228006, -- Post Filter Replacement Rate\n          225976, -- Replacement Fluid\n          224153, -- Replacement Rate\n          224152, -- Return Pressure\n          226457  -- Ultrafiltrate Output\n        ) then 1\n      when ce.itemid in\n        (\n        29,  -- Access mmHg\n        173, -- Effluent Press mmHg\n        192, -- Filter Pressure mmHg\n        624, -- Return Pressure mmHg\n        79, -- Blood Flow ml/min\n        142, -- Current Goal\n        146, -- Dialysate Flow ml/hr\n        611, -- Replace Rate ml/hr\n        5683 -- Hourly PFR\n        ) then 1\n      when ce.itemid = 665 and value in ('Active','Clot Increasing','Clots Present','No Clot Present')\n         then 1\n      when ce.itemid = 147 and value = 'Yes'\n         then 1\n      else 0 end)\n      as RRT\n  -- Below indicates that a new instance of CRRT has started\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('New Filter','Reinitiated')\n        then 1\n      when ce.itemid = 665 and value in ('Initiated')\n        then 1\n    else 0\n   end ) as RRT_start\n  -- Below indicates that the current instance of CRRT has ended\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('Discontinued','Recirculating')\n        then 1\n      -- the only value like DC is \"DC'D\", use like to avoid apostrophe\n      when ce.itemid = 665 and (value = 'Clotted' OR value LIKE 'DC%')\n        then 1\n      -- Reason for CRRT filter change\n      when ce.itemid = 225956\n        then 1\n    else 0\n   end ) as RRT_end\n  FROM chartevents ce\n  where ce.itemid in\n  (\n    -- MetaVision ITEMIDs\n    -- Below require special handling\n    224146, -- System Integrity\n    225956,  -- Reason for CRRT Filter Change\n    -- Below are settings which indicate CRRT is started/continuing\n    224149, -- Access Pressure\n    224144, -- Blood Flow (ml/min)\n    228004, -- Citrate (ACD-A)\n    225183, -- Current Goal\n    225977, -- Dialysate Fluid\n    224154, -- Dialysate Rate\n    224151, -- Effluent Pressure\n    224150, -- Filter Pressure\n    225958, -- Heparin Concentration (units/mL)\n    224145, -- Heparin Dose (per hour)\n    224191, -- Hourly Patient Fluid Removal\n    228005, -- PBP (Prefilter) Replacement Rate\n    228006, -- Post Filter Replacement Rate\n    225976, -- Replacement Fluid\n    224153, -- Replacement Rate\n    224152, -- Return Pressure\n    226457, -- Ultrafiltrate Output\n    -- CareVue ITEMIDs\n    -- Below require special handling\n    665,  -- System integrity\n    147, -- Dialysate Infusing\n    612, -- Replace.Fluid Infuse\n    -- Below are settings which indicate CRRT is started/continuing\n    29,  -- Access mmHg\n    173, -- Effluent Press mmHg\n    192, -- Filter Pressure mmHg\n    624, -- Return Pressure mmHg\n    142, -- Current Goal\n    79, -- Blood Flow ml/min\n    146, -- Dialysate Flow ml/hr\n    611, -- Replace Rate ml/hr\n    5683 -- Hourly PFR\n  )\n  and ce.value is not null\n  and coalesce(ce.valuenum,1) != 0 -- non-zero rates/values\n  group by icustay_id, charttime\n)\n-- create various lagged variables for future query\n, vd_lag AS\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER W AS charttime_prev_row\n    , charttime\n    , RRT\n    , RRT_start\n    , RRT_end\n    , LAG(RRT_end, 1) OVER W AS rrt_ended_prev_row\n  FROM crrt_settings\n  WINDOW w AS \n  (\n    partition by icustay_id, case when RRT=1 or RRT_end=1 then 1 else 0 end\n    order by charttime\n  )\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime\n      , RRT\n      , RRT_start\n      , RRT_end\n\n      -- now we determine if the current event is a new instantiation\n      , case\n          when RRT_start = 1\n            then 1\n        -- if there is an end flag, we mark any subsequent event as new\n          when RRT_end = 1\n            -- note the end is *not* a new event, the *subsequent* row is\n            -- so here we output 0\n            then 0\n          when rrt_ended_prev_row = 1\n            then 1\n            -- if there is less than 2 hours between CRRT settings, we do not treat this as a new CRRT event\n          when DATETIME_DIFF(charttime, charttime_prev_row, 'HOUR') <= 2\n            then 0\n        else 1\n      end as NewCRRT\n  -- use the temp table with only settings FROM chartevents\n  FROM vd_lag\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new CRRT\n  -- this results in a monotonically increasing integer assigned to each CRRT\n  , case when RRT_start = 1 or RRT=1 or RRT_end = 1 then\n      SUM( NewCRRT )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as num\n  --- now we convert CHARTTIME of CRRT settings into durations\n  from vd1\n  -- now we can isolate to just rows with settings\n  -- (before we had rows with start/end flags)\n  -- this removes any null values for NewCRRT\n  where\n    RRT_start = 1 or RRT = 1 or RRT_end = 1\n)\n-- create the durations for each CRRT instance\n, fin as\n(\nselect icustay_id\n  , num\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n \t, DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  -- add durations\nfrom vd2\ngroup by icustay_id, num\nhaving min(charttime) != max(charttime)\n)\nselect icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as num\n  , starttime, endtime, duration_hours\nfrom fin\norder by icustay_id, num", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4694195, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "crrt_durations"], "meta": {}, "name": "crrt_durations", "original_file_path": "models/durations/crrt_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/crrt_durations.sql", "raw_sql": "with crrt_settings as\n(\n  select ce.icustay_id, ce.charttime\n  , max(\n      case\n        when ce.itemid in\n        (\n          224149, -- Access Pressure\n          224144, -- Blood Flow (ml/min)\n          228004, -- Citrate (ACD-A)\n          225183, -- Current Goal\n          225977, -- Dialysate Fluid\n          224154, -- Dialysate Rate\n          224151, -- Effluent Pressure\n          224150, -- Filter Pressure\n          225958, -- Heparin Concentration (units/mL)\n          224145, -- Heparin Dose (per hour)\n          224191, -- Hourly Patient Fluid Removal\n          228005, -- PBP (Prefilter) Replacement Rate\n          228006, -- Post Filter Replacement Rate\n          225976, -- Replacement Fluid\n          224153, -- Replacement Rate\n          224152, -- Return Pressure\n          226457  -- Ultrafiltrate Output\n        ) then 1\n      when ce.itemid in\n        (\n        29,  -- Access mmHg\n        173, -- Effluent Press mmHg\n        192, -- Filter Pressure mmHg\n        624, -- Return Pressure mmHg\n        79, -- Blood Flow ml/min\n        142, -- Current Goal\n        146, -- Dialysate Flow ml/hr\n        611, -- Replace Rate ml/hr\n        5683 -- Hourly PFR\n        ) then 1\n      when ce.itemid = 665 and value in ('Active','Clot Increasing','Clots Present','No Clot Present')\n         then 1\n      when ce.itemid = 147 and value = 'Yes'\n         then 1\n      else 0 end)\n      as RRT\n  -- Below indicates that a new instance of CRRT has started\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('New Filter','Reinitiated')\n        then 1\n      when ce.itemid = 665 and value in ('Initiated')\n        then 1\n    else 0\n   end ) as RRT_start\n  -- Below indicates that the current instance of CRRT has ended\n  , max(\n    case\n      -- System Integrity\n      when ce.itemid = 224146 and value in ('Discontinued','Recirculating')\n        then 1\n      -- the only value like DC is \"DC'D\", use like to avoid apostrophe\n      when ce.itemid = 665 and (value = 'Clotted' OR value LIKE 'DC%')\n        then 1\n      -- Reason for CRRT filter change\n      when ce.itemid = 225956\n        then 1\n    else 0\n   end ) as RRT_end\n  FROM chartevents ce\n  where ce.itemid in\n  (\n    -- MetaVision ITEMIDs\n    -- Below require special handling\n    224146, -- System Integrity\n    225956,  -- Reason for CRRT Filter Change\n    -- Below are settings which indicate CRRT is started/continuing\n    224149, -- Access Pressure\n    224144, -- Blood Flow (ml/min)\n    228004, -- Citrate (ACD-A)\n    225183, -- Current Goal\n    225977, -- Dialysate Fluid\n    224154, -- Dialysate Rate\n    224151, -- Effluent Pressure\n    224150, -- Filter Pressure\n    225958, -- Heparin Concentration (units/mL)\n    224145, -- Heparin Dose (per hour)\n    224191, -- Hourly Patient Fluid Removal\n    228005, -- PBP (Prefilter) Replacement Rate\n    228006, -- Post Filter Replacement Rate\n    225976, -- Replacement Fluid\n    224153, -- Replacement Rate\n    224152, -- Return Pressure\n    226457, -- Ultrafiltrate Output\n    -- CareVue ITEMIDs\n    -- Below require special handling\n    665,  -- System integrity\n    147, -- Dialysate Infusing\n    612, -- Replace.Fluid Infuse\n    -- Below are settings which indicate CRRT is started/continuing\n    29,  -- Access mmHg\n    173, -- Effluent Press mmHg\n    192, -- Filter Pressure mmHg\n    624, -- Return Pressure mmHg\n    142, -- Current Goal\n    79, -- Blood Flow ml/min\n    146, -- Dialysate Flow ml/hr\n    611, -- Replace Rate ml/hr\n    5683 -- Hourly PFR\n  )\n  and ce.value is not null\n  and coalesce(ce.valuenum,1) != 0 -- non-zero rates/values\n  group by icustay_id, charttime\n)\n-- create various lagged variables for future query\n, vd_lag AS\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime\n    , LAG(CHARTTIME, 1) OVER W AS charttime_prev_row\n    , charttime\n    , RRT\n    , RRT_start\n    , RRT_end\n    , LAG(RRT_end, 1) OVER W AS rrt_ended_prev_row\n  FROM crrt_settings\n  WINDOW w AS \n  (\n    partition by icustay_id, case when RRT=1 or RRT_end=1 then 1 else 0 end\n    order by charttime\n  )\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime\n      , RRT\n      , RRT_start\n      , RRT_end\n\n      -- now we determine if the current event is a new instantiation\n      , case\n          when RRT_start = 1\n            then 1\n        -- if there is an end flag, we mark any subsequent event as new\n          when RRT_end = 1\n            -- note the end is *not* a new event, the *subsequent* row is\n            -- so here we output 0\n            then 0\n          when rrt_ended_prev_row = 1\n            then 1\n            -- if there is less than 2 hours between CRRT settings, we do not treat this as a new CRRT event\n          when DATETIME_DIFF(charttime, charttime_prev_row, 'HOUR') <= 2\n            then 0\n        else 1\n      end as NewCRRT\n  -- use the temp table with only settings FROM chartevents\n  FROM vd_lag\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new CRRT\n  -- this results in a monotonically increasing integer assigned to each CRRT\n  , case when RRT_start = 1 or RRT=1 or RRT_end = 1 then\n      SUM( NewCRRT )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as num\n  --- now we convert CHARTTIME of CRRT settings into durations\n  from vd1\n  -- now we can isolate to just rows with settings\n  -- (before we had rows with start/end flags)\n  -- this removes any null values for NewCRRT\n  where\n    RRT_start = 1 or RRT = 1 or RRT_end = 1\n)\n-- create the durations for each CRRT instance\n, fin as\n(\nselect icustay_id\n  , num\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n \t, DATETIME_DIFF(max(charttime), min(charttime), 'HOUR') AS duration_hours\n  -- add durations\nfrom vd2\ngroup by icustay_id, num\nhaving min(charttime) != max(charttime)\n)\nselect icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as num\n  , starttime, endtime, duration_hours\nfrom fin\norder by icustay_id, num", "refs": [], "relation_name": "\"postgres\".\"public\".\"crrt_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.crrt_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:05.330439Z", "name": "compile", "started_at": "2022-07-18T00:10:05.328188Z"}, {"completed_at": "2022-07-18T00:10:05.397306Z", "name": "execute", "started_at": "2022-07-18T00:10:05.331243Z"}]}, "unique_id": "model.mimic.crrt_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.crrt_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.399510Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": "2022-07-18T00:10:05.399944", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.crystalloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.400042Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.crystalloid_bolus", "index": 14, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": "2022-07-18T00:10:05.399944", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "14 of 107 START table model public.crystalloid_bolus ........................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.400740Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.401374Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": "2022-07-18T00:10:05.399944", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.crystalloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.401728Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.crystalloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.402190Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.404971Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.406205Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.crystalloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.406571Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.crystalloid_bolus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.415523Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.416201Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.416571Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.416866Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.423816Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.424118Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\n\n\n  create  table \"postgres\".\"public\".\"crystalloid_bolus__dbt_tmp\"\n  as (\n    with t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    -- 225943 Solution\n    225158, -- NaCl 0.9%\n    225828, -- LR\n    225944, -- Sterile Water\n    225797, -- Free Water\n\t  225159, -- NaCl 0.45%\n\t  -- 225161, -- NaCl 3% (Hypertonic Saline)\n\t  225823, -- D5 1/2NS\n\t  225825, -- D5NS\n\t  225827, -- D5LR\n\t  225941, -- D5 1/4NS\n\t  226089 -- Piggyback\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs appear with a null rate IFF endtime=starttime + 1 minute\n  -- so it is sufficient to:\n  --    (1) check the rate is > 240 if it exists or\n  --    (2) ensure the rate is null and amount > 240 ml\n    (\n      (mv.rate is not null and mv.rateuom = 'mL/hour' and mv.rate > 248)\n      OR (mv.rate is not null and mv.rateuom = 'mL/min' and mv.rate > (248/60.0))\n      OR (mv.rate is null and mv.amountuom = 'L' and mv.amount > 0.248)\n      OR (mv.rate is null and mv.amountuom = 'ml' and mv.amount > 248)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n    30015 -- \"D5/.45NS\" -- mixed colloids and crystalloids\n  , 30018 --\t.9% Normal Saline\n  , 30020 -- .45% Normal Saline\n  , 30021 --\tLactated Ringers\n  , 30058 --\tFree Water Bolus\n  , 30060 -- D5NS\n  , 30061 -- D5RL\n  , 30063 --\tIV Piggyback\n  , 30065 --\tSterile Water\n  -- , 30143 -- 3% Normal Saline\n  , 30159 -- D5 Ringers Lact.\n  , 30160 -- D5 Normal Saline\n  , 30169 --\tSterile H20_GU\n  , 30190 -- NS .9%\n  , 40850 --\tns bolus\n  , 41491 --\tfluid bolus\n  , 42639 --\tbolus\n  , 42187 --\tfree h20\n  , 43819 --\t1:1 NS Repletion.\n  , 41430 --\tfree water boluses\n  , 40712 --\tfree H20\n  , 44160 --\tBOLUS\n  , 42383 --\tcc for cc replace\n  , 42297 --\tFluid bolus\n  , 42453 --\tFluid Bolus\n  , 40872 --\tfree water\n  , 41915 --\tFREE WATER\n  , 41490 --\tNS bolus\n  , 46501 --\tH2O Bolus\n  , 45045 --\tWaterBolus\n  , 41984 --\tFREE H20\n  , 41371 --\tns fluid bolus\n  , 41582 --\tfree h20 bolus\n  , 41322 --\trl bolus\n  , 40778 --\tFree H2O\n  , 41896 --\tivf boluses\n  , 41428 --\tns .9% bolus\n  , 43936 --\tFREE WATER BOLUSES\n  , 44200 --\tFLUID BOLUS\n  , 41619 --\tfrfee water boluses\n  , 40424 --\tfree H2O\n  , 41457 --\tFree H20 intake\n  , 41581 --\tWater bolus\n  , 42844 --\tNS fluid bolus\n  , 42429 --\tFree water\n  , 41356 --\tIV Bolus\n  , 40532 --\tFREE H2O\n  , 42548 --\tNS Bolus\n  , 44184 --\tLR Bolus\n  , 44521 --\tLR bolus\n  , 44741 --\tNS FLUID BOLUS\n  , 44126 --\tfl bolus\n  , 44110 --\tRL BOLUS\n  , 44633 --\tns boluses\n  , 44983 --\tBolus NS\n  , 44815 --\tLR BOLUS\n  , 43986 --\tiv bolus\n  , 45079 --\t500 cc ns bolus\n  , 46781 --\tlr bolus\n  , 45155 --\tns cc/cc replacement\n  , 43909 --\tH20 BOlus\n  , 41467 --\tNS IV bolus\n  , 44367 --\tLR\n  , 41743 --\twater bolus\n  , 40423 --\tBolus\n  , 44263 --\tfluid bolus ns\n  , 42749 --\tfluid bolus NS\n  , 45480 --\t500cc ns bolus\n  , 44491 --\t.9NS bolus\n  , 41695 --\tNS fluid boluses\n  , 46169 --\tfree water bolus.\n  , 41580 --\tfree h2o bolus\n  , 41392 --\tns b\n  , 45989 --\tNS Fluid Bolus\n  , 45137 --\tNS cc/cc\n  , 45154 --\tFree H20 bolus\n  , 44053 --\tnormal saline bolus\n  , 41416 --\tfree h2o boluses\n  , 44761 --\tFree H20\n  , 41237 --\tns fluid boluses\n  , 44426 --\tbolus ns\n  , 43975 --\tFREE H20 BOLUSES\n  , 44894 --\tN/s 500 ml bolus\n  , 41380 --\tnsbolus\n  , 42671 --\tfree h2o\n  )\n  and cv.amount > 248\n  and cv.amount <= 2000\n  and cv.amountuom = 'ml'\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 248\ngroup by t1.icustay_id, t1.charttime\nUNION\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\norder by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\n\n\n  create  table \"postgres\".\"public\".\"crystalloid_bolus__dbt_tmp\"\n  as (\n    with t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    -- 225943 Solution\n    225158, -- NaCl 0.9%\n    225828, -- LR\n    225944, -- Sterile Water\n    225797, -- Free Water\n\t  225159, -- NaCl 0.45%\n\t  -- 225161, -- NaCl 3% (Hypertonic Saline)\n\t  225823, -- D5 1/2NS\n\t  225825, -- D5NS\n\t  225827, -- D5LR\n\t  225941, -- D5 1/4NS\n\t  226089 -- Piggyback\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs appear with a null rate IFF endtime=starttime + 1 minute\n  -- so it is sufficient to:\n  --    (1) check the rate is > 240 if it exists or\n  --    (2) ensure the rate is null and amount > 240 ml\n    (\n      (mv.rate is not null and mv.rateuom = 'mL/hour' and mv.rate > 248)\n      OR (mv.rate is not null and mv.rateuom = 'mL/min' and mv.rate > (248/60.0))\n      OR (mv.rate is null and mv.amountuom = 'L' and mv.amount > 0.248)\n      OR (mv.rate is null and mv.amountuom = 'ml' and mv.amount > 248)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n    30015 -- \"D5/.45NS\" -- mixed colloids and crystalloids\n  , 30018 --\t.9% Normal Saline\n  , 30020 -- .45% Normal Saline\n  , 30021 --\tLactated Ringers\n  , 30058 --\tFree Water Bolus\n  , 30060 -- D5NS\n  , 30061 -- D5RL\n  , 30063 --\tIV Piggyback\n  , 30065 --\tSterile Water\n  -- , 30143 -- 3% Normal Saline\n  , 30159 -- D5 Ringers Lact.\n  , 30160 -- D5 Normal Saline\n  , 30169 --\tSterile H20_GU\n  , 30190 -- NS .9%\n  , 40850 --\tns bolus\n  , 41491 --\tfluid bolus\n  , 42639 --\tbolus\n  , 42187 --\tfree h20\n  , 43819 --\t1:1 NS Repletion.\n  , 41430 --\tfree water boluses\n  , 40712 --\tfree H20\n  , 44160 --\tBOLUS\n  , 42383 --\tcc for cc replace\n  , 42297 --\tFluid bolus\n  , 42453 --\tFluid Bolus\n  , 40872 --\tfree water\n  , 41915 --\tFREE WATER\n  , 41490 --\tNS bolus\n  , 46501 --\tH2O Bolus\n  , 45045 --\tWaterBolus\n  , 41984 --\tFREE H20\n  , 41371 --\tns fluid bolus\n  , 41582 --\tfree h20 bolus\n  , 41322 --\trl bolus\n  , 40778 --\tFree H2O\n  , 41896 --\tivf boluses\n  , 41428 --\tns .9% bolus\n  , 43936 --\tFREE WATER BOLUSES\n  , 44200 --\tFLUID BOLUS\n  , 41619 --\tfrfee water boluses\n  , 40424 --\tfree H2O\n  , 41457 --\tFree H20 intake\n  , 41581 --\tWater bolus\n  , 42844 --\tNS fluid bolus\n  , 42429 --\tFree water\n  , 41356 --\tIV Bolus\n  , 40532 --\tFREE H2O\n  , 42548 --\tNS Bolus\n  , 44184 --\tLR Bolus\n  , 44521 --\tLR bolus\n  , 44741 --\tNS FLUID BOLUS\n  , 44126 --\tfl bolus\n  , 44110 --\tRL BOLUS\n  , 44633 --\tns boluses\n  , 44983 --\tBolus NS\n  , 44815 --\tLR BOLUS\n  , 43986 --\tiv bolus\n  , 45079 --\t500 cc ns bolus\n  , 46781 --\tlr bolus\n  , 45155 --\tns cc/cc replacement\n  , 43909 --\tH20 BOlus\n  , 41467 --\tNS IV bolus\n  , 44367 --\tLR\n  , 41743 --\twater bolus\n  , 40423 --\tBolus\n  , 44263 --\tfluid bolus ns\n  , 42749 --\tfluid bolus NS\n  , 45480 --\t500cc ns bolus\n  , 44491 --\t.9NS bolus\n  , 41695 --\tNS fluid boluses\n  , 46169 --\tfree water bolus.\n  , 41580 --\tfree h2o bolus\n  , 41392 --\tns b\n  , 45989 --\tNS Fluid Bolus\n  , 45137 --\tNS cc/cc\n  , 45154 --\tFree H20 bolus\n  , 44053 --\tnormal saline bolus\n  , 41416 --\tfree h2o boluses\n  , 44761 --\tFree H20\n  , 41237 --\tns fluid boluses\n  , 44426 --\tbolus ns\n  , 43975 --\tFREE H20 BOLUSES\n  , 44894 --\tN/s 500 ml bolus\n  , 41380 --\tnsbolus\n  , 42671 --\tfree h2o\n  )\n  and cv.amount > 248\n  and cv.amount <= 2000\n  and cv.amountuom = 'ml'\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 248\ngroup by t1.icustay_id, t1.charttime\nUNION\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\norder by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:05.424277Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 4.2, "status": "SELECT 155976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 155976 in 4.2 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.627051Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.634178Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\nalter table \"postgres\".\"public\".\"crystalloid_bolus\" rename to \"crystalloid_bolus__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\nalter table \"postgres\".\"public\".\"crystalloid_bolus\" rename to \"crystalloid_bolus__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.634492Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.635886Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.640454Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\nalter table \"postgres\".\"public\".\"crystalloid_bolus__dbt_tmp\" rename to \"crystalloid_bolus\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\nalter table \"postgres\".\"public\".\"crystalloid_bolus__dbt_tmp\" rename to \"crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.640683Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.641410Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.644326Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.644532Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.644786Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.660078Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.crystalloid_bolus", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.crystalloid_bolus\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.662959Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.crystalloid_bolus", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\ndrop table if exists \"postgres\".\"public\".\"crystalloid_bolus__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.crystalloid_bolus\"} */\ndrop table if exists \"postgres\".\"public\".\"crystalloid_bolus__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.663202Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.667352Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.670307Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.crystalloid_bolus: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.670571Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887ba4c0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f887ba4c0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.671356Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.crystalloid_bolus", "execution_time": 4, "index": 14, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": "2022-07-18T00:10:05.399944", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "status": "SELECT 155976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "14 of 107 OK created table model public.crystalloid_bolus ...................... [\u001b[32mSELECT 155976\u001b[0m in 4.27s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.671871Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:09.672336", "node_name": "crystalloid_bolus", "node_path": "fluid_balance/crystalloid_bolus.sql", "node_started_at": "2022-07-18T00:10:05.399944", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.crystalloid_bolus"}, "run_result": {"adapter_response": {"_message": "SELECT 155976", "code": "SELECT", "rows_affected": 155976}, "agate_table": null, "execution_time": 4.270107984542847, "failures": null, "message": "SELECT 155976", "node": {"alias": "crystalloid_bolus", "build_path": "target/run/mimic/models/fluid_balance/crystalloid_bolus.sql", "checksum": {"checksum": "ffefa9659e230a8e125b6a9f2b89e43bd29132095f645535308fd897d17d90d2", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/fluid_balance/crystalloid_bolus.sql", "compiled_sql": "with t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    -- 225943 Solution\n    225158, -- NaCl 0.9%\n    225828, -- LR\n    225944, -- Sterile Water\n    225797, -- Free Water\n\t  225159, -- NaCl 0.45%\n\t  -- 225161, -- NaCl 3% (Hypertonic Saline)\n\t  225823, -- D5 1/2NS\n\t  225825, -- D5NS\n\t  225827, -- D5LR\n\t  225941, -- D5 1/4NS\n\t  226089 -- Piggyback\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs appear with a null rate IFF endtime=starttime + 1 minute\n  -- so it is sufficient to:\n  --    (1) check the rate is > 240 if it exists or\n  --    (2) ensure the rate is null and amount > 240 ml\n    (\n      (mv.rate is not null and mv.rateuom = 'mL/hour' and mv.rate > 248)\n      OR (mv.rate is not null and mv.rateuom = 'mL/min' and mv.rate > (248/60.0))\n      OR (mv.rate is null and mv.amountuom = 'L' and mv.amount > 0.248)\n      OR (mv.rate is null and mv.amountuom = 'ml' and mv.amount > 248)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n    30015 -- \"D5/.45NS\" -- mixed colloids and crystalloids\n  , 30018 --\t.9% Normal Saline\n  , 30020 -- .45% Normal Saline\n  , 30021 --\tLactated Ringers\n  , 30058 --\tFree Water Bolus\n  , 30060 -- D5NS\n  , 30061 -- D5RL\n  , 30063 --\tIV Piggyback\n  , 30065 --\tSterile Water\n  -- , 30143 -- 3% Normal Saline\n  , 30159 -- D5 Ringers Lact.\n  , 30160 -- D5 Normal Saline\n  , 30169 --\tSterile H20_GU\n  , 30190 -- NS .9%\n  , 40850 --\tns bolus\n  , 41491 --\tfluid bolus\n  , 42639 --\tbolus\n  , 42187 --\tfree h20\n  , 43819 --\t1:1 NS Repletion.\n  , 41430 --\tfree water boluses\n  , 40712 --\tfree H20\n  , 44160 --\tBOLUS\n  , 42383 --\tcc for cc replace\n  , 42297 --\tFluid bolus\n  , 42453 --\tFluid Bolus\n  , 40872 --\tfree water\n  , 41915 --\tFREE WATER\n  , 41490 --\tNS bolus\n  , 46501 --\tH2O Bolus\n  , 45045 --\tWaterBolus\n  , 41984 --\tFREE H20\n  , 41371 --\tns fluid bolus\n  , 41582 --\tfree h20 bolus\n  , 41322 --\trl bolus\n  , 40778 --\tFree H2O\n  , 41896 --\tivf boluses\n  , 41428 --\tns .9% bolus\n  , 43936 --\tFREE WATER BOLUSES\n  , 44200 --\tFLUID BOLUS\n  , 41619 --\tfrfee water boluses\n  , 40424 --\tfree H2O\n  , 41457 --\tFree H20 intake\n  , 41581 --\tWater bolus\n  , 42844 --\tNS fluid bolus\n  , 42429 --\tFree water\n  , 41356 --\tIV Bolus\n  , 40532 --\tFREE H2O\n  , 42548 --\tNS Bolus\n  , 44184 --\tLR Bolus\n  , 44521 --\tLR bolus\n  , 44741 --\tNS FLUID BOLUS\n  , 44126 --\tfl bolus\n  , 44110 --\tRL BOLUS\n  , 44633 --\tns boluses\n  , 44983 --\tBolus NS\n  , 44815 --\tLR BOLUS\n  , 43986 --\tiv bolus\n  , 45079 --\t500 cc ns bolus\n  , 46781 --\tlr bolus\n  , 45155 --\tns cc/cc replacement\n  , 43909 --\tH20 BOlus\n  , 41467 --\tNS IV bolus\n  , 44367 --\tLR\n  , 41743 --\twater bolus\n  , 40423 --\tBolus\n  , 44263 --\tfluid bolus ns\n  , 42749 --\tfluid bolus NS\n  , 45480 --\t500cc ns bolus\n  , 44491 --\t.9NS bolus\n  , 41695 --\tNS fluid boluses\n  , 46169 --\tfree water bolus.\n  , 41580 --\tfree h2o bolus\n  , 41392 --\tns b\n  , 45989 --\tNS Fluid Bolus\n  , 45137 --\tNS cc/cc\n  , 45154 --\tFree H20 bolus\n  , 44053 --\tnormal saline bolus\n  , 41416 --\tfree h2o boluses\n  , 44761 --\tFree H20\n  , 41237 --\tns fluid boluses\n  , 44426 --\tbolus ns\n  , 43975 --\tFREE H20 BOLUSES\n  , 44894 --\tN/s 500 ml bolus\n  , 41380 --\tnsbolus\n  , 42671 --\tfree h2o\n  )\n  and cv.amount > 248\n  and cv.amount <= 2000\n  and cv.amountuom = 'ml'\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 248\ngroup by t1.icustay_id, t1.charttime\nUNION\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\norder by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6154497, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "fluid_balance", "crystalloid_bolus"], "meta": {}, "name": "crystalloid_bolus", "original_file_path": "models/fluid_balance/crystalloid_bolus.sql", "package_name": "mimic", "patch_path": null, "path": "fluid_balance/crystalloid_bolus.sql", "raw_sql": "with t1 as\n(\n  select\n    mv.icustay_id\n  , mv.starttime as charttime\n  -- standardize the units to millilitres\n  -- also metavision has floating point precision.. but we only care down to the mL\n  , round(case\n      when mv.amountuom = 'L'\n        then mv.amount * 1000.0\n      when mv.amountuom = 'ml'\n        then mv.amount\n    else null end) as amount\n  from inputevents_mv mv\n  where mv.itemid in\n  (\n    -- 225943 Solution\n    225158, -- NaCl 0.9%\n    225828, -- LR\n    225944, -- Sterile Water\n    225797, -- Free Water\n\t  225159, -- NaCl 0.45%\n\t  -- 225161, -- NaCl 3% (Hypertonic Saline)\n\t  225823, -- D5 1/2NS\n\t  225825, -- D5NS\n\t  225827, -- D5LR\n\t  225941, -- D5 1/4NS\n\t  226089 -- Piggyback\n  )\n  and mv.statusdescription != 'Rewritten'\n  and\n  -- in MetaVision, these ITEMIDs appear with a null rate IFF endtime=starttime + 1 minute\n  -- so it is sufficient to:\n  --    (1) check the rate is > 240 if it exists or\n  --    (2) ensure the rate is null and amount > 240 ml\n    (\n      (mv.rate is not null and mv.rateuom = 'mL/hour' and mv.rate > 248)\n      OR (mv.rate is not null and mv.rateuom = 'mL/min' and mv.rate > (248/60.0))\n      OR (mv.rate is null and mv.amountuom = 'L' and mv.amount > 0.248)\n      OR (mv.rate is null and mv.amountuom = 'ml' and mv.amount > 248)\n    )\n)\n, t2 as\n(\n  select\n    cv.icustay_id\n  , cv.charttime\n  -- carevue always has units in millilitres\n  , round(cv.amount) as amount\n  from inputevents_cv cv\n  where cv.itemid in\n  (\n    30015 -- \"D5/.45NS\" -- mixed colloids and crystalloids\n  , 30018 --\t.9% Normal Saline\n  , 30020 -- .45% Normal Saline\n  , 30021 --\tLactated Ringers\n  , 30058 --\tFree Water Bolus\n  , 30060 -- D5NS\n  , 30061 -- D5RL\n  , 30063 --\tIV Piggyback\n  , 30065 --\tSterile Water\n  -- , 30143 -- 3% Normal Saline\n  , 30159 -- D5 Ringers Lact.\n  , 30160 -- D5 Normal Saline\n  , 30169 --\tSterile H20_GU\n  , 30190 -- NS .9%\n  , 40850 --\tns bolus\n  , 41491 --\tfluid bolus\n  , 42639 --\tbolus\n  , 42187 --\tfree h20\n  , 43819 --\t1:1 NS Repletion.\n  , 41430 --\tfree water boluses\n  , 40712 --\tfree H20\n  , 44160 --\tBOLUS\n  , 42383 --\tcc for cc replace\n  , 42297 --\tFluid bolus\n  , 42453 --\tFluid Bolus\n  , 40872 --\tfree water\n  , 41915 --\tFREE WATER\n  , 41490 --\tNS bolus\n  , 46501 --\tH2O Bolus\n  , 45045 --\tWaterBolus\n  , 41984 --\tFREE H20\n  , 41371 --\tns fluid bolus\n  , 41582 --\tfree h20 bolus\n  , 41322 --\trl bolus\n  , 40778 --\tFree H2O\n  , 41896 --\tivf boluses\n  , 41428 --\tns .9% bolus\n  , 43936 --\tFREE WATER BOLUSES\n  , 44200 --\tFLUID BOLUS\n  , 41619 --\tfrfee water boluses\n  , 40424 --\tfree H2O\n  , 41457 --\tFree H20 intake\n  , 41581 --\tWater bolus\n  , 42844 --\tNS fluid bolus\n  , 42429 --\tFree water\n  , 41356 --\tIV Bolus\n  , 40532 --\tFREE H2O\n  , 42548 --\tNS Bolus\n  , 44184 --\tLR Bolus\n  , 44521 --\tLR bolus\n  , 44741 --\tNS FLUID BOLUS\n  , 44126 --\tfl bolus\n  , 44110 --\tRL BOLUS\n  , 44633 --\tns boluses\n  , 44983 --\tBolus NS\n  , 44815 --\tLR BOLUS\n  , 43986 --\tiv bolus\n  , 45079 --\t500 cc ns bolus\n  , 46781 --\tlr bolus\n  , 45155 --\tns cc/cc replacement\n  , 43909 --\tH20 BOlus\n  , 41467 --\tNS IV bolus\n  , 44367 --\tLR\n  , 41743 --\twater bolus\n  , 40423 --\tBolus\n  , 44263 --\tfluid bolus ns\n  , 42749 --\tfluid bolus NS\n  , 45480 --\t500cc ns bolus\n  , 44491 --\t.9NS bolus\n  , 41695 --\tNS fluid boluses\n  , 46169 --\tfree water bolus.\n  , 41580 --\tfree h2o bolus\n  , 41392 --\tns b\n  , 45989 --\tNS Fluid Bolus\n  , 45137 --\tNS cc/cc\n  , 45154 --\tFree H20 bolus\n  , 44053 --\tnormal saline bolus\n  , 41416 --\tfree h2o boluses\n  , 44761 --\tFree H20\n  , 41237 --\tns fluid boluses\n  , 44426 --\tbolus ns\n  , 43975 --\tFREE H20 BOLUSES\n  , 44894 --\tN/s 500 ml bolus\n  , 41380 --\tnsbolus\n  , 42671 --\tfree h2o\n  )\n  and cv.amount > 248\n  and cv.amount <= 2000\n  and cv.amountuom = 'ml'\n)\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t1\n-- just because the rate was high enough, does *not* mean the final amount was\nwhere amount > 248\ngroup by t1.icustay_id, t1.charttime\nUNION\nselect\n    icustay_id\n  , charttime\n  , sum(amount) as crystalloid_bolus\nfrom t2\ngroup by t2.icustay_id, t2.charttime\norder by icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"crystalloid_bolus\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.crystalloid_bolus", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:05.406064Z", "name": "compile", "started_at": "2022-07-18T00:10:05.402153Z"}, {"completed_at": "2022-07-18T00:10:09.670274Z", "name": "execute", "started_at": "2022-07-18T00:10:05.406699Z"}]}, "unique_id": "model.mimic.crystalloid_bolus"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.crystalloid_bolus", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.672490Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": "2022-07-18T00:10:09.672888", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.dobutamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.672951Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.dobutamine_dose", "index": 15, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": "2022-07-18T00:10:09.672888", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "15 of 107 START table model public.dobutamine_dose ............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.673779Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.674594Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": "2022-07-18T00:10:09.672888", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.dobutamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.675227Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.dobutamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.675637Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.677312Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.678416Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.dobutamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.678789Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.dobutamine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.694695Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.695663Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.695993Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.696267Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.707723Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.708217Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"dobutamine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30042,30306) then 1 else 0 end) as vaso -- dobutamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30042,30306) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30042,30306) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30042,30306) then rate else null end) as vaso_rate\n    , max(case when itemid in (30042,30306) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30042,30306) -- dobutamine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221653 -- dobutamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"dobutamine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30042,30306) then 1 else 0 end) as vaso -- dobutamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30042,30306) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30042,30306) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30042,30306) then rate else null end) as vaso_rate\n    , max(case when itemid in (30042,30306) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30042,30306) -- dobutamine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221653 -- dobutamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:09.708459Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 5.13, "status": "SELECT 6548"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 6548 in 5.13 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.841529Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.848853Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\nalter table \"postgres\".\"public\".\"dobutamine_dose\" rename to \"dobutamine_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\nalter table \"postgres\".\"public\".\"dobutamine_dose\" rename to \"dobutamine_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.849312Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.851098Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.855104Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\nalter table \"postgres\".\"public\".\"dobutamine_dose__dbt_tmp\" rename to \"dobutamine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\nalter table \"postgres\".\"public\".\"dobutamine_dose__dbt_tmp\" rename to \"dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.855341Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.856075Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.859339Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.859581Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.859797Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.861502Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.863419Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"dobutamine_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"dobutamine_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.863632Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.866262Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.869272Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.869510Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d790>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03d790>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.870365Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.dobutamine_dose", "execution_time": 5, "index": 15, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": "2022-07-18T00:10:09.672888", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "status": "SELECT 6548", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "15 of 107 OK created table model public.dobutamine_dose ........................ [\u001b[32mSELECT 6548\u001b[0m in 5.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.870857Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:14.871309", "node_name": "dobutamine_dose", "node_path": "durations/dobutamine_dose.sql", "node_started_at": "2022-07-18T00:10:09.672888", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.dobutamine_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 6548", "code": "SELECT", "rows_affected": 6548}, "agate_table": null, "execution_time": 5.195987224578857, "failures": null, "message": "SELECT 6548", "node": {"alias": "dobutamine_dose", "build_path": "target/run/mimic/models/durations/dobutamine_dose.sql", "checksum": {"checksum": "dae9d45048d5d70c85cd80c03eddb52c0a86a11b06db5590020df96ed182dc23", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/dobutamine_dose.sql", "compiled_sql": "-- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30042,30306) then 1 else 0 end) as vaso -- dobutamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30042,30306) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30042,30306) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30042,30306) then rate else null end) as vaso_rate\n    , max(case when itemid in (30042,30306) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30042,30306) -- dobutamine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221653 -- dobutamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4847896, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "dobutamine_dose"], "meta": {}, "name": "dobutamine_dose", "original_file_path": "models/durations/dobutamine_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/dobutamine_dose.sql", "raw_sql": "-- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30042,30306) then 1 else 0 end) as vaso -- dobutamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30042,30306) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30042,30306) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30042,30306) then rate else null end) as vaso_rate\n    , max(case when itemid in (30042,30306) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30042,30306) -- dobutamine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221653 -- dobutamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"dobutamine_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.dobutamine_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:09.678342Z", "name": "compile", "started_at": "2022-07-18T00:10:09.675612Z"}, {"completed_at": "2022-07-18T00:10:14.869242Z", "name": "execute", "started_at": "2022-07-18T00:10:09.679194Z"}]}, "unique_id": "model.mimic.dobutamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.dobutamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.871477Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": "2022-07-18T00:10:14.871982", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.dobutamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.872057Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.dobutamine_durations", "index": 16, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": "2022-07-18T00:10:14.871982", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "16 of 107 START table model public.dobutamine_durations ........................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.872891Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.873761Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": "2022-07-18T00:10:14.871982", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.dobutamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.874445Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.dobutamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.874832Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.876623Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.877545Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.dobutamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.878254Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.dobutamine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.895250Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.896331Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.896703Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.897038Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.905210Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.906343Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"dobutamine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of dobutamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n-- Get drug administration data from CareVue first\nwith vasocv1 as (\n  select\n    icustay_id,\n    charttime -- case statement determining whether the ITEMID is an instance of vasopressor usage\n,\n    max(\n      case\n        when itemid in (30042, 30306) then 1\n        else 0\n      end\n    ) as vaso -- dobutamine\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and (\n          stopped = 'Stopped'\n          OR stopped like 'D/C%'\n        ) then 1\n        else 0\n      end\n    ) as vaso_stopped,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and rate is not null then 1\n        else 0\n      end\n    ) as vaso_null,\n    max(\n      case\n        when itemid in (30042, 30306) then rate\n        else null\n      end\n    ) as vaso_rate,\n    max(\n      case\n        when itemid in (30042, 30306) then amount\n        else null\n      end\n    ) as vaso_amount\n  FROM\n    inputevents_cv\n  where\n    itemid in (30042, 30306) -- dobutamine\n  group by\n    icustay_id,\n    charttime\n),\nvasocv2 as (\n  select\n    v.*,\n    sum(vaso_null) over (\n      partition by icustay_id\n      order by\n        charttime\n    ) as vaso_partition\n  from\n    vasocv1 v\n),\nvasocv3 as (\n  select\n    v.*,\n    first_value(vaso_rate) over (\n      partition by icustay_id,\n      vaso_partition\n      order by\n        charttime\n    ) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n),\nvasocv4 as (\n  select\n    icustay_id,\n    charttime -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n,\n    vaso,\n    vaso_rate,\n    vaso_amount,\n    vaso_stopped,\n    vaso_prevrate_ifnull -- We define start time here\n,\n    case\n      when vaso = 0 then null -- if this is the first instance of the vasoactive drug\n      when vaso_rate > 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso,\n        vaso_null\n        order by\n          charttime\n      ) is null then 1 -- you often get a string of 0s\n      -- we decide not to set these as 1, just because it makes vasonum sequential\n      when vaso_rate = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- sometimes you get a string of NULL, associated with 0 volumes\n      -- same reason as before, we decide not to set these as 1\n      -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n      when vaso_prevrate_ifnull = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- If the last recorded rate was 0, newvaso = 1\n      when LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 1 -- If the last recorded vaso was D/C'd, newvaso = 1\n      when LAG(vaso_stopped, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 1 then 1 -- ** not sure if the below is needed\n      --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n    end as vaso_start\n  FROM\n    vasocv3\n) -- propagate start/stop flags forward in time\n,\nvasocv5 as (\n  select\n    v.*,\n    SUM(vaso_start) OVER (\n      partition by icustay_id,\n      vaso\n      order by\n        charttime\n    ) as vaso_first\n  FROM\n    vasocv4 v\n),\nvasocv6 as (\n  select\n    v.* -- We define end time here\n,\n    case\n      when vaso = 0 then null -- If the recorded vaso was D/C'd, this is an end time\n      when vaso_stopped = 1 then vaso_first -- If the rate is zero, this is the end time\n      when vaso_rate = 0 then vaso_first -- the last row in the table is always a potential end time\n      -- this captures patients who die/are discharged while on vasopressors\n      -- in principle, this could add an extra end time for the vasopressor\n      -- however, since we later group on vaso_start, any extra end times are ignored\n      when LEAD(CHARTTIME, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) is null then vaso_first\n      else null\n    end as vaso_stop\n  from\n    vasocv5 v\n) -- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n,\nvasocv as (\n  -- below groups together vasopressor administrations into groups\n  select\n    icustay_id -- the first non-null rate is considered the starttime\n,\n    min(\n      case\n        when vaso_rate is not null then charttime\n        else null\n      end\n    ) as starttime -- the *first* time the first/last flags agree is the stop time for this duration\n,\n    min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    ) as endtime\n  from\n    vasocv6\n  where\n    vaso_first is not null -- bogus data\n    and vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\n    and icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n  group by\n    icustay_id,\n    vaso_first\n  having\n    -- ensure start time is not the same as end time\n    min(charttime) != min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    )\n    and max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n) -- now we extract the associated data for metavision patients\n,\nvasomv as (\n  select\n    icustay_id,\n    linkorderid,\n    min(starttime) as starttime,\n    max(endtime) as endtime\n  FROM\n    inputevents_mv\n  where\n    itemid = 221653 -- dobutamine\n    and statusdescription != 'Rewritten' -- only valid orders\n  group by\n    icustay_id,\n    linkorderid\n)\nselect\n  icustay_id -- generate a sequential integer for convenience\n,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasocv\nUNION\nALL\nselect\n  icustay_id,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasomv\norder by\n  icustay_id,\n  vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"dobutamine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of dobutamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n-- Get drug administration data from CareVue first\nwith vasocv1 as (\n  select\n    icustay_id,\n    charttime -- case statement determining whether the ITEMID is an instance of vasopressor usage\n,\n    max(\n      case\n        when itemid in (30042, 30306) then 1\n        else 0\n      end\n    ) as vaso -- dobutamine\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and (\n          stopped = 'Stopped'\n          OR stopped like 'D/C%'\n        ) then 1\n        else 0\n      end\n    ) as vaso_stopped,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and rate is not null then 1\n        else 0\n      end\n    ) as vaso_null,\n    max(\n      case\n        when itemid in (30042, 30306) then rate\n        else null\n      end\n    ) as vaso_rate,\n    max(\n      case\n        when itemid in (30042, 30306) then amount\n        else null\n      end\n    ) as vaso_amount\n  FROM\n    inputevents_cv\n  where\n    itemid in (30042, 30306) -- dobutamine\n  group by\n    icustay_id,\n    charttime\n),\nvasocv2 as (\n  select\n    v.*,\n    sum(vaso_null) over (\n      partition by icustay_id\n      order by\n        charttime\n    ) as vaso_partition\n  from\n    vasocv1 v\n),\nvasocv3 as (\n  select\n    v.*,\n    first_value(vaso_rate) over (\n      partition by icustay_id,\n      vaso_partition\n      order by\n        charttime\n    ) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n),\nvasocv4 as (\n  select\n    icustay_id,\n    charttime -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n,\n    vaso,\n    vaso_rate,\n    vaso_amount,\n    vaso_stopped,\n    vaso_prevrate_ifnull -- We define start time here\n,\n    case\n      when vaso = 0 then null -- if this is the first instance of the vasoactive drug\n      when vaso_rate > 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso,\n        vaso_null\n        order by\n          charttime\n      ) is null then 1 -- you often get a string of 0s\n      -- we decide not to set these as 1, just because it makes vasonum sequential\n      when vaso_rate = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- sometimes you get a string of NULL, associated with 0 volumes\n      -- same reason as before, we decide not to set these as 1\n      -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n      when vaso_prevrate_ifnull = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- If the last recorded rate was 0, newvaso = 1\n      when LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 1 -- If the last recorded vaso was D/C'd, newvaso = 1\n      when LAG(vaso_stopped, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 1 then 1 -- ** not sure if the below is needed\n      --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n    end as vaso_start\n  FROM\n    vasocv3\n) -- propagate start/stop flags forward in time\n,\nvasocv5 as (\n  select\n    v.*,\n    SUM(vaso_start) OVER (\n      partition by icustay_id,\n      vaso\n      order by\n        charttime\n    ) as vaso_first\n  FROM\n    vasocv4 v\n),\nvasocv6 as (\n  select\n    v.* -- We define end time here\n,\n    case\n      when vaso = 0 then null -- If the recorded vaso was D/C'd, this is an end time\n      when vaso_stopped = 1 then vaso_first -- If the rate is zero, this is the end time\n      when vaso_rate = 0 then vaso_first -- the last row in the table is always a potential end time\n      -- this captures patients who die/are discharged while on vasopressors\n      -- in principle, this could add an extra end time for the vasopressor\n      -- however, since we later group on vaso_start, any extra end times are ignored\n      when LEAD(CHARTTIME, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) is null then vaso_first\n      else null\n    end as vaso_stop\n  from\n    vasocv5 v\n) -- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n,\nvasocv as (\n  -- below groups together vasopressor administrations into groups\n  select\n    icustay_id -- the first non-null rate is considered the starttime\n,\n    min(\n      case\n        when vaso_rate is not null then charttime\n        else null\n      end\n    ) as starttime -- the *first* time the first/last flags agree is the stop time for this duration\n,\n    min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    ) as endtime\n  from\n    vasocv6\n  where\n    vaso_first is not null -- bogus data\n    and vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\n    and icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n  group by\n    icustay_id,\n    vaso_first\n  having\n    -- ensure start time is not the same as end time\n    min(charttime) != min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    )\n    and max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n) -- now we extract the associated data for metavision patients\n,\nvasomv as (\n  select\n    icustay_id,\n    linkorderid,\n    min(starttime) as starttime,\n    max(endtime) as endtime\n  FROM\n    inputevents_mv\n  where\n    itemid = 221653 -- dobutamine\n    and statusdescription != 'Rewritten' -- only valid orders\n  group by\n    icustay_id,\n    linkorderid\n)\nselect\n  icustay_id -- generate a sequential integer for convenience\n,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasocv\nUNION\nALL\nselect\n  icustay_id,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasomv\norder by\n  icustay_id,\n  vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:14.906990Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.41, "status": "SELECT 1792"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1792 in 0.41 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.322337Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.328814Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\nalter table \"postgres\".\"public\".\"dobutamine_durations\" rename to \"dobutamine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\nalter table \"postgres\".\"public\".\"dobutamine_durations\" rename to \"dobutamine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.329272Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.330554Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.336056Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\nalter table \"postgres\".\"public\".\"dobutamine_durations__dbt_tmp\" rename to \"dobutamine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\nalter table \"postgres\".\"public\".\"dobutamine_durations__dbt_tmp\" rename to \"dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.336278Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.337036Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.340261Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.340494Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.340722Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.341851Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dobutamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dobutamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.343952Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dobutamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"dobutamine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dobutamine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"dobutamine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.344189Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.347032Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.350370Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dobutamine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.350635Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f88743370>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f88743370>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.351421Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.dobutamine_durations", "execution_time": 0, "index": 16, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": "2022-07-18T00:10:14.871982", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "status": "SELECT 1792", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "16 of 107 OK created table model public.dobutamine_durations ................... [\u001b[32mSELECT 1792\u001b[0m in 0.48s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.351940Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:15.352396", "node_name": "dobutamine_durations", "node_path": "durations/dobutamine_durations.sql", "node_started_at": "2022-07-18T00:10:14.871982", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.dobutamine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 1792", "code": "SELECT", "rows_affected": 1792}, "agate_table": null, "execution_time": 0.47795581817626953, "failures": null, "message": "SELECT 1792", "node": {"alias": "dobutamine_durations", "build_path": "target/run/mimic/models/durations/dobutamine_durations.sql", "checksum": {"checksum": "c0b56fa2560c36bf39a5e0c32d7e6bc6a8cf0afd4a121a7603983ffb31e1cf91", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/dobutamine_durations.sql", "compiled_sql": "-- This query extracts durations of dobutamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n-- Get drug administration data from CareVue first\nwith vasocv1 as (\n  select\n    icustay_id,\n    charttime -- case statement determining whether the ITEMID is an instance of vasopressor usage\n,\n    max(\n      case\n        when itemid in (30042, 30306) then 1\n        else 0\n      end\n    ) as vaso -- dobutamine\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and (\n          stopped = 'Stopped'\n          OR stopped like 'D/C%'\n        ) then 1\n        else 0\n      end\n    ) as vaso_stopped,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and rate is not null then 1\n        else 0\n      end\n    ) as vaso_null,\n    max(\n      case\n        when itemid in (30042, 30306) then rate\n        else null\n      end\n    ) as vaso_rate,\n    max(\n      case\n        when itemid in (30042, 30306) then amount\n        else null\n      end\n    ) as vaso_amount\n  FROM\n    inputevents_cv\n  where\n    itemid in (30042, 30306) -- dobutamine\n  group by\n    icustay_id,\n    charttime\n),\nvasocv2 as (\n  select\n    v.*,\n    sum(vaso_null) over (\n      partition by icustay_id\n      order by\n        charttime\n    ) as vaso_partition\n  from\n    vasocv1 v\n),\nvasocv3 as (\n  select\n    v.*,\n    first_value(vaso_rate) over (\n      partition by icustay_id,\n      vaso_partition\n      order by\n        charttime\n    ) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n),\nvasocv4 as (\n  select\n    icustay_id,\n    charttime -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n,\n    vaso,\n    vaso_rate,\n    vaso_amount,\n    vaso_stopped,\n    vaso_prevrate_ifnull -- We define start time here\n,\n    case\n      when vaso = 0 then null -- if this is the first instance of the vasoactive drug\n      when vaso_rate > 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso,\n        vaso_null\n        order by\n          charttime\n      ) is null then 1 -- you often get a string of 0s\n      -- we decide not to set these as 1, just because it makes vasonum sequential\n      when vaso_rate = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- sometimes you get a string of NULL, associated with 0 volumes\n      -- same reason as before, we decide not to set these as 1\n      -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n      when vaso_prevrate_ifnull = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- If the last recorded rate was 0, newvaso = 1\n      when LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 1 -- If the last recorded vaso was D/C'd, newvaso = 1\n      when LAG(vaso_stopped, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 1 then 1 -- ** not sure if the below is needed\n      --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n    end as vaso_start\n  FROM\n    vasocv3\n) -- propagate start/stop flags forward in time\n,\nvasocv5 as (\n  select\n    v.*,\n    SUM(vaso_start) OVER (\n      partition by icustay_id,\n      vaso\n      order by\n        charttime\n    ) as vaso_first\n  FROM\n    vasocv4 v\n),\nvasocv6 as (\n  select\n    v.* -- We define end time here\n,\n    case\n      when vaso = 0 then null -- If the recorded vaso was D/C'd, this is an end time\n      when vaso_stopped = 1 then vaso_first -- If the rate is zero, this is the end time\n      when vaso_rate = 0 then vaso_first -- the last row in the table is always a potential end time\n      -- this captures patients who die/are discharged while on vasopressors\n      -- in principle, this could add an extra end time for the vasopressor\n      -- however, since we later group on vaso_start, any extra end times are ignored\n      when LEAD(CHARTTIME, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) is null then vaso_first\n      else null\n    end as vaso_stop\n  from\n    vasocv5 v\n) -- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n,\nvasocv as (\n  -- below groups together vasopressor administrations into groups\n  select\n    icustay_id -- the first non-null rate is considered the starttime\n,\n    min(\n      case\n        when vaso_rate is not null then charttime\n        else null\n      end\n    ) as starttime -- the *first* time the first/last flags agree is the stop time for this duration\n,\n    min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    ) as endtime\n  from\n    vasocv6\n  where\n    vaso_first is not null -- bogus data\n    and vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\n    and icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n  group by\n    icustay_id,\n    vaso_first\n  having\n    -- ensure start time is not the same as end time\n    min(charttime) != min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    )\n    and max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n) -- now we extract the associated data for metavision patients\n,\nvasomv as (\n  select\n    icustay_id,\n    linkorderid,\n    min(starttime) as starttime,\n    max(endtime) as endtime\n  FROM\n    inputevents_mv\n  where\n    itemid = 221653 -- dobutamine\n    and statusdescription != 'Rewritten' -- only valid orders\n  group by\n    icustay_id,\n    linkorderid\n)\nselect\n  icustay_id -- generate a sequential integer for convenience\n,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasocv\nUNION\nALL\nselect\n  icustay_id,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasomv\norder by\n  icustay_id,\n  vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4667046, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "dobutamine_durations"], "meta": {}, "name": "dobutamine_durations", "original_file_path": "models/durations/dobutamine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/dobutamine_durations.sql", "raw_sql": "-- This query extracts durations of dobutamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n-- Get drug administration data from CareVue first\nwith vasocv1 as (\n  select\n    icustay_id,\n    charttime -- case statement determining whether the ITEMID is an instance of vasopressor usage\n,\n    max(\n      case\n        when itemid in (30042, 30306) then 1\n        else 0\n      end\n    ) as vaso -- dobutamine\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and (\n          stopped = 'Stopped'\n          OR stopped like 'D/C%'\n        ) then 1\n        else 0\n      end\n    ) as vaso_stopped,\n    max(\n      case\n        when itemid in (30042, 30306)\n        and rate is not null then 1\n        else 0\n      end\n    ) as vaso_null,\n    max(\n      case\n        when itemid in (30042, 30306) then rate\n        else null\n      end\n    ) as vaso_rate,\n    max(\n      case\n        when itemid in (30042, 30306) then amount\n        else null\n      end\n    ) as vaso_amount\n  FROM\n    inputevents_cv\n  where\n    itemid in (30042, 30306) -- dobutamine\n  group by\n    icustay_id,\n    charttime\n),\nvasocv2 as (\n  select\n    v.*,\n    sum(vaso_null) over (\n      partition by icustay_id\n      order by\n        charttime\n    ) as vaso_partition\n  from\n    vasocv1 v\n),\nvasocv3 as (\n  select\n    v.*,\n    first_value(vaso_rate) over (\n      partition by icustay_id,\n      vaso_partition\n      order by\n        charttime\n    ) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n),\nvasocv4 as (\n  select\n    icustay_id,\n    charttime -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n,\n    vaso,\n    vaso_rate,\n    vaso_amount,\n    vaso_stopped,\n    vaso_prevrate_ifnull -- We define start time here\n,\n    case\n      when vaso = 0 then null -- if this is the first instance of the vasoactive drug\n      when vaso_rate > 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso,\n        vaso_null\n        order by\n          charttime\n      ) is null then 1 -- you often get a string of 0s\n      -- we decide not to set these as 1, just because it makes vasonum sequential\n      when vaso_rate = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- sometimes you get a string of NULL, associated with 0 volumes\n      -- same reason as before, we decide not to set these as 1\n      -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n      when vaso_prevrate_ifnull = 0\n      and LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 0 -- If the last recorded rate was 0, newvaso = 1\n      when LAG(vaso_prevrate_ifnull, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 0 then 1 -- If the last recorded vaso was D/C'd, newvaso = 1\n      when LAG(vaso_stopped, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) = 1 then 1 -- ** not sure if the below is needed\n      --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n    end as vaso_start\n  FROM\n    vasocv3\n) -- propagate start/stop flags forward in time\n,\nvasocv5 as (\n  select\n    v.*,\n    SUM(vaso_start) OVER (\n      partition by icustay_id,\n      vaso\n      order by\n        charttime\n    ) as vaso_first\n  FROM\n    vasocv4 v\n),\nvasocv6 as (\n  select\n    v.* -- We define end time here\n,\n    case\n      when vaso = 0 then null -- If the recorded vaso was D/C'd, this is an end time\n      when vaso_stopped = 1 then vaso_first -- If the rate is zero, this is the end time\n      when vaso_rate = 0 then vaso_first -- the last row in the table is always a potential end time\n      -- this captures patients who die/are discharged while on vasopressors\n      -- in principle, this could add an extra end time for the vasopressor\n      -- however, since we later group on vaso_start, any extra end times are ignored\n      when LEAD(CHARTTIME, 1) OVER (\n        partition by icustay_id,\n        vaso\n        order by\n          charttime\n      ) is null then vaso_first\n      else null\n    end as vaso_stop\n  from\n    vasocv5 v\n) -- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n,\nvasocv as (\n  -- below groups together vasopressor administrations into groups\n  select\n    icustay_id -- the first non-null rate is considered the starttime\n,\n    min(\n      case\n        when vaso_rate is not null then charttime\n        else null\n      end\n    ) as starttime -- the *first* time the first/last flags agree is the stop time for this duration\n,\n    min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    ) as endtime\n  from\n    vasocv6\n  where\n    vaso_first is not null -- bogus data\n    and vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\n    and icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n  group by\n    icustay_id,\n    vaso_first\n  having\n    -- ensure start time is not the same as end time\n    min(charttime) != min(\n      case\n        when vaso_first = vaso_stop then charttime\n        else null\n      end\n    )\n    and max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n) -- now we extract the associated data for metavision patients\n,\nvasomv as (\n  select\n    icustay_id,\n    linkorderid,\n    min(starttime) as starttime,\n    max(endtime) as endtime\n  FROM\n    inputevents_mv\n  where\n    itemid = 221653 -- dobutamine\n    and statusdescription != 'Rewritten' -- only valid orders\n  group by\n    icustay_id,\n    linkorderid\n)\nselect\n  icustay_id -- generate a sequential integer for convenience\n,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasocv\nUNION\nALL\nselect\n  icustay_id,\n  ROW_NUMBER() over (\n    partition by icustay_id\n    order by\n      starttime\n  ) as vasonum,\n  starttime,\n  endtime,\n  DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours -- add durations\nfrom\n  vasomv\norder by\n  icustay_id,\n  vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"dobutamine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.dobutamine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:14.877468Z", "name": "compile", "started_at": "2022-07-18T00:10:14.874806Z"}, {"completed_at": "2022-07-18T00:10:15.350337Z", "name": "execute", "started_at": "2022-07-18T00:10:14.878615Z"}]}, "unique_id": "model.mimic.dobutamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.dobutamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.352630Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": "2022-07-18T00:10:15.353085", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.dopamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.353173Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.dopamine_dose", "index": 17, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": "2022-07-18T00:10:15.353085", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "17 of 107 START table model public.dopamine_dose ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.353971Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.354924Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": "2022-07-18T00:10:15.353085", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.dopamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.355446Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.dopamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.355773Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.357359Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.358502Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.dopamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.358809Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.dopamine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.369097Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.370533Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.370935Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.371323Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.376378Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.376637Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"dopamine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"dopamine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:15.376860Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.98, "status": "SELECT 38953"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 38953 in 3.98 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.355609Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.362596Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\nalter table \"postgres\".\"public\".\"dopamine_dose\" rename to \"dopamine_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\nalter table \"postgres\".\"public\".\"dopamine_dose\" rename to \"dopamine_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.362840Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.363671Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.367700Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\nalter table \"postgres\".\"public\".\"dopamine_dose__dbt_tmp\" rename to \"dopamine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\nalter table \"postgres\".\"public\".\"dopamine_dose__dbt_tmp\" rename to \"dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.367921Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.368704Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.371708Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.371931Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.372198Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.377175Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.379725Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"dopamine_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"dopamine_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.379953Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.381849Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.384435Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.384675Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f88756820>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f88756820>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.385447Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.dopamine_dose", "execution_time": 4, "index": 17, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": "2022-07-18T00:10:15.353085", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "status": "SELECT 38953", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "17 of 107 OK created table model public.dopamine_dose .......................... [\u001b[32mSELECT 38953\u001b[0m in 4.03s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.386029Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:19.386483", "node_name": "dopamine_dose", "node_path": "durations/dopamine_dose.sql", "node_started_at": "2022-07-18T00:10:15.353085", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.dopamine_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 38953", "code": "SELECT", "rows_affected": 38953}, "agate_table": null, "execution_time": 4.0308837890625, "failures": null, "message": "SELECT 38953", "node": {"alias": "dopamine_dose", "build_path": "target/run/mimic/models/durations/dopamine_dose.sql", "checksum": {"checksum": "55ae2ccf12a1ecba6c577f7ce0f06f510e212d770bc6f80eb3c19b1249f6dd40", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/dopamine_dose.sql", "compiled_sql": "-- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4772465, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "dopamine_dose"], "meta": {}, "name": "dopamine_dose", "original_file_path": "models/durations/dopamine_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/dopamine_dose.sql", "raw_sql": "-- This query extracts dose+durations of dopamine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"dopamine_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.dopamine_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:15.358306Z", "name": "compile", "started_at": "2022-07-18T00:10:15.355749Z"}, {"completed_at": "2022-07-18T00:10:19.384406Z", "name": "execute", "started_at": "2022-07-18T00:10:15.359140Z"}]}, "unique_id": "model.mimic.dopamine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.dopamine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.386651Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": "2022-07-18T00:10:19.387099", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.dopamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.387189Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.dopamine_durations", "index": 18, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": "2022-07-18T00:10:19.387099", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "18 of 107 START table model public.dopamine_durations .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.387971Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.388789Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": "2022-07-18T00:10:19.387099", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.dopamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.389120Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.dopamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.389511Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.391831Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.392578Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.dopamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.392944Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.dopamine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.403584Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.404970Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.405343Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.406137Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.412978Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.413460Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"dopamine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of dopamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"dopamine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of dopamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:19.413939Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 2.16, "status": "SELECT 6524"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 6524 in 2.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.569913Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.576354Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\nalter table \"postgres\".\"public\".\"dopamine_durations\" rename to \"dopamine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\nalter table \"postgres\".\"public\".\"dopamine_durations\" rename to \"dopamine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.576661Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.579029Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.585078Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\nalter table \"postgres\".\"public\".\"dopamine_durations__dbt_tmp\" rename to \"dopamine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\nalter table \"postgres\".\"public\".\"dopamine_durations__dbt_tmp\" rename to \"dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.585315Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.586068Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.588904Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.589110Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.589229Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.591973Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.dopamine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.dopamine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.594845Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.dopamine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"dopamine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.dopamine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"dopamine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.595092Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.597697Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.600765Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.dopamine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.601016Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03dc70>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03dc70>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.601812Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.dopamine_durations", "execution_time": 2, "index": 18, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": "2022-07-18T00:10:19.387099", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "status": "SELECT 6524", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "18 of 107 OK created table model public.dopamine_durations ..................... [\u001b[32mSELECT 6524\u001b[0m in 2.21s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.602318Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:21.602772", "node_name": "dopamine_durations", "node_path": "durations/dopamine_durations.sql", "node_started_at": "2022-07-18T00:10:19.387099", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.dopamine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 6524", "code": "SELECT", "rows_affected": 6524}, "agate_table": null, "execution_time": 2.213226795196533, "failures": null, "message": "SELECT 6524", "node": {"alias": "dopamine_durations", "build_path": "target/run/mimic/models/durations/dopamine_durations.sql", "checksum": {"checksum": "b532e4fc687a7b4903825aa78a84805ac6f3aecfe0a4b99dcb928f3c390f7f49", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/dopamine_durations.sql", "compiled_sql": "-- This query extracts durations of dopamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4612112, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "dopamine_durations"], "meta": {}, "name": "dopamine_durations", "original_file_path": "models/durations/dopamine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/dopamine_durations.sql", "raw_sql": "-- This query extracts durations of dopamine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30043,30307) then 1 else 0 end) as vaso -- dopamine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30043,30307) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30043,30307) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30043,30307) then rate else null end) as vaso_rate\n    , max(case when itemid in (30043,30307) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30043,30307 -- dopamine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221662 -- dopamine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"dopamine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.dopamine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:19.392492Z", "name": "compile", "started_at": "2022-07-18T00:10:19.389467Z"}, {"completed_at": "2022-07-18T00:10:21.600733Z", "name": "execute", "started_at": "2022-07-18T00:10:19.393428Z"}]}, "unique_id": "model.mimic.dopamine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.dopamine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.602940Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": "2022-07-18T00:10:21.603357", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.echo_data", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.603443Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.echo_data", "index": 19, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": "2022-07-18T00:10:21.603357", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "19 of 107 START table model public.echo_data ................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.604219Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.605002Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": "2022-07-18T00:10:21.603357", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.echo_data", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.605241Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.echo_data", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.605772Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.611074Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.611925Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.echo_data", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.612255Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.echo_data\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.622871Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.623580Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.624041Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.624384Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.631049Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.631444Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\n\n\n  create  table \"postgres\".\"public\".\"echo_data__dbt_tmp\"\n  as (\n    -- This code extracts structured data from echocardiographies\n-- You can join it to the text notes using ROW_ID\n-- Just note that ROW_ID will differ across versions of MIMIC-III.\n\n\nselect ROW_ID\n  , subject_id, hadm_id\n  , chartdate\n  -- charttime is always null for echoes..\n  -- however, the time is available in the echo text, e.g.:\n  -- , substring(ne.text, 'Date/Time: [\\[\\]0-9*-]+ at ([0-9:]+)') as TIMESTAMP\n  -- we can therefore impute it and re-create charttime\n  , PARSE_DATETIME\n  (\n      '%Y-%m-%d%H:%M:%S',\n      FORMAT_DATE('%Y-%m-%d', chartdate)\n      || REGEXP_EXTRACT(ne.text, 'Date/Time: .+? at ([0-9]+:[0-9]{2})')\n      || ':00'\n   ) AS charttime\n\n  -- explanation of below substring:\n  --  'Indication: ' - matched verbatim\n  --  (.*?) - match any character\n  --  \\n - the end of the line\n  -- substring only returns the item in ()s\n  -- note: the '?' makes it non-greedy. if you exclude it, it matches until it reaches the *last* \\n\n\n  , REGEXP_EXTRACT(ne.text, 'Indication: (.*?)\\n') as Indication\n\n  -- sometimes numeric values contain de-id text, e.g. [** Numeric Identifier **]\n  -- this removes that text\n  , cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\x28in\\\\x29 ([0-9]+)') as numeric) as Height\n  , cast(REGEXP_EXTRACT(ne.text, 'Weight \\\\x28lb\\\\x29: ([0-9]+)\\n') as numeric) as Weight\n  , cast(REGEXP_EXTRACT(ne.text, 'BSA \\\\x28m2\\\\x29: ([0-9]+) m2\\n') as numeric) as BSA -- ends in 'm2'\n  , REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: (.+)\\n') as BP -- Sys/Dias\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: ([0-9]+)/[0-9]+?\\n') as numeric) as BPSys -- first part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: [0-9]+/([0-9]+?)\\n') as numeric) as BPDias -- second part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'HR \\\\x28bpm\\\\x29: ([0-9]+?)\\n') as numeric) as HR\n\n  , REGEXP_EXTRACT(ne.text, 'Status: (.*?)\\n') as Status\n  , REGEXP_EXTRACT(ne.text, 'Test: (.*?)\\n') as Test\n  , REGEXP_EXTRACT(ne.text, 'Doppler: (.*?)\\n') as Doppler\n  , REGEXP_EXTRACT(ne.text, 'Contrast: (.*?)\\n') as Contrast\n  , REGEXP_EXTRACT(ne.text, 'Technical Quality: (.*?)\\n') as TechnicalQuality\nFROM noteevents ne\nwhere category = 'Echo'\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\n\n\n  create  table \"postgres\".\"public\".\"echo_data__dbt_tmp\"\n  as (\n    -- This code extracts structured data from echocardiographies\n-- You can join it to the text notes using ROW_ID\n-- Just note that ROW_ID will differ across versions of MIMIC-III.\n\n\nselect ROW_ID\n  , subject_id, hadm_id\n  , chartdate\n  -- charttime is always null for echoes..\n  -- however, the time is available in the echo text, e.g.:\n  -- , substring(ne.text, 'Date/Time: [\\[\\]0-9*-]+ at ([0-9:]+)') as TIMESTAMP\n  -- we can therefore impute it and re-create charttime\n  , PARSE_DATETIME\n  (\n      '%Y-%m-%d%H:%M:%S',\n      FORMAT_DATE('%Y-%m-%d', chartdate)\n      || REGEXP_EXTRACT(ne.text, 'Date/Time: .+? at ([0-9]+:[0-9]{2})')\n      || ':00'\n   ) AS charttime\n\n  -- explanation of below substring:\n  --  'Indication: ' - matched verbatim\n  --  (.*?) - match any character\n  --  \\n - the end of the line\n  -- substring only returns the item in ()s\n  -- note: the '?' makes it non-greedy. if you exclude it, it matches until it reaches the *last* \\n\n\n  , REGEXP_EXTRACT(ne.text, 'Indication: (.*?)\\n') as Indication\n\n  -- sometimes numeric values contain de-id text, e.g. [** Numeric Identifier **]\n  -- this removes that text\n  , cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\x28in\\\\x29 ([0-9]+)') as numeric) as Height\n  , cast(REGEXP_EXTRACT(ne.text, 'Weight \\\\x28lb\\\\x29: ([0-9]+)\\n') as numeric) as Weight\n  , cast(REGEXP_EXTRACT(ne.text, 'BSA \\\\x28m2\\\\x29: ([0-9]+) m2\\n') as numeric) as BSA -- ends in 'm2'\n  , REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: (.+)\\n') as BP -- Sys/Dias\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: ([0-9]+)/[0-9]+?\\n') as numeric) as BPSys -- first part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: [0-9]+/([0-9]+?)\\n') as numeric) as BPDias -- second part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'HR \\\\x28bpm\\\\x29: ([0-9]+?)\\n') as numeric) as HR\n\n  , REGEXP_EXTRACT(ne.text, 'Status: (.*?)\\n') as Status\n  , REGEXP_EXTRACT(ne.text, 'Test: (.*?)\\n') as Test\n  , REGEXP_EXTRACT(ne.text, 'Doppler: (.*?)\\n') as Doppler\n  , REGEXP_EXTRACT(ne.text, 'Contrast: (.*?)\\n') as Contrast\n  , REGEXP_EXTRACT(ne.text, 'Technical Quality: (.*?)\\n') as TechnicalQuality\nFROM noteevents ne\nwhere category = 'Echo'\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.631819Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.638043Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.643841Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\nalter table \"postgres\".\"public\".\"echo_data\" rename to \"echo_data__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\nalter table \"postgres\".\"public\".\"echo_data\" rename to \"echo_data__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.644386Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.646898Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.651348Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\nalter table \"postgres\".\"public\".\"echo_data__dbt_tmp\" rename to \"echo_data\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\nalter table \"postgres\".\"public\".\"echo_data__dbt_tmp\" rename to \"echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.651577Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.652366Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.655752Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.656218Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.656742Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.659153Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.echo_data", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.echo_data\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.662696Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.echo_data", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\ndrop table if exists \"postgres\".\"public\".\"echo_data__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.echo_data\"} */\ndrop table if exists \"postgres\".\"public\".\"echo_data__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.663090Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.665771Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.668298Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.echo_data: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.668526Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03dd00>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03dd00>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.669222Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.echo_data", "execution_time": 0, "index": 19, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": "2022-07-18T00:10:21.603357", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "19 of 107 OK created table model public.echo_data .............................. [\u001b[32mSELECT 0\u001b[0m in 0.06s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.669788Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:21.670255", "node_name": "echo_data", "node_path": "echo_data.sql", "node_started_at": "2022-07-18T00:10:21.603357", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.echo_data"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.06439614295959473, "failures": null, "message": "SELECT 0", "node": {"alias": "echo_data", "build_path": "target/run/mimic/models/echo_data.sql", "checksum": {"checksum": "3114da4aeffcef3f13a3f5e4c012c24eed9ad4da51d29fa6f204f962128a9034", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/echo_data.sql", "compiled_sql": "-- This code extracts structured data from echocardiographies\n-- You can join it to the text notes using ROW_ID\n-- Just note that ROW_ID will differ across versions of MIMIC-III.\n\n\nselect ROW_ID\n  , subject_id, hadm_id\n  , chartdate\n  -- charttime is always null for echoes..\n  -- however, the time is available in the echo text, e.g.:\n  -- , substring(ne.text, 'Date/Time: [\\[\\]0-9*-]+ at ([0-9:]+)') as TIMESTAMP\n  -- we can therefore impute it and re-create charttime\n  , PARSE_DATETIME\n  (\n      '%Y-%m-%d%H:%M:%S',\n      FORMAT_DATE('%Y-%m-%d', chartdate)\n      || REGEXP_EXTRACT(ne.text, 'Date/Time: .+? at ([0-9]+:[0-9]{2})')\n      || ':00'\n   ) AS charttime\n\n  -- explanation of below substring:\n  --  'Indication: ' - matched verbatim\n  --  (.*?) - match any character\n  --  \\n - the end of the line\n  -- substring only returns the item in ()s\n  -- note: the '?' makes it non-greedy. if you exclude it, it matches until it reaches the *last* \\n\n\n  , REGEXP_EXTRACT(ne.text, 'Indication: (.*?)\\n') as Indication\n\n  -- sometimes numeric values contain de-id text, e.g. [** Numeric Identifier **]\n  -- this removes that text\n  , cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\x28in\\\\x29 ([0-9]+)') as numeric) as Height\n  , cast(REGEXP_EXTRACT(ne.text, 'Weight \\\\x28lb\\\\x29: ([0-9]+)\\n') as numeric) as Weight\n  , cast(REGEXP_EXTRACT(ne.text, 'BSA \\\\x28m2\\\\x29: ([0-9]+) m2\\n') as numeric) as BSA -- ends in 'm2'\n  , REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: (.+)\\n') as BP -- Sys/Dias\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: ([0-9]+)/[0-9]+?\\n') as numeric) as BPSys -- first part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: [0-9]+/([0-9]+?)\\n') as numeric) as BPDias -- second part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'HR \\\\x28bpm\\\\x29: ([0-9]+?)\\n') as numeric) as HR\n\n  , REGEXP_EXTRACT(ne.text, 'Status: (.*?)\\n') as Status\n  , REGEXP_EXTRACT(ne.text, 'Test: (.*?)\\n') as Test\n  , REGEXP_EXTRACT(ne.text, 'Doppler: (.*?)\\n') as Doppler\n  , REGEXP_EXTRACT(ne.text, 'Contrast: (.*?)\\n') as Contrast\n  , REGEXP_EXTRACT(ne.text, 'Technical Quality: (.*?)\\n') as TechnicalQuality\nFROM noteevents ne\nwhere category = 'Echo'", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4462578, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "echo_data"], "meta": {}, "name": "echo_data", "original_file_path": "models/echo_data.sql", "package_name": "mimic", "patch_path": null, "path": "echo_data.sql", "raw_sql": "-- This code extracts structured data from echocardiographies\n-- You can join it to the text notes using ROW_ID\n-- Just note that ROW_ID will differ across versions of MIMIC-III.\n{{ config(materialized='table') }}\n\nselect ROW_ID\n  , subject_id, hadm_id\n  , chartdate\n  -- charttime is always null for echoes..\n  -- however, the time is available in the echo text, e.g.:\n  -- , substring(ne.text, 'Date/Time: [\\[\\]0-9*-]+ at ([0-9:]+)') as TIMESTAMP\n  -- we can therefore impute it and re-create charttime\n  , PARSE_DATETIME\n  (\n      '%Y-%m-%d%H:%M:%S',\n      FORMAT_DATE('%Y-%m-%d', chartdate)\n      || REGEXP_EXTRACT(ne.text, 'Date/Time: .+? at ([0-9]+:[0-9]{2})')\n      || ':00'\n   ) AS charttime\n\n  -- explanation of below substring:\n  --  'Indication: ' - matched verbatim\n  --  (.*?) - match any character\n  --  \\n - the end of the line\n  -- substring only returns the item in ()s\n  -- note: the '?' makes it non-greedy. if you exclude it, it matches until it reaches the *last* \\n\n\n  , REGEXP_EXTRACT(ne.text, 'Indication: (.*?)\\n') as Indication\n\n  -- sometimes numeric values contain de-id text, e.g. [** Numeric Identifier **]\n  -- this removes that text\n  , cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\x28in\\\\x29 ([0-9]+)') as numeric) as Height\n  , cast(REGEXP_EXTRACT(ne.text, 'Weight \\\\x28lb\\\\x29: ([0-9]+)\\n') as numeric) as Weight\n  , cast(REGEXP_EXTRACT(ne.text, 'BSA \\\\x28m2\\\\x29: ([0-9]+) m2\\n') as numeric) as BSA -- ends in 'm2'\n  , REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: (.+)\\n') as BP -- Sys/Dias\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: ([0-9]+)/[0-9]+?\\n') as numeric) as BPSys -- first part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'BP \\\\x28mm Hg\\\\x29: [0-9]+/([0-9]+?)\\n') as numeric) as BPDias -- second part of fraction\n  , cast(REGEXP_EXTRACT(ne.text, 'HR \\\\x28bpm\\\\x29: ([0-9]+?)\\n') as numeric) as HR\n\n  , REGEXP_EXTRACT(ne.text, 'Status: (.*?)\\n') as Status\n  , REGEXP_EXTRACT(ne.text, 'Test: (.*?)\\n') as Test\n  , REGEXP_EXTRACT(ne.text, 'Doppler: (.*?)\\n') as Doppler\n  , REGEXP_EXTRACT(ne.text, 'Contrast: (.*?)\\n') as Contrast\n  , REGEXP_EXTRACT(ne.text, 'Technical Quality: (.*?)\\n') as TechnicalQuality\nFROM noteevents ne\nwhere category = 'Echo'", "refs": [], "relation_name": "\"postgres\".\"public\".\"echo_data\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.echo_data", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:21.611854Z", "name": "compile", "started_at": "2022-07-18T00:10:21.605683Z"}, {"completed_at": "2022-07-18T00:10:21.668268Z", "name": "execute", "started_at": "2022-07-18T00:10:21.612601Z"}]}, "unique_id": "model.mimic.echo_data"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.echo_data", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.670435Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": "2022-07-18T00:10:21.670827", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.elixhauser_ahrq_v37", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.670920Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.elixhauser_ahrq_v37", "index": 20, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": "2022-07-18T00:10:21.670827", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "20 of 107 START table model public.elixhauser_ahrq_v37 ......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.671716Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.673479Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": "2022-07-18T00:10:21.670827", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.elixhauser_ahrq_v37", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.674337Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.elixhauser_ahrq_v37", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.675313Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.681414Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.682545Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.elixhauser_ahrq_v37", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.682905Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.elixhauser_ahrq_v37\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.694300Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.695300Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.695559Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.695768Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.703220Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.703596Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_tmp\"\n  as (\n    -- This code uses the latest version of Elixhauser provided by AHRQ\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code -- note that these codes will seem incomplete at first\n        -- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n        -- these codes are captured by hypertension flags instead\n        -- later there are some complicated rules which confirm/reject those codes as chf\n,\n        CASE\n            when icd9_code = '39891' then 1\n            when icd9_code between '4280'\n            and '4289' then 1\n        end as chf\n        /* Congestive heart failure */\n        -- cardiac arrhythmias is removed in up to date versions\n,\n        case\n            when icd9_code = '42610' then 1\n            when icd9_code = '42611' then 1\n            when icd9_code = '42613' then 1\n            when icd9_code between '4262'\n            and '42653' then 1\n            when icd9_code between '4266'\n            and '42689' then 1\n            when icd9_code = '4270' then 1\n            when icd9_code = '4272' then 1\n            when icd9_code = '42731' then 1\n            when icd9_code = '42760' then 1\n            when icd9_code = '4279' then 1\n            when icd9_code = '7850' then 1\n            when icd9_code between 'V450'\n            and 'V4509' then 1\n            when icd9_code between 'V533'\n            and 'V5339' then 1\n        end as arythm\n        /* Cardiac arrhythmias */\n,\n        CASE\n            when icd9_code between '09320'\n            and '09324' then 1\n            when icd9_code between '3940'\n            and '3971' then 1\n            when icd9_code = '3979' then 1\n            when icd9_code between '4240'\n            and '42499' then 1\n            when icd9_code between '7463'\n            and '7466' then 1\n            when icd9_code = 'V422' then 1\n            when icd9_code = 'V433' then 1\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when icd9_code between '41511'\n            and '41519' then 1\n            when icd9_code between '4160'\n            and '4169' then 1\n            when icd9_code = '4179' then 1\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when icd9_code between '4400'\n            and '4409' then 1\n            when icd9_code between '44100'\n            and '4419' then 1\n            when icd9_code between '4420'\n            and '4429' then 1\n            when icd9_code between '4431'\n            and '4439' then 1\n            when icd9_code between '44421'\n            and '44422' then 1\n            when icd9_code = '4471' then 1\n            when icd9_code = '449' then 1\n            when icd9_code = '5571' then 1\n            when icd9_code = '5579' then 1\n            when icd9_code = 'V434' then 1\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when icd9_code = '4011' then 1\n            when icd9_code = '4019' then 1\n            when icd9_code between '64200'\n            and '64204' then 1\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when icd9_code = '4010' then 1\n            when icd9_code = '4372' then 1\n        end as htncx\n        /* Hypertension, complicated */\n        /******************************************************************/\n        /* The following are special, temporary formats used in the       */\n        /* creation of the hypertension complicated comorbidity when      */\n        /* overlapping with congestive heart failure or renal failure     */\n        /* occurs. These temporary formats are referenced in the program  */\n        /* called comoanaly2009.txt.                                      */\n        /******************************************************************/\n,\n        CASE\n            when icd9_code between '64220'\n            and '64224' then 1\n        end as htnpreg\n        /* Pre-existing hypertension complicating pregnancy */\n,\n        CASE\n            when icd9_code = '40200' then 1\n            when icd9_code = '40210' then 1\n            when icd9_code = '40290' then 1\n            when icd9_code = '40509' then 1\n            when icd9_code = '40519' then 1\n            when icd9_code = '40599' then 1\n        end as htnwochf\n        /* Hypertensive heart disease without heart failure */\n,\n        CASE\n            when icd9_code = '40201' then 1\n            when icd9_code = '40211' then 1\n            when icd9_code = '40291' then 1\n        end as htnwchf\n        /* Hypertensive heart disease with heart failure */\n,\n        CASE\n            when icd9_code = '40300' then 1\n            when icd9_code = '40310' then 1\n            when icd9_code = '40390' then 1\n            when icd9_code = '40501' then 1\n            when icd9_code = '40511' then 1\n            when icd9_code = '40591' then 1\n            when icd9_code between '64210'\n            and '64214' then 1\n        end as hrenworf\n        /* Hypertensive renal disease without renal failure */\n,\n        CASE\n            when icd9_code = '40301' then 1\n            when icd9_code = '40311' then 1\n            when icd9_code = '40391' then 1\n        end as hrenwrf\n        /* Hypertensive renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40400' then 1\n            when icd9_code = '40410' then 1\n            when icd9_code = '40490' then 1\n        end as hhrwohrf\n        /* Hypertensive heart and renal disease without heart or renal failure */\n,\n        CASE\n            when icd9_code = '40401' then 1\n            when icd9_code = '40411' then 1\n            when icd9_code = '40491' then 1\n        end as hhrwchf\n        /* Hypertensive heart and renal disease with heart failure */\n,\n        CASE\n            when icd9_code = '40402' then 1\n            when icd9_code = '40412' then 1\n            when icd9_code = '40492' then 1\n        end as hhrwrf\n        /* Hypertensive heart and renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40403' then 1\n            when icd9_code = '40413' then 1\n            when icd9_code = '40493' then 1\n        end as hhrwhrf\n        /* Hypertensive heart and renal disease with heart and renal failure */\n,\n        CASE\n            when icd9_code between '64270'\n            and '64274' then 1\n            when icd9_code between '64290'\n            and '64294' then 1\n        end as ohtnpreg\n        /* Other hypertension in pregnancy */\n        /******************** End Temporary Formats ***********************/\n,\n        CASE\n            when icd9_code between '3420'\n            and '3449' then 1\n            when icd9_code between '43820'\n            and '43853' then 1\n            when icd9_code = '78072' then 1\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code between '3300'\n            and '3319' then 1\n            when icd9_code = '3320' then 1\n            when icd9_code = '3334' then 1\n            when icd9_code = '3335' then 1\n            when icd9_code = '3337' then 1\n            when icd9_code in ('33371', '33372', '33379', '33385', '33394') then 1\n            when icd9_code between '3340'\n            and '3359' then 1\n            when icd9_code = '3380' then 1\n            when icd9_code = '340' then 1\n            when icd9_code between '3411'\n            and '3419' then 1\n            when icd9_code between '34500'\n            and '34511' then 1\n            when icd9_code between '3452'\n            and '3453' then 1\n            when icd9_code between '34540'\n            and '34591' then 1\n            when icd9_code between '34700'\n            and '34701' then 1\n            when icd9_code between '34710'\n            and '34711' then 1\n            when icd9_code = '3483' then 1 -- discontinued icd-9\n            when icd9_code between '64940'\n            and '64944' then 1\n            when icd9_code = '7687' then 1\n            when icd9_code between '76870'\n            and '76873' then 1\n            when icd9_code = '7803' then 1\n            when icd9_code = '78031' then 1\n            when icd9_code = '78032' then 1\n            when icd9_code = '78033' then 1\n            when icd9_code = '78039' then 1\n            when icd9_code = '78097' then 1\n            when icd9_code = '7843' then 1\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when icd9_code between '490'\n            and '4928' then 1\n            when icd9_code between '49300'\n            and '49392' then 1\n            when icd9_code between '494'\n            and '4941' then 1\n            when icd9_code between '4950'\n            and '505' then 1\n            when icd9_code = '5064' then 1\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when icd9_code between '25000'\n            and '25033' then 1\n            when icd9_code between '64800'\n            and '64804' then 1\n            when icd9_code between '24900'\n            and '24931' then 1\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when icd9_code between '25040'\n            and '25093' then 1\n            when icd9_code = '7751' then 1\n            when icd9_code between '24940'\n            and '24991' then 1\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when icd9_code between '243'\n            and '2442' then 1\n            when icd9_code = '2448' then 1\n            when icd9_code = '2449' then 1\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code = '585' then 1 -- discontinued code\n            when icd9_code = '5853' then 1\n            when icd9_code = '5854' then 1\n            when icd9_code = '5855' then 1\n            when icd9_code = '5856' then 1\n            when icd9_code = '5859' then 1\n            when icd9_code = '586' then 1\n            when icd9_code = 'V420' then 1\n            when icd9_code = 'V451' then 1\n            when icd9_code between 'V560'\n            and 'V5632' then 1\n            when icd9_code = 'V568' then 1\n            when icd9_code between 'V4511'\n            and 'V4512' then 1\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code = '07022' then 1\n            when icd9_code = '07023' then 1\n            when icd9_code = '07032' then 1\n            when icd9_code = '07033' then 1\n            when icd9_code = '07044' then 1\n            when icd9_code = '07054' then 1\n            when icd9_code = '4560' then 1\n            when icd9_code = '4561' then 1\n            when icd9_code = '45620' then 1\n            when icd9_code = '45621' then 1\n            when icd9_code = '5710' then 1\n            when icd9_code = '5712' then 1\n            when icd9_code = '5713' then 1\n            when icd9_code between '57140'\n            and '57149' then 1\n            when icd9_code = '5715' then 1\n            when icd9_code = '5716' then 1\n            when icd9_code = '5718' then 1\n            when icd9_code = '5719' then 1\n            when icd9_code = '5723' then 1\n            when icd9_code = '5728' then 1\n            when icd9_code = '5735' then 1\n            when icd9_code = 'V427' then 1\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when icd9_code = '53141' then 1\n            when icd9_code = '53151' then 1\n            when icd9_code = '53161' then 1\n            when icd9_code = '53170' then 1\n            when icd9_code = '53171' then 1\n            when icd9_code = '53191' then 1\n            when icd9_code = '53241' then 1\n            when icd9_code = '53251' then 1\n            when icd9_code = '53261' then 1\n            when icd9_code = '53270' then 1\n            when icd9_code = '53271' then 1\n            when icd9_code = '53291' then 1\n            when icd9_code = '53341' then 1\n            when icd9_code = '53351' then 1\n            when icd9_code = '53361' then 1\n            when icd9_code = '53370' then 1\n            when icd9_code = '53371' then 1\n            when icd9_code = '53391' then 1\n            when icd9_code = '53441' then 1\n            when icd9_code = '53451' then 1\n            when icd9_code = '53461' then 1\n            when icd9_code = '53470' then 1\n            when icd9_code = '53471' then 1\n            when icd9_code = '53491' then 1\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when icd9_code between '042'\n            and '0449' then 1\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when icd9_code between '20000'\n            and '20238' then 1\n            when icd9_code between '20250'\n            and '20301' then 1\n            when icd9_code = '2386' then 1\n            when icd9_code = '2733' then 1\n            when icd9_code between '20302'\n            and '20382' then 1\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when icd9_code between '1960'\n            and '1991' then 1\n            when icd9_code between '20970'\n            and '20975' then 1\n            when icd9_code = '20979' then 1\n            when icd9_code = '78951' then 1\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when icd9_code between '1400'\n            and '1729' then 1\n            when icd9_code between '1740'\n            and '1759' then 1\n            when icd9_code between '179'\n            and '1958' then 1\n            when icd9_code between '20900'\n            and '20924' then 1\n            when icd9_code between '20925'\n            and '2093' then 1\n            when icd9_code between '20930'\n            and '20936' then 1\n            when icd9_code between '25801'\n            and '25803' then 1\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code = '7010' then 1\n            when icd9_code between '7100'\n            and '7109' then 1\n            when icd9_code between '7140'\n            and '7149' then 1\n            when icd9_code between '7200'\n            and '7209' then 1\n            when icd9_code = '725' then 1\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when icd9_code between '2860'\n            and '2869' then 1\n            when icd9_code = '2871' then 1\n            when icd9_code between '2873'\n            and '2875' then 1\n            when icd9_code between '64930'\n            and '64934' then 1\n            when icd9_code = '28984' then 1\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when icd9_code = '2780' then 1\n            when icd9_code = '27800' then 1\n            when icd9_code = '27801' then 1\n            when icd9_code = '27803' then 1\n            when icd9_code between '64910'\n            and '64914' then 1\n            when icd9_code between 'V8530'\n            and 'V8539' then 1\n            when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n            when icd9_code between 'V8541'\n            and 'V8545' then 1\n            when icd9_code = 'V8554' then 1\n            when icd9_code = '79391' then 1\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when icd9_code between '260'\n            and '2639' then 1\n            when icd9_code between '78321'\n            and '78322' then 1\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when icd9_code between '2760'\n            and '2769' then 1\n        end as lytes\n        /* Fluid and electrolyte disorders - note:\n         this comorbidity should be dropped when\n         used with the AHRQ Patient Safety Indicators*/\n,\n        CASE\n            when icd9_code = '2800' then 1\n            when icd9_code between '64820'\n            and '64824' then 1\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when icd9_code between '2801'\n            and '2819' then 1\n            when icd9_code between '28521'\n            and '28529' then 1\n            when icd9_code = '2859' then 1\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when icd9_code between '2910'\n            and '2913' then 1\n            when icd9_code = '2915' then 1\n            when icd9_code = '2918' then 1\n            when icd9_code = '29181' then 1\n            when icd9_code = '29182' then 1\n            when icd9_code = '29189' then 1\n            when icd9_code = '2919' then 1\n            when icd9_code between '30300'\n            and '30393' then 1\n            when icd9_code between '30500'\n            and '30503' then 1\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code = '2920' then 1\n            when icd9_code between '29282'\n            and '29289' then 1\n            when icd9_code = '2929' then 1\n            when icd9_code between '30400'\n            and '30493' then 1\n            when icd9_code between '30520'\n            and '30593' then 1\n            when icd9_code between '64830'\n            and '64834' then 1\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code between '29500'\n            and '2989' then 1\n            when icd9_code = '29910' then 1\n            when icd9_code = '29911' then 1\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when icd9_code = '3004' then 1\n            when icd9_code = '30112' then 1\n            when icd9_code = '3090' then 1\n            when icd9_code = '3091' then 1\n            when icd9_code = '311' then 1\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    WHERE\n        seq_num = 1\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arythm) as arythm,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(htnpreg) as htnpreg,\n        max(htnwochf) as htnwochf,\n        max(htnwchf) as htnwchf,\n        max(hrenworf) as hrenworf,\n        max(hrenwrf) as hrenwrf,\n        max(hhrwohrf) as hhrwohrf,\n        max(hhrwchf) as hhrwchf,\n        max(hhrwrf) as hhrwrf,\n        max(hhrwhrf) as hhrwhrf,\n        max(ohtnpreg) as ohtnpreg,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- DRG FILTER --\n,\nmsdrg as (\n    select\n        hadm_id\n        /**** V29 MS-DRG Formats ****/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 001\n            and 002 then 1\n            when d.drg_code between 215\n            and 238 then 1\n            when d.drg_code between 242\n            and 252 then 1\n            when d.drg_code between 253\n            and 254 then 1\n            when d.drg_code between 258\n            and 262 then 1\n            when d.drg_code between 265\n            and 267 then 1\n            when d.drg_code between 280\n            and 293 then 1\n            when d.drg_code between 296\n            and 298 then 1\n            when d.drg_code between 302\n            and 303 then 1\n            when d.drg_code between 306\n            and 313 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code between 299\n            and 301 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 656\n            and 661 then 1\n            when d.drg_code between 673\n            and 675 then 1\n            when d.drg_code between 682\n            and 700 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 020\n            and 042 then 1\n            when d.drg_code between 052\n            and 103 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code between 020\n            and 022 then 1\n            when d.drg_code between 034\n            and 039 then 1\n            when d.drg_code between 064\n            and 072 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code between 190\n            and 192 then 1\n            when d.drg_code between 202\n            and 203 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code between 637\n            and 639 then 1\n            else 0\n        end as DIABDRG\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code between 625\n            and 627 then 1\n            when d.drg_code between 643\n            and 645 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 682\n            and 685 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 420\n            and 425 then 1\n            when d.drg_code between 432\n            and 434 then 1\n            when d.drg_code between 441\n            and 446 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 377\n            and 384 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code between 969\n            and 970 then 1\n            when d.drg_code between 974\n            and 977 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 820\n            and 830 then 1\n            when d.drg_code between 834\n            and 849 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 054 then 1\n            when d.drg_code = 055 then 1\n            when d.drg_code between 146\n            and 148 then 1\n            when d.drg_code between 180\n            and 182 then 1\n            when d.drg_code between 374\n            and 376 then 1\n            when d.drg_code between 435\n            and 437 then 1\n            when d.drg_code between 542\n            and 544 then 1\n            when d.drg_code between 582\n            and 585 then 1\n            when d.drg_code between 597\n            and 599 then 1\n            when d.drg_code between 656\n            and 658 then 1\n            when d.drg_code between 686\n            and 688 then 1\n            when d.drg_code between 715\n            and 716 then 1\n            when d.drg_code between 722\n            and 724 then 1\n            when d.drg_code between 736\n            and 741 then 1\n            when d.drg_code between 754\n            and 756 then 1\n            when d.drg_code between 826\n            and 830 then 1\n            when d.drg_code between 843\n            and 849 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code between 545\n            and 547 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 640\n            and 641 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code between 808\n            and 812 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 894\n            and 897 then 1\n            else 0\n        end as alcdrg\n        /*Coagulation disorders*/\n,\n        case\n            when d.drg_code = 813 then 1\n            else 0\n        end as coagdrg\n        /*Hypertensive Complicated  */\n,\n        case\n            when d.drg_code = 077 then 1\n            when d.drg_code = 078 then 1\n            when d.drg_code = 304 then 1\n            else 0\n        end as htncxdrg\n        /*Hypertensive Uncomplicated  */\n,\n        case\n            when d.drg_code = 079 then 1\n            when d.drg_code = 305 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 885 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code between 619\n            and 621 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 881 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'MS'\n        ) d\n),\nhcfadrg as (\n    select\n        hadm_id\n        /** V24 DRG Formats  **/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 103\n            and 112 then 1\n            when d.drg_code between 115\n            and 118 then 1\n            when d.drg_code between 121\n            and 127 then 1\n            when d.drg_code = 129 then 1\n            when d.drg_code = 132 then 1\n            when d.drg_code = 133 then 1\n            when d.drg_code between 135\n            and 143 then 1\n            when d.drg_code between 514\n            and 518 then 1\n            when d.drg_code between 525\n            and 527 then 1\n            when d.drg_code between 535\n            and 536 then 1\n            when d.drg_code between 547\n            and 550 then 1\n            when d.drg_code between 551\n            and 558 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code = 130 then 1\n            when d.drg_code = 131 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code between 302\n            and 305 then 1\n            when d.drg_code between 315\n            and 333 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 1\n            and 35 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code between 528\n            and 534 then 1\n            when d.drg_code = 543 then 1\n            when d.drg_code between 559\n            and 564 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code = 5 then 1\n            when d.drg_code between 14\n            and 17 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code = 528 then 1\n            when d.drg_code between 533\n            and 534 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code = 88 then 1\n            when d.drg_code between 96\n            and 98 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code = 294 then 1\n            when d.drg_code = 295 then 1\n            else 0\n        end as diabdrg\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code = 290 then 1\n            when d.drg_code = 300 then 1\n            when d.drg_code = 301 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 302 then 1\n            when d.drg_code = 316 then 1\n            when d.drg_code = 317 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 199\n            and 202 then 1\n            when d.drg_code between 205\n            and 208 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 174\n            and 178 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code = 488 then 1\n            when d.drg_code = 489 then 1\n            when d.drg_code = 490 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 400\n            and 414 then 1\n            when d.drg_code = 473 then 1\n            when d.drg_code = 492 then 1\n            when d.drg_code between 539\n            and 540 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 10 then 1\n            when d.drg_code = 11 then 1\n            when d.drg_code = 64 then 1\n            when d.drg_code = 82 then 1\n            when d.drg_code = 172 then 1\n            when d.drg_code = 173 then 1\n            when d.drg_code = 199 then 1\n            when d.drg_code = 203 then 1\n            when d.drg_code = 239 then 1\n            when d.drg_code between 257\n            and 260 then 1\n            when d.drg_code = 274 then 1\n            when d.drg_code = 275 then 1\n            when d.drg_code = 303 then 1\n            when d.drg_code = 318 then 1\n            when d.drg_code = 319 then 1\n            when d.drg_code = 338 then 1\n            when d.drg_code = 344 then 1\n            when d.drg_code = 346 then 1\n            when d.drg_code = 347 then 1\n            when d.drg_code = 354 then 1\n            when d.drg_code = 355 then 1\n            when d.drg_code = 357 then 1\n            when d.drg_code = 363 then 1\n            when d.drg_code = 366 then 1\n            when d.drg_code = 367 then 1\n            when d.drg_code between 406\n            and 414 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code = 240 then 1\n            when d.drg_code = 241 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 296\n            and 298 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code = 395 then 1\n            when d.drg_code = 396 then 1\n            when d.drg_code = 574 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 433\n            and 437 then 1\n            when d.drg_code between 521\n            and 523 then 1\n            else 0\n        end as alcdrg\n        /* Coagulation disorders */\n,\n        case\n            when d.drg_code = 397 then 1\n            else 0\n        end as coagdrg\n        /* Hypertensive Complicated */\n,\n        case\n            when d.drg_code = 22 then 1\n            when d.drg_code = 134 then 1\n            else 0\n        end as htncxdrg\n        /* Hypertensive Uncomplicated */\n,\n        case\n            when d.drg_code = 134 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 430 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code = 288 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 426 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'HCFA'\n        ) d\n) -- merge DRG groups together\n,\ndrggrp as (\n    select\n        hadm_id,\n        max(carddrg) as carddrg,\n        max(peridrg) as peridrg,\n        max(renaldrg) as renaldrg,\n        max(nervdrg) as nervdrg,\n        max(ceredrg) as ceredrg,\n        max(pulmdrg) as pulmdrg,\n        max(diabdrg) as diabdrg,\n        max(hypodrg) as hypodrg,\n        max(renfdrg) as renfdrg,\n        max(liverdrg) as liverdrg,\n        max(ulcedrg) as ulcedrg,\n        max(hivdrg) as hivdrg,\n        max(leukdrg) as leukdrg,\n        max(cancdrg) as cancdrg,\n        max(arthdrg) as arthdrg,\n        max(nutrdrg) as nutrdrg,\n        max(anemdrg) as anemdrg,\n        max(alcdrg) as alcdrg,\n        max(coagdrg) as coagdrg,\n        max(htncxdrg) as htncxdrg,\n        max(htndrg) as htndrg,\n        max(psydrg) as psydrg,\n        max(obesedrg) as obesedrg,\n        max(deprsdrg) as deprsdrg\n    from\n        (\n            select\n                d1.*\n            from\n                msdrg d1\n            UNION\n            DISTINCT\n            select\n                d1.*\n            from\n                hcfadrg d1\n        ) d\n    group by\n        d.hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.subject_id,\n    adm.hadm_id,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when chf = 1 then 1\n        when htnwchf = 1 then 1\n        when hhrwchf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as congestive_heart_failure,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when arythm = 1 then 1\n        else 0\n    end as cardiac_arrhythmias,\n    case\n        when carddrg = 1 then 0\n        when valve = 1 then 1\n        else 0\n    end as valvular_disease,\n    case\n        when carddrg = 1\n        or pulmdrg = 1 then 0\n        when pulmcirc = 1 then 1\n        else 0\n    end as pulmonary_circulation,\n    case\n        when peridrg = 1 then 0\n        when perivasc = 1 then 1\n        else 0\n    end as peripheral_vascular -- we combine 'htn' and 'htncx' into 'HYPERTENSION'\n    -- note 'htn' (hypertension) is only 1 if 'htncx' (complicated hypertension) is 0\n    -- also if htncxdrg = 1, then htndrg = 1\n    -- In the original Sas code, it appears that:\n    --  HTN can be 1\n    --  HTNCX is set to 0 by DRGs\n    --  but HTN_C is still 1, because HTN is 1\n    -- so we have to do this complex addition.\n,\n    case\n        when (\n            -- first hypertension\n            case\n                when htndrg = 0 then 0\n                when htn = 1 then 1\n                else 0\n            end\n        ) + (\n            -- next complicated hypertension\n            case\n                when htncx = 1\n                and htncxdrg = 1 then 0\n                when htnpreg = 1\n                and htncxdrg = 1 then 0\n                when htnwochf = 1\n                and (\n                    htncxdrg = 1\n                    OR carddrg = 1\n                ) then 0\n                when htnwchf = 1\n                and htncxdrg = 1 then 0\n                when htnwchf = 1\n                and carddrg = 1 then 0\n                when hrenworf = 1\n                and (\n                    htncxdrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hrenwrf = 1\n                and htncxdrg = 1 then 0\n                when hrenwrf = 1\n                and renaldrg = 1 then 0\n                when hhrwohrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwchf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwhrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when ohtnpreg = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when htncx = 1 then 1\n                when htnpreg = 1 then 1\n                when htnwochf = 1 then 1\n                when htnwchf = 1 then 1\n                when hrenworf = 1 then 1\n                when hrenwrf = 1 then 1\n                when hhrwohrf = 1 then 1\n                when hhrwchf = 1 then 1\n                when hhrwrf = 1 then 1\n                when hhrwhrf = 1 then 1\n                when ohtnpreg = 1 then 1\n                else 0\n            end\n        ) > 0 then 1\n        else 0\n    end as hypertension,\n    case\n        when ceredrg = 1 then 0\n        when para = 1 then 1\n        else 0\n    end as paralysis,\n    case\n        when nervdrg = 1 then 0\n        when neuro = 1 then 1\n        else 0\n    end as other_neurological,\n    case\n        when pulmdrg = 1 then 0\n        when chrnlung = 1 then 1\n        else 0\n    end as chronic_pulmonary,\n    case\n        -- only the more severe comorbidity (complicated diabetes) is kept\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    case\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 1\n        else 0\n    end as diabetes_complicated,\n    case\n        when hypodrg = 1 then 0\n        when hypothy = 1 then 1\n        else 0\n    end as hypothyroidism,\n    case\n        when renaldrg = 1 then 0\n        when renlfail = 1 then 1\n        when hrenwrf = 1 then 1\n        when hhrwrf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as renal_failure,\n    case\n        when liverdrg = 1 then 0\n        when liver = 1 then 1\n        else 0\n    end as liver_disease,\n    case\n        when ulcedrg = 1 then 0\n        when ulcer = 1 then 1\n        else 0\n    end as peptic_ulcer,\n    case\n        when hivdrg = 1 then 0\n        when aids = 1 then 1\n        else 0\n    end as aids,\n    case\n        when leukdrg = 1 then 0\n        when lymph = 1 then 1\n        else 0\n    end as lymphoma,\n    case\n        when cancdrg = 1 then 0\n        when mets = 1 then 1\n        else 0\n    end as metastatic_cancer,\n    case\n        when cancdrg = 1 then 0 -- only the more severe comorbidity (metastatic cancer) is kept\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    case\n        when arthdrg = 1 then 0\n        when arth = 1 then 1\n        else 0\n    end as rheumatoid_arthritis,\n    case\n        when coagdrg = 1 then 0\n        when coag = 1 then 1\n        else 0\n    end as coagulopathy,\n    case\n        when nutrdrg = 1\n        OR obesedrg = 1 then 0\n        when obese = 1 then 1\n        else 0\n    end as obesity,\n    case\n        when nutrdrg = 1 then 0\n        when wghtloss = 1 then 1\n        else 0\n    end as weight_loss,\n    case\n        when nutrdrg = 1 then 0\n        when lytes = 1 then 1\n        else 0\n    end as fluid_electrolyte,\n    case\n        when anemdrg = 1 then 0\n        when bldloss = 1 then 1\n        else 0\n    end as blood_loss_anemia,\n    case\n        when anemdrg = 1 then 0\n        when anemdef = 1 then 1\n        else 0\n    end as deficiency_anemias,\n    case\n        when alcdrg = 1 then 0\n        when alcohol = 1 then 1\n        else 0\n    end as alcohol_abuse,\n    case\n        when alcdrg = 1 then 0\n        when drug = 1 then 1\n        else 0\n    end as drug_abuse,\n    case\n        when psydrg = 1 then 0\n        when psych = 1 then 1\n        else 0\n    end as psychoses,\n    case\n        when deprsdrg = 1 then 0\n        when depress = 1 then 1\n        else 0\n    end as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\n    left join drggrp d on adm.hadm_id = d.hadm_id\norder by\n    adm.hadm_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_tmp\"\n  as (\n    -- This code uses the latest version of Elixhauser provided by AHRQ\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code -- note that these codes will seem incomplete at first\n        -- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n        -- these codes are captured by hypertension flags instead\n        -- later there are some complicated rules which confirm/reject those codes as chf\n,\n        CASE\n            when icd9_code = '39891' then 1\n            when icd9_code between '4280'\n            and '4289' then 1\n        end as chf\n        /* Congestive heart failure */\n        -- cardiac arrhythmias is removed in up to date versions\n,\n        case\n            when icd9_code = '42610' then 1\n            when icd9_code = '42611' then 1\n            when icd9_code = '42613' then 1\n            when icd9_code between '4262'\n            and '42653' then 1\n            when icd9_code between '4266'\n            and '42689' then 1\n            when icd9_code = '4270' then 1\n            when icd9_code = '4272' then 1\n            when icd9_code = '42731' then 1\n            when icd9_code = '42760' then 1\n            when icd9_code = '4279' then 1\n            when icd9_code = '7850' then 1\n            when icd9_code between 'V450'\n            and 'V4509' then 1\n            when icd9_code between 'V533'\n            and 'V5339' then 1\n        end as arythm\n        /* Cardiac arrhythmias */\n,\n        CASE\n            when icd9_code between '09320'\n            and '09324' then 1\n            when icd9_code between '3940'\n            and '3971' then 1\n            when icd9_code = '3979' then 1\n            when icd9_code between '4240'\n            and '42499' then 1\n            when icd9_code between '7463'\n            and '7466' then 1\n            when icd9_code = 'V422' then 1\n            when icd9_code = 'V433' then 1\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when icd9_code between '41511'\n            and '41519' then 1\n            when icd9_code between '4160'\n            and '4169' then 1\n            when icd9_code = '4179' then 1\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when icd9_code between '4400'\n            and '4409' then 1\n            when icd9_code between '44100'\n            and '4419' then 1\n            when icd9_code between '4420'\n            and '4429' then 1\n            when icd9_code between '4431'\n            and '4439' then 1\n            when icd9_code between '44421'\n            and '44422' then 1\n            when icd9_code = '4471' then 1\n            when icd9_code = '449' then 1\n            when icd9_code = '5571' then 1\n            when icd9_code = '5579' then 1\n            when icd9_code = 'V434' then 1\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when icd9_code = '4011' then 1\n            when icd9_code = '4019' then 1\n            when icd9_code between '64200'\n            and '64204' then 1\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when icd9_code = '4010' then 1\n            when icd9_code = '4372' then 1\n        end as htncx\n        /* Hypertension, complicated */\n        /******************************************************************/\n        /* The following are special, temporary formats used in the       */\n        /* creation of the hypertension complicated comorbidity when      */\n        /* overlapping with congestive heart failure or renal failure     */\n        /* occurs. These temporary formats are referenced in the program  */\n        /* called comoanaly2009.txt.                                      */\n        /******************************************************************/\n,\n        CASE\n            when icd9_code between '64220'\n            and '64224' then 1\n        end as htnpreg\n        /* Pre-existing hypertension complicating pregnancy */\n,\n        CASE\n            when icd9_code = '40200' then 1\n            when icd9_code = '40210' then 1\n            when icd9_code = '40290' then 1\n            when icd9_code = '40509' then 1\n            when icd9_code = '40519' then 1\n            when icd9_code = '40599' then 1\n        end as htnwochf\n        /* Hypertensive heart disease without heart failure */\n,\n        CASE\n            when icd9_code = '40201' then 1\n            when icd9_code = '40211' then 1\n            when icd9_code = '40291' then 1\n        end as htnwchf\n        /* Hypertensive heart disease with heart failure */\n,\n        CASE\n            when icd9_code = '40300' then 1\n            when icd9_code = '40310' then 1\n            when icd9_code = '40390' then 1\n            when icd9_code = '40501' then 1\n            when icd9_code = '40511' then 1\n            when icd9_code = '40591' then 1\n            when icd9_code between '64210'\n            and '64214' then 1\n        end as hrenworf\n        /* Hypertensive renal disease without renal failure */\n,\n        CASE\n            when icd9_code = '40301' then 1\n            when icd9_code = '40311' then 1\n            when icd9_code = '40391' then 1\n        end as hrenwrf\n        /* Hypertensive renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40400' then 1\n            when icd9_code = '40410' then 1\n            when icd9_code = '40490' then 1\n        end as hhrwohrf\n        /* Hypertensive heart and renal disease without heart or renal failure */\n,\n        CASE\n            when icd9_code = '40401' then 1\n            when icd9_code = '40411' then 1\n            when icd9_code = '40491' then 1\n        end as hhrwchf\n        /* Hypertensive heart and renal disease with heart failure */\n,\n        CASE\n            when icd9_code = '40402' then 1\n            when icd9_code = '40412' then 1\n            when icd9_code = '40492' then 1\n        end as hhrwrf\n        /* Hypertensive heart and renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40403' then 1\n            when icd9_code = '40413' then 1\n            when icd9_code = '40493' then 1\n        end as hhrwhrf\n        /* Hypertensive heart and renal disease with heart and renal failure */\n,\n        CASE\n            when icd9_code between '64270'\n            and '64274' then 1\n            when icd9_code between '64290'\n            and '64294' then 1\n        end as ohtnpreg\n        /* Other hypertension in pregnancy */\n        /******************** End Temporary Formats ***********************/\n,\n        CASE\n            when icd9_code between '3420'\n            and '3449' then 1\n            when icd9_code between '43820'\n            and '43853' then 1\n            when icd9_code = '78072' then 1\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code between '3300'\n            and '3319' then 1\n            when icd9_code = '3320' then 1\n            when icd9_code = '3334' then 1\n            when icd9_code = '3335' then 1\n            when icd9_code = '3337' then 1\n            when icd9_code in ('33371', '33372', '33379', '33385', '33394') then 1\n            when icd9_code between '3340'\n            and '3359' then 1\n            when icd9_code = '3380' then 1\n            when icd9_code = '340' then 1\n            when icd9_code between '3411'\n            and '3419' then 1\n            when icd9_code between '34500'\n            and '34511' then 1\n            when icd9_code between '3452'\n            and '3453' then 1\n            when icd9_code between '34540'\n            and '34591' then 1\n            when icd9_code between '34700'\n            and '34701' then 1\n            when icd9_code between '34710'\n            and '34711' then 1\n            when icd9_code = '3483' then 1 -- discontinued icd-9\n            when icd9_code between '64940'\n            and '64944' then 1\n            when icd9_code = '7687' then 1\n            when icd9_code between '76870'\n            and '76873' then 1\n            when icd9_code = '7803' then 1\n            when icd9_code = '78031' then 1\n            when icd9_code = '78032' then 1\n            when icd9_code = '78033' then 1\n            when icd9_code = '78039' then 1\n            when icd9_code = '78097' then 1\n            when icd9_code = '7843' then 1\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when icd9_code between '490'\n            and '4928' then 1\n            when icd9_code between '49300'\n            and '49392' then 1\n            when icd9_code between '494'\n            and '4941' then 1\n            when icd9_code between '4950'\n            and '505' then 1\n            when icd9_code = '5064' then 1\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when icd9_code between '25000'\n            and '25033' then 1\n            when icd9_code between '64800'\n            and '64804' then 1\n            when icd9_code between '24900'\n            and '24931' then 1\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when icd9_code between '25040'\n            and '25093' then 1\n            when icd9_code = '7751' then 1\n            when icd9_code between '24940'\n            and '24991' then 1\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when icd9_code between '243'\n            and '2442' then 1\n            when icd9_code = '2448' then 1\n            when icd9_code = '2449' then 1\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code = '585' then 1 -- discontinued code\n            when icd9_code = '5853' then 1\n            when icd9_code = '5854' then 1\n            when icd9_code = '5855' then 1\n            when icd9_code = '5856' then 1\n            when icd9_code = '5859' then 1\n            when icd9_code = '586' then 1\n            when icd9_code = 'V420' then 1\n            when icd9_code = 'V451' then 1\n            when icd9_code between 'V560'\n            and 'V5632' then 1\n            when icd9_code = 'V568' then 1\n            when icd9_code between 'V4511'\n            and 'V4512' then 1\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code = '07022' then 1\n            when icd9_code = '07023' then 1\n            when icd9_code = '07032' then 1\n            when icd9_code = '07033' then 1\n            when icd9_code = '07044' then 1\n            when icd9_code = '07054' then 1\n            when icd9_code = '4560' then 1\n            when icd9_code = '4561' then 1\n            when icd9_code = '45620' then 1\n            when icd9_code = '45621' then 1\n            when icd9_code = '5710' then 1\n            when icd9_code = '5712' then 1\n            when icd9_code = '5713' then 1\n            when icd9_code between '57140'\n            and '57149' then 1\n            when icd9_code = '5715' then 1\n            when icd9_code = '5716' then 1\n            when icd9_code = '5718' then 1\n            when icd9_code = '5719' then 1\n            when icd9_code = '5723' then 1\n            when icd9_code = '5728' then 1\n            when icd9_code = '5735' then 1\n            when icd9_code = 'V427' then 1\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when icd9_code = '53141' then 1\n            when icd9_code = '53151' then 1\n            when icd9_code = '53161' then 1\n            when icd9_code = '53170' then 1\n            when icd9_code = '53171' then 1\n            when icd9_code = '53191' then 1\n            when icd9_code = '53241' then 1\n            when icd9_code = '53251' then 1\n            when icd9_code = '53261' then 1\n            when icd9_code = '53270' then 1\n            when icd9_code = '53271' then 1\n            when icd9_code = '53291' then 1\n            when icd9_code = '53341' then 1\n            when icd9_code = '53351' then 1\n            when icd9_code = '53361' then 1\n            when icd9_code = '53370' then 1\n            when icd9_code = '53371' then 1\n            when icd9_code = '53391' then 1\n            when icd9_code = '53441' then 1\n            when icd9_code = '53451' then 1\n            when icd9_code = '53461' then 1\n            when icd9_code = '53470' then 1\n            when icd9_code = '53471' then 1\n            when icd9_code = '53491' then 1\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when icd9_code between '042'\n            and '0449' then 1\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when icd9_code between '20000'\n            and '20238' then 1\n            when icd9_code between '20250'\n            and '20301' then 1\n            when icd9_code = '2386' then 1\n            when icd9_code = '2733' then 1\n            when icd9_code between '20302'\n            and '20382' then 1\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when icd9_code between '1960'\n            and '1991' then 1\n            when icd9_code between '20970'\n            and '20975' then 1\n            when icd9_code = '20979' then 1\n            when icd9_code = '78951' then 1\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when icd9_code between '1400'\n            and '1729' then 1\n            when icd9_code between '1740'\n            and '1759' then 1\n            when icd9_code between '179'\n            and '1958' then 1\n            when icd9_code between '20900'\n            and '20924' then 1\n            when icd9_code between '20925'\n            and '2093' then 1\n            when icd9_code between '20930'\n            and '20936' then 1\n            when icd9_code between '25801'\n            and '25803' then 1\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code = '7010' then 1\n            when icd9_code between '7100'\n            and '7109' then 1\n            when icd9_code between '7140'\n            and '7149' then 1\n            when icd9_code between '7200'\n            and '7209' then 1\n            when icd9_code = '725' then 1\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when icd9_code between '2860'\n            and '2869' then 1\n            when icd9_code = '2871' then 1\n            when icd9_code between '2873'\n            and '2875' then 1\n            when icd9_code between '64930'\n            and '64934' then 1\n            when icd9_code = '28984' then 1\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when icd9_code = '2780' then 1\n            when icd9_code = '27800' then 1\n            when icd9_code = '27801' then 1\n            when icd9_code = '27803' then 1\n            when icd9_code between '64910'\n            and '64914' then 1\n            when icd9_code between 'V8530'\n            and 'V8539' then 1\n            when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n            when icd9_code between 'V8541'\n            and 'V8545' then 1\n            when icd9_code = 'V8554' then 1\n            when icd9_code = '79391' then 1\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when icd9_code between '260'\n            and '2639' then 1\n            when icd9_code between '78321'\n            and '78322' then 1\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when icd9_code between '2760'\n            and '2769' then 1\n        end as lytes\n        /* Fluid and electrolyte disorders - note:\n         this comorbidity should be dropped when\n         used with the AHRQ Patient Safety Indicators*/\n,\n        CASE\n            when icd9_code = '2800' then 1\n            when icd9_code between '64820'\n            and '64824' then 1\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when icd9_code between '2801'\n            and '2819' then 1\n            when icd9_code between '28521'\n            and '28529' then 1\n            when icd9_code = '2859' then 1\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when icd9_code between '2910'\n            and '2913' then 1\n            when icd9_code = '2915' then 1\n            when icd9_code = '2918' then 1\n            when icd9_code = '29181' then 1\n            when icd9_code = '29182' then 1\n            when icd9_code = '29189' then 1\n            when icd9_code = '2919' then 1\n            when icd9_code between '30300'\n            and '30393' then 1\n            when icd9_code between '30500'\n            and '30503' then 1\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code = '2920' then 1\n            when icd9_code between '29282'\n            and '29289' then 1\n            when icd9_code = '2929' then 1\n            when icd9_code between '30400'\n            and '30493' then 1\n            when icd9_code between '30520'\n            and '30593' then 1\n            when icd9_code between '64830'\n            and '64834' then 1\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code between '29500'\n            and '2989' then 1\n            when icd9_code = '29910' then 1\n            when icd9_code = '29911' then 1\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when icd9_code = '3004' then 1\n            when icd9_code = '30112' then 1\n            when icd9_code = '3090' then 1\n            when icd9_code = '3091' then 1\n            when icd9_code = '311' then 1\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    WHERE\n        seq_num = 1\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arythm) as arythm,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(htnpreg) as htnpreg,\n        max(htnwochf) as htnwochf,\n        max(htnwchf) as htnwchf,\n        max(hrenworf) as hrenworf,\n        max(hrenwrf) as hrenwrf,\n        max(hhrwohrf) as hhrwohrf,\n        max(hhrwchf) as hhrwchf,\n        max(hhrwrf) as hhrwrf,\n        max(hhrwhrf) as hhrwhrf,\n        max(ohtnpreg) as ohtnpreg,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- DRG FILTER --\n,\nmsdrg as (\n    select\n        hadm_id\n        /**** V29 MS-DRG Formats ****/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 001\n            and 002 then 1\n            when d.drg_code between 215\n            and 238 then 1\n            when d.drg_code between 242\n            and 252 then 1\n            when d.drg_code between 253\n            and 254 then 1\n            when d.drg_code between 258\n            and 262 then 1\n            when d.drg_code between 265\n            and 267 then 1\n            when d.drg_code between 280\n            and 293 then 1\n            when d.drg_code between 296\n            and 298 then 1\n            when d.drg_code between 302\n            and 303 then 1\n            when d.drg_code between 306\n            and 313 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code between 299\n            and 301 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 656\n            and 661 then 1\n            when d.drg_code between 673\n            and 675 then 1\n            when d.drg_code between 682\n            and 700 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 020\n            and 042 then 1\n            when d.drg_code between 052\n            and 103 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code between 020\n            and 022 then 1\n            when d.drg_code between 034\n            and 039 then 1\n            when d.drg_code between 064\n            and 072 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code between 190\n            and 192 then 1\n            when d.drg_code between 202\n            and 203 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code between 637\n            and 639 then 1\n            else 0\n        end as DIABDRG\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code between 625\n            and 627 then 1\n            when d.drg_code between 643\n            and 645 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 682\n            and 685 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 420\n            and 425 then 1\n            when d.drg_code between 432\n            and 434 then 1\n            when d.drg_code between 441\n            and 446 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 377\n            and 384 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code between 969\n            and 970 then 1\n            when d.drg_code between 974\n            and 977 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 820\n            and 830 then 1\n            when d.drg_code between 834\n            and 849 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 054 then 1\n            when d.drg_code = 055 then 1\n            when d.drg_code between 146\n            and 148 then 1\n            when d.drg_code between 180\n            and 182 then 1\n            when d.drg_code between 374\n            and 376 then 1\n            when d.drg_code between 435\n            and 437 then 1\n            when d.drg_code between 542\n            and 544 then 1\n            when d.drg_code between 582\n            and 585 then 1\n            when d.drg_code between 597\n            and 599 then 1\n            when d.drg_code between 656\n            and 658 then 1\n            when d.drg_code between 686\n            and 688 then 1\n            when d.drg_code between 715\n            and 716 then 1\n            when d.drg_code between 722\n            and 724 then 1\n            when d.drg_code between 736\n            and 741 then 1\n            when d.drg_code between 754\n            and 756 then 1\n            when d.drg_code between 826\n            and 830 then 1\n            when d.drg_code between 843\n            and 849 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code between 545\n            and 547 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 640\n            and 641 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code between 808\n            and 812 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 894\n            and 897 then 1\n            else 0\n        end as alcdrg\n        /*Coagulation disorders*/\n,\n        case\n            when d.drg_code = 813 then 1\n            else 0\n        end as coagdrg\n        /*Hypertensive Complicated  */\n,\n        case\n            when d.drg_code = 077 then 1\n            when d.drg_code = 078 then 1\n            when d.drg_code = 304 then 1\n            else 0\n        end as htncxdrg\n        /*Hypertensive Uncomplicated  */\n,\n        case\n            when d.drg_code = 079 then 1\n            when d.drg_code = 305 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 885 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code between 619\n            and 621 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 881 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'MS'\n        ) d\n),\nhcfadrg as (\n    select\n        hadm_id\n        /** V24 DRG Formats  **/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 103\n            and 112 then 1\n            when d.drg_code between 115\n            and 118 then 1\n            when d.drg_code between 121\n            and 127 then 1\n            when d.drg_code = 129 then 1\n            when d.drg_code = 132 then 1\n            when d.drg_code = 133 then 1\n            when d.drg_code between 135\n            and 143 then 1\n            when d.drg_code between 514\n            and 518 then 1\n            when d.drg_code between 525\n            and 527 then 1\n            when d.drg_code between 535\n            and 536 then 1\n            when d.drg_code between 547\n            and 550 then 1\n            when d.drg_code between 551\n            and 558 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code = 130 then 1\n            when d.drg_code = 131 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code between 302\n            and 305 then 1\n            when d.drg_code between 315\n            and 333 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 1\n            and 35 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code between 528\n            and 534 then 1\n            when d.drg_code = 543 then 1\n            when d.drg_code between 559\n            and 564 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code = 5 then 1\n            when d.drg_code between 14\n            and 17 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code = 528 then 1\n            when d.drg_code between 533\n            and 534 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code = 88 then 1\n            when d.drg_code between 96\n            and 98 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code = 294 then 1\n            when d.drg_code = 295 then 1\n            else 0\n        end as diabdrg\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code = 290 then 1\n            when d.drg_code = 300 then 1\n            when d.drg_code = 301 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 302 then 1\n            when d.drg_code = 316 then 1\n            when d.drg_code = 317 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 199\n            and 202 then 1\n            when d.drg_code between 205\n            and 208 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 174\n            and 178 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code = 488 then 1\n            when d.drg_code = 489 then 1\n            when d.drg_code = 490 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 400\n            and 414 then 1\n            when d.drg_code = 473 then 1\n            when d.drg_code = 492 then 1\n            when d.drg_code between 539\n            and 540 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 10 then 1\n            when d.drg_code = 11 then 1\n            when d.drg_code = 64 then 1\n            when d.drg_code = 82 then 1\n            when d.drg_code = 172 then 1\n            when d.drg_code = 173 then 1\n            when d.drg_code = 199 then 1\n            when d.drg_code = 203 then 1\n            when d.drg_code = 239 then 1\n            when d.drg_code between 257\n            and 260 then 1\n            when d.drg_code = 274 then 1\n            when d.drg_code = 275 then 1\n            when d.drg_code = 303 then 1\n            when d.drg_code = 318 then 1\n            when d.drg_code = 319 then 1\n            when d.drg_code = 338 then 1\n            when d.drg_code = 344 then 1\n            when d.drg_code = 346 then 1\n            when d.drg_code = 347 then 1\n            when d.drg_code = 354 then 1\n            when d.drg_code = 355 then 1\n            when d.drg_code = 357 then 1\n            when d.drg_code = 363 then 1\n            when d.drg_code = 366 then 1\n            when d.drg_code = 367 then 1\n            when d.drg_code between 406\n            and 414 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code = 240 then 1\n            when d.drg_code = 241 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 296\n            and 298 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code = 395 then 1\n            when d.drg_code = 396 then 1\n            when d.drg_code = 574 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 433\n            and 437 then 1\n            when d.drg_code between 521\n            and 523 then 1\n            else 0\n        end as alcdrg\n        /* Coagulation disorders */\n,\n        case\n            when d.drg_code = 397 then 1\n            else 0\n        end as coagdrg\n        /* Hypertensive Complicated */\n,\n        case\n            when d.drg_code = 22 then 1\n            when d.drg_code = 134 then 1\n            else 0\n        end as htncxdrg\n        /* Hypertensive Uncomplicated */\n,\n        case\n            when d.drg_code = 134 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 430 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code = 288 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 426 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'HCFA'\n        ) d\n) -- merge DRG groups together\n,\ndrggrp as (\n    select\n        hadm_id,\n        max(carddrg) as carddrg,\n        max(peridrg) as peridrg,\n        max(renaldrg) as renaldrg,\n        max(nervdrg) as nervdrg,\n        max(ceredrg) as ceredrg,\n        max(pulmdrg) as pulmdrg,\n        max(diabdrg) as diabdrg,\n        max(hypodrg) as hypodrg,\n        max(renfdrg) as renfdrg,\n        max(liverdrg) as liverdrg,\n        max(ulcedrg) as ulcedrg,\n        max(hivdrg) as hivdrg,\n        max(leukdrg) as leukdrg,\n        max(cancdrg) as cancdrg,\n        max(arthdrg) as arthdrg,\n        max(nutrdrg) as nutrdrg,\n        max(anemdrg) as anemdrg,\n        max(alcdrg) as alcdrg,\n        max(coagdrg) as coagdrg,\n        max(htncxdrg) as htncxdrg,\n        max(htndrg) as htndrg,\n        max(psydrg) as psydrg,\n        max(obesedrg) as obesedrg,\n        max(deprsdrg) as deprsdrg\n    from\n        (\n            select\n                d1.*\n            from\n                msdrg d1\n            UNION\n            DISTINCT\n            select\n                d1.*\n            from\n                hcfadrg d1\n        ) d\n    group by\n        d.hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.subject_id,\n    adm.hadm_id,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when chf = 1 then 1\n        when htnwchf = 1 then 1\n        when hhrwchf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as congestive_heart_failure,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when arythm = 1 then 1\n        else 0\n    end as cardiac_arrhythmias,\n    case\n        when carddrg = 1 then 0\n        when valve = 1 then 1\n        else 0\n    end as valvular_disease,\n    case\n        when carddrg = 1\n        or pulmdrg = 1 then 0\n        when pulmcirc = 1 then 1\n        else 0\n    end as pulmonary_circulation,\n    case\n        when peridrg = 1 then 0\n        when perivasc = 1 then 1\n        else 0\n    end as peripheral_vascular -- we combine 'htn' and 'htncx' into 'HYPERTENSION'\n    -- note 'htn' (hypertension) is only 1 if 'htncx' (complicated hypertension) is 0\n    -- also if htncxdrg = 1, then htndrg = 1\n    -- In the original Sas code, it appears that:\n    --  HTN can be 1\n    --  HTNCX is set to 0 by DRGs\n    --  but HTN_C is still 1, because HTN is 1\n    -- so we have to do this complex addition.\n,\n    case\n        when (\n            -- first hypertension\n            case\n                when htndrg = 0 then 0\n                when htn = 1 then 1\n                else 0\n            end\n        ) + (\n            -- next complicated hypertension\n            case\n                when htncx = 1\n                and htncxdrg = 1 then 0\n                when htnpreg = 1\n                and htncxdrg = 1 then 0\n                when htnwochf = 1\n                and (\n                    htncxdrg = 1\n                    OR carddrg = 1\n                ) then 0\n                when htnwchf = 1\n                and htncxdrg = 1 then 0\n                when htnwchf = 1\n                and carddrg = 1 then 0\n                when hrenworf = 1\n                and (\n                    htncxdrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hrenwrf = 1\n                and htncxdrg = 1 then 0\n                when hrenwrf = 1\n                and renaldrg = 1 then 0\n                when hhrwohrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwchf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwhrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when ohtnpreg = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when htncx = 1 then 1\n                when htnpreg = 1 then 1\n                when htnwochf = 1 then 1\n                when htnwchf = 1 then 1\n                when hrenworf = 1 then 1\n                when hrenwrf = 1 then 1\n                when hhrwohrf = 1 then 1\n                when hhrwchf = 1 then 1\n                when hhrwrf = 1 then 1\n                when hhrwhrf = 1 then 1\n                when ohtnpreg = 1 then 1\n                else 0\n            end\n        ) > 0 then 1\n        else 0\n    end as hypertension,\n    case\n        when ceredrg = 1 then 0\n        when para = 1 then 1\n        else 0\n    end as paralysis,\n    case\n        when nervdrg = 1 then 0\n        when neuro = 1 then 1\n        else 0\n    end as other_neurological,\n    case\n        when pulmdrg = 1 then 0\n        when chrnlung = 1 then 1\n        else 0\n    end as chronic_pulmonary,\n    case\n        -- only the more severe comorbidity (complicated diabetes) is kept\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    case\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 1\n        else 0\n    end as diabetes_complicated,\n    case\n        when hypodrg = 1 then 0\n        when hypothy = 1 then 1\n        else 0\n    end as hypothyroidism,\n    case\n        when renaldrg = 1 then 0\n        when renlfail = 1 then 1\n        when hrenwrf = 1 then 1\n        when hhrwrf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as renal_failure,\n    case\n        when liverdrg = 1 then 0\n        when liver = 1 then 1\n        else 0\n    end as liver_disease,\n    case\n        when ulcedrg = 1 then 0\n        when ulcer = 1 then 1\n        else 0\n    end as peptic_ulcer,\n    case\n        when hivdrg = 1 then 0\n        when aids = 1 then 1\n        else 0\n    end as aids,\n    case\n        when leukdrg = 1 then 0\n        when lymph = 1 then 1\n        else 0\n    end as lymphoma,\n    case\n        when cancdrg = 1 then 0\n        when mets = 1 then 1\n        else 0\n    end as metastatic_cancer,\n    case\n        when cancdrg = 1 then 0 -- only the more severe comorbidity (metastatic cancer) is kept\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    case\n        when arthdrg = 1 then 0\n        when arth = 1 then 1\n        else 0\n    end as rheumatoid_arthritis,\n    case\n        when coagdrg = 1 then 0\n        when coag = 1 then 1\n        else 0\n    end as coagulopathy,\n    case\n        when nutrdrg = 1\n        OR obesedrg = 1 then 0\n        when obese = 1 then 1\n        else 0\n    end as obesity,\n    case\n        when nutrdrg = 1 then 0\n        when wghtloss = 1 then 1\n        else 0\n    end as weight_loss,\n    case\n        when nutrdrg = 1 then 0\n        when lytes = 1 then 1\n        else 0\n    end as fluid_electrolyte,\n    case\n        when anemdrg = 1 then 0\n        when bldloss = 1 then 1\n        else 0\n    end as blood_loss_anemia,\n    case\n        when anemdrg = 1 then 0\n        when anemdef = 1 then 1\n        else 0\n    end as deficiency_anemias,\n    case\n        when alcdrg = 1 then 0\n        when alcohol = 1 then 1\n        else 0\n    end as alcohol_abuse,\n    case\n        when alcdrg = 1 then 0\n        when drug = 1 then 1\n        else 0\n    end as drug_abuse,\n    case\n        when psydrg = 1 then 0\n        when psych = 1 then 1\n        else 0\n    end as psychoses,\n    case\n        when deprsdrg = 1 then 0\n        when depress = 1 then 1\n        else 0\n    end as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\n    left join drggrp d on adm.hadm_id = d.hadm_id\norder by\n    adm.hadm_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:21.703900Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.73, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 1.73 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.429645Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.435271Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37\" rename to \"elixhauser_ahrq_v37__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37\" rename to \"elixhauser_ahrq_v37__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.435507Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.436690Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.440432Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_tmp\" rename to \"elixhauser_ahrq_v37\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_tmp\" rename to \"elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.440650Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.441389Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.444262Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.444479Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.444748Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.447672Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.450752Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_ahrq_v37__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.450993Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.454301Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.457032Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.457272Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab5d700>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8ab5d700>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.458180Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.elixhauser_ahrq_v37", "execution_time": 1, "index": 20, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": "2022-07-18T00:10:21.670827", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "20 of 107 OK created table model public.elixhauser_ahrq_v37 .................... [\u001b[32mSELECT 58976\u001b[0m in 1.79s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.458682Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:23.459146", "node_name": "elixhauser_ahrq_v37", "node_path": "comorbidity/elixhauser_ahrq_v37.sql", "node_started_at": "2022-07-18T00:10:21.670827", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 1.7851479053497314, "failures": null, "message": "SELECT 58976", "node": {"alias": "elixhauser_ahrq_v37", "build_path": "target/run/mimic/models/comorbidity/elixhauser_ahrq_v37.sql", "checksum": {"checksum": "5a0c42225c88e8154cc110276754ad339691b925b13ef53c0575629e136adaeb", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/comorbidity/elixhauser_ahrq_v37.sql", "compiled_sql": "-- This code uses the latest version of Elixhauser provided by AHRQ\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code -- note that these codes will seem incomplete at first\n        -- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n        -- these codes are captured by hypertension flags instead\n        -- later there are some complicated rules which confirm/reject those codes as chf\n,\n        CASE\n            when icd9_code = '39891' then 1\n            when icd9_code between '4280'\n            and '4289' then 1\n        end as chf\n        /* Congestive heart failure */\n        -- cardiac arrhythmias is removed in up to date versions\n,\n        case\n            when icd9_code = '42610' then 1\n            when icd9_code = '42611' then 1\n            when icd9_code = '42613' then 1\n            when icd9_code between '4262'\n            and '42653' then 1\n            when icd9_code between '4266'\n            and '42689' then 1\n            when icd9_code = '4270' then 1\n            when icd9_code = '4272' then 1\n            when icd9_code = '42731' then 1\n            when icd9_code = '42760' then 1\n            when icd9_code = '4279' then 1\n            when icd9_code = '7850' then 1\n            when icd9_code between 'V450'\n            and 'V4509' then 1\n            when icd9_code between 'V533'\n            and 'V5339' then 1\n        end as arythm\n        /* Cardiac arrhythmias */\n,\n        CASE\n            when icd9_code between '09320'\n            and '09324' then 1\n            when icd9_code between '3940'\n            and '3971' then 1\n            when icd9_code = '3979' then 1\n            when icd9_code between '4240'\n            and '42499' then 1\n            when icd9_code between '7463'\n            and '7466' then 1\n            when icd9_code = 'V422' then 1\n            when icd9_code = 'V433' then 1\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when icd9_code between '41511'\n            and '41519' then 1\n            when icd9_code between '4160'\n            and '4169' then 1\n            when icd9_code = '4179' then 1\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when icd9_code between '4400'\n            and '4409' then 1\n            when icd9_code between '44100'\n            and '4419' then 1\n            when icd9_code between '4420'\n            and '4429' then 1\n            when icd9_code between '4431'\n            and '4439' then 1\n            when icd9_code between '44421'\n            and '44422' then 1\n            when icd9_code = '4471' then 1\n            when icd9_code = '449' then 1\n            when icd9_code = '5571' then 1\n            when icd9_code = '5579' then 1\n            when icd9_code = 'V434' then 1\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when icd9_code = '4011' then 1\n            when icd9_code = '4019' then 1\n            when icd9_code between '64200'\n            and '64204' then 1\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when icd9_code = '4010' then 1\n            when icd9_code = '4372' then 1\n        end as htncx\n        /* Hypertension, complicated */\n        /******************************************************************/\n        /* The following are special, temporary formats used in the       */\n        /* creation of the hypertension complicated comorbidity when      */\n        /* overlapping with congestive heart failure or renal failure     */\n        /* occurs. These temporary formats are referenced in the program  */\n        /* called comoanaly2009.txt.                                      */\n        /******************************************************************/\n,\n        CASE\n            when icd9_code between '64220'\n            and '64224' then 1\n        end as htnpreg\n        /* Pre-existing hypertension complicating pregnancy */\n,\n        CASE\n            when icd9_code = '40200' then 1\n            when icd9_code = '40210' then 1\n            when icd9_code = '40290' then 1\n            when icd9_code = '40509' then 1\n            when icd9_code = '40519' then 1\n            when icd9_code = '40599' then 1\n        end as htnwochf\n        /* Hypertensive heart disease without heart failure */\n,\n        CASE\n            when icd9_code = '40201' then 1\n            when icd9_code = '40211' then 1\n            when icd9_code = '40291' then 1\n        end as htnwchf\n        /* Hypertensive heart disease with heart failure */\n,\n        CASE\n            when icd9_code = '40300' then 1\n            when icd9_code = '40310' then 1\n            when icd9_code = '40390' then 1\n            when icd9_code = '40501' then 1\n            when icd9_code = '40511' then 1\n            when icd9_code = '40591' then 1\n            when icd9_code between '64210'\n            and '64214' then 1\n        end as hrenworf\n        /* Hypertensive renal disease without renal failure */\n,\n        CASE\n            when icd9_code = '40301' then 1\n            when icd9_code = '40311' then 1\n            when icd9_code = '40391' then 1\n        end as hrenwrf\n        /* Hypertensive renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40400' then 1\n            when icd9_code = '40410' then 1\n            when icd9_code = '40490' then 1\n        end as hhrwohrf\n        /* Hypertensive heart and renal disease without heart or renal failure */\n,\n        CASE\n            when icd9_code = '40401' then 1\n            when icd9_code = '40411' then 1\n            when icd9_code = '40491' then 1\n        end as hhrwchf\n        /* Hypertensive heart and renal disease with heart failure */\n,\n        CASE\n            when icd9_code = '40402' then 1\n            when icd9_code = '40412' then 1\n            when icd9_code = '40492' then 1\n        end as hhrwrf\n        /* Hypertensive heart and renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40403' then 1\n            when icd9_code = '40413' then 1\n            when icd9_code = '40493' then 1\n        end as hhrwhrf\n        /* Hypertensive heart and renal disease with heart and renal failure */\n,\n        CASE\n            when icd9_code between '64270'\n            and '64274' then 1\n            when icd9_code between '64290'\n            and '64294' then 1\n        end as ohtnpreg\n        /* Other hypertension in pregnancy */\n        /******************** End Temporary Formats ***********************/\n,\n        CASE\n            when icd9_code between '3420'\n            and '3449' then 1\n            when icd9_code between '43820'\n            and '43853' then 1\n            when icd9_code = '78072' then 1\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code between '3300'\n            and '3319' then 1\n            when icd9_code = '3320' then 1\n            when icd9_code = '3334' then 1\n            when icd9_code = '3335' then 1\n            when icd9_code = '3337' then 1\n            when icd9_code in ('33371', '33372', '33379', '33385', '33394') then 1\n            when icd9_code between '3340'\n            and '3359' then 1\n            when icd9_code = '3380' then 1\n            when icd9_code = '340' then 1\n            when icd9_code between '3411'\n            and '3419' then 1\n            when icd9_code between '34500'\n            and '34511' then 1\n            when icd9_code between '3452'\n            and '3453' then 1\n            when icd9_code between '34540'\n            and '34591' then 1\n            when icd9_code between '34700'\n            and '34701' then 1\n            when icd9_code between '34710'\n            and '34711' then 1\n            when icd9_code = '3483' then 1 -- discontinued icd-9\n            when icd9_code between '64940'\n            and '64944' then 1\n            when icd9_code = '7687' then 1\n            when icd9_code between '76870'\n            and '76873' then 1\n            when icd9_code = '7803' then 1\n            when icd9_code = '78031' then 1\n            when icd9_code = '78032' then 1\n            when icd9_code = '78033' then 1\n            when icd9_code = '78039' then 1\n            when icd9_code = '78097' then 1\n            when icd9_code = '7843' then 1\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when icd9_code between '490'\n            and '4928' then 1\n            when icd9_code between '49300'\n            and '49392' then 1\n            when icd9_code between '494'\n            and '4941' then 1\n            when icd9_code between '4950'\n            and '505' then 1\n            when icd9_code = '5064' then 1\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when icd9_code between '25000'\n            and '25033' then 1\n            when icd9_code between '64800'\n            and '64804' then 1\n            when icd9_code between '24900'\n            and '24931' then 1\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when icd9_code between '25040'\n            and '25093' then 1\n            when icd9_code = '7751' then 1\n            when icd9_code between '24940'\n            and '24991' then 1\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when icd9_code between '243'\n            and '2442' then 1\n            when icd9_code = '2448' then 1\n            when icd9_code = '2449' then 1\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code = '585' then 1 -- discontinued code\n            when icd9_code = '5853' then 1\n            when icd9_code = '5854' then 1\n            when icd9_code = '5855' then 1\n            when icd9_code = '5856' then 1\n            when icd9_code = '5859' then 1\n            when icd9_code = '586' then 1\n            when icd9_code = 'V420' then 1\n            when icd9_code = 'V451' then 1\n            when icd9_code between 'V560'\n            and 'V5632' then 1\n            when icd9_code = 'V568' then 1\n            when icd9_code between 'V4511'\n            and 'V4512' then 1\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code = '07022' then 1\n            when icd9_code = '07023' then 1\n            when icd9_code = '07032' then 1\n            when icd9_code = '07033' then 1\n            when icd9_code = '07044' then 1\n            when icd9_code = '07054' then 1\n            when icd9_code = '4560' then 1\n            when icd9_code = '4561' then 1\n            when icd9_code = '45620' then 1\n            when icd9_code = '45621' then 1\n            when icd9_code = '5710' then 1\n            when icd9_code = '5712' then 1\n            when icd9_code = '5713' then 1\n            when icd9_code between '57140'\n            and '57149' then 1\n            when icd9_code = '5715' then 1\n            when icd9_code = '5716' then 1\n            when icd9_code = '5718' then 1\n            when icd9_code = '5719' then 1\n            when icd9_code = '5723' then 1\n            when icd9_code = '5728' then 1\n            when icd9_code = '5735' then 1\n            when icd9_code = 'V427' then 1\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when icd9_code = '53141' then 1\n            when icd9_code = '53151' then 1\n            when icd9_code = '53161' then 1\n            when icd9_code = '53170' then 1\n            when icd9_code = '53171' then 1\n            when icd9_code = '53191' then 1\n            when icd9_code = '53241' then 1\n            when icd9_code = '53251' then 1\n            when icd9_code = '53261' then 1\n            when icd9_code = '53270' then 1\n            when icd9_code = '53271' then 1\n            when icd9_code = '53291' then 1\n            when icd9_code = '53341' then 1\n            when icd9_code = '53351' then 1\n            when icd9_code = '53361' then 1\n            when icd9_code = '53370' then 1\n            when icd9_code = '53371' then 1\n            when icd9_code = '53391' then 1\n            when icd9_code = '53441' then 1\n            when icd9_code = '53451' then 1\n            when icd9_code = '53461' then 1\n            when icd9_code = '53470' then 1\n            when icd9_code = '53471' then 1\n            when icd9_code = '53491' then 1\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when icd9_code between '042'\n            and '0449' then 1\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when icd9_code between '20000'\n            and '20238' then 1\n            when icd9_code between '20250'\n            and '20301' then 1\n            when icd9_code = '2386' then 1\n            when icd9_code = '2733' then 1\n            when icd9_code between '20302'\n            and '20382' then 1\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when icd9_code between '1960'\n            and '1991' then 1\n            when icd9_code between '20970'\n            and '20975' then 1\n            when icd9_code = '20979' then 1\n            when icd9_code = '78951' then 1\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when icd9_code between '1400'\n            and '1729' then 1\n            when icd9_code between '1740'\n            and '1759' then 1\n            when icd9_code between '179'\n            and '1958' then 1\n            when icd9_code between '20900'\n            and '20924' then 1\n            when icd9_code between '20925'\n            and '2093' then 1\n            when icd9_code between '20930'\n            and '20936' then 1\n            when icd9_code between '25801'\n            and '25803' then 1\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code = '7010' then 1\n            when icd9_code between '7100'\n            and '7109' then 1\n            when icd9_code between '7140'\n            and '7149' then 1\n            when icd9_code between '7200'\n            and '7209' then 1\n            when icd9_code = '725' then 1\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when icd9_code between '2860'\n            and '2869' then 1\n            when icd9_code = '2871' then 1\n            when icd9_code between '2873'\n            and '2875' then 1\n            when icd9_code between '64930'\n            and '64934' then 1\n            when icd9_code = '28984' then 1\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when icd9_code = '2780' then 1\n            when icd9_code = '27800' then 1\n            when icd9_code = '27801' then 1\n            when icd9_code = '27803' then 1\n            when icd9_code between '64910'\n            and '64914' then 1\n            when icd9_code between 'V8530'\n            and 'V8539' then 1\n            when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n            when icd9_code between 'V8541'\n            and 'V8545' then 1\n            when icd9_code = 'V8554' then 1\n            when icd9_code = '79391' then 1\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when icd9_code between '260'\n            and '2639' then 1\n            when icd9_code between '78321'\n            and '78322' then 1\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when icd9_code between '2760'\n            and '2769' then 1\n        end as lytes\n        /* Fluid and electrolyte disorders - note:\n         this comorbidity should be dropped when\n         used with the AHRQ Patient Safety Indicators*/\n,\n        CASE\n            when icd9_code = '2800' then 1\n            when icd9_code between '64820'\n            and '64824' then 1\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when icd9_code between '2801'\n            and '2819' then 1\n            when icd9_code between '28521'\n            and '28529' then 1\n            when icd9_code = '2859' then 1\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when icd9_code between '2910'\n            and '2913' then 1\n            when icd9_code = '2915' then 1\n            when icd9_code = '2918' then 1\n            when icd9_code = '29181' then 1\n            when icd9_code = '29182' then 1\n            when icd9_code = '29189' then 1\n            when icd9_code = '2919' then 1\n            when icd9_code between '30300'\n            and '30393' then 1\n            when icd9_code between '30500'\n            and '30503' then 1\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code = '2920' then 1\n            when icd9_code between '29282'\n            and '29289' then 1\n            when icd9_code = '2929' then 1\n            when icd9_code between '30400'\n            and '30493' then 1\n            when icd9_code between '30520'\n            and '30593' then 1\n            when icd9_code between '64830'\n            and '64834' then 1\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code between '29500'\n            and '2989' then 1\n            when icd9_code = '29910' then 1\n            when icd9_code = '29911' then 1\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when icd9_code = '3004' then 1\n            when icd9_code = '30112' then 1\n            when icd9_code = '3090' then 1\n            when icd9_code = '3091' then 1\n            when icd9_code = '311' then 1\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    WHERE\n        seq_num = 1\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arythm) as arythm,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(htnpreg) as htnpreg,\n        max(htnwochf) as htnwochf,\n        max(htnwchf) as htnwchf,\n        max(hrenworf) as hrenworf,\n        max(hrenwrf) as hrenwrf,\n        max(hhrwohrf) as hhrwohrf,\n        max(hhrwchf) as hhrwchf,\n        max(hhrwrf) as hhrwrf,\n        max(hhrwhrf) as hhrwhrf,\n        max(ohtnpreg) as ohtnpreg,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- DRG FILTER --\n,\nmsdrg as (\n    select\n        hadm_id\n        /**** V29 MS-DRG Formats ****/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 001\n            and 002 then 1\n            when d.drg_code between 215\n            and 238 then 1\n            when d.drg_code between 242\n            and 252 then 1\n            when d.drg_code between 253\n            and 254 then 1\n            when d.drg_code between 258\n            and 262 then 1\n            when d.drg_code between 265\n            and 267 then 1\n            when d.drg_code between 280\n            and 293 then 1\n            when d.drg_code between 296\n            and 298 then 1\n            when d.drg_code between 302\n            and 303 then 1\n            when d.drg_code between 306\n            and 313 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code between 299\n            and 301 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 656\n            and 661 then 1\n            when d.drg_code between 673\n            and 675 then 1\n            when d.drg_code between 682\n            and 700 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 020\n            and 042 then 1\n            when d.drg_code between 052\n            and 103 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code between 020\n            and 022 then 1\n            when d.drg_code between 034\n            and 039 then 1\n            when d.drg_code between 064\n            and 072 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code between 190\n            and 192 then 1\n            when d.drg_code between 202\n            and 203 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code between 637\n            and 639 then 1\n            else 0\n        end as DIABDRG\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code between 625\n            and 627 then 1\n            when d.drg_code between 643\n            and 645 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 682\n            and 685 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 420\n            and 425 then 1\n            when d.drg_code between 432\n            and 434 then 1\n            when d.drg_code between 441\n            and 446 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 377\n            and 384 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code between 969\n            and 970 then 1\n            when d.drg_code between 974\n            and 977 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 820\n            and 830 then 1\n            when d.drg_code between 834\n            and 849 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 054 then 1\n            when d.drg_code = 055 then 1\n            when d.drg_code between 146\n            and 148 then 1\n            when d.drg_code between 180\n            and 182 then 1\n            when d.drg_code between 374\n            and 376 then 1\n            when d.drg_code between 435\n            and 437 then 1\n            when d.drg_code between 542\n            and 544 then 1\n            when d.drg_code between 582\n            and 585 then 1\n            when d.drg_code between 597\n            and 599 then 1\n            when d.drg_code between 656\n            and 658 then 1\n            when d.drg_code between 686\n            and 688 then 1\n            when d.drg_code between 715\n            and 716 then 1\n            when d.drg_code between 722\n            and 724 then 1\n            when d.drg_code between 736\n            and 741 then 1\n            when d.drg_code between 754\n            and 756 then 1\n            when d.drg_code between 826\n            and 830 then 1\n            when d.drg_code between 843\n            and 849 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code between 545\n            and 547 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 640\n            and 641 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code between 808\n            and 812 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 894\n            and 897 then 1\n            else 0\n        end as alcdrg\n        /*Coagulation disorders*/\n,\n        case\n            when d.drg_code = 813 then 1\n            else 0\n        end as coagdrg\n        /*Hypertensive Complicated  */\n,\n        case\n            when d.drg_code = 077 then 1\n            when d.drg_code = 078 then 1\n            when d.drg_code = 304 then 1\n            else 0\n        end as htncxdrg\n        /*Hypertensive Uncomplicated  */\n,\n        case\n            when d.drg_code = 079 then 1\n            when d.drg_code = 305 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 885 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code between 619\n            and 621 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 881 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'MS'\n        ) d\n),\nhcfadrg as (\n    select\n        hadm_id\n        /** V24 DRG Formats  **/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 103\n            and 112 then 1\n            when d.drg_code between 115\n            and 118 then 1\n            when d.drg_code between 121\n            and 127 then 1\n            when d.drg_code = 129 then 1\n            when d.drg_code = 132 then 1\n            when d.drg_code = 133 then 1\n            when d.drg_code between 135\n            and 143 then 1\n            when d.drg_code between 514\n            and 518 then 1\n            when d.drg_code between 525\n            and 527 then 1\n            when d.drg_code between 535\n            and 536 then 1\n            when d.drg_code between 547\n            and 550 then 1\n            when d.drg_code between 551\n            and 558 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code = 130 then 1\n            when d.drg_code = 131 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code between 302\n            and 305 then 1\n            when d.drg_code between 315\n            and 333 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 1\n            and 35 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code between 528\n            and 534 then 1\n            when d.drg_code = 543 then 1\n            when d.drg_code between 559\n            and 564 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code = 5 then 1\n            when d.drg_code between 14\n            and 17 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code = 528 then 1\n            when d.drg_code between 533\n            and 534 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code = 88 then 1\n            when d.drg_code between 96\n            and 98 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code = 294 then 1\n            when d.drg_code = 295 then 1\n            else 0\n        end as diabdrg\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code = 290 then 1\n            when d.drg_code = 300 then 1\n            when d.drg_code = 301 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 302 then 1\n            when d.drg_code = 316 then 1\n            when d.drg_code = 317 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 199\n            and 202 then 1\n            when d.drg_code between 205\n            and 208 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 174\n            and 178 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code = 488 then 1\n            when d.drg_code = 489 then 1\n            when d.drg_code = 490 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 400\n            and 414 then 1\n            when d.drg_code = 473 then 1\n            when d.drg_code = 492 then 1\n            when d.drg_code between 539\n            and 540 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 10 then 1\n            when d.drg_code = 11 then 1\n            when d.drg_code = 64 then 1\n            when d.drg_code = 82 then 1\n            when d.drg_code = 172 then 1\n            when d.drg_code = 173 then 1\n            when d.drg_code = 199 then 1\n            when d.drg_code = 203 then 1\n            when d.drg_code = 239 then 1\n            when d.drg_code between 257\n            and 260 then 1\n            when d.drg_code = 274 then 1\n            when d.drg_code = 275 then 1\n            when d.drg_code = 303 then 1\n            when d.drg_code = 318 then 1\n            when d.drg_code = 319 then 1\n            when d.drg_code = 338 then 1\n            when d.drg_code = 344 then 1\n            when d.drg_code = 346 then 1\n            when d.drg_code = 347 then 1\n            when d.drg_code = 354 then 1\n            when d.drg_code = 355 then 1\n            when d.drg_code = 357 then 1\n            when d.drg_code = 363 then 1\n            when d.drg_code = 366 then 1\n            when d.drg_code = 367 then 1\n            when d.drg_code between 406\n            and 414 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code = 240 then 1\n            when d.drg_code = 241 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 296\n            and 298 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code = 395 then 1\n            when d.drg_code = 396 then 1\n            when d.drg_code = 574 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 433\n            and 437 then 1\n            when d.drg_code between 521\n            and 523 then 1\n            else 0\n        end as alcdrg\n        /* Coagulation disorders */\n,\n        case\n            when d.drg_code = 397 then 1\n            else 0\n        end as coagdrg\n        /* Hypertensive Complicated */\n,\n        case\n            when d.drg_code = 22 then 1\n            when d.drg_code = 134 then 1\n            else 0\n        end as htncxdrg\n        /* Hypertensive Uncomplicated */\n,\n        case\n            when d.drg_code = 134 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 430 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code = 288 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 426 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'HCFA'\n        ) d\n) -- merge DRG groups together\n,\ndrggrp as (\n    select\n        hadm_id,\n        max(carddrg) as carddrg,\n        max(peridrg) as peridrg,\n        max(renaldrg) as renaldrg,\n        max(nervdrg) as nervdrg,\n        max(ceredrg) as ceredrg,\n        max(pulmdrg) as pulmdrg,\n        max(diabdrg) as diabdrg,\n        max(hypodrg) as hypodrg,\n        max(renfdrg) as renfdrg,\n        max(liverdrg) as liverdrg,\n        max(ulcedrg) as ulcedrg,\n        max(hivdrg) as hivdrg,\n        max(leukdrg) as leukdrg,\n        max(cancdrg) as cancdrg,\n        max(arthdrg) as arthdrg,\n        max(nutrdrg) as nutrdrg,\n        max(anemdrg) as anemdrg,\n        max(alcdrg) as alcdrg,\n        max(coagdrg) as coagdrg,\n        max(htncxdrg) as htncxdrg,\n        max(htndrg) as htndrg,\n        max(psydrg) as psydrg,\n        max(obesedrg) as obesedrg,\n        max(deprsdrg) as deprsdrg\n    from\n        (\n            select\n                d1.*\n            from\n                msdrg d1\n            UNION\n            DISTINCT\n            select\n                d1.*\n            from\n                hcfadrg d1\n        ) d\n    group by\n        d.hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.subject_id,\n    adm.hadm_id,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when chf = 1 then 1\n        when htnwchf = 1 then 1\n        when hhrwchf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as congestive_heart_failure,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when arythm = 1 then 1\n        else 0\n    end as cardiac_arrhythmias,\n    case\n        when carddrg = 1 then 0\n        when valve = 1 then 1\n        else 0\n    end as valvular_disease,\n    case\n        when carddrg = 1\n        or pulmdrg = 1 then 0\n        when pulmcirc = 1 then 1\n        else 0\n    end as pulmonary_circulation,\n    case\n        when peridrg = 1 then 0\n        when perivasc = 1 then 1\n        else 0\n    end as peripheral_vascular -- we combine 'htn' and 'htncx' into 'HYPERTENSION'\n    -- note 'htn' (hypertension) is only 1 if 'htncx' (complicated hypertension) is 0\n    -- also if htncxdrg = 1, then htndrg = 1\n    -- In the original Sas code, it appears that:\n    --  HTN can be 1\n    --  HTNCX is set to 0 by DRGs\n    --  but HTN_C is still 1, because HTN is 1\n    -- so we have to do this complex addition.\n,\n    case\n        when (\n            -- first hypertension\n            case\n                when htndrg = 0 then 0\n                when htn = 1 then 1\n                else 0\n            end\n        ) + (\n            -- next complicated hypertension\n            case\n                when htncx = 1\n                and htncxdrg = 1 then 0\n                when htnpreg = 1\n                and htncxdrg = 1 then 0\n                when htnwochf = 1\n                and (\n                    htncxdrg = 1\n                    OR carddrg = 1\n                ) then 0\n                when htnwchf = 1\n                and htncxdrg = 1 then 0\n                when htnwchf = 1\n                and carddrg = 1 then 0\n                when hrenworf = 1\n                and (\n                    htncxdrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hrenwrf = 1\n                and htncxdrg = 1 then 0\n                when hrenwrf = 1\n                and renaldrg = 1 then 0\n                when hhrwohrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwchf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwhrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when ohtnpreg = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when htncx = 1 then 1\n                when htnpreg = 1 then 1\n                when htnwochf = 1 then 1\n                when htnwchf = 1 then 1\n                when hrenworf = 1 then 1\n                when hrenwrf = 1 then 1\n                when hhrwohrf = 1 then 1\n                when hhrwchf = 1 then 1\n                when hhrwrf = 1 then 1\n                when hhrwhrf = 1 then 1\n                when ohtnpreg = 1 then 1\n                else 0\n            end\n        ) > 0 then 1\n        else 0\n    end as hypertension,\n    case\n        when ceredrg = 1 then 0\n        when para = 1 then 1\n        else 0\n    end as paralysis,\n    case\n        when nervdrg = 1 then 0\n        when neuro = 1 then 1\n        else 0\n    end as other_neurological,\n    case\n        when pulmdrg = 1 then 0\n        when chrnlung = 1 then 1\n        else 0\n    end as chronic_pulmonary,\n    case\n        -- only the more severe comorbidity (complicated diabetes) is kept\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    case\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 1\n        else 0\n    end as diabetes_complicated,\n    case\n        when hypodrg = 1 then 0\n        when hypothy = 1 then 1\n        else 0\n    end as hypothyroidism,\n    case\n        when renaldrg = 1 then 0\n        when renlfail = 1 then 1\n        when hrenwrf = 1 then 1\n        when hhrwrf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as renal_failure,\n    case\n        when liverdrg = 1 then 0\n        when liver = 1 then 1\n        else 0\n    end as liver_disease,\n    case\n        when ulcedrg = 1 then 0\n        when ulcer = 1 then 1\n        else 0\n    end as peptic_ulcer,\n    case\n        when hivdrg = 1 then 0\n        when aids = 1 then 1\n        else 0\n    end as aids,\n    case\n        when leukdrg = 1 then 0\n        when lymph = 1 then 1\n        else 0\n    end as lymphoma,\n    case\n        when cancdrg = 1 then 0\n        when mets = 1 then 1\n        else 0\n    end as metastatic_cancer,\n    case\n        when cancdrg = 1 then 0 -- only the more severe comorbidity (metastatic cancer) is kept\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    case\n        when arthdrg = 1 then 0\n        when arth = 1 then 1\n        else 0\n    end as rheumatoid_arthritis,\n    case\n        when coagdrg = 1 then 0\n        when coag = 1 then 1\n        else 0\n    end as coagulopathy,\n    case\n        when nutrdrg = 1\n        OR obesedrg = 1 then 0\n        when obese = 1 then 1\n        else 0\n    end as obesity,\n    case\n        when nutrdrg = 1 then 0\n        when wghtloss = 1 then 1\n        else 0\n    end as weight_loss,\n    case\n        when nutrdrg = 1 then 0\n        when lytes = 1 then 1\n        else 0\n    end as fluid_electrolyte,\n    case\n        when anemdrg = 1 then 0\n        when bldloss = 1 then 1\n        else 0\n    end as blood_loss_anemia,\n    case\n        when anemdrg = 1 then 0\n        when anemdef = 1 then 1\n        else 0\n    end as deficiency_anemias,\n    case\n        when alcdrg = 1 then 0\n        when alcohol = 1 then 1\n        else 0\n    end as alcohol_abuse,\n    case\n        when alcdrg = 1 then 0\n        when drug = 1 then 1\n        else 0\n    end as drug_abuse,\n    case\n        when psydrg = 1 then 0\n        when psych = 1 then 1\n        else 0\n    end as psychoses,\n    case\n        when deprsdrg = 1 then 0\n        when depress = 1 then 1\n        else 0\n    end as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\n    left join drggrp d on adm.hadm_id = d.hadm_id\norder by\n    adm.hadm_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.607873, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "comorbidity", "elixhauser_ahrq_v37"], "meta": {}, "name": "elixhauser_ahrq_v37", "original_file_path": "models/comorbidity/elixhauser_ahrq_v37.sql", "package_name": "mimic", "patch_path": null, "path": "comorbidity/elixhauser_ahrq_v37.sql", "raw_sql": "-- This code uses the latest version of Elixhauser provided by AHRQ\n{{ config(materialized = 'table') }} \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code -- note that these codes will seem incomplete at first\n        -- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n        -- these codes are captured by hypertension flags instead\n        -- later there are some complicated rules which confirm/reject those codes as chf\n,\n        CASE\n            when icd9_code = '39891' then 1\n            when icd9_code between '4280'\n            and '4289' then 1\n        end as chf\n        /* Congestive heart failure */\n        -- cardiac arrhythmias is removed in up to date versions\n,\n        case\n            when icd9_code = '42610' then 1\n            when icd9_code = '42611' then 1\n            when icd9_code = '42613' then 1\n            when icd9_code between '4262'\n            and '42653' then 1\n            when icd9_code between '4266'\n            and '42689' then 1\n            when icd9_code = '4270' then 1\n            when icd9_code = '4272' then 1\n            when icd9_code = '42731' then 1\n            when icd9_code = '42760' then 1\n            when icd9_code = '4279' then 1\n            when icd9_code = '7850' then 1\n            when icd9_code between 'V450'\n            and 'V4509' then 1\n            when icd9_code between 'V533'\n            and 'V5339' then 1\n        end as arythm\n        /* Cardiac arrhythmias */\n,\n        CASE\n            when icd9_code between '09320'\n            and '09324' then 1\n            when icd9_code between '3940'\n            and '3971' then 1\n            when icd9_code = '3979' then 1\n            when icd9_code between '4240'\n            and '42499' then 1\n            when icd9_code between '7463'\n            and '7466' then 1\n            when icd9_code = 'V422' then 1\n            when icd9_code = 'V433' then 1\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when icd9_code between '41511'\n            and '41519' then 1\n            when icd9_code between '4160'\n            and '4169' then 1\n            when icd9_code = '4179' then 1\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when icd9_code between '4400'\n            and '4409' then 1\n            when icd9_code between '44100'\n            and '4419' then 1\n            when icd9_code between '4420'\n            and '4429' then 1\n            when icd9_code between '4431'\n            and '4439' then 1\n            when icd9_code between '44421'\n            and '44422' then 1\n            when icd9_code = '4471' then 1\n            when icd9_code = '449' then 1\n            when icd9_code = '5571' then 1\n            when icd9_code = '5579' then 1\n            when icd9_code = 'V434' then 1\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when icd9_code = '4011' then 1\n            when icd9_code = '4019' then 1\n            when icd9_code between '64200'\n            and '64204' then 1\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when icd9_code = '4010' then 1\n            when icd9_code = '4372' then 1\n        end as htncx\n        /* Hypertension, complicated */\n        /******************************************************************/\n        /* The following are special, temporary formats used in the       */\n        /* creation of the hypertension complicated comorbidity when      */\n        /* overlapping with congestive heart failure or renal failure     */\n        /* occurs. These temporary formats are referenced in the program  */\n        /* called comoanaly2009.txt.                                      */\n        /******************************************************************/\n,\n        CASE\n            when icd9_code between '64220'\n            and '64224' then 1\n        end as htnpreg\n        /* Pre-existing hypertension complicating pregnancy */\n,\n        CASE\n            when icd9_code = '40200' then 1\n            when icd9_code = '40210' then 1\n            when icd9_code = '40290' then 1\n            when icd9_code = '40509' then 1\n            when icd9_code = '40519' then 1\n            when icd9_code = '40599' then 1\n        end as htnwochf\n        /* Hypertensive heart disease without heart failure */\n,\n        CASE\n            when icd9_code = '40201' then 1\n            when icd9_code = '40211' then 1\n            when icd9_code = '40291' then 1\n        end as htnwchf\n        /* Hypertensive heart disease with heart failure */\n,\n        CASE\n            when icd9_code = '40300' then 1\n            when icd9_code = '40310' then 1\n            when icd9_code = '40390' then 1\n            when icd9_code = '40501' then 1\n            when icd9_code = '40511' then 1\n            when icd9_code = '40591' then 1\n            when icd9_code between '64210'\n            and '64214' then 1\n        end as hrenworf\n        /* Hypertensive renal disease without renal failure */\n,\n        CASE\n            when icd9_code = '40301' then 1\n            when icd9_code = '40311' then 1\n            when icd9_code = '40391' then 1\n        end as hrenwrf\n        /* Hypertensive renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40400' then 1\n            when icd9_code = '40410' then 1\n            when icd9_code = '40490' then 1\n        end as hhrwohrf\n        /* Hypertensive heart and renal disease without heart or renal failure */\n,\n        CASE\n            when icd9_code = '40401' then 1\n            when icd9_code = '40411' then 1\n            when icd9_code = '40491' then 1\n        end as hhrwchf\n        /* Hypertensive heart and renal disease with heart failure */\n,\n        CASE\n            when icd9_code = '40402' then 1\n            when icd9_code = '40412' then 1\n            when icd9_code = '40492' then 1\n        end as hhrwrf\n        /* Hypertensive heart and renal disease with renal failure */\n,\n        CASE\n            when icd9_code = '40403' then 1\n            when icd9_code = '40413' then 1\n            when icd9_code = '40493' then 1\n        end as hhrwhrf\n        /* Hypertensive heart and renal disease with heart and renal failure */\n,\n        CASE\n            when icd9_code between '64270'\n            and '64274' then 1\n            when icd9_code between '64290'\n            and '64294' then 1\n        end as ohtnpreg\n        /* Other hypertension in pregnancy */\n        /******************** End Temporary Formats ***********************/\n,\n        CASE\n            when icd9_code between '3420'\n            and '3449' then 1\n            when icd9_code between '43820'\n            and '43853' then 1\n            when icd9_code = '78072' then 1\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code between '3300'\n            and '3319' then 1\n            when icd9_code = '3320' then 1\n            when icd9_code = '3334' then 1\n            when icd9_code = '3335' then 1\n            when icd9_code = '3337' then 1\n            when icd9_code in ('33371', '33372', '33379', '33385', '33394') then 1\n            when icd9_code between '3340'\n            and '3359' then 1\n            when icd9_code = '3380' then 1\n            when icd9_code = '340' then 1\n            when icd9_code between '3411'\n            and '3419' then 1\n            when icd9_code between '34500'\n            and '34511' then 1\n            when icd9_code between '3452'\n            and '3453' then 1\n            when icd9_code between '34540'\n            and '34591' then 1\n            when icd9_code between '34700'\n            and '34701' then 1\n            when icd9_code between '34710'\n            and '34711' then 1\n            when icd9_code = '3483' then 1 -- discontinued icd-9\n            when icd9_code between '64940'\n            and '64944' then 1\n            when icd9_code = '7687' then 1\n            when icd9_code between '76870'\n            and '76873' then 1\n            when icd9_code = '7803' then 1\n            when icd9_code = '78031' then 1\n            when icd9_code = '78032' then 1\n            when icd9_code = '78033' then 1\n            when icd9_code = '78039' then 1\n            when icd9_code = '78097' then 1\n            when icd9_code = '7843' then 1\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when icd9_code between '490'\n            and '4928' then 1\n            when icd9_code between '49300'\n            and '49392' then 1\n            when icd9_code between '494'\n            and '4941' then 1\n            when icd9_code between '4950'\n            and '505' then 1\n            when icd9_code = '5064' then 1\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when icd9_code between '25000'\n            and '25033' then 1\n            when icd9_code between '64800'\n            and '64804' then 1\n            when icd9_code between '24900'\n            and '24931' then 1\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when icd9_code between '25040'\n            and '25093' then 1\n            when icd9_code = '7751' then 1\n            when icd9_code between '24940'\n            and '24991' then 1\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when icd9_code between '243'\n            and '2442' then 1\n            when icd9_code = '2448' then 1\n            when icd9_code = '2449' then 1\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code = '585' then 1 -- discontinued code\n            when icd9_code = '5853' then 1\n            when icd9_code = '5854' then 1\n            when icd9_code = '5855' then 1\n            when icd9_code = '5856' then 1\n            when icd9_code = '5859' then 1\n            when icd9_code = '586' then 1\n            when icd9_code = 'V420' then 1\n            when icd9_code = 'V451' then 1\n            when icd9_code between 'V560'\n            and 'V5632' then 1\n            when icd9_code = 'V568' then 1\n            when icd9_code between 'V4511'\n            and 'V4512' then 1\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code = '07022' then 1\n            when icd9_code = '07023' then 1\n            when icd9_code = '07032' then 1\n            when icd9_code = '07033' then 1\n            when icd9_code = '07044' then 1\n            when icd9_code = '07054' then 1\n            when icd9_code = '4560' then 1\n            when icd9_code = '4561' then 1\n            when icd9_code = '45620' then 1\n            when icd9_code = '45621' then 1\n            when icd9_code = '5710' then 1\n            when icd9_code = '5712' then 1\n            when icd9_code = '5713' then 1\n            when icd9_code between '57140'\n            and '57149' then 1\n            when icd9_code = '5715' then 1\n            when icd9_code = '5716' then 1\n            when icd9_code = '5718' then 1\n            when icd9_code = '5719' then 1\n            when icd9_code = '5723' then 1\n            when icd9_code = '5728' then 1\n            when icd9_code = '5735' then 1\n            when icd9_code = 'V427' then 1\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when icd9_code = '53141' then 1\n            when icd9_code = '53151' then 1\n            when icd9_code = '53161' then 1\n            when icd9_code = '53170' then 1\n            when icd9_code = '53171' then 1\n            when icd9_code = '53191' then 1\n            when icd9_code = '53241' then 1\n            when icd9_code = '53251' then 1\n            when icd9_code = '53261' then 1\n            when icd9_code = '53270' then 1\n            when icd9_code = '53271' then 1\n            when icd9_code = '53291' then 1\n            when icd9_code = '53341' then 1\n            when icd9_code = '53351' then 1\n            when icd9_code = '53361' then 1\n            when icd9_code = '53370' then 1\n            when icd9_code = '53371' then 1\n            when icd9_code = '53391' then 1\n            when icd9_code = '53441' then 1\n            when icd9_code = '53451' then 1\n            when icd9_code = '53461' then 1\n            when icd9_code = '53470' then 1\n            when icd9_code = '53471' then 1\n            when icd9_code = '53491' then 1\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when icd9_code between '042'\n            and '0449' then 1\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when icd9_code between '20000'\n            and '20238' then 1\n            when icd9_code between '20250'\n            and '20301' then 1\n            when icd9_code = '2386' then 1\n            when icd9_code = '2733' then 1\n            when icd9_code between '20302'\n            and '20382' then 1\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when icd9_code between '1960'\n            and '1991' then 1\n            when icd9_code between '20970'\n            and '20975' then 1\n            when icd9_code = '20979' then 1\n            when icd9_code = '78951' then 1\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when icd9_code between '1400'\n            and '1729' then 1\n            when icd9_code between '1740'\n            and '1759' then 1\n            when icd9_code between '179'\n            and '1958' then 1\n            when icd9_code between '20900'\n            and '20924' then 1\n            when icd9_code between '20925'\n            and '2093' then 1\n            when icd9_code between '20930'\n            and '20936' then 1\n            when icd9_code between '25801'\n            and '25803' then 1\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code = '7010' then 1\n            when icd9_code between '7100'\n            and '7109' then 1\n            when icd9_code between '7140'\n            and '7149' then 1\n            when icd9_code between '7200'\n            and '7209' then 1\n            when icd9_code = '725' then 1\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when icd9_code between '2860'\n            and '2869' then 1\n            when icd9_code = '2871' then 1\n            when icd9_code between '2873'\n            and '2875' then 1\n            when icd9_code between '64930'\n            and '64934' then 1\n            when icd9_code = '28984' then 1\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when icd9_code = '2780' then 1\n            when icd9_code = '27800' then 1\n            when icd9_code = '27801' then 1\n            when icd9_code = '27803' then 1\n            when icd9_code between '64910'\n            and '64914' then 1\n            when icd9_code between 'V8530'\n            and 'V8539' then 1\n            when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n            when icd9_code between 'V8541'\n            and 'V8545' then 1\n            when icd9_code = 'V8554' then 1\n            when icd9_code = '79391' then 1\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when icd9_code between '260'\n            and '2639' then 1\n            when icd9_code between '78321'\n            and '78322' then 1\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when icd9_code between '2760'\n            and '2769' then 1\n        end as lytes\n        /* Fluid and electrolyte disorders - note:\n         this comorbidity should be dropped when\n         used with the AHRQ Patient Safety Indicators*/\n,\n        CASE\n            when icd9_code = '2800' then 1\n            when icd9_code between '64820'\n            and '64824' then 1\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when icd9_code between '2801'\n            and '2819' then 1\n            when icd9_code between '28521'\n            and '28529' then 1\n            when icd9_code = '2859' then 1\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when icd9_code between '2910'\n            and '2913' then 1\n            when icd9_code = '2915' then 1\n            when icd9_code = '2918' then 1\n            when icd9_code = '29181' then 1\n            when icd9_code = '29182' then 1\n            when icd9_code = '29189' then 1\n            when icd9_code = '2919' then 1\n            when icd9_code between '30300'\n            and '30393' then 1\n            when icd9_code between '30500'\n            and '30503' then 1\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code = '2920' then 1\n            when icd9_code between '29282'\n            and '29289' then 1\n            when icd9_code = '2929' then 1\n            when icd9_code between '30400'\n            and '30493' then 1\n            when icd9_code between '30520'\n            and '30593' then 1\n            when icd9_code between '64830'\n            and '64834' then 1\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code between '29500'\n            and '2989' then 1\n            when icd9_code = '29910' then 1\n            when icd9_code = '29911' then 1\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when icd9_code = '3004' then 1\n            when icd9_code = '30112' then 1\n            when icd9_code = '3090' then 1\n            when icd9_code = '3091' then 1\n            when icd9_code = '311' then 1\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    WHERE\n        seq_num = 1\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arythm) as arythm,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(htnpreg) as htnpreg,\n        max(htnwochf) as htnwochf,\n        max(htnwchf) as htnwchf,\n        max(hrenworf) as hrenworf,\n        max(hrenwrf) as hrenwrf,\n        max(hhrwohrf) as hhrwohrf,\n        max(hhrwchf) as hhrwchf,\n        max(hhrwrf) as hhrwrf,\n        max(hhrwhrf) as hhrwhrf,\n        max(ohtnpreg) as ohtnpreg,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- DRG FILTER --\n,\nmsdrg as (\n    select\n        hadm_id\n        /**** V29 MS-DRG Formats ****/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 001\n            and 002 then 1\n            when d.drg_code between 215\n            and 238 then 1\n            when d.drg_code between 242\n            and 252 then 1\n            when d.drg_code between 253\n            and 254 then 1\n            when d.drg_code between 258\n            and 262 then 1\n            when d.drg_code between 265\n            and 267 then 1\n            when d.drg_code between 280\n            and 293 then 1\n            when d.drg_code between 296\n            and 298 then 1\n            when d.drg_code between 302\n            and 303 then 1\n            when d.drg_code between 306\n            and 313 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code between 299\n            and 301 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 656\n            and 661 then 1\n            when d.drg_code between 673\n            and 675 then 1\n            when d.drg_code between 682\n            and 700 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 020\n            and 042 then 1\n            when d.drg_code between 052\n            and 103 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code between 020\n            and 022 then 1\n            when d.drg_code between 034\n            and 039 then 1\n            when d.drg_code between 064\n            and 072 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code between 190\n            and 192 then 1\n            when d.drg_code between 202\n            and 203 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code between 637\n            and 639 then 1\n            else 0\n        end as DIABDRG\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code between 625\n            and 627 then 1\n            when d.drg_code between 643\n            and 645 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 652 then 1\n            when d.drg_code between 682\n            and 685 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 420\n            and 425 then 1\n            when d.drg_code between 432\n            and 434 then 1\n            when d.drg_code between 441\n            and 446 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 377\n            and 384 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code between 969\n            and 970 then 1\n            when d.drg_code between 974\n            and 977 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 820\n            and 830 then 1\n            when d.drg_code between 834\n            and 849 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 054 then 1\n            when d.drg_code = 055 then 1\n            when d.drg_code between 146\n            and 148 then 1\n            when d.drg_code between 180\n            and 182 then 1\n            when d.drg_code between 374\n            and 376 then 1\n            when d.drg_code between 435\n            and 437 then 1\n            when d.drg_code between 542\n            and 544 then 1\n            when d.drg_code between 582\n            and 585 then 1\n            when d.drg_code between 597\n            and 599 then 1\n            when d.drg_code between 656\n            and 658 then 1\n            when d.drg_code between 686\n            and 688 then 1\n            when d.drg_code between 715\n            and 716 then 1\n            when d.drg_code between 722\n            and 724 then 1\n            when d.drg_code between 736\n            and 741 then 1\n            when d.drg_code between 754\n            and 756 then 1\n            when d.drg_code between 826\n            and 830 then 1\n            when d.drg_code between 843\n            and 849 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code between 545\n            and 547 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 640\n            and 641 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code between 808\n            and 812 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 894\n            and 897 then 1\n            else 0\n        end as alcdrg\n        /*Coagulation disorders*/\n,\n        case\n            when d.drg_code = 813 then 1\n            else 0\n        end as coagdrg\n        /*Hypertensive Complicated  */\n,\n        case\n            when d.drg_code = 077 then 1\n            when d.drg_code = 078 then 1\n            when d.drg_code = 304 then 1\n            else 0\n        end as htncxdrg\n        /*Hypertensive Uncomplicated  */\n,\n        case\n            when d.drg_code = 079 then 1\n            when d.drg_code = 305 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 885 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code between 619\n            and 621 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 881 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'MS'\n        ) d\n),\nhcfadrg as (\n    select\n        hadm_id\n        /** V24 DRG Formats  **/\n        /* Cardiac */\n,\n        case\n            when d.drg_code between 103\n            and 112 then 1\n            when d.drg_code between 115\n            and 118 then 1\n            when d.drg_code between 121\n            and 127 then 1\n            when d.drg_code = 129 then 1\n            when d.drg_code = 132 then 1\n            when d.drg_code = 133 then 1\n            when d.drg_code between 135\n            and 143 then 1\n            when d.drg_code between 514\n            and 518 then 1\n            when d.drg_code between 525\n            and 527 then 1\n            when d.drg_code between 535\n            and 536 then 1\n            when d.drg_code between 547\n            and 550 then 1\n            when d.drg_code between 551\n            and 558 then 1\n            else 0\n        end as carddrg\n        /* Peripheral vascular */\n,\n        case\n            when d.drg_code = 130 then 1\n            when d.drg_code = 131 then 1\n            else 0\n        end as peridrg\n        /* Renal */\n,\n        case\n            when d.drg_code between 302\n            and 305 then 1\n            when d.drg_code between 315\n            and 333 then 1\n            else 0\n        end as renaldrg\n        /* Nervous system */\n,\n        case\n            when d.drg_code between 1\n            and 35 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code between 528\n            and 534 then 1\n            when d.drg_code = 543 then 1\n            when d.drg_code between 559\n            and 564 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as nervdrg\n        /* Cerebrovascular */\n,\n        case\n            when d.drg_code = 5 then 1\n            when d.drg_code between 14\n            and 17 then 1\n            when d.drg_code = 524 then 1\n            when d.drg_code = 528 then 1\n            when d.drg_code between 533\n            and 534 then 1\n            when d.drg_code = 577 then 1\n            else 0\n        end as ceredrg\n        /* COPD asthma */\n,\n        case\n            when d.drg_code = 88 then 1\n            when d.drg_code between 96\n            and 98 then 1\n            else 0\n        end as pulmdrg\n        /* Diabetes */\n,\n        case\n            when d.drg_code = 294 then 1\n            when d.drg_code = 295 then 1\n            else 0\n        end as diabdrg\n        /* Thyroid endocrine */\n,\n        case\n            when d.drg_code = 290 then 1\n            when d.drg_code = 300 then 1\n            when d.drg_code = 301 then 1\n            else 0\n        end as hypodrg\n        /* Kidney transp, renal fail/dialysis */\n,\n        case\n            when d.drg_code = 302 then 1\n            when d.drg_code = 316 then 1\n            when d.drg_code = 317 then 1\n            else 0\n        end as renfdrg\n        /* Liver */\n,\n        case\n            when d.drg_code between 199\n            and 202 then 1\n            when d.drg_code between 205\n            and 208 then 1\n            else 0\n        end as liverdrg\n        /* GI hemorrhage or ulcer */\n,\n        case\n            when d.drg_code between 174\n            and 178 then 1\n            else 0\n        end as ulcedrg\n        /* Human immunodeficiency virus */\n,\n        case\n            when d.drg_code = 488 then 1\n            when d.drg_code = 489 then 1\n            when d.drg_code = 490 then 1\n            else 0\n        end as hivdrg\n        /* Leukemia/lymphoma */\n,\n        case\n            when d.drg_code between 400\n            and 414 then 1\n            when d.drg_code = 473 then 1\n            when d.drg_code = 492 then 1\n            when d.drg_code between 539\n            and 540 then 1\n            else 0\n        end as leukdrg\n        /* Cancer, lymphoma */\n,\n        case\n            when d.drg_code = 10 then 1\n            when d.drg_code = 11 then 1\n            when d.drg_code = 64 then 1\n            when d.drg_code = 82 then 1\n            when d.drg_code = 172 then 1\n            when d.drg_code = 173 then 1\n            when d.drg_code = 199 then 1\n            when d.drg_code = 203 then 1\n            when d.drg_code = 239 then 1\n            when d.drg_code between 257\n            and 260 then 1\n            when d.drg_code = 274 then 1\n            when d.drg_code = 275 then 1\n            when d.drg_code = 303 then 1\n            when d.drg_code = 318 then 1\n            when d.drg_code = 319 then 1\n            when d.drg_code = 338 then 1\n            when d.drg_code = 344 then 1\n            when d.drg_code = 346 then 1\n            when d.drg_code = 347 then 1\n            when d.drg_code = 354 then 1\n            when d.drg_code = 355 then 1\n            when d.drg_code = 357 then 1\n            when d.drg_code = 363 then 1\n            when d.drg_code = 366 then 1\n            when d.drg_code = 367 then 1\n            when d.drg_code between 406\n            and 414 then 1\n            else 0\n        end as cancdrg\n        /* Connective tissue */\n,\n        case\n            when d.drg_code = 240 then 1\n            when d.drg_code = 241 then 1\n            else 0\n        end as arthdrg\n        /* Nutrition/metabolic */\n,\n        case\n            when d.drg_code between 296\n            and 298 then 1\n            else 0\n        end as nutrdrg\n        /* Anemia */\n,\n        case\n            when d.drg_code = 395 then 1\n            when d.drg_code = 396 then 1\n            when d.drg_code = 574 then 1\n            else 0\n        end as anemdrg\n        /* Alcohol drug */\n,\n        case\n            when d.drg_code between 433\n            and 437 then 1\n            when d.drg_code between 521\n            and 523 then 1\n            else 0\n        end as alcdrg\n        /* Coagulation disorders */\n,\n        case\n            when d.drg_code = 397 then 1\n            else 0\n        end as coagdrg\n        /* Hypertensive Complicated */\n,\n        case\n            when d.drg_code = 22 then 1\n            when d.drg_code = 134 then 1\n            else 0\n        end as htncxdrg\n        /* Hypertensive Uncomplicated */\n,\n        case\n            when d.drg_code = 134 then 1\n            else 0\n        end as htndrg\n        /* Psychoses */\n,\n        case\n            when d.drg_code = 430 then 1\n            else 0\n        end as psydrg\n        /* Obesity */\n,\n        case\n            when d.drg_code = 288 then 1\n            else 0\n        end as obesedrg\n        /* Depressive Neuroses */\n,\n        case\n            when d.drg_code = 426 then 1\n            else 0\n        end as deprsdrg\n    from\n        (\n            select\n                hadm_id,\n                drg_type,\n                cast(drg_code as numeric) as drg_code\n            from\n                drgcodes\n            where\n                drg_type = 'HCFA'\n        ) d\n) -- merge DRG groups together\n,\ndrggrp as (\n    select\n        hadm_id,\n        max(carddrg) as carddrg,\n        max(peridrg) as peridrg,\n        max(renaldrg) as renaldrg,\n        max(nervdrg) as nervdrg,\n        max(ceredrg) as ceredrg,\n        max(pulmdrg) as pulmdrg,\n        max(diabdrg) as diabdrg,\n        max(hypodrg) as hypodrg,\n        max(renfdrg) as renfdrg,\n        max(liverdrg) as liverdrg,\n        max(ulcedrg) as ulcedrg,\n        max(hivdrg) as hivdrg,\n        max(leukdrg) as leukdrg,\n        max(cancdrg) as cancdrg,\n        max(arthdrg) as arthdrg,\n        max(nutrdrg) as nutrdrg,\n        max(anemdrg) as anemdrg,\n        max(alcdrg) as alcdrg,\n        max(coagdrg) as coagdrg,\n        max(htncxdrg) as htncxdrg,\n        max(htndrg) as htndrg,\n        max(psydrg) as psydrg,\n        max(obesedrg) as obesedrg,\n        max(deprsdrg) as deprsdrg\n    from\n        (\n            select\n                d1.*\n            from\n                msdrg d1\n            UNION\n            DISTINCT\n            select\n                d1.*\n            from\n                hcfadrg d1\n        ) d\n    group by\n        d.hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.subject_id,\n    adm.hadm_id,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when chf = 1 then 1\n        when htnwchf = 1 then 1\n        when hhrwchf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as congestive_heart_failure,\n    case\n        when carddrg = 1 then 0 -- DRG filter\n        when arythm = 1 then 1\n        else 0\n    end as cardiac_arrhythmias,\n    case\n        when carddrg = 1 then 0\n        when valve = 1 then 1\n        else 0\n    end as valvular_disease,\n    case\n        when carddrg = 1\n        or pulmdrg = 1 then 0\n        when pulmcirc = 1 then 1\n        else 0\n    end as pulmonary_circulation,\n    case\n        when peridrg = 1 then 0\n        when perivasc = 1 then 1\n        else 0\n    end as peripheral_vascular -- we combine 'htn' and 'htncx' into 'HYPERTENSION'\n    -- note 'htn' (hypertension) is only 1 if 'htncx' (complicated hypertension) is 0\n    -- also if htncxdrg = 1, then htndrg = 1\n    -- In the original Sas code, it appears that:\n    --  HTN can be 1\n    --  HTNCX is set to 0 by DRGs\n    --  but HTN_C is still 1, because HTN is 1\n    -- so we have to do this complex addition.\n,\n    case\n        when (\n            -- first hypertension\n            case\n                when htndrg = 0 then 0\n                when htn = 1 then 1\n                else 0\n            end\n        ) + (\n            -- next complicated hypertension\n            case\n                when htncx = 1\n                and htncxdrg = 1 then 0\n                when htnpreg = 1\n                and htncxdrg = 1 then 0\n                when htnwochf = 1\n                and (\n                    htncxdrg = 1\n                    OR carddrg = 1\n                ) then 0\n                when htnwchf = 1\n                and htncxdrg = 1 then 0\n                when htnwchf = 1\n                and carddrg = 1 then 0\n                when hrenworf = 1\n                and (\n                    htncxdrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hrenwrf = 1\n                and htncxdrg = 1 then 0\n                when hrenwrf = 1\n                and renaldrg = 1 then 0\n                when hhrwohrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwchf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when hhrwhrf = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when ohtnpreg = 1\n                and (\n                    htncxdrg = 1\n                    or carddrg = 1\n                    or renaldrg = 1\n                ) then 0\n                when htncx = 1 then 1\n                when htnpreg = 1 then 1\n                when htnwochf = 1 then 1\n                when htnwchf = 1 then 1\n                when hrenworf = 1 then 1\n                when hrenwrf = 1 then 1\n                when hhrwohrf = 1 then 1\n                when hhrwchf = 1 then 1\n                when hhrwrf = 1 then 1\n                when hhrwhrf = 1 then 1\n                when ohtnpreg = 1 then 1\n                else 0\n            end\n        ) > 0 then 1\n        else 0\n    end as hypertension,\n    case\n        when ceredrg = 1 then 0\n        when para = 1 then 1\n        else 0\n    end as paralysis,\n    case\n        when nervdrg = 1 then 0\n        when neuro = 1 then 1\n        else 0\n    end as other_neurological,\n    case\n        when pulmdrg = 1 then 0\n        when chrnlung = 1 then 1\n        else 0\n    end as chronic_pulmonary,\n    case\n        -- only the more severe comorbidity (complicated diabetes) is kept\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    case\n        when diabdrg = 1 then 0\n        when dmcx = 1 then 1\n        else 0\n    end as diabetes_complicated,\n    case\n        when hypodrg = 1 then 0\n        when hypothy = 1 then 1\n        else 0\n    end as hypothyroidism,\n    case\n        when renaldrg = 1 then 0\n        when renlfail = 1 then 1\n        when hrenwrf = 1 then 1\n        when hhrwrf = 1 then 1\n        when hhrwhrf = 1 then 1\n        else 0\n    end as renal_failure,\n    case\n        when liverdrg = 1 then 0\n        when liver = 1 then 1\n        else 0\n    end as liver_disease,\n    case\n        when ulcedrg = 1 then 0\n        when ulcer = 1 then 1\n        else 0\n    end as peptic_ulcer,\n    case\n        when hivdrg = 1 then 0\n        when aids = 1 then 1\n        else 0\n    end as aids,\n    case\n        when leukdrg = 1 then 0\n        when lymph = 1 then 1\n        else 0\n    end as lymphoma,\n    case\n        when cancdrg = 1 then 0\n        when mets = 1 then 1\n        else 0\n    end as metastatic_cancer,\n    case\n        when cancdrg = 1 then 0 -- only the more severe comorbidity (metastatic cancer) is kept\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    case\n        when arthdrg = 1 then 0\n        when arth = 1 then 1\n        else 0\n    end as rheumatoid_arthritis,\n    case\n        when coagdrg = 1 then 0\n        when coag = 1 then 1\n        else 0\n    end as coagulopathy,\n    case\n        when nutrdrg = 1\n        OR obesedrg = 1 then 0\n        when obese = 1 then 1\n        else 0\n    end as obesity,\n    case\n        when nutrdrg = 1 then 0\n        when wghtloss = 1 then 1\n        else 0\n    end as weight_loss,\n    case\n        when nutrdrg = 1 then 0\n        when lytes = 1 then 1\n        else 0\n    end as fluid_electrolyte,\n    case\n        when anemdrg = 1 then 0\n        when bldloss = 1 then 1\n        else 0\n    end as blood_loss_anemia,\n    case\n        when anemdrg = 1 then 0\n        when anemdef = 1 then 1\n        else 0\n    end as deficiency_anemias,\n    case\n        when alcdrg = 1 then 0\n        when alcohol = 1 then 1\n        else 0\n    end as alcohol_abuse,\n    case\n        when alcdrg = 1 then 0\n        when drug = 1 then 1\n        else 0\n    end as drug_abuse,\n    case\n        when psydrg = 1 then 0\n        when psych = 1 then 1\n        else 0\n    end as psychoses,\n    case\n        when deprsdrg = 1 then 0\n        when depress = 1 then 1\n        else 0\n    end as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\n    left join drggrp d on adm.hadm_id = d.hadm_id\norder by\n    adm.hadm_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"elixhauser_ahrq_v37\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.elixhauser_ahrq_v37", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:21.682416Z", "name": "compile", "started_at": "2022-07-18T00:10:21.675234Z"}, {"completed_at": "2022-07-18T00:10:23.457002Z", "name": "execute", "started_at": "2022-07-18T00:10:21.683411Z"}]}, "unique_id": "model.mimic.elixhauser_ahrq_v37"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.elixhauser_ahrq_v37", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.459314Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": "2022-07-18T00:10:23.459906", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.elixhauser_ahrq_v37_no_drg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.460056Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.elixhauser_ahrq_v37_no_drg", "index": 21, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": "2022-07-18T00:10:23.459906", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "21 of 107 START table model public.elixhauser_ahrq_v37_no_drg .................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.460857Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.462312Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": "2022-07-18T00:10:23.459906", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.elixhauser_ahrq_v37_no_drg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.462691Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.elixhauser_ahrq_v37_no_drg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.462989Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.467209Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.468212Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.elixhauser_ahrq_v37_no_drg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.468597Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.elixhauser_ahrq_v37_no_drg\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.480309Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.481076Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.481312Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.481425Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.487765Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.488604Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_tmp\"\n  as (\n    -- This code uses the latest version of Elixhauser provided by AHRQ\n-- However, it does *not* filter based on diagnosis related groups (DRGs)\n-- As such, \"comorbidities\" identified are more likely to be associated with the primary reason for their hospital stay\n\n-- The code:\n--  removes \"primary\" ICD9_CODE (seq_num != 1)\n--  uses AHRQ published rules to define comorbidities\n \n\nwith\neliflg as\n(\nselect hadm_id, seq_num, icd9_code\n-- note that these codes will seem incomplete at first\n-- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n-- these codes are captured by hypertension flags instead\n-- later there are some complicated rules which confirm/reject those codes as chf\n, CASE\n  when icd9_code = '39891' then 1\n  when icd9_code between '4280' and '4289' then 1\n\t\tend as chf       /* Congestive heart failure */\n\n-- cardiac arrhythmias is removed in up to date versions\n, case\n    when icd9_code = '42610' then 1\n    when icd9_code = '42611' then 1\n    when icd9_code = '42613' then 1\n    when icd9_code between '4262' and '42653' then 1\n    when icd9_code between '4266' and '42689' then 1\n    when icd9_code = '4270' then 1\n    when icd9_code = '4272' then 1\n    when icd9_code = '42731' then 1\n    when icd9_code = '42760' then 1\n    when icd9_code = '4279' then 1\n    when icd9_code = '7850' then 1\n    when icd9_code between 'V450' and 'V4509' then 1\n    when icd9_code between 'V533' and 'V5339' then 1\n  end as arythm /* Cardiac arrhythmias */\n\n, CASE\n  when icd9_code between '09320' and '09324' then 1\n  when icd9_code between '3940' and '3971' then 1\n  when icd9_code = '3979' then 1\n  when icd9_code between '4240' and '42499' then 1\n  when icd9_code between '7463' and '7466' then 1\n  when icd9_code = 'V422' then 1\n  when icd9_code = 'V433' then 1\n\t\tend as valve     /* Valvular disease */\n\n, CASE\n  when icd9_code between '41511' and '41519' then 1\n  when icd9_code between '4160' and '4169' then 1\n  when icd9_code = '4179' then 1\n\t\tend as pulmcirc  /* Pulmonary circulation disorder */\n\n, CASE\n  when icd9_code between '4400' and '4409' then 1\n  when icd9_code between '44100' and '4419' then 1\n  when icd9_code between '4420' and '4429' then 1\n  when icd9_code between '4431' and '4439' then 1\n  when icd9_code between '44421' and '44422' then 1\n  when icd9_code = '4471' then 1\n  when icd9_code = '449' then 1\n  when icd9_code = '5571' then 1\n  when icd9_code = '5579' then 1\n  when icd9_code = 'V434' then 1\n\t\tend as perivasc  /* Peripheral vascular disorder */\n\n, CASE\n  when icd9_code = '4011' then 1\n  when icd9_code = '4019' then 1\n  when icd9_code between '64200' and '64204' then 1\n\t\tend as htn       /* Hypertension, uncomplicated */\n\n, CASE\n  when icd9_code = '4010' then 1\n  when icd9_code = '4372' then 1\n\t\tend as htncx     /* Hypertension, complicated */\n\n\n      /******************************************************************/\n      /* The following are special, temporary formats used in the       */\n      /* creation of the hypertension complicated comorbidity when      */\n      /* overlapping with congestive heart failure or renal failure     */\n      /* occurs. These temporary formats are referenced in the program  */\n      /* called comoanaly2009.txt.                                      */\n      /******************************************************************/\n, CASE\n  when icd9_code between '64220' and '64224' then 1\n\t\tend as htnpreg   /* Pre-existing hypertension complicating pregnancy */\n\n, CASE\n  when icd9_code = '40200' then 1\n  when icd9_code = '40210' then 1\n  when icd9_code = '40290' then 1\n  when icd9_code = '40509' then 1\n  when icd9_code = '40519' then 1\n  when icd9_code = '40599'         then 1\n\t\tend as htnwochf  /* Hypertensive heart disease without heart failure */\n\n, CASE\n  when icd9_code = '40201' then 1\n  when icd9_code = '40211' then 1\n  when icd9_code = '40291'         then 1\n\t\tend as htnwchf   /* Hypertensive heart disease with heart failure */\n\n, CASE\n  when icd9_code = '40300' then 1\n  when icd9_code = '40310' then 1\n  when icd9_code = '40390' then 1\n  when icd9_code = '40501' then 1\n  when icd9_code = '40511' then 1\n  when icd9_code = '40591' then 1\n  when icd9_code between '64210' and '64214' then 1\n\t\tend as hrenworf  /* Hypertensive renal disease without renal failure */\n\n, CASE\n  when icd9_code = '40301' then 1\n  when icd9_code = '40311' then 1\n  when icd9_code = '40391'         then 1\n\t\tend as hrenwrf   /* Hypertensive renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40400' then 1\n  when icd9_code = '40410' then 1\n  when icd9_code = '40490'         then 1\n\t\tend as hhrwohrf  /* Hypertensive heart and renal disease without heart or renal failure */\n\n, CASE\n  when icd9_code = '40401' then 1\n  when icd9_code = '40411' then 1\n  when icd9_code = '40491'         then 1\n\t\tend as hhrwchf   /* Hypertensive heart and renal disease with heart failure */\n\n, CASE\n  when icd9_code = '40402' then 1\n  when icd9_code = '40412' then 1\n  when icd9_code = '40492'         then 1\n\t\tend as hhrwrf    /* Hypertensive heart and renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40403' then 1\n  when icd9_code = '40413' then 1\n  when icd9_code = '40493'         then 1\n\t\tend as hhrwhrf   /* Hypertensive heart and renal disease with heart and renal failure */\n\n, CASE\n  when icd9_code between '64270' and '64274' then 1\n  when icd9_code between '64290' and '64294' then 1\n\t\tend as ohtnpreg  /* Other hypertension in pregnancy */\n\n      /******************** End Temporary Formats ***********************/\n\n, CASE\n  when icd9_code between '3420' and '3449' then 1\n  when icd9_code between '43820' and '43853' then 1\n  when icd9_code = '78072'         then 1\n\t\tend as para      /* Paralysis */\n\n, CASE\n  when icd9_code between '3300' and '3319' then 1\n  when icd9_code = '3320' then 1\n  when icd9_code = '3334' then 1\n  when icd9_code = '3335' then 1\n  when icd9_code = '3337' then 1\n  when icd9_code in ('33371','33372','33379','33385','33394') then 1\n  when icd9_code between '3340' and '3359' then 1\n  when icd9_code = '3380' then 1\n  when icd9_code = '340' then 1\n  when icd9_code between '3411' and '3419' then 1\n  when icd9_code between '34500' and '34511' then 1\n  when icd9_code between '3452' and '3453' then 1\n  when icd9_code between '34540' and '34591' then 1\n  when icd9_code between '34700' and '34701' then 1\n  when icd9_code between '34710' and '34711' then 1\n  when icd9_code = '3483' then 1 -- discontinued icd-9\n  when icd9_code between '64940' and '64944' then 1\n  when icd9_code = '7687' then 1\n  when icd9_code between '76870' and '76873' then 1\n  when icd9_code = '7803' then 1\n  when icd9_code = '78031' then 1\n  when icd9_code = '78032' then 1\n  when icd9_code = '78033' then 1\n  when icd9_code = '78039' then 1\n  when icd9_code = '78097' then 1\n  when icd9_code = '7843'         then 1\n\t\tend as neuro     /* Other neurological */\n\n, CASE\n  when icd9_code between '490' and '4928' then 1\n  when icd9_code between '49300' and '49392' then 1\n  when icd9_code between '494' and '4941' then 1\n  when icd9_code between '4950' and '505' then 1\n  when icd9_code = '5064'         then 1\n\t\tend as chrnlung  /* Chronic pulmonary disease */\n\n, CASE\n  when icd9_code between '25000' and '25033' then 1\n  when icd9_code between '64800' and '64804' then 1\n  when icd9_code between '24900' and '24931' then 1\n\t\tend as dm        /* Diabetes w/o chronic complications*/\n\n, CASE\n  when icd9_code between '25040' and '25093' then 1\n  when icd9_code = '7751' then 1\n  when icd9_code between '24940' and '24991' then 1\n\t\tend as dmcx      /* Diabetes w/ chronic complications */\n\n, CASE\n  when icd9_code between '243' and '2442' then 1\n  when icd9_code = '2448' then 1\n  when icd9_code = '2449'         then 1\n\t\tend as hypothy   /* Hypothyroidism */\n\n, CASE\n  when icd9_code = '585' then 1 -- discontinued code\n  when icd9_code = '5853' then 1\n  when icd9_code = '5854' then 1\n  when icd9_code = '5855' then 1\n  when icd9_code = '5856' then 1\n  when icd9_code = '5859' then 1\n  when icd9_code = '586' then 1\n  when icd9_code = 'V420' then 1\n  when icd9_code = 'V451' then 1\n  when icd9_code between 'V560' and 'V5632' then 1\n  when icd9_code = 'V568' then 1\n  when icd9_code between 'V4511' and 'V4512' then 1\n\t\tend as renlfail  /* Renal failure */\n\n, CASE\n  when icd9_code = '07022' then 1\n  when icd9_code = '07023' then 1\n  when icd9_code = '07032' then 1\n  when icd9_code = '07033' then 1\n  when icd9_code = '07044' then 1\n  when icd9_code = '07054' then 1\n  when icd9_code = '4560' then 1\n  when icd9_code = '4561' then 1\n  when icd9_code = '45620' then 1\n  when icd9_code = '45621' then 1\n  when icd9_code = '5710' then 1\n  when icd9_code = '5712' then 1\n  when icd9_code = '5713' then 1\n  when icd9_code between '57140' and '57149' then 1\n  when icd9_code = '5715' then 1\n  when icd9_code = '5716' then 1\n  when icd9_code = '5718' then 1\n  when icd9_code = '5719' then 1\n  when icd9_code = '5723' then 1\n  when icd9_code = '5728' then 1\n  when icd9_code = '5735' then 1\n  when icd9_code = 'V427'         then 1\n\t\tend as liver     /* Liver disease */\n\n, CASE\n  when icd9_code = '53141' then 1\n  when icd9_code = '53151' then 1\n  when icd9_code = '53161' then 1\n  when icd9_code = '53170' then 1\n  when icd9_code = '53171' then 1\n  when icd9_code = '53191' then 1\n  when icd9_code = '53241' then 1\n  when icd9_code = '53251' then 1\n  when icd9_code = '53261' then 1\n  when icd9_code = '53270' then 1\n  when icd9_code = '53271' then 1\n  when icd9_code = '53291' then 1\n  when icd9_code = '53341' then 1\n  when icd9_code = '53351' then 1\n  when icd9_code = '53361' then 1\n  when icd9_code = '53370' then 1\n  when icd9_code = '53371' then 1\n  when icd9_code = '53391' then 1\n  when icd9_code = '53441' then 1\n  when icd9_code = '53451' then 1\n  when icd9_code = '53461' then 1\n  when icd9_code = '53470' then 1\n  when icd9_code = '53471' then 1\n  when icd9_code = '53491'         then 1\n\t\tend as ulcer     /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n\n, CASE\n  when icd9_code between '042' and '0449' then 1\n\t\tend as aids      /* HIV and AIDS */\n\n, CASE\n  when icd9_code between '20000' and '20238' then 1\n  when icd9_code between '20250' and '20301' then 1\n  when icd9_code = '2386' then 1\n  when icd9_code = '2733' then 1\n  when icd9_code between '20302' and '20382' then 1\n\t\tend as lymph     /* Lymphoma */\n\n, CASE\n  when icd9_code between '1960' and '1991' then 1\n  when icd9_code between '20970' and '20975' then 1\n  when icd9_code = '20979' then 1\n  when icd9_code = '78951'         then 1\n\t\tend as mets      /* Metastatic cancer */\n\n, CASE\n  when icd9_code between '1400' and '1729' then 1\n  when icd9_code between '1740' and '1759' then 1\n  when icd9_code between '179' and '1958' then 1\n  when icd9_code between '20900' and '20924' then 1\n  when icd9_code between '20925' and '2093' then 1\n  when icd9_code between '20930' and '20936' then 1\n  when icd9_code between '25801' and '25803' then 1\n\t\tend as tumor     /* Solid tumor without metastasis */\n\n, CASE\n  when icd9_code = '7010' then 1\n  when icd9_code between '7100' and '7109' then 1\n  when icd9_code between '7140' and '7149' then 1\n  when icd9_code between '7200' and '7209' then 1\n  when icd9_code = '725' then 1\n\t\tend as arth              /* Rheumatoid arthritis/collagen vascular diseases */\n\n, CASE\n  when icd9_code between '2860' and '2869' then 1\n  when icd9_code = '2871' then 1\n  when icd9_code between '2873' and '2875' then 1\n  when icd9_code between '64930' and '64934' then 1\n  when icd9_code = '28984'         then 1\n\t\tend as coag      /* Coagulation deficiency */\n\n, CASE\n  when icd9_code = '2780' then 1\n  when icd9_code = '27800' then 1\n  when icd9_code = '27801' then 1\n  when icd9_code = '27803' then 1\n  when icd9_code between '64910' and '64914' then 1\n  when icd9_code between 'V8530' and 'V8539' then 1\n  when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n  when icd9_code between 'V8541' and 'V8545' then 1\n  when icd9_code = 'V8554' then 1\n  when icd9_code = '79391'         then 1\n\t\tend as obese     /* Obesity      */\n\n, CASE\n  when icd9_code between '260' and '2639' then 1\n  when icd9_code between '78321' and '78322' then 1\n\t\tend as wghtloss  /* Weight loss */\n\n, CASE\n  when icd9_code between '2760' and '2769' then 1\n\t\tend as lytes     /* Fluid and electrolyte disorders - note:\n                                      this comorbidity should be dropped when\n                                      used with the AHRQ Patient Safety Indicators*/\n, CASE\n  when icd9_code = '2800' then 1\n  when icd9_code between '64820' and '64824' then 1\n\t\tend as bldloss   /* Blood loss anemia */\n\n, CASE\n  when icd9_code between '2801' and '2819' then 1\n  when icd9_code between '28521' and '28529' then 1\n  when icd9_code = '2859'         then 1\n\t\tend as anemdef  /* Deficiency anemias */\n\n, CASE\n  when icd9_code between '2910' and '2913' then 1\n  when icd9_code = '2915' then 1\n  when icd9_code = '2918' then 1\n  when icd9_code = '29181' then 1\n  when icd9_code = '29182' then 1\n  when icd9_code = '29189' then 1\n  when icd9_code = '2919' then 1\n  when icd9_code between '30300' and '30393' then 1\n  when icd9_code between '30500' and '30503' then 1\n\t\tend as alcohol   /* Alcohol abuse */\n\n, CASE\n  when icd9_code = '2920' then 1\n  when icd9_code between '29282' and '29289' then 1\n  when icd9_code = '2929' then 1\n  when icd9_code between '30400' and '30493' then 1\n  when icd9_code between '30520' and '30593' then 1\n  when icd9_code between '64830' and '64834' then 1\n\t\tend as drug      /* Drug abuse */\n\n, CASE\n  when icd9_code between '29500' and '2989' then 1\n  when icd9_code = '29910' then 1\n  when icd9_code = '29911'         then 1\n\t\tend as psych    /* Psychoses */\n\n, CASE\n  when icd9_code = '3004' then 1\n  when icd9_code = '30112' then 1\n  when icd9_code = '3090' then 1\n  when icd9_code = '3091' then 1\n  when icd9_code = '311'         then 1\n\t\tend as depress  /* Depression */\nfrom diagnoses_icd icd\nWHERE seq_num = 1\n)\n-- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n, eligrp as\n(\n  select hadm_id\n  , max(chf) as chf\n  , max(arythm) as arythm\n  , max(valve) as valve\n  , max(pulmcirc) as pulmcirc\n  , max(perivasc) as perivasc\n  , max(htn) as htn\n  , max(htncx) as htncx\n  , max(htnpreg) as htnpreg\n  , max(htnwochf) as htnwochf\n  , max(htnwchf) as htnwchf\n  , max(hrenworf) as hrenworf\n  , max(hrenwrf) as hrenwrf\n  , max(hhrwohrf) as hhrwohrf\n  , max(hhrwchf) as hhrwchf\n  , max(hhrwrf) as hhrwrf\n  , max(hhrwhrf) as hhrwhrf\n  , max(ohtnpreg) as ohtnpreg\n  , max(para) as para\n  , max(neuro) as neuro\n  , max(chrnlung) as chrnlung\n  , max(dm) as dm\n  , max(dmcx) as dmcx\n  , max(hypothy) as hypothy\n  , max(renlfail) as renlfail\n  , max(liver) as liver\n  , max(ulcer) as ulcer\n  , max(aids) as aids\n  , max(lymph) as lymph\n  , max(mets) as mets\n  , max(tumor) as tumor\n  , max(arth) as arth\n  , max(coag) as coag\n  , max(obese) as obese\n  , max(wghtloss) as wghtloss\n  , max(lytes) as lytes\n  , max(bldloss) as bldloss\n  , max(anemdef) as anemdef\n  , max(alcohol) as alcohol\n  , max(drug) as drug\n  , max(psych) as psych\n  , max(depress) as depress\nfrom eliflg\ngroup by hadm_id\n)\n-- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect adm.subject_id, adm.hadm_id\n, case\n    when chf     = 1 then 1\n    when htnwchf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwhrf = 1 then 1\n  else 0 end as congestive_heart_failure\n, case\n    when arythm = 1 then 1\n  else 0 end as cardiac_arrhythmias\n, case when    valve = 1 then 1 else 0 end as valvular_disease\n, case when pulmcirc = 1 then 1 else 0 end as pulmonary_circulation\n, case when perivasc = 1 then 1 else 0 end as peripheral_vascular\n\n-- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n-- note \"htn\" (hypertension) is only 1 if \"htncx\" (complicated hypertension) is 0\n-- this matters if you filter on DRG but for this query we can just merge them immediately\n, case\n    when htn = 1 then 1\n    when htncx = 1 then 1\n    when htnpreg = 1 then 1\n    when htnwochf = 1 then 1\n    when htnwchf = 1 then 1\n    when hrenworf = 1 then 1\n    when hrenwrf = 1 then 1\n    when hhrwohrf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwrf = 1 then 1\n    when hhrwhrf = 1 then 1\n    when ohtnpreg = 1 then 1\n  else 0 end as hypertension\n\n, case when para      = 1 then 1 else 0 end as paralysis\n, case when neuro     = 1 then 1 else 0 end as other_neurological\n, case when chrnlung  = 1 then 1 else 0 end as chronic_pulmonary\n, case\n    -- only the more severe comorbidity (complicated diabetes) is kept\n    when dmcx = 1 then 0\n    when dm = 1 then 1\n  else 0 end as diabetes_uncomplicated\n, case when dmcx    = 1 then 1 else 0 end as diabetes_complicated\n, case when hypothy = 1 then 1 else 0 end as hypothyroidism\n, case\n    when renlfail = 1 then 1\n    when hrenwrf  = 1 then 1\n    when hhrwrf   = 1 then 1\n    when hhrwhrf  = 1 then 1\n  else 0 end as renal_failure\n\n, case when liver = 1 then 1 else 0 end as liver_disease\n, case when ulcer = 1 then 1 else 0 end as peptic_ulcer\n, case when aids = 1 then 1 else 0 end as aids\n, case when lymph = 1 then 1 else 0 end as lymphoma\n, case when mets = 1 then 1 else 0 end as metastatic_cancer\n, case\n    -- only the more severe comorbidity (metastatic cancer) is kept\n    when mets = 1 then 0\n    when tumor = 1 then 1\n  else 0 end as solid_tumor\n, case when arth = 1 then 1 else 0 end as rheumatoid_arthritis\n, case when coag = 1 then 1 else 0 end as coagulopathy\n, case when obese = 1 then 1 else 0 end as obesity\n, case when wghtloss = 1 then 1 else 0 end as weight_loss\n, case when lytes = 1 then 1 else 0 end as fluid_electrolyte\n, case when bldloss = 1 then 1 else 0 end as blood_loss_anemia\n, case when anemdef = 1 then 1 else 0 end as deficiency_anemias\n, case when alcohol = 1 then 1 else 0 end as alcohol_abuse\n, case when drug = 1 then 1 else 0 end as drug_abuse\n, case when psych = 1 then 1 else 0 end as psychoses\n, case when depress = 1 then 1 else 0 end as depression\n\nFROM admissions adm\nleft join eligrp eli\n  on adm.hadm_id = eli.hadm_id\norder by adm.hadm_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_tmp\"\n  as (\n    -- This code uses the latest version of Elixhauser provided by AHRQ\n-- However, it does *not* filter based on diagnosis related groups (DRGs)\n-- As such, \"comorbidities\" identified are more likely to be associated with the primary reason for their hospital stay\n\n-- The code:\n--  removes \"primary\" ICD9_CODE (seq_num != 1)\n--  uses AHRQ published rules to define comorbidities\n \n\nwith\neliflg as\n(\nselect hadm_id, seq_num, icd9_code\n-- note that these codes will seem incomplete at first\n-- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n-- these codes are captured by hypertension flags instead\n-- later there are some complicated rules which confirm/reject those codes as chf\n, CASE\n  when icd9_code = '39891' then 1\n  when icd9_code between '4280' and '4289' then 1\n\t\tend as chf       /* Congestive heart failure */\n\n-- cardiac arrhythmias is removed in up to date versions\n, case\n    when icd9_code = '42610' then 1\n    when icd9_code = '42611' then 1\n    when icd9_code = '42613' then 1\n    when icd9_code between '4262' and '42653' then 1\n    when icd9_code between '4266' and '42689' then 1\n    when icd9_code = '4270' then 1\n    when icd9_code = '4272' then 1\n    when icd9_code = '42731' then 1\n    when icd9_code = '42760' then 1\n    when icd9_code = '4279' then 1\n    when icd9_code = '7850' then 1\n    when icd9_code between 'V450' and 'V4509' then 1\n    when icd9_code between 'V533' and 'V5339' then 1\n  end as arythm /* Cardiac arrhythmias */\n\n, CASE\n  when icd9_code between '09320' and '09324' then 1\n  when icd9_code between '3940' and '3971' then 1\n  when icd9_code = '3979' then 1\n  when icd9_code between '4240' and '42499' then 1\n  when icd9_code between '7463' and '7466' then 1\n  when icd9_code = 'V422' then 1\n  when icd9_code = 'V433' then 1\n\t\tend as valve     /* Valvular disease */\n\n, CASE\n  when icd9_code between '41511' and '41519' then 1\n  when icd9_code between '4160' and '4169' then 1\n  when icd9_code = '4179' then 1\n\t\tend as pulmcirc  /* Pulmonary circulation disorder */\n\n, CASE\n  when icd9_code between '4400' and '4409' then 1\n  when icd9_code between '44100' and '4419' then 1\n  when icd9_code between '4420' and '4429' then 1\n  when icd9_code between '4431' and '4439' then 1\n  when icd9_code between '44421' and '44422' then 1\n  when icd9_code = '4471' then 1\n  when icd9_code = '449' then 1\n  when icd9_code = '5571' then 1\n  when icd9_code = '5579' then 1\n  when icd9_code = 'V434' then 1\n\t\tend as perivasc  /* Peripheral vascular disorder */\n\n, CASE\n  when icd9_code = '4011' then 1\n  when icd9_code = '4019' then 1\n  when icd9_code between '64200' and '64204' then 1\n\t\tend as htn       /* Hypertension, uncomplicated */\n\n, CASE\n  when icd9_code = '4010' then 1\n  when icd9_code = '4372' then 1\n\t\tend as htncx     /* Hypertension, complicated */\n\n\n      /******************************************************************/\n      /* The following are special, temporary formats used in the       */\n      /* creation of the hypertension complicated comorbidity when      */\n      /* overlapping with congestive heart failure or renal failure     */\n      /* occurs. These temporary formats are referenced in the program  */\n      /* called comoanaly2009.txt.                                      */\n      /******************************************************************/\n, CASE\n  when icd9_code between '64220' and '64224' then 1\n\t\tend as htnpreg   /* Pre-existing hypertension complicating pregnancy */\n\n, CASE\n  when icd9_code = '40200' then 1\n  when icd9_code = '40210' then 1\n  when icd9_code = '40290' then 1\n  when icd9_code = '40509' then 1\n  when icd9_code = '40519' then 1\n  when icd9_code = '40599'         then 1\n\t\tend as htnwochf  /* Hypertensive heart disease without heart failure */\n\n, CASE\n  when icd9_code = '40201' then 1\n  when icd9_code = '40211' then 1\n  when icd9_code = '40291'         then 1\n\t\tend as htnwchf   /* Hypertensive heart disease with heart failure */\n\n, CASE\n  when icd9_code = '40300' then 1\n  when icd9_code = '40310' then 1\n  when icd9_code = '40390' then 1\n  when icd9_code = '40501' then 1\n  when icd9_code = '40511' then 1\n  when icd9_code = '40591' then 1\n  when icd9_code between '64210' and '64214' then 1\n\t\tend as hrenworf  /* Hypertensive renal disease without renal failure */\n\n, CASE\n  when icd9_code = '40301' then 1\n  when icd9_code = '40311' then 1\n  when icd9_code = '40391'         then 1\n\t\tend as hrenwrf   /* Hypertensive renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40400' then 1\n  when icd9_code = '40410' then 1\n  when icd9_code = '40490'         then 1\n\t\tend as hhrwohrf  /* Hypertensive heart and renal disease without heart or renal failure */\n\n, CASE\n  when icd9_code = '40401' then 1\n  when icd9_code = '40411' then 1\n  when icd9_code = '40491'         then 1\n\t\tend as hhrwchf   /* Hypertensive heart and renal disease with heart failure */\n\n, CASE\n  when icd9_code = '40402' then 1\n  when icd9_code = '40412' then 1\n  when icd9_code = '40492'         then 1\n\t\tend as hhrwrf    /* Hypertensive heart and renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40403' then 1\n  when icd9_code = '40413' then 1\n  when icd9_code = '40493'         then 1\n\t\tend as hhrwhrf   /* Hypertensive heart and renal disease with heart and renal failure */\n\n, CASE\n  when icd9_code between '64270' and '64274' then 1\n  when icd9_code between '64290' and '64294' then 1\n\t\tend as ohtnpreg  /* Other hypertension in pregnancy */\n\n      /******************** End Temporary Formats ***********************/\n\n, CASE\n  when icd9_code between '3420' and '3449' then 1\n  when icd9_code between '43820' and '43853' then 1\n  when icd9_code = '78072'         then 1\n\t\tend as para      /* Paralysis */\n\n, CASE\n  when icd9_code between '3300' and '3319' then 1\n  when icd9_code = '3320' then 1\n  when icd9_code = '3334' then 1\n  when icd9_code = '3335' then 1\n  when icd9_code = '3337' then 1\n  when icd9_code in ('33371','33372','33379','33385','33394') then 1\n  when icd9_code between '3340' and '3359' then 1\n  when icd9_code = '3380' then 1\n  when icd9_code = '340' then 1\n  when icd9_code between '3411' and '3419' then 1\n  when icd9_code between '34500' and '34511' then 1\n  when icd9_code between '3452' and '3453' then 1\n  when icd9_code between '34540' and '34591' then 1\n  when icd9_code between '34700' and '34701' then 1\n  when icd9_code between '34710' and '34711' then 1\n  when icd9_code = '3483' then 1 -- discontinued icd-9\n  when icd9_code between '64940' and '64944' then 1\n  when icd9_code = '7687' then 1\n  when icd9_code between '76870' and '76873' then 1\n  when icd9_code = '7803' then 1\n  when icd9_code = '78031' then 1\n  when icd9_code = '78032' then 1\n  when icd9_code = '78033' then 1\n  when icd9_code = '78039' then 1\n  when icd9_code = '78097' then 1\n  when icd9_code = '7843'         then 1\n\t\tend as neuro     /* Other neurological */\n\n, CASE\n  when icd9_code between '490' and '4928' then 1\n  when icd9_code between '49300' and '49392' then 1\n  when icd9_code between '494' and '4941' then 1\n  when icd9_code between '4950' and '505' then 1\n  when icd9_code = '5064'         then 1\n\t\tend as chrnlung  /* Chronic pulmonary disease */\n\n, CASE\n  when icd9_code between '25000' and '25033' then 1\n  when icd9_code between '64800' and '64804' then 1\n  when icd9_code between '24900' and '24931' then 1\n\t\tend as dm        /* Diabetes w/o chronic complications*/\n\n, CASE\n  when icd9_code between '25040' and '25093' then 1\n  when icd9_code = '7751' then 1\n  when icd9_code between '24940' and '24991' then 1\n\t\tend as dmcx      /* Diabetes w/ chronic complications */\n\n, CASE\n  when icd9_code between '243' and '2442' then 1\n  when icd9_code = '2448' then 1\n  when icd9_code = '2449'         then 1\n\t\tend as hypothy   /* Hypothyroidism */\n\n, CASE\n  when icd9_code = '585' then 1 -- discontinued code\n  when icd9_code = '5853' then 1\n  when icd9_code = '5854' then 1\n  when icd9_code = '5855' then 1\n  when icd9_code = '5856' then 1\n  when icd9_code = '5859' then 1\n  when icd9_code = '586' then 1\n  when icd9_code = 'V420' then 1\n  when icd9_code = 'V451' then 1\n  when icd9_code between 'V560' and 'V5632' then 1\n  when icd9_code = 'V568' then 1\n  when icd9_code between 'V4511' and 'V4512' then 1\n\t\tend as renlfail  /* Renal failure */\n\n, CASE\n  when icd9_code = '07022' then 1\n  when icd9_code = '07023' then 1\n  when icd9_code = '07032' then 1\n  when icd9_code = '07033' then 1\n  when icd9_code = '07044' then 1\n  when icd9_code = '07054' then 1\n  when icd9_code = '4560' then 1\n  when icd9_code = '4561' then 1\n  when icd9_code = '45620' then 1\n  when icd9_code = '45621' then 1\n  when icd9_code = '5710' then 1\n  when icd9_code = '5712' then 1\n  when icd9_code = '5713' then 1\n  when icd9_code between '57140' and '57149' then 1\n  when icd9_code = '5715' then 1\n  when icd9_code = '5716' then 1\n  when icd9_code = '5718' then 1\n  when icd9_code = '5719' then 1\n  when icd9_code = '5723' then 1\n  when icd9_code = '5728' then 1\n  when icd9_code = '5735' then 1\n  when icd9_code = 'V427'         then 1\n\t\tend as liver     /* Liver disease */\n\n, CASE\n  when icd9_code = '53141' then 1\n  when icd9_code = '53151' then 1\n  when icd9_code = '53161' then 1\n  when icd9_code = '53170' then 1\n  when icd9_code = '53171' then 1\n  when icd9_code = '53191' then 1\n  when icd9_code = '53241' then 1\n  when icd9_code = '53251' then 1\n  when icd9_code = '53261' then 1\n  when icd9_code = '53270' then 1\n  when icd9_code = '53271' then 1\n  when icd9_code = '53291' then 1\n  when icd9_code = '53341' then 1\n  when icd9_code = '53351' then 1\n  when icd9_code = '53361' then 1\n  when icd9_code = '53370' then 1\n  when icd9_code = '53371' then 1\n  when icd9_code = '53391' then 1\n  when icd9_code = '53441' then 1\n  when icd9_code = '53451' then 1\n  when icd9_code = '53461' then 1\n  when icd9_code = '53470' then 1\n  when icd9_code = '53471' then 1\n  when icd9_code = '53491'         then 1\n\t\tend as ulcer     /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n\n, CASE\n  when icd9_code between '042' and '0449' then 1\n\t\tend as aids      /* HIV and AIDS */\n\n, CASE\n  when icd9_code between '20000' and '20238' then 1\n  when icd9_code between '20250' and '20301' then 1\n  when icd9_code = '2386' then 1\n  when icd9_code = '2733' then 1\n  when icd9_code between '20302' and '20382' then 1\n\t\tend as lymph     /* Lymphoma */\n\n, CASE\n  when icd9_code between '1960' and '1991' then 1\n  when icd9_code between '20970' and '20975' then 1\n  when icd9_code = '20979' then 1\n  when icd9_code = '78951'         then 1\n\t\tend as mets      /* Metastatic cancer */\n\n, CASE\n  when icd9_code between '1400' and '1729' then 1\n  when icd9_code between '1740' and '1759' then 1\n  when icd9_code between '179' and '1958' then 1\n  when icd9_code between '20900' and '20924' then 1\n  when icd9_code between '20925' and '2093' then 1\n  when icd9_code between '20930' and '20936' then 1\n  when icd9_code between '25801' and '25803' then 1\n\t\tend as tumor     /* Solid tumor without metastasis */\n\n, CASE\n  when icd9_code = '7010' then 1\n  when icd9_code between '7100' and '7109' then 1\n  when icd9_code between '7140' and '7149' then 1\n  when icd9_code between '7200' and '7209' then 1\n  when icd9_code = '725' then 1\n\t\tend as arth              /* Rheumatoid arthritis/collagen vascular diseases */\n\n, CASE\n  when icd9_code between '2860' and '2869' then 1\n  when icd9_code = '2871' then 1\n  when icd9_code between '2873' and '2875' then 1\n  when icd9_code between '64930' and '64934' then 1\n  when icd9_code = '28984'         then 1\n\t\tend as coag      /* Coagulation deficiency */\n\n, CASE\n  when icd9_code = '2780' then 1\n  when icd9_code = '27800' then 1\n  when icd9_code = '27801' then 1\n  when icd9_code = '27803' then 1\n  when icd9_code between '64910' and '64914' then 1\n  when icd9_code between 'V8530' and 'V8539' then 1\n  when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n  when icd9_code between 'V8541' and 'V8545' then 1\n  when icd9_code = 'V8554' then 1\n  when icd9_code = '79391'         then 1\n\t\tend as obese     /* Obesity      */\n\n, CASE\n  when icd9_code between '260' and '2639' then 1\n  when icd9_code between '78321' and '78322' then 1\n\t\tend as wghtloss  /* Weight loss */\n\n, CASE\n  when icd9_code between '2760' and '2769' then 1\n\t\tend as lytes     /* Fluid and electrolyte disorders - note:\n                                      this comorbidity should be dropped when\n                                      used with the AHRQ Patient Safety Indicators*/\n, CASE\n  when icd9_code = '2800' then 1\n  when icd9_code between '64820' and '64824' then 1\n\t\tend as bldloss   /* Blood loss anemia */\n\n, CASE\n  when icd9_code between '2801' and '2819' then 1\n  when icd9_code between '28521' and '28529' then 1\n  when icd9_code = '2859'         then 1\n\t\tend as anemdef  /* Deficiency anemias */\n\n, CASE\n  when icd9_code between '2910' and '2913' then 1\n  when icd9_code = '2915' then 1\n  when icd9_code = '2918' then 1\n  when icd9_code = '29181' then 1\n  when icd9_code = '29182' then 1\n  when icd9_code = '29189' then 1\n  when icd9_code = '2919' then 1\n  when icd9_code between '30300' and '30393' then 1\n  when icd9_code between '30500' and '30503' then 1\n\t\tend as alcohol   /* Alcohol abuse */\n\n, CASE\n  when icd9_code = '2920' then 1\n  when icd9_code between '29282' and '29289' then 1\n  when icd9_code = '2929' then 1\n  when icd9_code between '30400' and '30493' then 1\n  when icd9_code between '30520' and '30593' then 1\n  when icd9_code between '64830' and '64834' then 1\n\t\tend as drug      /* Drug abuse */\n\n, CASE\n  when icd9_code between '29500' and '2989' then 1\n  when icd9_code = '29910' then 1\n  when icd9_code = '29911'         then 1\n\t\tend as psych    /* Psychoses */\n\n, CASE\n  when icd9_code = '3004' then 1\n  when icd9_code = '30112' then 1\n  when icd9_code = '3090' then 1\n  when icd9_code = '3091' then 1\n  when icd9_code = '311'         then 1\n\t\tend as depress  /* Depression */\nfrom diagnoses_icd icd\nWHERE seq_num = 1\n)\n-- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n, eligrp as\n(\n  select hadm_id\n  , max(chf) as chf\n  , max(arythm) as arythm\n  , max(valve) as valve\n  , max(pulmcirc) as pulmcirc\n  , max(perivasc) as perivasc\n  , max(htn) as htn\n  , max(htncx) as htncx\n  , max(htnpreg) as htnpreg\n  , max(htnwochf) as htnwochf\n  , max(htnwchf) as htnwchf\n  , max(hrenworf) as hrenworf\n  , max(hrenwrf) as hrenwrf\n  , max(hhrwohrf) as hhrwohrf\n  , max(hhrwchf) as hhrwchf\n  , max(hhrwrf) as hhrwrf\n  , max(hhrwhrf) as hhrwhrf\n  , max(ohtnpreg) as ohtnpreg\n  , max(para) as para\n  , max(neuro) as neuro\n  , max(chrnlung) as chrnlung\n  , max(dm) as dm\n  , max(dmcx) as dmcx\n  , max(hypothy) as hypothy\n  , max(renlfail) as renlfail\n  , max(liver) as liver\n  , max(ulcer) as ulcer\n  , max(aids) as aids\n  , max(lymph) as lymph\n  , max(mets) as mets\n  , max(tumor) as tumor\n  , max(arth) as arth\n  , max(coag) as coag\n  , max(obese) as obese\n  , max(wghtloss) as wghtloss\n  , max(lytes) as lytes\n  , max(bldloss) as bldloss\n  , max(anemdef) as anemdef\n  , max(alcohol) as alcohol\n  , max(drug) as drug\n  , max(psych) as psych\n  , max(depress) as depress\nfrom eliflg\ngroup by hadm_id\n)\n-- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect adm.subject_id, adm.hadm_id\n, case\n    when chf     = 1 then 1\n    when htnwchf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwhrf = 1 then 1\n  else 0 end as congestive_heart_failure\n, case\n    when arythm = 1 then 1\n  else 0 end as cardiac_arrhythmias\n, case when    valve = 1 then 1 else 0 end as valvular_disease\n, case when pulmcirc = 1 then 1 else 0 end as pulmonary_circulation\n, case when perivasc = 1 then 1 else 0 end as peripheral_vascular\n\n-- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n-- note \"htn\" (hypertension) is only 1 if \"htncx\" (complicated hypertension) is 0\n-- this matters if you filter on DRG but for this query we can just merge them immediately\n, case\n    when htn = 1 then 1\n    when htncx = 1 then 1\n    when htnpreg = 1 then 1\n    when htnwochf = 1 then 1\n    when htnwchf = 1 then 1\n    when hrenworf = 1 then 1\n    when hrenwrf = 1 then 1\n    when hhrwohrf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwrf = 1 then 1\n    when hhrwhrf = 1 then 1\n    when ohtnpreg = 1 then 1\n  else 0 end as hypertension\n\n, case when para      = 1 then 1 else 0 end as paralysis\n, case when neuro     = 1 then 1 else 0 end as other_neurological\n, case when chrnlung  = 1 then 1 else 0 end as chronic_pulmonary\n, case\n    -- only the more severe comorbidity (complicated diabetes) is kept\n    when dmcx = 1 then 0\n    when dm = 1 then 1\n  else 0 end as diabetes_uncomplicated\n, case when dmcx    = 1 then 1 else 0 end as diabetes_complicated\n, case when hypothy = 1 then 1 else 0 end as hypothyroidism\n, case\n    when renlfail = 1 then 1\n    when hrenwrf  = 1 then 1\n    when hhrwrf   = 1 then 1\n    when hhrwhrf  = 1 then 1\n  else 0 end as renal_failure\n\n, case when liver = 1 then 1 else 0 end as liver_disease\n, case when ulcer = 1 then 1 else 0 end as peptic_ulcer\n, case when aids = 1 then 1 else 0 end as aids\n, case when lymph = 1 then 1 else 0 end as lymphoma\n, case when mets = 1 then 1 else 0 end as metastatic_cancer\n, case\n    -- only the more severe comorbidity (metastatic cancer) is kept\n    when mets = 1 then 0\n    when tumor = 1 then 1\n  else 0 end as solid_tumor\n, case when arth = 1 then 1 else 0 end as rheumatoid_arthritis\n, case when coag = 1 then 1 else 0 end as coagulopathy\n, case when obese = 1 then 1 else 0 end as obesity\n, case when wghtloss = 1 then 1 else 0 end as weight_loss\n, case when lytes = 1 then 1 else 0 end as fluid_electrolyte\n, case when bldloss = 1 then 1 else 0 end as blood_loss_anemia\n, case when anemdef = 1 then 1 else 0 end as deficiency_anemias\n, case when alcohol = 1 then 1 else 0 end as alcohol_abuse\n, case when drug = 1 then 1 else 0 end as drug_abuse\n, case when psych = 1 then 1 else 0 end as psychoses\n, case when depress = 1 then 1 else 0 end as depression\n\nFROM admissions adm\nleft join eligrp eli\n  on adm.hadm_id = eli.hadm_id\norder by adm.hadm_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.489132Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.5, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 0.5 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.991863Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.998744Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg\" rename to \"elixhauser_ahrq_v37_no_drg__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg\" rename to \"elixhauser_ahrq_v37_no_drg__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:23.999167Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.000779Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.004973Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_tmp\" rename to \"elixhauser_ahrq_v37_no_drg\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\nalter table \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_tmp\" rename to \"elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.005198Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.005969Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.009153Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.009359Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.009480Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.011100Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_ahrq_v37_no_drg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.012678Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_ahrq_v37_no_drg\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.012890Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.015746Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.019044Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_ahrq_v37_no_drg: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.019299Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f040>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f040>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.020145Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.elixhauser_ahrq_v37_no_drg", "execution_time": 0, "index": 21, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": "2022-07-18T00:10:23.459906", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "21 of 107 OK created table model public.elixhauser_ahrq_v37_no_drg ............. [\u001b[32mSELECT 58976\u001b[0m in 0.56s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.020666Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:24.021055", "node_name": "elixhauser_ahrq_v37_no_drg", "node_path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "node_started_at": "2022-07-18T00:10:23.459906", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 0.5582778453826904, "failures": null, "message": "SELECT 58976", "node": {"alias": "elixhauser_ahrq_v37_no_drg", "build_path": "target/run/mimic/models/comorbidity/elixhauser_ahrq_v37_no_drg.sql", "checksum": {"checksum": "e64ffe4f3f6c9360143d8626aa3aad89390930a829a9a35eb99bf3fb4736a24e", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/comorbidity/elixhauser_ahrq_v37_no_drg.sql", "compiled_sql": "-- This code uses the latest version of Elixhauser provided by AHRQ\n-- However, it does *not* filter based on diagnosis related groups (DRGs)\n-- As such, \"comorbidities\" identified are more likely to be associated with the primary reason for their hospital stay\n\n-- The code:\n--  removes \"primary\" ICD9_CODE (seq_num != 1)\n--  uses AHRQ published rules to define comorbidities\n \n\nwith\neliflg as\n(\nselect hadm_id, seq_num, icd9_code\n-- note that these codes will seem incomplete at first\n-- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n-- these codes are captured by hypertension flags instead\n-- later there are some complicated rules which confirm/reject those codes as chf\n, CASE\n  when icd9_code = '39891' then 1\n  when icd9_code between '4280' and '4289' then 1\n\t\tend as chf       /* Congestive heart failure */\n\n-- cardiac arrhythmias is removed in up to date versions\n, case\n    when icd9_code = '42610' then 1\n    when icd9_code = '42611' then 1\n    when icd9_code = '42613' then 1\n    when icd9_code between '4262' and '42653' then 1\n    when icd9_code between '4266' and '42689' then 1\n    when icd9_code = '4270' then 1\n    when icd9_code = '4272' then 1\n    when icd9_code = '42731' then 1\n    when icd9_code = '42760' then 1\n    when icd9_code = '4279' then 1\n    when icd9_code = '7850' then 1\n    when icd9_code between 'V450' and 'V4509' then 1\n    when icd9_code between 'V533' and 'V5339' then 1\n  end as arythm /* Cardiac arrhythmias */\n\n, CASE\n  when icd9_code between '09320' and '09324' then 1\n  when icd9_code between '3940' and '3971' then 1\n  when icd9_code = '3979' then 1\n  when icd9_code between '4240' and '42499' then 1\n  when icd9_code between '7463' and '7466' then 1\n  when icd9_code = 'V422' then 1\n  when icd9_code = 'V433' then 1\n\t\tend as valve     /* Valvular disease */\n\n, CASE\n  when icd9_code between '41511' and '41519' then 1\n  when icd9_code between '4160' and '4169' then 1\n  when icd9_code = '4179' then 1\n\t\tend as pulmcirc  /* Pulmonary circulation disorder */\n\n, CASE\n  when icd9_code between '4400' and '4409' then 1\n  when icd9_code between '44100' and '4419' then 1\n  when icd9_code between '4420' and '4429' then 1\n  when icd9_code between '4431' and '4439' then 1\n  when icd9_code between '44421' and '44422' then 1\n  when icd9_code = '4471' then 1\n  when icd9_code = '449' then 1\n  when icd9_code = '5571' then 1\n  when icd9_code = '5579' then 1\n  when icd9_code = 'V434' then 1\n\t\tend as perivasc  /* Peripheral vascular disorder */\n\n, CASE\n  when icd9_code = '4011' then 1\n  when icd9_code = '4019' then 1\n  when icd9_code between '64200' and '64204' then 1\n\t\tend as htn       /* Hypertension, uncomplicated */\n\n, CASE\n  when icd9_code = '4010' then 1\n  when icd9_code = '4372' then 1\n\t\tend as htncx     /* Hypertension, complicated */\n\n\n      /******************************************************************/\n      /* The following are special, temporary formats used in the       */\n      /* creation of the hypertension complicated comorbidity when      */\n      /* overlapping with congestive heart failure or renal failure     */\n      /* occurs. These temporary formats are referenced in the program  */\n      /* called comoanaly2009.txt.                                      */\n      /******************************************************************/\n, CASE\n  when icd9_code between '64220' and '64224' then 1\n\t\tend as htnpreg   /* Pre-existing hypertension complicating pregnancy */\n\n, CASE\n  when icd9_code = '40200' then 1\n  when icd9_code = '40210' then 1\n  when icd9_code = '40290' then 1\n  when icd9_code = '40509' then 1\n  when icd9_code = '40519' then 1\n  when icd9_code = '40599'         then 1\n\t\tend as htnwochf  /* Hypertensive heart disease without heart failure */\n\n, CASE\n  when icd9_code = '40201' then 1\n  when icd9_code = '40211' then 1\n  when icd9_code = '40291'         then 1\n\t\tend as htnwchf   /* Hypertensive heart disease with heart failure */\n\n, CASE\n  when icd9_code = '40300' then 1\n  when icd9_code = '40310' then 1\n  when icd9_code = '40390' then 1\n  when icd9_code = '40501' then 1\n  when icd9_code = '40511' then 1\n  when icd9_code = '40591' then 1\n  when icd9_code between '64210' and '64214' then 1\n\t\tend as hrenworf  /* Hypertensive renal disease without renal failure */\n\n, CASE\n  when icd9_code = '40301' then 1\n  when icd9_code = '40311' then 1\n  when icd9_code = '40391'         then 1\n\t\tend as hrenwrf   /* Hypertensive renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40400' then 1\n  when icd9_code = '40410' then 1\n  when icd9_code = '40490'         then 1\n\t\tend as hhrwohrf  /* Hypertensive heart and renal disease without heart or renal failure */\n\n, CASE\n  when icd9_code = '40401' then 1\n  when icd9_code = '40411' then 1\n  when icd9_code = '40491'         then 1\n\t\tend as hhrwchf   /* Hypertensive heart and renal disease with heart failure */\n\n, CASE\n  when icd9_code = '40402' then 1\n  when icd9_code = '40412' then 1\n  when icd9_code = '40492'         then 1\n\t\tend as hhrwrf    /* Hypertensive heart and renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40403' then 1\n  when icd9_code = '40413' then 1\n  when icd9_code = '40493'         then 1\n\t\tend as hhrwhrf   /* Hypertensive heart and renal disease with heart and renal failure */\n\n, CASE\n  when icd9_code between '64270' and '64274' then 1\n  when icd9_code between '64290' and '64294' then 1\n\t\tend as ohtnpreg  /* Other hypertension in pregnancy */\n\n      /******************** End Temporary Formats ***********************/\n\n, CASE\n  when icd9_code between '3420' and '3449' then 1\n  when icd9_code between '43820' and '43853' then 1\n  when icd9_code = '78072'         then 1\n\t\tend as para      /* Paralysis */\n\n, CASE\n  when icd9_code between '3300' and '3319' then 1\n  when icd9_code = '3320' then 1\n  when icd9_code = '3334' then 1\n  when icd9_code = '3335' then 1\n  when icd9_code = '3337' then 1\n  when icd9_code in ('33371','33372','33379','33385','33394') then 1\n  when icd9_code between '3340' and '3359' then 1\n  when icd9_code = '3380' then 1\n  when icd9_code = '340' then 1\n  when icd9_code between '3411' and '3419' then 1\n  when icd9_code between '34500' and '34511' then 1\n  when icd9_code between '3452' and '3453' then 1\n  when icd9_code between '34540' and '34591' then 1\n  when icd9_code between '34700' and '34701' then 1\n  when icd9_code between '34710' and '34711' then 1\n  when icd9_code = '3483' then 1 -- discontinued icd-9\n  when icd9_code between '64940' and '64944' then 1\n  when icd9_code = '7687' then 1\n  when icd9_code between '76870' and '76873' then 1\n  when icd9_code = '7803' then 1\n  when icd9_code = '78031' then 1\n  when icd9_code = '78032' then 1\n  when icd9_code = '78033' then 1\n  when icd9_code = '78039' then 1\n  when icd9_code = '78097' then 1\n  when icd9_code = '7843'         then 1\n\t\tend as neuro     /* Other neurological */\n\n, CASE\n  when icd9_code between '490' and '4928' then 1\n  when icd9_code between '49300' and '49392' then 1\n  when icd9_code between '494' and '4941' then 1\n  when icd9_code between '4950' and '505' then 1\n  when icd9_code = '5064'         then 1\n\t\tend as chrnlung  /* Chronic pulmonary disease */\n\n, CASE\n  when icd9_code between '25000' and '25033' then 1\n  when icd9_code between '64800' and '64804' then 1\n  when icd9_code between '24900' and '24931' then 1\n\t\tend as dm        /* Diabetes w/o chronic complications*/\n\n, CASE\n  when icd9_code between '25040' and '25093' then 1\n  when icd9_code = '7751' then 1\n  when icd9_code between '24940' and '24991' then 1\n\t\tend as dmcx      /* Diabetes w/ chronic complications */\n\n, CASE\n  when icd9_code between '243' and '2442' then 1\n  when icd9_code = '2448' then 1\n  when icd9_code = '2449'         then 1\n\t\tend as hypothy   /* Hypothyroidism */\n\n, CASE\n  when icd9_code = '585' then 1 -- discontinued code\n  when icd9_code = '5853' then 1\n  when icd9_code = '5854' then 1\n  when icd9_code = '5855' then 1\n  when icd9_code = '5856' then 1\n  when icd9_code = '5859' then 1\n  when icd9_code = '586' then 1\n  when icd9_code = 'V420' then 1\n  when icd9_code = 'V451' then 1\n  when icd9_code between 'V560' and 'V5632' then 1\n  when icd9_code = 'V568' then 1\n  when icd9_code between 'V4511' and 'V4512' then 1\n\t\tend as renlfail  /* Renal failure */\n\n, CASE\n  when icd9_code = '07022' then 1\n  when icd9_code = '07023' then 1\n  when icd9_code = '07032' then 1\n  when icd9_code = '07033' then 1\n  when icd9_code = '07044' then 1\n  when icd9_code = '07054' then 1\n  when icd9_code = '4560' then 1\n  when icd9_code = '4561' then 1\n  when icd9_code = '45620' then 1\n  when icd9_code = '45621' then 1\n  when icd9_code = '5710' then 1\n  when icd9_code = '5712' then 1\n  when icd9_code = '5713' then 1\n  when icd9_code between '57140' and '57149' then 1\n  when icd9_code = '5715' then 1\n  when icd9_code = '5716' then 1\n  when icd9_code = '5718' then 1\n  when icd9_code = '5719' then 1\n  when icd9_code = '5723' then 1\n  when icd9_code = '5728' then 1\n  when icd9_code = '5735' then 1\n  when icd9_code = 'V427'         then 1\n\t\tend as liver     /* Liver disease */\n\n, CASE\n  when icd9_code = '53141' then 1\n  when icd9_code = '53151' then 1\n  when icd9_code = '53161' then 1\n  when icd9_code = '53170' then 1\n  when icd9_code = '53171' then 1\n  when icd9_code = '53191' then 1\n  when icd9_code = '53241' then 1\n  when icd9_code = '53251' then 1\n  when icd9_code = '53261' then 1\n  when icd9_code = '53270' then 1\n  when icd9_code = '53271' then 1\n  when icd9_code = '53291' then 1\n  when icd9_code = '53341' then 1\n  when icd9_code = '53351' then 1\n  when icd9_code = '53361' then 1\n  when icd9_code = '53370' then 1\n  when icd9_code = '53371' then 1\n  when icd9_code = '53391' then 1\n  when icd9_code = '53441' then 1\n  when icd9_code = '53451' then 1\n  when icd9_code = '53461' then 1\n  when icd9_code = '53470' then 1\n  when icd9_code = '53471' then 1\n  when icd9_code = '53491'         then 1\n\t\tend as ulcer     /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n\n, CASE\n  when icd9_code between '042' and '0449' then 1\n\t\tend as aids      /* HIV and AIDS */\n\n, CASE\n  when icd9_code between '20000' and '20238' then 1\n  when icd9_code between '20250' and '20301' then 1\n  when icd9_code = '2386' then 1\n  when icd9_code = '2733' then 1\n  when icd9_code between '20302' and '20382' then 1\n\t\tend as lymph     /* Lymphoma */\n\n, CASE\n  when icd9_code between '1960' and '1991' then 1\n  when icd9_code between '20970' and '20975' then 1\n  when icd9_code = '20979' then 1\n  when icd9_code = '78951'         then 1\n\t\tend as mets      /* Metastatic cancer */\n\n, CASE\n  when icd9_code between '1400' and '1729' then 1\n  when icd9_code between '1740' and '1759' then 1\n  when icd9_code between '179' and '1958' then 1\n  when icd9_code between '20900' and '20924' then 1\n  when icd9_code between '20925' and '2093' then 1\n  when icd9_code between '20930' and '20936' then 1\n  when icd9_code between '25801' and '25803' then 1\n\t\tend as tumor     /* Solid tumor without metastasis */\n\n, CASE\n  when icd9_code = '7010' then 1\n  when icd9_code between '7100' and '7109' then 1\n  when icd9_code between '7140' and '7149' then 1\n  when icd9_code between '7200' and '7209' then 1\n  when icd9_code = '725' then 1\n\t\tend as arth              /* Rheumatoid arthritis/collagen vascular diseases */\n\n, CASE\n  when icd9_code between '2860' and '2869' then 1\n  when icd9_code = '2871' then 1\n  when icd9_code between '2873' and '2875' then 1\n  when icd9_code between '64930' and '64934' then 1\n  when icd9_code = '28984'         then 1\n\t\tend as coag      /* Coagulation deficiency */\n\n, CASE\n  when icd9_code = '2780' then 1\n  when icd9_code = '27800' then 1\n  when icd9_code = '27801' then 1\n  when icd9_code = '27803' then 1\n  when icd9_code between '64910' and '64914' then 1\n  when icd9_code between 'V8530' and 'V8539' then 1\n  when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n  when icd9_code between 'V8541' and 'V8545' then 1\n  when icd9_code = 'V8554' then 1\n  when icd9_code = '79391'         then 1\n\t\tend as obese     /* Obesity      */\n\n, CASE\n  when icd9_code between '260' and '2639' then 1\n  when icd9_code between '78321' and '78322' then 1\n\t\tend as wghtloss  /* Weight loss */\n\n, CASE\n  when icd9_code between '2760' and '2769' then 1\n\t\tend as lytes     /* Fluid and electrolyte disorders - note:\n                                      this comorbidity should be dropped when\n                                      used with the AHRQ Patient Safety Indicators*/\n, CASE\n  when icd9_code = '2800' then 1\n  when icd9_code between '64820' and '64824' then 1\n\t\tend as bldloss   /* Blood loss anemia */\n\n, CASE\n  when icd9_code between '2801' and '2819' then 1\n  when icd9_code between '28521' and '28529' then 1\n  when icd9_code = '2859'         then 1\n\t\tend as anemdef  /* Deficiency anemias */\n\n, CASE\n  when icd9_code between '2910' and '2913' then 1\n  when icd9_code = '2915' then 1\n  when icd9_code = '2918' then 1\n  when icd9_code = '29181' then 1\n  when icd9_code = '29182' then 1\n  when icd9_code = '29189' then 1\n  when icd9_code = '2919' then 1\n  when icd9_code between '30300' and '30393' then 1\n  when icd9_code between '30500' and '30503' then 1\n\t\tend as alcohol   /* Alcohol abuse */\n\n, CASE\n  when icd9_code = '2920' then 1\n  when icd9_code between '29282' and '29289' then 1\n  when icd9_code = '2929' then 1\n  when icd9_code between '30400' and '30493' then 1\n  when icd9_code between '30520' and '30593' then 1\n  when icd9_code between '64830' and '64834' then 1\n\t\tend as drug      /* Drug abuse */\n\n, CASE\n  when icd9_code between '29500' and '2989' then 1\n  when icd9_code = '29910' then 1\n  when icd9_code = '29911'         then 1\n\t\tend as psych    /* Psychoses */\n\n, CASE\n  when icd9_code = '3004' then 1\n  when icd9_code = '30112' then 1\n  when icd9_code = '3090' then 1\n  when icd9_code = '3091' then 1\n  when icd9_code = '311'         then 1\n\t\tend as depress  /* Depression */\nfrom diagnoses_icd icd\nWHERE seq_num = 1\n)\n-- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n, eligrp as\n(\n  select hadm_id\n  , max(chf) as chf\n  , max(arythm) as arythm\n  , max(valve) as valve\n  , max(pulmcirc) as pulmcirc\n  , max(perivasc) as perivasc\n  , max(htn) as htn\n  , max(htncx) as htncx\n  , max(htnpreg) as htnpreg\n  , max(htnwochf) as htnwochf\n  , max(htnwchf) as htnwchf\n  , max(hrenworf) as hrenworf\n  , max(hrenwrf) as hrenwrf\n  , max(hhrwohrf) as hhrwohrf\n  , max(hhrwchf) as hhrwchf\n  , max(hhrwrf) as hhrwrf\n  , max(hhrwhrf) as hhrwhrf\n  , max(ohtnpreg) as ohtnpreg\n  , max(para) as para\n  , max(neuro) as neuro\n  , max(chrnlung) as chrnlung\n  , max(dm) as dm\n  , max(dmcx) as dmcx\n  , max(hypothy) as hypothy\n  , max(renlfail) as renlfail\n  , max(liver) as liver\n  , max(ulcer) as ulcer\n  , max(aids) as aids\n  , max(lymph) as lymph\n  , max(mets) as mets\n  , max(tumor) as tumor\n  , max(arth) as arth\n  , max(coag) as coag\n  , max(obese) as obese\n  , max(wghtloss) as wghtloss\n  , max(lytes) as lytes\n  , max(bldloss) as bldloss\n  , max(anemdef) as anemdef\n  , max(alcohol) as alcohol\n  , max(drug) as drug\n  , max(psych) as psych\n  , max(depress) as depress\nfrom eliflg\ngroup by hadm_id\n)\n-- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect adm.subject_id, adm.hadm_id\n, case\n    when chf     = 1 then 1\n    when htnwchf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwhrf = 1 then 1\n  else 0 end as congestive_heart_failure\n, case\n    when arythm = 1 then 1\n  else 0 end as cardiac_arrhythmias\n, case when    valve = 1 then 1 else 0 end as valvular_disease\n, case when pulmcirc = 1 then 1 else 0 end as pulmonary_circulation\n, case when perivasc = 1 then 1 else 0 end as peripheral_vascular\n\n-- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n-- note \"htn\" (hypertension) is only 1 if \"htncx\" (complicated hypertension) is 0\n-- this matters if you filter on DRG but for this query we can just merge them immediately\n, case\n    when htn = 1 then 1\n    when htncx = 1 then 1\n    when htnpreg = 1 then 1\n    when htnwochf = 1 then 1\n    when htnwchf = 1 then 1\n    when hrenworf = 1 then 1\n    when hrenwrf = 1 then 1\n    when hhrwohrf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwrf = 1 then 1\n    when hhrwhrf = 1 then 1\n    when ohtnpreg = 1 then 1\n  else 0 end as hypertension\n\n, case when para      = 1 then 1 else 0 end as paralysis\n, case when neuro     = 1 then 1 else 0 end as other_neurological\n, case when chrnlung  = 1 then 1 else 0 end as chronic_pulmonary\n, case\n    -- only the more severe comorbidity (complicated diabetes) is kept\n    when dmcx = 1 then 0\n    when dm = 1 then 1\n  else 0 end as diabetes_uncomplicated\n, case when dmcx    = 1 then 1 else 0 end as diabetes_complicated\n, case when hypothy = 1 then 1 else 0 end as hypothyroidism\n, case\n    when renlfail = 1 then 1\n    when hrenwrf  = 1 then 1\n    when hhrwrf   = 1 then 1\n    when hhrwhrf  = 1 then 1\n  else 0 end as renal_failure\n\n, case when liver = 1 then 1 else 0 end as liver_disease\n, case when ulcer = 1 then 1 else 0 end as peptic_ulcer\n, case when aids = 1 then 1 else 0 end as aids\n, case when lymph = 1 then 1 else 0 end as lymphoma\n, case when mets = 1 then 1 else 0 end as metastatic_cancer\n, case\n    -- only the more severe comorbidity (metastatic cancer) is kept\n    when mets = 1 then 0\n    when tumor = 1 then 1\n  else 0 end as solid_tumor\n, case when arth = 1 then 1 else 0 end as rheumatoid_arthritis\n, case when coag = 1 then 1 else 0 end as coagulopathy\n, case when obese = 1 then 1 else 0 end as obesity\n, case when wghtloss = 1 then 1 else 0 end as weight_loss\n, case when lytes = 1 then 1 else 0 end as fluid_electrolyte\n, case when bldloss = 1 then 1 else 0 end as blood_loss_anemia\n, case when anemdef = 1 then 1 else 0 end as deficiency_anemias\n, case when alcohol = 1 then 1 else 0 end as alcohol_abuse\n, case when drug = 1 then 1 else 0 end as drug_abuse\n, case when psych = 1 then 1 else 0 end as psychoses\n, case when depress = 1 then 1 else 0 end as depression\n\nFROM admissions adm\nleft join eligrp eli\n  on adm.hadm_id = eli.hadm_id\norder by adm.hadm_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6057067, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "comorbidity", "elixhauser_ahrq_v37_no_drg"], "meta": {}, "name": "elixhauser_ahrq_v37_no_drg", "original_file_path": "models/comorbidity/elixhauser_ahrq_v37_no_drg.sql", "package_name": "mimic", "patch_path": null, "path": "comorbidity/elixhauser_ahrq_v37_no_drg.sql", "raw_sql": "-- This code uses the latest version of Elixhauser provided by AHRQ\n-- However, it does *not* filter based on diagnosis related groups (DRGs)\n-- As such, \"comorbidities\" identified are more likely to be associated with the primary reason for their hospital stay\n\n-- The code:\n--  removes \"primary\" ICD9_CODE (seq_num != 1)\n--  uses AHRQ published rules to define comorbidities\n{{ config(materialized = 'table') }} \n\nwith\neliflg as\n(\nselect hadm_id, seq_num, icd9_code\n-- note that these codes will seem incomplete at first\n-- for example, CHF is missing a lot of codes referenced in the literature (402.11, 402.91, etc)\n-- these codes are captured by hypertension flags instead\n-- later there are some complicated rules which confirm/reject those codes as chf\n, CASE\n  when icd9_code = '39891' then 1\n  when icd9_code between '4280' and '4289' then 1\n\t\tend as chf       /* Congestive heart failure */\n\n-- cardiac arrhythmias is removed in up to date versions\n, case\n    when icd9_code = '42610' then 1\n    when icd9_code = '42611' then 1\n    when icd9_code = '42613' then 1\n    when icd9_code between '4262' and '42653' then 1\n    when icd9_code between '4266' and '42689' then 1\n    when icd9_code = '4270' then 1\n    when icd9_code = '4272' then 1\n    when icd9_code = '42731' then 1\n    when icd9_code = '42760' then 1\n    when icd9_code = '4279' then 1\n    when icd9_code = '7850' then 1\n    when icd9_code between 'V450' and 'V4509' then 1\n    when icd9_code between 'V533' and 'V5339' then 1\n  end as arythm /* Cardiac arrhythmias */\n\n, CASE\n  when icd9_code between '09320' and '09324' then 1\n  when icd9_code between '3940' and '3971' then 1\n  when icd9_code = '3979' then 1\n  when icd9_code between '4240' and '42499' then 1\n  when icd9_code between '7463' and '7466' then 1\n  when icd9_code = 'V422' then 1\n  when icd9_code = 'V433' then 1\n\t\tend as valve     /* Valvular disease */\n\n, CASE\n  when icd9_code between '41511' and '41519' then 1\n  when icd9_code between '4160' and '4169' then 1\n  when icd9_code = '4179' then 1\n\t\tend as pulmcirc  /* Pulmonary circulation disorder */\n\n, CASE\n  when icd9_code between '4400' and '4409' then 1\n  when icd9_code between '44100' and '4419' then 1\n  when icd9_code between '4420' and '4429' then 1\n  when icd9_code between '4431' and '4439' then 1\n  when icd9_code between '44421' and '44422' then 1\n  when icd9_code = '4471' then 1\n  when icd9_code = '449' then 1\n  when icd9_code = '5571' then 1\n  when icd9_code = '5579' then 1\n  when icd9_code = 'V434' then 1\n\t\tend as perivasc  /* Peripheral vascular disorder */\n\n, CASE\n  when icd9_code = '4011' then 1\n  when icd9_code = '4019' then 1\n  when icd9_code between '64200' and '64204' then 1\n\t\tend as htn       /* Hypertension, uncomplicated */\n\n, CASE\n  when icd9_code = '4010' then 1\n  when icd9_code = '4372' then 1\n\t\tend as htncx     /* Hypertension, complicated */\n\n\n      /******************************************************************/\n      /* The following are special, temporary formats used in the       */\n      /* creation of the hypertension complicated comorbidity when      */\n      /* overlapping with congestive heart failure or renal failure     */\n      /* occurs. These temporary formats are referenced in the program  */\n      /* called comoanaly2009.txt.                                      */\n      /******************************************************************/\n, CASE\n  when icd9_code between '64220' and '64224' then 1\n\t\tend as htnpreg   /* Pre-existing hypertension complicating pregnancy */\n\n, CASE\n  when icd9_code = '40200' then 1\n  when icd9_code = '40210' then 1\n  when icd9_code = '40290' then 1\n  when icd9_code = '40509' then 1\n  when icd9_code = '40519' then 1\n  when icd9_code = '40599'         then 1\n\t\tend as htnwochf  /* Hypertensive heart disease without heart failure */\n\n, CASE\n  when icd9_code = '40201' then 1\n  when icd9_code = '40211' then 1\n  when icd9_code = '40291'         then 1\n\t\tend as htnwchf   /* Hypertensive heart disease with heart failure */\n\n, CASE\n  when icd9_code = '40300' then 1\n  when icd9_code = '40310' then 1\n  when icd9_code = '40390' then 1\n  when icd9_code = '40501' then 1\n  when icd9_code = '40511' then 1\n  when icd9_code = '40591' then 1\n  when icd9_code between '64210' and '64214' then 1\n\t\tend as hrenworf  /* Hypertensive renal disease without renal failure */\n\n, CASE\n  when icd9_code = '40301' then 1\n  when icd9_code = '40311' then 1\n  when icd9_code = '40391'         then 1\n\t\tend as hrenwrf   /* Hypertensive renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40400' then 1\n  when icd9_code = '40410' then 1\n  when icd9_code = '40490'         then 1\n\t\tend as hhrwohrf  /* Hypertensive heart and renal disease without heart or renal failure */\n\n, CASE\n  when icd9_code = '40401' then 1\n  when icd9_code = '40411' then 1\n  when icd9_code = '40491'         then 1\n\t\tend as hhrwchf   /* Hypertensive heart and renal disease with heart failure */\n\n, CASE\n  when icd9_code = '40402' then 1\n  when icd9_code = '40412' then 1\n  when icd9_code = '40492'         then 1\n\t\tend as hhrwrf    /* Hypertensive heart and renal disease with renal failure */\n\n, CASE\n  when icd9_code = '40403' then 1\n  when icd9_code = '40413' then 1\n  when icd9_code = '40493'         then 1\n\t\tend as hhrwhrf   /* Hypertensive heart and renal disease with heart and renal failure */\n\n, CASE\n  when icd9_code between '64270' and '64274' then 1\n  when icd9_code between '64290' and '64294' then 1\n\t\tend as ohtnpreg  /* Other hypertension in pregnancy */\n\n      /******************** End Temporary Formats ***********************/\n\n, CASE\n  when icd9_code between '3420' and '3449' then 1\n  when icd9_code between '43820' and '43853' then 1\n  when icd9_code = '78072'         then 1\n\t\tend as para      /* Paralysis */\n\n, CASE\n  when icd9_code between '3300' and '3319' then 1\n  when icd9_code = '3320' then 1\n  when icd9_code = '3334' then 1\n  when icd9_code = '3335' then 1\n  when icd9_code = '3337' then 1\n  when icd9_code in ('33371','33372','33379','33385','33394') then 1\n  when icd9_code between '3340' and '3359' then 1\n  when icd9_code = '3380' then 1\n  when icd9_code = '340' then 1\n  when icd9_code between '3411' and '3419' then 1\n  when icd9_code between '34500' and '34511' then 1\n  when icd9_code between '3452' and '3453' then 1\n  when icd9_code between '34540' and '34591' then 1\n  when icd9_code between '34700' and '34701' then 1\n  when icd9_code between '34710' and '34711' then 1\n  when icd9_code = '3483' then 1 -- discontinued icd-9\n  when icd9_code between '64940' and '64944' then 1\n  when icd9_code = '7687' then 1\n  when icd9_code between '76870' and '76873' then 1\n  when icd9_code = '7803' then 1\n  when icd9_code = '78031' then 1\n  when icd9_code = '78032' then 1\n  when icd9_code = '78033' then 1\n  when icd9_code = '78039' then 1\n  when icd9_code = '78097' then 1\n  when icd9_code = '7843'         then 1\n\t\tend as neuro     /* Other neurological */\n\n, CASE\n  when icd9_code between '490' and '4928' then 1\n  when icd9_code between '49300' and '49392' then 1\n  when icd9_code between '494' and '4941' then 1\n  when icd9_code between '4950' and '505' then 1\n  when icd9_code = '5064'         then 1\n\t\tend as chrnlung  /* Chronic pulmonary disease */\n\n, CASE\n  when icd9_code between '25000' and '25033' then 1\n  when icd9_code between '64800' and '64804' then 1\n  when icd9_code between '24900' and '24931' then 1\n\t\tend as dm        /* Diabetes w/o chronic complications*/\n\n, CASE\n  when icd9_code between '25040' and '25093' then 1\n  when icd9_code = '7751' then 1\n  when icd9_code between '24940' and '24991' then 1\n\t\tend as dmcx      /* Diabetes w/ chronic complications */\n\n, CASE\n  when icd9_code between '243' and '2442' then 1\n  when icd9_code = '2448' then 1\n  when icd9_code = '2449'         then 1\n\t\tend as hypothy   /* Hypothyroidism */\n\n, CASE\n  when icd9_code = '585' then 1 -- discontinued code\n  when icd9_code = '5853' then 1\n  when icd9_code = '5854' then 1\n  when icd9_code = '5855' then 1\n  when icd9_code = '5856' then 1\n  when icd9_code = '5859' then 1\n  when icd9_code = '586' then 1\n  when icd9_code = 'V420' then 1\n  when icd9_code = 'V451' then 1\n  when icd9_code between 'V560' and 'V5632' then 1\n  when icd9_code = 'V568' then 1\n  when icd9_code between 'V4511' and 'V4512' then 1\n\t\tend as renlfail  /* Renal failure */\n\n, CASE\n  when icd9_code = '07022' then 1\n  when icd9_code = '07023' then 1\n  when icd9_code = '07032' then 1\n  when icd9_code = '07033' then 1\n  when icd9_code = '07044' then 1\n  when icd9_code = '07054' then 1\n  when icd9_code = '4560' then 1\n  when icd9_code = '4561' then 1\n  when icd9_code = '45620' then 1\n  when icd9_code = '45621' then 1\n  when icd9_code = '5710' then 1\n  when icd9_code = '5712' then 1\n  when icd9_code = '5713' then 1\n  when icd9_code between '57140' and '57149' then 1\n  when icd9_code = '5715' then 1\n  when icd9_code = '5716' then 1\n  when icd9_code = '5718' then 1\n  when icd9_code = '5719' then 1\n  when icd9_code = '5723' then 1\n  when icd9_code = '5728' then 1\n  when icd9_code = '5735' then 1\n  when icd9_code = 'V427'         then 1\n\t\tend as liver     /* Liver disease */\n\n, CASE\n  when icd9_code = '53141' then 1\n  when icd9_code = '53151' then 1\n  when icd9_code = '53161' then 1\n  when icd9_code = '53170' then 1\n  when icd9_code = '53171' then 1\n  when icd9_code = '53191' then 1\n  when icd9_code = '53241' then 1\n  when icd9_code = '53251' then 1\n  when icd9_code = '53261' then 1\n  when icd9_code = '53270' then 1\n  when icd9_code = '53271' then 1\n  when icd9_code = '53291' then 1\n  when icd9_code = '53341' then 1\n  when icd9_code = '53351' then 1\n  when icd9_code = '53361' then 1\n  when icd9_code = '53370' then 1\n  when icd9_code = '53371' then 1\n  when icd9_code = '53391' then 1\n  when icd9_code = '53441' then 1\n  when icd9_code = '53451' then 1\n  when icd9_code = '53461' then 1\n  when icd9_code = '53470' then 1\n  when icd9_code = '53471' then 1\n  when icd9_code = '53491'         then 1\n\t\tend as ulcer     /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n\n, CASE\n  when icd9_code between '042' and '0449' then 1\n\t\tend as aids      /* HIV and AIDS */\n\n, CASE\n  when icd9_code between '20000' and '20238' then 1\n  when icd9_code between '20250' and '20301' then 1\n  when icd9_code = '2386' then 1\n  when icd9_code = '2733' then 1\n  when icd9_code between '20302' and '20382' then 1\n\t\tend as lymph     /* Lymphoma */\n\n, CASE\n  when icd9_code between '1960' and '1991' then 1\n  when icd9_code between '20970' and '20975' then 1\n  when icd9_code = '20979' then 1\n  when icd9_code = '78951'         then 1\n\t\tend as mets      /* Metastatic cancer */\n\n, CASE\n  when icd9_code between '1400' and '1729' then 1\n  when icd9_code between '1740' and '1759' then 1\n  when icd9_code between '179' and '1958' then 1\n  when icd9_code between '20900' and '20924' then 1\n  when icd9_code between '20925' and '2093' then 1\n  when icd9_code between '20930' and '20936' then 1\n  when icd9_code between '25801' and '25803' then 1\n\t\tend as tumor     /* Solid tumor without metastasis */\n\n, CASE\n  when icd9_code = '7010' then 1\n  when icd9_code between '7100' and '7109' then 1\n  when icd9_code between '7140' and '7149' then 1\n  when icd9_code between '7200' and '7209' then 1\n  when icd9_code = '725' then 1\n\t\tend as arth              /* Rheumatoid arthritis/collagen vascular diseases */\n\n, CASE\n  when icd9_code between '2860' and '2869' then 1\n  when icd9_code = '2871' then 1\n  when icd9_code between '2873' and '2875' then 1\n  when icd9_code between '64930' and '64934' then 1\n  when icd9_code = '28984'         then 1\n\t\tend as coag      /* Coagulation deficiency */\n\n, CASE\n  when icd9_code = '2780' then 1\n  when icd9_code = '27800' then 1\n  when icd9_code = '27801' then 1\n  when icd9_code = '27803' then 1\n  when icd9_code between '64910' and '64914' then 1\n  when icd9_code between 'V8530' and 'V8539' then 1\n  when icd9_code = 'V854' then 1 -- hierarchy used for AHRQ v3.6 and earlier\n  when icd9_code between 'V8541' and 'V8545' then 1\n  when icd9_code = 'V8554' then 1\n  when icd9_code = '79391'         then 1\n\t\tend as obese     /* Obesity      */\n\n, CASE\n  when icd9_code between '260' and '2639' then 1\n  when icd9_code between '78321' and '78322' then 1\n\t\tend as wghtloss  /* Weight loss */\n\n, CASE\n  when icd9_code between '2760' and '2769' then 1\n\t\tend as lytes     /* Fluid and electrolyte disorders - note:\n                                      this comorbidity should be dropped when\n                                      used with the AHRQ Patient Safety Indicators*/\n, CASE\n  when icd9_code = '2800' then 1\n  when icd9_code between '64820' and '64824' then 1\n\t\tend as bldloss   /* Blood loss anemia */\n\n, CASE\n  when icd9_code between '2801' and '2819' then 1\n  when icd9_code between '28521' and '28529' then 1\n  when icd9_code = '2859'         then 1\n\t\tend as anemdef  /* Deficiency anemias */\n\n, CASE\n  when icd9_code between '2910' and '2913' then 1\n  when icd9_code = '2915' then 1\n  when icd9_code = '2918' then 1\n  when icd9_code = '29181' then 1\n  when icd9_code = '29182' then 1\n  when icd9_code = '29189' then 1\n  when icd9_code = '2919' then 1\n  when icd9_code between '30300' and '30393' then 1\n  when icd9_code between '30500' and '30503' then 1\n\t\tend as alcohol   /* Alcohol abuse */\n\n, CASE\n  when icd9_code = '2920' then 1\n  when icd9_code between '29282' and '29289' then 1\n  when icd9_code = '2929' then 1\n  when icd9_code between '30400' and '30493' then 1\n  when icd9_code between '30520' and '30593' then 1\n  when icd9_code between '64830' and '64834' then 1\n\t\tend as drug      /* Drug abuse */\n\n, CASE\n  when icd9_code between '29500' and '2989' then 1\n  when icd9_code = '29910' then 1\n  when icd9_code = '29911'         then 1\n\t\tend as psych    /* Psychoses */\n\n, CASE\n  when icd9_code = '3004' then 1\n  when icd9_code = '30112' then 1\n  when icd9_code = '3090' then 1\n  when icd9_code = '3091' then 1\n  when icd9_code = '311'         then 1\n\t\tend as depress  /* Depression */\nfrom diagnoses_icd icd\nWHERE seq_num = 1\n)\n-- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n, eligrp as\n(\n  select hadm_id\n  , max(chf) as chf\n  , max(arythm) as arythm\n  , max(valve) as valve\n  , max(pulmcirc) as pulmcirc\n  , max(perivasc) as perivasc\n  , max(htn) as htn\n  , max(htncx) as htncx\n  , max(htnpreg) as htnpreg\n  , max(htnwochf) as htnwochf\n  , max(htnwchf) as htnwchf\n  , max(hrenworf) as hrenworf\n  , max(hrenwrf) as hrenwrf\n  , max(hhrwohrf) as hhrwohrf\n  , max(hhrwchf) as hhrwchf\n  , max(hhrwrf) as hhrwrf\n  , max(hhrwhrf) as hhrwhrf\n  , max(ohtnpreg) as ohtnpreg\n  , max(para) as para\n  , max(neuro) as neuro\n  , max(chrnlung) as chrnlung\n  , max(dm) as dm\n  , max(dmcx) as dmcx\n  , max(hypothy) as hypothy\n  , max(renlfail) as renlfail\n  , max(liver) as liver\n  , max(ulcer) as ulcer\n  , max(aids) as aids\n  , max(lymph) as lymph\n  , max(mets) as mets\n  , max(tumor) as tumor\n  , max(arth) as arth\n  , max(coag) as coag\n  , max(obese) as obese\n  , max(wghtloss) as wghtloss\n  , max(lytes) as lytes\n  , max(bldloss) as bldloss\n  , max(anemdef) as anemdef\n  , max(alcohol) as alcohol\n  , max(drug) as drug\n  , max(psych) as psych\n  , max(depress) as depress\nfrom eliflg\ngroup by hadm_id\n)\n-- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect adm.subject_id, adm.hadm_id\n, case\n    when chf     = 1 then 1\n    when htnwchf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwhrf = 1 then 1\n  else 0 end as congestive_heart_failure\n, case\n    when arythm = 1 then 1\n  else 0 end as cardiac_arrhythmias\n, case when    valve = 1 then 1 else 0 end as valvular_disease\n, case when pulmcirc = 1 then 1 else 0 end as pulmonary_circulation\n, case when perivasc = 1 then 1 else 0 end as peripheral_vascular\n\n-- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n-- note \"htn\" (hypertension) is only 1 if \"htncx\" (complicated hypertension) is 0\n-- this matters if you filter on DRG but for this query we can just merge them immediately\n, case\n    when htn = 1 then 1\n    when htncx = 1 then 1\n    when htnpreg = 1 then 1\n    when htnwochf = 1 then 1\n    when htnwchf = 1 then 1\n    when hrenworf = 1 then 1\n    when hrenwrf = 1 then 1\n    when hhrwohrf = 1 then 1\n    when hhrwchf = 1 then 1\n    when hhrwrf = 1 then 1\n    when hhrwhrf = 1 then 1\n    when ohtnpreg = 1 then 1\n  else 0 end as hypertension\n\n, case when para      = 1 then 1 else 0 end as paralysis\n, case when neuro     = 1 then 1 else 0 end as other_neurological\n, case when chrnlung  = 1 then 1 else 0 end as chronic_pulmonary\n, case\n    -- only the more severe comorbidity (complicated diabetes) is kept\n    when dmcx = 1 then 0\n    when dm = 1 then 1\n  else 0 end as diabetes_uncomplicated\n, case when dmcx    = 1 then 1 else 0 end as diabetes_complicated\n, case when hypothy = 1 then 1 else 0 end as hypothyroidism\n, case\n    when renlfail = 1 then 1\n    when hrenwrf  = 1 then 1\n    when hhrwrf   = 1 then 1\n    when hhrwhrf  = 1 then 1\n  else 0 end as renal_failure\n\n, case when liver = 1 then 1 else 0 end as liver_disease\n, case when ulcer = 1 then 1 else 0 end as peptic_ulcer\n, case when aids = 1 then 1 else 0 end as aids\n, case when lymph = 1 then 1 else 0 end as lymphoma\n, case when mets = 1 then 1 else 0 end as metastatic_cancer\n, case\n    -- only the more severe comorbidity (metastatic cancer) is kept\n    when mets = 1 then 0\n    when tumor = 1 then 1\n  else 0 end as solid_tumor\n, case when arth = 1 then 1 else 0 end as rheumatoid_arthritis\n, case when coag = 1 then 1 else 0 end as coagulopathy\n, case when obese = 1 then 1 else 0 end as obesity\n, case when wghtloss = 1 then 1 else 0 end as weight_loss\n, case when lytes = 1 then 1 else 0 end as fluid_electrolyte\n, case when bldloss = 1 then 1 else 0 end as blood_loss_anemia\n, case when anemdef = 1 then 1 else 0 end as deficiency_anemias\n, case when alcohol = 1 then 1 else 0 end as alcohol_abuse\n, case when drug = 1 then 1 else 0 end as drug_abuse\n, case when psych = 1 then 1 else 0 end as psychoses\n, case when depress = 1 then 1 else 0 end as depression\n\nFROM admissions adm\nleft join eligrp eli\n  on adm.hadm_id = eli.hadm_id\norder by adm.hadm_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"elixhauser_ahrq_v37_no_drg\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:23.468132Z", "name": "compile", "started_at": "2022-07-18T00:10:23.462969Z"}, {"completed_at": "2022-07-18T00:10:24.019013Z", "name": "execute", "started_at": "2022-07-18T00:10:23.469073Z"}]}, "unique_id": "model.mimic.elixhauser_ahrq_v37_no_drg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.elixhauser_ahrq_v37_no_drg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.021301Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": "2022-07-18T00:10:24.021876", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.elixhauser_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.021971Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.elixhauser_quan", "index": 22, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": "2022-07-18T00:10:24.021876", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "22 of 107 START table model public.elixhauser_quan ............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.022885Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.024004Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": "2022-07-18T00:10:24.021876", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.elixhauser_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.024514Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.elixhauser_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.024856Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.033007Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.034153Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.elixhauser_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.034747Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.elixhauser_quan\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.044312Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.045030Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.045859Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.046446Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.052544Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.052832Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_quan__dbt_tmp\"\n  as (\n    -- This code calculates the Elixhauser comorbidities as defined in Quan et. al 2009:\n-- Quan, Hude, et al. \"Coding algorithms for defining comorbidities in\n-- ICD-9-CM and ICD-10 administrative data.\" Medical care (2005): 1130-1139.\n--  https://www.ncbi.nlm.nih.gov/pubmed/16224307\n-- Quan defined an \"Enhanced ICD-9\" coding scheme for deriving Elixhauser\n-- comorbidities from ICD-9 billing codes. This script implements that calculation.\n-- The logic of the code is roughly that, if the comorbidity lists a length 3\n-- ICD-9 code (e.g. 585), then we only require a match on the first 3 characters.\n-- This code derives each comorbidity as follows:\n--  1) ICD9_CODE is directly compared to 5 character codes\n--  2) The first 4 characters of ICD9_CODE are compared to 4 character codes\n--  3) The first 3 characters of ICD9_CODE are compared to 3 character codes\n\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code,\n        CASE\n            when icd9_code in (\n                '39891',\n                '40201',\n                '40211',\n                '40291',\n                '40401',\n                '40403',\n                '40411',\n                '40413',\n                '40491',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('4254', '4255', '4257', '4258', '4259') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('428') then 1\n            else 0\n        end as chf\n        /* Congestive heart failure */\n,\n        CASE\n            when icd9_code in ('42613', '42610', '42612', '99601', '99604') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '4260',\n                '4267',\n                '4269',\n                '4270',\n                '4271',\n                '4272',\n                '4273',\n                '4274',\n                '4276',\n                '4278',\n                '4279',\n                '7850',\n                'V450',\n                'V533'\n            ) then 1\n            else 0\n        end as arrhy,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('0932', '7463', '7464', '7465', '7466', 'V422', 'V433') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('394', '395', '396', '397', '424') then 1\n            else 0\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4150', '4151', '4170', '4178', '4179') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('416') then 1\n            else 0\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0930',\n                '4373',\n                '4431',\n                '4432',\n                '4438',\n                '4439',\n                '4471',\n                '5571',\n                '5579',\n                'V434'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('440', '441') then 1\n            else 0\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('401') then 1\n            else 0\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('402', '403', '404', '405') then 1\n            else 0\n        end as htncx\n        /* Hypertension, complicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3341',\n                '3440',\n                '3441',\n                '3442',\n                '3443',\n                '3444',\n                '3445',\n                '3446',\n                '3449'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('342', '343') then 1\n            else 0\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code in ('33392') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3319',\n                '3320',\n                '3321',\n                '3334',\n                '3335',\n                '3362',\n                '3481',\n                '3483',\n                '7803',\n                '7843'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('334', '335', '340', '341', '345') then 1\n            else 0\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4168', '4169', '5064', '5081', '5088') then 1\n            when SUBSTR(icd9_code, 1, 3) in (\n                '490',\n                '491',\n                '492',\n                '493',\n                '494',\n                '495',\n                '496',\n                '500',\n                '501',\n                '502',\n                '503',\n                '504',\n                '505'\n            ) then 1\n            else 0\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2500', '2501', '2502', '2503') then 1\n            else 0\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2504', '2505', '2506', '2507', '2508', '2509') then 1\n            else 0\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2409', '2461', '2468') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('243', '244') then 1\n            else 0\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code in (\n                '40301',\n                '40311',\n                '40391',\n                '40402',\n                '40403',\n                '40412',\n                '40413',\n                '40492',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('5880', 'V420', 'V451') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('585', '586', 'V56') then 1\n            else 0\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code in ('07022', '07023', '07032', '07033', '07044', '07054') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0706',\n                '0709',\n                '4560',\n                '4561',\n                '4562',\n                '5722',\n                '5723',\n                '5724',\n                '5728',\n                '5733',\n                '5734',\n                '5738',\n                '5739',\n                'V427'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('570', '571') then 1\n            else 0\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '5317',\n                '5319',\n                '5327',\n                '5329',\n                '5337',\n                '5339',\n                '5347',\n                '5349'\n            ) then 1\n            else 0\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('042', '043', '044') then 1\n            else 0\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2030', '2386') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('200', '201', '202') then 1\n            else 0\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('196', '197', '198', '199') then 1\n            else 0\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in (\n                '140',\n                '141',\n                '142',\n                '143',\n                '144',\n                '145',\n                '146',\n                '147',\n                '148',\n                '149',\n                '150',\n                '151',\n                '152',\n                '153',\n                '154',\n                '155',\n                '156',\n                '157',\n                '158',\n                '159',\n                '160',\n                '161',\n                '162',\n                '163',\n                '164',\n                '165',\n                '166',\n                '167',\n                '168',\n                '169',\n                '170',\n                '171',\n                '172',\n                '174',\n                '175',\n                '176',\n                '177',\n                '178',\n                '179',\n                '180',\n                '181',\n                '182',\n                '183',\n                '184',\n                '185',\n                '186',\n                '187',\n                '188',\n                '189',\n                '190',\n                '191',\n                '192',\n                '193',\n                '194',\n                '195'\n            ) then 1\n            else 0\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code in ('72889', '72930') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '7010',\n                '7100',\n                '7101',\n                '7102',\n                '7103',\n                '7104',\n                '7108',\n                '7109',\n                '7112',\n                '7193',\n                '7285'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('446', '714', '720', '725') then 1\n            else 0\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2871', '2873', '2874', '2875') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('286') then 1\n            else 0\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2780') then 1\n            else 0\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('7832', '7994') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('260', '261', '262', '263') then 1\n            else 0\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2536') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('276') then 1\n            else 0\n        end as lytes\n        /* Fluid and electrolyte disorders */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2800') then 1\n            else 0\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2801', '2808', '2809') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('281') then 1\n            else 0\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '2652',\n                '2911',\n                '2912',\n                '2913',\n                '2915',\n                '2918',\n                '2919',\n                '3030',\n                '3039',\n                '3050',\n                '3575',\n                '4255',\n                '5353',\n                '5710',\n                '5711',\n                '5712',\n                '5713',\n                'V113'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('980') then 1\n            else 0\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code in ('V6542') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3052',\n                '3053',\n                '3054',\n                '3055',\n                '3056',\n                '3057',\n                '3058',\n                '3059'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('292', '304') then 1\n            else 0\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code in ('29604', '29614', '29644', '29654') then 1\n            when SUBSTR(icd9_code, 1, 4) in ('2938') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('295', '297', '298') then 1\n            else 0\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2962', '2963', '2965', '3004') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('309', '311') then 1\n            else 0\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    where\n        seq_num != 1 -- we do not include the primary icd-9 code\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arrhy) as arrhy,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.hadm_id,\n    chf as congestive_heart_failure,\n    arrhy as cardiac_arrhythmias,\n    valve as valvular_disease,\n    pulmcirc as pulmonary_circulation,\n    perivasc as peripheral_vascular -- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n,\n    case\n        when htn = 1 then 1\n        when htncx = 1 then 1\n        else 0\n    end as hypertension,\n    para as paralysis,\n    neuro as other_neurological,\n    chrnlung as chronic_pulmonary -- only the more severe comorbidity (complicated diabetes) is kept\n,\n    case\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    dmcx as diabetes_complicated,\n    hypothy as hypothyroidism,\n    renlfail as renal_failure,\n    liver as liver_disease,\n    ulcer as peptic_ulcer,\n    aids as aids,\n    lymph as lymphoma,\n    mets as metastatic_cancer -- only the more severe comorbidity (metastatic cancer) is kept\n,\n    case\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    arth as rheumatoid_arthritis,\n    coag as coagulopathy,\n    obese as obesity,\n    wghtloss as weight_loss,\n    lytes as fluid_electrolyte,\n    bldloss as blood_loss_anemia,\n    anemdef as deficiency_anemias,\n    alcohol as alcohol_abuse,\n    drug as drug_abuse,\n    psych as psychoses,\n    depress as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\norder by\n    adm.hadm_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_quan__dbt_tmp\"\n  as (\n    -- This code calculates the Elixhauser comorbidities as defined in Quan et. al 2009:\n-- Quan, Hude, et al. \"Coding algorithms for defining comorbidities in\n-- ICD-9-CM and ICD-10 administrative data.\" Medical care (2005): 1130-1139.\n--  https://www.ncbi.nlm.nih.gov/pubmed/16224307\n-- Quan defined an \"Enhanced ICD-9\" coding scheme for deriving Elixhauser\n-- comorbidities from ICD-9 billing codes. This script implements that calculation.\n-- The logic of the code is roughly that, if the comorbidity lists a length 3\n-- ICD-9 code (e.g. 585), then we only require a match on the first 3 characters.\n-- This code derives each comorbidity as follows:\n--  1) ICD9_CODE is directly compared to 5 character codes\n--  2) The first 4 characters of ICD9_CODE are compared to 4 character codes\n--  3) The first 3 characters of ICD9_CODE are compared to 3 character codes\n\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code,\n        CASE\n            when icd9_code in (\n                '39891',\n                '40201',\n                '40211',\n                '40291',\n                '40401',\n                '40403',\n                '40411',\n                '40413',\n                '40491',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('4254', '4255', '4257', '4258', '4259') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('428') then 1\n            else 0\n        end as chf\n        /* Congestive heart failure */\n,\n        CASE\n            when icd9_code in ('42613', '42610', '42612', '99601', '99604') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '4260',\n                '4267',\n                '4269',\n                '4270',\n                '4271',\n                '4272',\n                '4273',\n                '4274',\n                '4276',\n                '4278',\n                '4279',\n                '7850',\n                'V450',\n                'V533'\n            ) then 1\n            else 0\n        end as arrhy,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('0932', '7463', '7464', '7465', '7466', 'V422', 'V433') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('394', '395', '396', '397', '424') then 1\n            else 0\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4150', '4151', '4170', '4178', '4179') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('416') then 1\n            else 0\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0930',\n                '4373',\n                '4431',\n                '4432',\n                '4438',\n                '4439',\n                '4471',\n                '5571',\n                '5579',\n                'V434'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('440', '441') then 1\n            else 0\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('401') then 1\n            else 0\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('402', '403', '404', '405') then 1\n            else 0\n        end as htncx\n        /* Hypertension, complicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3341',\n                '3440',\n                '3441',\n                '3442',\n                '3443',\n                '3444',\n                '3445',\n                '3446',\n                '3449'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('342', '343') then 1\n            else 0\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code in ('33392') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3319',\n                '3320',\n                '3321',\n                '3334',\n                '3335',\n                '3362',\n                '3481',\n                '3483',\n                '7803',\n                '7843'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('334', '335', '340', '341', '345') then 1\n            else 0\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4168', '4169', '5064', '5081', '5088') then 1\n            when SUBSTR(icd9_code, 1, 3) in (\n                '490',\n                '491',\n                '492',\n                '493',\n                '494',\n                '495',\n                '496',\n                '500',\n                '501',\n                '502',\n                '503',\n                '504',\n                '505'\n            ) then 1\n            else 0\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2500', '2501', '2502', '2503') then 1\n            else 0\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2504', '2505', '2506', '2507', '2508', '2509') then 1\n            else 0\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2409', '2461', '2468') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('243', '244') then 1\n            else 0\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code in (\n                '40301',\n                '40311',\n                '40391',\n                '40402',\n                '40403',\n                '40412',\n                '40413',\n                '40492',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('5880', 'V420', 'V451') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('585', '586', 'V56') then 1\n            else 0\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code in ('07022', '07023', '07032', '07033', '07044', '07054') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0706',\n                '0709',\n                '4560',\n                '4561',\n                '4562',\n                '5722',\n                '5723',\n                '5724',\n                '5728',\n                '5733',\n                '5734',\n                '5738',\n                '5739',\n                'V427'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('570', '571') then 1\n            else 0\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '5317',\n                '5319',\n                '5327',\n                '5329',\n                '5337',\n                '5339',\n                '5347',\n                '5349'\n            ) then 1\n            else 0\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('042', '043', '044') then 1\n            else 0\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2030', '2386') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('200', '201', '202') then 1\n            else 0\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('196', '197', '198', '199') then 1\n            else 0\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in (\n                '140',\n                '141',\n                '142',\n                '143',\n                '144',\n                '145',\n                '146',\n                '147',\n                '148',\n                '149',\n                '150',\n                '151',\n                '152',\n                '153',\n                '154',\n                '155',\n                '156',\n                '157',\n                '158',\n                '159',\n                '160',\n                '161',\n                '162',\n                '163',\n                '164',\n                '165',\n                '166',\n                '167',\n                '168',\n                '169',\n                '170',\n                '171',\n                '172',\n                '174',\n                '175',\n                '176',\n                '177',\n                '178',\n                '179',\n                '180',\n                '181',\n                '182',\n                '183',\n                '184',\n                '185',\n                '186',\n                '187',\n                '188',\n                '189',\n                '190',\n                '191',\n                '192',\n                '193',\n                '194',\n                '195'\n            ) then 1\n            else 0\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code in ('72889', '72930') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '7010',\n                '7100',\n                '7101',\n                '7102',\n                '7103',\n                '7104',\n                '7108',\n                '7109',\n                '7112',\n                '7193',\n                '7285'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('446', '714', '720', '725') then 1\n            else 0\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2871', '2873', '2874', '2875') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('286') then 1\n            else 0\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2780') then 1\n            else 0\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('7832', '7994') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('260', '261', '262', '263') then 1\n            else 0\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2536') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('276') then 1\n            else 0\n        end as lytes\n        /* Fluid and electrolyte disorders */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2800') then 1\n            else 0\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2801', '2808', '2809') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('281') then 1\n            else 0\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '2652',\n                '2911',\n                '2912',\n                '2913',\n                '2915',\n                '2918',\n                '2919',\n                '3030',\n                '3039',\n                '3050',\n                '3575',\n                '4255',\n                '5353',\n                '5710',\n                '5711',\n                '5712',\n                '5713',\n                'V113'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('980') then 1\n            else 0\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code in ('V6542') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3052',\n                '3053',\n                '3054',\n                '3055',\n                '3056',\n                '3057',\n                '3058',\n                '3059'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('292', '304') then 1\n            else 0\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code in ('29604', '29614', '29644', '29654') then 1\n            when SUBSTR(icd9_code, 1, 4) in ('2938') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('295', '297', '298') then 1\n            else 0\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2962', '2963', '2965', '3004') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('309', '311') then 1\n            else 0\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    where\n        seq_num != 1 -- we do not include the primary icd-9 code\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arrhy) as arrhy,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.hadm_id,\n    chf as congestive_heart_failure,\n    arrhy as cardiac_arrhythmias,\n    valve as valvular_disease,\n    pulmcirc as pulmonary_circulation,\n    perivasc as peripheral_vascular -- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n,\n    case\n        when htn = 1 then 1\n        when htncx = 1 then 1\n        else 0\n    end as hypertension,\n    para as paralysis,\n    neuro as other_neurological,\n    chrnlung as chronic_pulmonary -- only the more severe comorbidity (complicated diabetes) is kept\n,\n    case\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    dmcx as diabetes_complicated,\n    hypothy as hypothyroidism,\n    renlfail as renal_failure,\n    liver as liver_disease,\n    ulcer as peptic_ulcer,\n    aids as aids,\n    lymph as lymphoma,\n    mets as metastatic_cancer -- only the more severe comorbidity (metastatic cancer) is kept\n,\n    case\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    arth as rheumatoid_arthritis,\n    coag as coagulopathy,\n    obese as obesity,\n    wghtloss as weight_loss,\n    lytes as fluid_electrolyte,\n    bldloss as blood_loss_anemia,\n    anemdef as deficiency_anemias,\n    alcohol as alcohol_abuse,\n    drug as drug_abuse,\n    psych as psychoses,\n    depress as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\norder by\n    adm.hadm_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:24.053041Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.89, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 1.89 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.942605Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.949100Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_quan\" rename to \"elixhauser_quan__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_quan\" rename to \"elixhauser_quan__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.949553Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.951074Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.954708Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_quan__dbt_tmp\" rename to \"elixhauser_quan\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_quan__dbt_tmp\" rename to \"elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.954943Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.955655Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.959064Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.959295Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.959537Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.961696Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.963731Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_quan__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_quan\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_quan__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.963944Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.966150Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.969476Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_quan: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.969873Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03df70>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03df70>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.970725Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.elixhauser_quan", "execution_time": 1, "index": 22, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": "2022-07-18T00:10:24.021876", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "22 of 107 OK created table model public.elixhauser_quan ........................ [\u001b[32mSELECT 58976\u001b[0m in 1.95s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.971221Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:25.971790", "node_name": "elixhauser_quan", "node_path": "comorbidity/elixhauser_quan.sql", "node_started_at": "2022-07-18T00:10:24.021876", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.elixhauser_quan"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 1.9472219944000244, "failures": null, "message": "SELECT 58976", "node": {"alias": "elixhauser_quan", "build_path": "target/run/mimic/models/comorbidity/elixhauser_quan.sql", "checksum": {"checksum": "e3f912c27f81c652d9dfb7a4ea7e3d4aa0692e31e76fb68182361fb2da52f446", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/comorbidity/elixhauser_quan.sql", "compiled_sql": "-- This code calculates the Elixhauser comorbidities as defined in Quan et. al 2009:\n-- Quan, Hude, et al. \"Coding algorithms for defining comorbidities in\n-- ICD-9-CM and ICD-10 administrative data.\" Medical care (2005): 1130-1139.\n--  https://www.ncbi.nlm.nih.gov/pubmed/16224307\n-- Quan defined an \"Enhanced ICD-9\" coding scheme for deriving Elixhauser\n-- comorbidities from ICD-9 billing codes. This script implements that calculation.\n-- The logic of the code is roughly that, if the comorbidity lists a length 3\n-- ICD-9 code (e.g. 585), then we only require a match on the first 3 characters.\n-- This code derives each comorbidity as follows:\n--  1) ICD9_CODE is directly compared to 5 character codes\n--  2) The first 4 characters of ICD9_CODE are compared to 4 character codes\n--  3) The first 3 characters of ICD9_CODE are compared to 3 character codes\n\n \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code,\n        CASE\n            when icd9_code in (\n                '39891',\n                '40201',\n                '40211',\n                '40291',\n                '40401',\n                '40403',\n                '40411',\n                '40413',\n                '40491',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('4254', '4255', '4257', '4258', '4259') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('428') then 1\n            else 0\n        end as chf\n        /* Congestive heart failure */\n,\n        CASE\n            when icd9_code in ('42613', '42610', '42612', '99601', '99604') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '4260',\n                '4267',\n                '4269',\n                '4270',\n                '4271',\n                '4272',\n                '4273',\n                '4274',\n                '4276',\n                '4278',\n                '4279',\n                '7850',\n                'V450',\n                'V533'\n            ) then 1\n            else 0\n        end as arrhy,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('0932', '7463', '7464', '7465', '7466', 'V422', 'V433') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('394', '395', '396', '397', '424') then 1\n            else 0\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4150', '4151', '4170', '4178', '4179') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('416') then 1\n            else 0\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0930',\n                '4373',\n                '4431',\n                '4432',\n                '4438',\n                '4439',\n                '4471',\n                '5571',\n                '5579',\n                'V434'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('440', '441') then 1\n            else 0\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('401') then 1\n            else 0\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('402', '403', '404', '405') then 1\n            else 0\n        end as htncx\n        /* Hypertension, complicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3341',\n                '3440',\n                '3441',\n                '3442',\n                '3443',\n                '3444',\n                '3445',\n                '3446',\n                '3449'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('342', '343') then 1\n            else 0\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code in ('33392') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3319',\n                '3320',\n                '3321',\n                '3334',\n                '3335',\n                '3362',\n                '3481',\n                '3483',\n                '7803',\n                '7843'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('334', '335', '340', '341', '345') then 1\n            else 0\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4168', '4169', '5064', '5081', '5088') then 1\n            when SUBSTR(icd9_code, 1, 3) in (\n                '490',\n                '491',\n                '492',\n                '493',\n                '494',\n                '495',\n                '496',\n                '500',\n                '501',\n                '502',\n                '503',\n                '504',\n                '505'\n            ) then 1\n            else 0\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2500', '2501', '2502', '2503') then 1\n            else 0\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2504', '2505', '2506', '2507', '2508', '2509') then 1\n            else 0\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2409', '2461', '2468') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('243', '244') then 1\n            else 0\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code in (\n                '40301',\n                '40311',\n                '40391',\n                '40402',\n                '40403',\n                '40412',\n                '40413',\n                '40492',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('5880', 'V420', 'V451') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('585', '586', 'V56') then 1\n            else 0\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code in ('07022', '07023', '07032', '07033', '07044', '07054') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0706',\n                '0709',\n                '4560',\n                '4561',\n                '4562',\n                '5722',\n                '5723',\n                '5724',\n                '5728',\n                '5733',\n                '5734',\n                '5738',\n                '5739',\n                'V427'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('570', '571') then 1\n            else 0\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '5317',\n                '5319',\n                '5327',\n                '5329',\n                '5337',\n                '5339',\n                '5347',\n                '5349'\n            ) then 1\n            else 0\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('042', '043', '044') then 1\n            else 0\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2030', '2386') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('200', '201', '202') then 1\n            else 0\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('196', '197', '198', '199') then 1\n            else 0\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in (\n                '140',\n                '141',\n                '142',\n                '143',\n                '144',\n                '145',\n                '146',\n                '147',\n                '148',\n                '149',\n                '150',\n                '151',\n                '152',\n                '153',\n                '154',\n                '155',\n                '156',\n                '157',\n                '158',\n                '159',\n                '160',\n                '161',\n                '162',\n                '163',\n                '164',\n                '165',\n                '166',\n                '167',\n                '168',\n                '169',\n                '170',\n                '171',\n                '172',\n                '174',\n                '175',\n                '176',\n                '177',\n                '178',\n                '179',\n                '180',\n                '181',\n                '182',\n                '183',\n                '184',\n                '185',\n                '186',\n                '187',\n                '188',\n                '189',\n                '190',\n                '191',\n                '192',\n                '193',\n                '194',\n                '195'\n            ) then 1\n            else 0\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code in ('72889', '72930') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '7010',\n                '7100',\n                '7101',\n                '7102',\n                '7103',\n                '7104',\n                '7108',\n                '7109',\n                '7112',\n                '7193',\n                '7285'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('446', '714', '720', '725') then 1\n            else 0\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2871', '2873', '2874', '2875') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('286') then 1\n            else 0\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2780') then 1\n            else 0\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('7832', '7994') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('260', '261', '262', '263') then 1\n            else 0\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2536') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('276') then 1\n            else 0\n        end as lytes\n        /* Fluid and electrolyte disorders */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2800') then 1\n            else 0\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2801', '2808', '2809') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('281') then 1\n            else 0\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '2652',\n                '2911',\n                '2912',\n                '2913',\n                '2915',\n                '2918',\n                '2919',\n                '3030',\n                '3039',\n                '3050',\n                '3575',\n                '4255',\n                '5353',\n                '5710',\n                '5711',\n                '5712',\n                '5713',\n                'V113'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('980') then 1\n            else 0\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code in ('V6542') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3052',\n                '3053',\n                '3054',\n                '3055',\n                '3056',\n                '3057',\n                '3058',\n                '3059'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('292', '304') then 1\n            else 0\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code in ('29604', '29614', '29644', '29654') then 1\n            when SUBSTR(icd9_code, 1, 4) in ('2938') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('295', '297', '298') then 1\n            else 0\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2962', '2963', '2965', '3004') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('309', '311') then 1\n            else 0\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    where\n        seq_num != 1 -- we do not include the primary icd-9 code\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arrhy) as arrhy,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.hadm_id,\n    chf as congestive_heart_failure,\n    arrhy as cardiac_arrhythmias,\n    valve as valvular_disease,\n    pulmcirc as pulmonary_circulation,\n    perivasc as peripheral_vascular -- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n,\n    case\n        when htn = 1 then 1\n        when htncx = 1 then 1\n        else 0\n    end as hypertension,\n    para as paralysis,\n    neuro as other_neurological,\n    chrnlung as chronic_pulmonary -- only the more severe comorbidity (complicated diabetes) is kept\n,\n    case\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    dmcx as diabetes_complicated,\n    hypothy as hypothyroidism,\n    renlfail as renal_failure,\n    liver as liver_disease,\n    ulcer as peptic_ulcer,\n    aids as aids,\n    lymph as lymphoma,\n    mets as metastatic_cancer -- only the more severe comorbidity (metastatic cancer) is kept\n,\n    case\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    arth as rheumatoid_arthritis,\n    coag as coagulopathy,\n    obese as obesity,\n    wghtloss as weight_loss,\n    lytes as fluid_electrolyte,\n    bldloss as blood_loss_anemia,\n    anemdef as deficiency_anemias,\n    alcohol as alcohol_abuse,\n    drug as drug_abuse,\n    psych as psychoses,\n    depress as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\norder by\n    adm.hadm_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6108997, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "comorbidity", "elixhauser_quan"], "meta": {}, "name": "elixhauser_quan", "original_file_path": "models/comorbidity/elixhauser_quan.sql", "package_name": "mimic", "patch_path": null, "path": "comorbidity/elixhauser_quan.sql", "raw_sql": "-- This code calculates the Elixhauser comorbidities as defined in Quan et. al 2009:\n-- Quan, Hude, et al. \"Coding algorithms for defining comorbidities in\n-- ICD-9-CM and ICD-10 administrative data.\" Medical care (2005): 1130-1139.\n--  https://www.ncbi.nlm.nih.gov/pubmed/16224307\n-- Quan defined an \"Enhanced ICD-9\" coding scheme for deriving Elixhauser\n-- comorbidities from ICD-9 billing codes. This script implements that calculation.\n-- The logic of the code is roughly that, if the comorbidity lists a length 3\n-- ICD-9 code (e.g. 585), then we only require a match on the first 3 characters.\n-- This code derives each comorbidity as follows:\n--  1) ICD9_CODE is directly compared to 5 character codes\n--  2) The first 4 characters of ICD9_CODE are compared to 4 character codes\n--  3) The first 3 characters of ICD9_CODE are compared to 3 character codes\n\n{{ config(materialized = 'table') }} \n\nwith eliflg as (\n    select\n        hadm_id,\n        seq_num,\n        icd9_code,\n        CASE\n            when icd9_code in (\n                '39891',\n                '40201',\n                '40211',\n                '40291',\n                '40401',\n                '40403',\n                '40411',\n                '40413',\n                '40491',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('4254', '4255', '4257', '4258', '4259') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('428') then 1\n            else 0\n        end as chf\n        /* Congestive heart failure */\n,\n        CASE\n            when icd9_code in ('42613', '42610', '42612', '99601', '99604') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '4260',\n                '4267',\n                '4269',\n                '4270',\n                '4271',\n                '4272',\n                '4273',\n                '4274',\n                '4276',\n                '4278',\n                '4279',\n                '7850',\n                'V450',\n                'V533'\n            ) then 1\n            else 0\n        end as arrhy,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('0932', '7463', '7464', '7465', '7466', 'V422', 'V433') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('394', '395', '396', '397', '424') then 1\n            else 0\n        end as valve\n        /* Valvular disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4150', '4151', '4170', '4178', '4179') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('416') then 1\n            else 0\n        end as pulmcirc\n        /* Pulmonary circulation disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0930',\n                '4373',\n                '4431',\n                '4432',\n                '4438',\n                '4439',\n                '4471',\n                '5571',\n                '5579',\n                'V434'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('440', '441') then 1\n            else 0\n        end as perivasc\n        /* Peripheral vascular disorder */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('401') then 1\n            else 0\n        end as htn\n        /* Hypertension, uncomplicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('402', '403', '404', '405') then 1\n            else 0\n        end as htncx\n        /* Hypertension, complicated */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3341',\n                '3440',\n                '3441',\n                '3442',\n                '3443',\n                '3444',\n                '3445',\n                '3446',\n                '3449'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('342', '343') then 1\n            else 0\n        end as para\n        /* Paralysis */\n,\n        CASE\n            when icd9_code in ('33392') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3319',\n                '3320',\n                '3321',\n                '3334',\n                '3335',\n                '3362',\n                '3481',\n                '3483',\n                '7803',\n                '7843'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('334', '335', '340', '341', '345') then 1\n            else 0\n        end as neuro\n        /* Other neurological */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('4168', '4169', '5064', '5081', '5088') then 1\n            when SUBSTR(icd9_code, 1, 3) in (\n                '490',\n                '491',\n                '492',\n                '493',\n                '494',\n                '495',\n                '496',\n                '500',\n                '501',\n                '502',\n                '503',\n                '504',\n                '505'\n            ) then 1\n            else 0\n        end as chrnlung\n        /* Chronic pulmonary disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2500', '2501', '2502', '2503') then 1\n            else 0\n        end as dm\n        /* Diabetes w/o chronic complications*/\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2504', '2505', '2506', '2507', '2508', '2509') then 1\n            else 0\n        end as dmcx\n        /* Diabetes w/ chronic complications */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2409', '2461', '2468') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('243', '244') then 1\n            else 0\n        end as hypothy\n        /* Hypothyroidism */\n,\n        CASE\n            when icd9_code in (\n                '40301',\n                '40311',\n                '40391',\n                '40402',\n                '40403',\n                '40412',\n                '40413',\n                '40492',\n                '40493'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 4) in ('5880', 'V420', 'V451') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('585', '586', 'V56') then 1\n            else 0\n        end as renlfail\n        /* Renal failure */\n,\n        CASE\n            when icd9_code in ('07022', '07023', '07032', '07033', '07044', '07054') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '0706',\n                '0709',\n                '4560',\n                '4561',\n                '4562',\n                '5722',\n                '5723',\n                '5724',\n                '5728',\n                '5733',\n                '5734',\n                '5738',\n                '5739',\n                'V427'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('570', '571') then 1\n            else 0\n        end as liver\n        /* Liver disease */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '5317',\n                '5319',\n                '5327',\n                '5329',\n                '5337',\n                '5339',\n                '5347',\n                '5349'\n            ) then 1\n            else 0\n        end as ulcer\n        /* Chronic Peptic ulcer disease (includes bleeding only if obstruction is also present) */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('042', '043', '044') then 1\n            else 0\n        end as aids\n        /* HIV and AIDS */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2030', '2386') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('200', '201', '202') then 1\n            else 0\n        end as lymph\n        /* Lymphoma */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in ('196', '197', '198', '199') then 1\n            else 0\n        end as mets\n        /* Metastatic cancer */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 3) in (\n                '140',\n                '141',\n                '142',\n                '143',\n                '144',\n                '145',\n                '146',\n                '147',\n                '148',\n                '149',\n                '150',\n                '151',\n                '152',\n                '153',\n                '154',\n                '155',\n                '156',\n                '157',\n                '158',\n                '159',\n                '160',\n                '161',\n                '162',\n                '163',\n                '164',\n                '165',\n                '166',\n                '167',\n                '168',\n                '169',\n                '170',\n                '171',\n                '172',\n                '174',\n                '175',\n                '176',\n                '177',\n                '178',\n                '179',\n                '180',\n                '181',\n                '182',\n                '183',\n                '184',\n                '185',\n                '186',\n                '187',\n                '188',\n                '189',\n                '190',\n                '191',\n                '192',\n                '193',\n                '194',\n                '195'\n            ) then 1\n            else 0\n        end as tumor\n        /* Solid tumor without metastasis */\n,\n        CASE\n            when icd9_code in ('72889', '72930') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '7010',\n                '7100',\n                '7101',\n                '7102',\n                '7103',\n                '7104',\n                '7108',\n                '7109',\n                '7112',\n                '7193',\n                '7285'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('446', '714', '720', '725') then 1\n            else 0\n        end as arth\n        /* Rheumatoid arthritis/collagen vascular diseases */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2871', '2873', '2874', '2875') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('286') then 1\n            else 0\n        end as coag\n        /* Coagulation deficiency */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2780') then 1\n            else 0\n        end as obese\n        /* Obesity      */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('7832', '7994') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('260', '261', '262', '263') then 1\n            else 0\n        end as wghtloss\n        /* Weight loss */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2536') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('276') then 1\n            else 0\n        end as lytes\n        /* Fluid and electrolyte disorders */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2800') then 1\n            else 0\n        end as bldloss\n        /* Blood loss anemia */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2801', '2808', '2809') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('281') then 1\n            else 0\n        end as anemdef\n        /* Deficiency anemias */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in (\n                '2652',\n                '2911',\n                '2912',\n                '2913',\n                '2915',\n                '2918',\n                '2919',\n                '3030',\n                '3039',\n                '3050',\n                '3575',\n                '4255',\n                '5353',\n                '5710',\n                '5711',\n                '5712',\n                '5713',\n                'V113'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('980') then 1\n            else 0\n        end as alcohol\n        /* Alcohol abuse */\n,\n        CASE\n            when icd9_code in ('V6542') then 1\n            when SUBSTR(icd9_code, 1, 4) in (\n                '3052',\n                '3053',\n                '3054',\n                '3055',\n                '3056',\n                '3057',\n                '3058',\n                '3059'\n            ) then 1\n            when SUBSTR(icd9_code, 1, 3) in ('292', '304') then 1\n            else 0\n        end as drug\n        /* Drug abuse */\n,\n        CASE\n            when icd9_code in ('29604', '29614', '29644', '29654') then 1\n            when SUBSTR(icd9_code, 1, 4) in ('2938') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('295', '297', '298') then 1\n            else 0\n        end as psych\n        /* Psychoses */\n,\n        CASE\n            when SUBSTR(icd9_code, 1, 4) in ('2962', '2963', '2965', '3004') then 1\n            when SUBSTR(icd9_code, 1, 3) in ('309', '311') then 1\n            else 0\n        end as depress\n        /* Depression */\n    from\n        diagnoses_icd icd\n    where\n        seq_num != 1 -- we do not include the primary icd-9 code\n) -- collapse the icd9_code specific flags into hadm_id specific flags\n-- this groups comorbidities together for a single patient admission\n,\neligrp as (\n    select\n        hadm_id,\n        max(chf) as chf,\n        max(arrhy) as arrhy,\n        max(valve) as valve,\n        max(pulmcirc) as pulmcirc,\n        max(perivasc) as perivasc,\n        max(htn) as htn,\n        max(htncx) as htncx,\n        max(para) as para,\n        max(neuro) as neuro,\n        max(chrnlung) as chrnlung,\n        max(dm) as dm,\n        max(dmcx) as dmcx,\n        max(hypothy) as hypothy,\n        max(renlfail) as renlfail,\n        max(liver) as liver,\n        max(ulcer) as ulcer,\n        max(aids) as aids,\n        max(lymph) as lymph,\n        max(mets) as mets,\n        max(tumor) as tumor,\n        max(arth) as arth,\n        max(coag) as coag,\n        max(obese) as obese,\n        max(wghtloss) as wghtloss,\n        max(lytes) as lytes,\n        max(bldloss) as bldloss,\n        max(anemdef) as anemdef,\n        max(alcohol) as alcohol,\n        max(drug) as drug,\n        max(psych) as psych,\n        max(depress) as depress\n    from\n        eliflg\n    group by\n        hadm_id\n) -- now merge these flags together to define elixhauser\n-- most are straightforward.. but hypertension flags are a bit more complicated\nselect\n    adm.hadm_id,\n    chf as congestive_heart_failure,\n    arrhy as cardiac_arrhythmias,\n    valve as valvular_disease,\n    pulmcirc as pulmonary_circulation,\n    perivasc as peripheral_vascular -- we combine \"htn\" and \"htncx\" into \"HYPERTENSION\"\n,\n    case\n        when htn = 1 then 1\n        when htncx = 1 then 1\n        else 0\n    end as hypertension,\n    para as paralysis,\n    neuro as other_neurological,\n    chrnlung as chronic_pulmonary -- only the more severe comorbidity (complicated diabetes) is kept\n,\n    case\n        when dmcx = 1 then 0\n        when dm = 1 then 1\n        else 0\n    end as diabetes_uncomplicated,\n    dmcx as diabetes_complicated,\n    hypothy as hypothyroidism,\n    renlfail as renal_failure,\n    liver as liver_disease,\n    ulcer as peptic_ulcer,\n    aids as aids,\n    lymph as lymphoma,\n    mets as metastatic_cancer -- only the more severe comorbidity (metastatic cancer) is kept\n,\n    case\n        when mets = 1 then 0\n        when tumor = 1 then 1\n        else 0\n    end as solid_tumor,\n    arth as rheumatoid_arthritis,\n    coag as coagulopathy,\n    obese as obesity,\n    wghtloss as weight_loss,\n    lytes as fluid_electrolyte,\n    bldloss as blood_loss_anemia,\n    anemdef as deficiency_anemias,\n    alcohol as alcohol_abuse,\n    drug as drug_abuse,\n    psych as psychoses,\n    depress as depression\nFROM\n    admissions adm\n    left join eligrp eli on adm.hadm_id = eli.hadm_id\norder by\n    adm.hadm_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"elixhauser_quan\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.elixhauser_quan", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:24.034035Z", "name": "compile", "started_at": "2022-07-18T00:10:24.024834Z"}, {"completed_at": "2022-07-18T00:10:25.969446Z", "name": "execute", "started_at": "2022-07-18T00:10:24.035246Z"}]}, "unique_id": "model.mimic.elixhauser_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.elixhauser_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.971972Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:25.972490", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.epinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.972600Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.epinephrine_durations", "index": 23, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:25.972490", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "23 of 107 START table model public.epinephrine_durations ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.973270Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.975659Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:25.972490", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.epinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.975956Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.epinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.976240Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.977307Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.977898Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.epinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.978256Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.epinephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.987932Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.989153Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.989545Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.989960Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.996926Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.997197Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"epinephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of epinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30044,30119,30309) then rate else null end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"epinephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of epinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30044,30119,30309) then rate else null end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:25.997318Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.7, "status": "SELECT 3126"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3126 in 1.7 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.697352Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.705408Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"epinephrine_durations\" rename to \"epinephrine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"epinephrine_durations\" rename to \"epinephrine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.705971Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.707405Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.711937Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"epinephrine_durations__dbt_tmp\" rename to \"epinephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"epinephrine_durations__dbt_tmp\" rename to \"epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.712183Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.712832Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.715797Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.716018Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.716151Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.717703Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.719997Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"epinephrine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"epinephrine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.720224Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.722391Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.725441Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.725899Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f280>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f280>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.726692Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.epinephrine_durations", "execution_time": 1, "index": 23, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:25.972490", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "status": "SELECT 3126", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "23 of 107 OK created table model public.epinephrine_durations .................. [\u001b[32mSELECT 3126\u001b[0m in 1.75s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.727208Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:27.727684", "node_name": "epinephrine_durations", "node_path": "durations/epinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:25.972490", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.epinephrine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 3126", "code": "SELECT", "rows_affected": 3126}, "agate_table": null, "execution_time": 1.7524044513702393, "failures": null, "message": "SELECT 3126", "node": {"alias": "epinephrine_durations", "build_path": "target/run/mimic/models/durations/epinephrine_durations.sql", "checksum": {"checksum": "002f62e303527fcd9a93044647173fb08baa13302470534a90333ce6cb4123ab", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/epinephrine_durations.sql", "compiled_sql": "-- This query extracts durations of epinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30044,30119,30309) then rate else null end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5102863, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "epinephrine_durations"], "meta": {}, "name": "epinephrine_durations", "original_file_path": "models/durations/epinephrine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/epinephrine_durations.sql", "raw_sql": "-- This query extracts durations of epinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30044,30119,30309) then rate else null end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"epinephrine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.epinephrine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:25.977783Z", "name": "compile", "started_at": "2022-07-18T00:10:25.976216Z"}, {"completed_at": "2022-07-18T00:10:27.725412Z", "name": "execute", "started_at": "2022-07-18T00:10:25.978535Z"}]}, "unique_id": "model.mimic.epinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.epinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.727938Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": "2022-07-18T00:10:27.728408", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.explicit", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.728522Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.explicit", "index": 24, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": "2022-07-18T00:10:27.728408", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "24 of 107 START table model public.explicit .................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.729133Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.729983Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": "2022-07-18T00:10:27.728408", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.explicit", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.730364Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.explicit", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.730845Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.733138Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.734100Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.explicit", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.734581Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.explicit\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.744950Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.745972Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.746310Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.746630Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.753559Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.754146Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\n\n\n  create  table \"postgres\".\"public\".\"explicit__dbt_tmp\"\n  as (\n    -- This code extracts explicit sepsis using ICD-9 diagnosis codes\n-- That is, the two codes 995.92 (severe sepsis) or 785.52 (septic shock)\n-- These codes are extremely specific to sepsis, but have very low sensitivity\n-- From Iwashyna et al. (vs. chart reviews): 100% PPV, 9.3% sens, 100% specificity\n \n\nWITH co_dx AS\n(\n\tSELECT hadm_id\n\t-- sepsis codes\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '99592' THEN 1\n      ELSE 0 END\n    ) AS severe_sepsis\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '78552' THEN 1\n      ELSE 0 END\n    ) AS septic_shock\n  from diagnoses_icd\n  GROUP BY hadm_id\n)\nselect\n  adm.subject_id\n  , adm.hadm_id\n\t, co_dx.severe_sepsis\n  , co_dx.septic_shock\n\t, case when co_dx.severe_sepsis = 1 or co_dx.septic_shock = 1\n\t\t\tthen 1\n\t\telse 0 end as sepsis\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\norder by adm.subject_id, adm.hadm_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\n\n\n  create  table \"postgres\".\"public\".\"explicit__dbt_tmp\"\n  as (\n    -- This code extracts explicit sepsis using ICD-9 diagnosis codes\n-- That is, the two codes 995.92 (severe sepsis) or 785.52 (septic shock)\n-- These codes are extremely specific to sepsis, but have very low sensitivity\n-- From Iwashyna et al. (vs. chart reviews): 100% PPV, 9.3% sens, 100% specificity\n \n\nWITH co_dx AS\n(\n\tSELECT hadm_id\n\t-- sepsis codes\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '99592' THEN 1\n      ELSE 0 END\n    ) AS severe_sepsis\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '78552' THEN 1\n      ELSE 0 END\n    ) AS septic_shock\n  from diagnoses_icd\n  GROUP BY hadm_id\n)\nselect\n  adm.subject_id\n  , adm.hadm_id\n\t, co_dx.severe_sepsis\n  , co_dx.septic_shock\n\t, case when co_dx.severe_sepsis = 1 or co_dx.septic_shock = 1\n\t\t\tthen 1\n\t\telse 0 end as sepsis\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\norder by adm.subject_id, adm.hadm_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.754410Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.23, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 0.23 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.982627Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.988200Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\nalter table \"postgres\".\"public\".\"explicit\" rename to \"explicit__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\nalter table \"postgres\".\"public\".\"explicit\" rename to \"explicit__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.988421Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.989218Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.992896Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\nalter table \"postgres\".\"public\".\"explicit__dbt_tmp\" rename to \"explicit\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\nalter table \"postgres\".\"public\".\"explicit__dbt_tmp\" rename to \"explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.993114Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.993911Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.996699Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.996904Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:27.997023Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.002431Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.explicit", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.explicit\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.006323Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.explicit", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\ndrop table if exists \"postgres\".\"public\".\"explicit__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.explicit\"} */\ndrop table if exists \"postgres\".\"public\".\"explicit__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.006597Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.008708Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.011880Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.explicit: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.012136Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f886c9dc0>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f886c9dc0>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.012939Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.explicit", "execution_time": 0, "index": 24, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": "2022-07-18T00:10:27.728408", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "24 of 107 OK created table model public.explicit ............................... [\u001b[32mSELECT 58976\u001b[0m in 0.28s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.013344Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:28.013777", "node_name": "explicit", "node_path": "sepsis/explicit.sql", "node_started_at": "2022-07-18T00:10:27.728408", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.explicit"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 0.28342151641845703, "failures": null, "message": "SELECT 58976", "node": {"alias": "explicit", "build_path": "target/run/mimic/models/sepsis/explicit.sql", "checksum": {"checksum": "1ab320aa30d0097ddcc3d50df0d7b2183059c06102ed149d17bf85b71cf8dc5c", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/sepsis/explicit.sql", "compiled_sql": "-- This code extracts explicit sepsis using ICD-9 diagnosis codes\n-- That is, the two codes 995.92 (severe sepsis) or 785.52 (septic shock)\n-- These codes are extremely specific to sepsis, but have very low sensitivity\n-- From Iwashyna et al. (vs. chart reviews): 100% PPV, 9.3% sens, 100% specificity\n \n\nWITH co_dx AS\n(\n\tSELECT hadm_id\n\t-- sepsis codes\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '99592' THEN 1\n      ELSE 0 END\n    ) AS severe_sepsis\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '78552' THEN 1\n      ELSE 0 END\n    ) AS septic_shock\n  from diagnoses_icd\n  GROUP BY hadm_id\n)\nselect\n  adm.subject_id\n  , adm.hadm_id\n\t, co_dx.severe_sepsis\n  , co_dx.septic_shock\n\t, case when co_dx.severe_sepsis = 1 or co_dx.septic_shock = 1\n\t\t\tthen 1\n\t\telse 0 end as sepsis\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\norder by adm.subject_id, adm.hadm_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5207436, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "sepsis", "explicit"], "meta": {}, "name": "explicit", "original_file_path": "models/sepsis/explicit.sql", "package_name": "mimic", "patch_path": null, "path": "sepsis/explicit.sql", "raw_sql": "-- This code extracts explicit sepsis using ICD-9 diagnosis codes\n-- That is, the two codes 995.92 (severe sepsis) or 785.52 (septic shock)\n-- These codes are extremely specific to sepsis, but have very low sensitivity\n-- From Iwashyna et al. (vs. chart reviews): 100% PPV, 9.3% sens, 100% specificity\n{{ config(materialized = 'table') }} \n\nWITH co_dx AS\n(\n\tSELECT hadm_id\n\t-- sepsis codes\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '99592' THEN 1\n      ELSE 0 END\n    ) AS severe_sepsis\n\t, MAX(\n    \tCASE\n    \t\tWHEN icd9_code = '78552' THEN 1\n      ELSE 0 END\n    ) AS septic_shock\n  from diagnoses_icd\n  GROUP BY hadm_id\n)\nselect\n  adm.subject_id\n  , adm.hadm_id\n\t, co_dx.severe_sepsis\n  , co_dx.septic_shock\n\t, case when co_dx.severe_sepsis = 1 or co_dx.septic_shock = 1\n\t\t\tthen 1\n\t\telse 0 end as sepsis\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\norder by adm.subject_id, adm.hadm_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"explicit\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.explicit", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:27.733544Z", "name": "compile", "started_at": "2022-07-18T00:10:27.730808Z"}, {"completed_at": "2022-07-18T00:10:28.011849Z", "name": "execute", "started_at": "2022-07-18T00:10:27.734812Z"}]}, "unique_id": "model.mimic.explicit"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.explicit", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.013951Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": "2022-07-18T00:10:28.014360", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.ffp_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.014465Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.ffp_transfusion", "index": 25, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": "2022-07-18T00:10:28.014360", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "25 of 107 START table model public.ffp_transfusion ............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.015213Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.016126Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": "2022-07-18T00:10:28.014360", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.ffp_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.016659Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.ffp_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.016953Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.018246Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.018927Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.ffp_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.019214Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.ffp_transfusion\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.030727Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.031462Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.031698Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.031812Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.039879Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.040251Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\n\n\n  create  table \"postgres\".\"public\".\"ffp_transfusion__dbt_tmp\"\n  as (\n    -- Retrieves instances of fresh frozen plasma transfusions\nWITH raw_ffp AS (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 200 mL when unit is not documented\n        -- this is an approximation which holds ~90% of the time\n        ELSE 200\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30005,  -- Fresh Frozen Plasma\n    30180   -- Fresh Froz Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    220970   -- Fresh Frozen Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_ffp as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    44172,  -- FFP GTT         \n    44236,  -- E.R. FFP        \n    46410,  -- angio FFP\n    46418,  -- ER ffp\n    46684,  -- ER FFP\n    44819,  -- FFP ON FARR 2\n    46530,  -- Floor FFP       \n    44044,  -- FFP Drip\n    46122,  -- ER in FFP\n    45669,  -- ED FFP\n    42323   -- er ffp\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227072  -- PACU FFP Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_ffp\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE cast(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN pre.amount IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_ffp AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\n\n\n  create  table \"postgres\".\"public\".\"ffp_transfusion__dbt_tmp\"\n  as (\n    -- Retrieves instances of fresh frozen plasma transfusions\nWITH raw_ffp AS (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 200 mL when unit is not documented\n        -- this is an approximation which holds ~90% of the time\n        ELSE 200\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30005,  -- Fresh Frozen Plasma\n    30180   -- Fresh Froz Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    220970   -- Fresh Frozen Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_ffp as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    44172,  -- FFP GTT         \n    44236,  -- E.R. FFP        \n    46410,  -- angio FFP\n    46418,  -- ER ffp\n    46684,  -- ER FFP\n    44819,  -- FFP ON FARR 2\n    46530,  -- Floor FFP       \n    44044,  -- FFP Drip\n    46122,  -- ER in FFP\n    45669,  -- ED FFP\n    42323   -- er ffp\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227072  -- PACU FFP Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_ffp\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE cast(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN pre.amount IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_ffp AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.040604Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.26, "status": "SELECT 13583"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 13583 in 0.26 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.297918Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.304903Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\nalter table \"postgres\".\"public\".\"ffp_transfusion\" rename to \"ffp_transfusion__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\nalter table \"postgres\".\"public\".\"ffp_transfusion\" rename to \"ffp_transfusion__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.305337Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.306940Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.313482Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\nalter table \"postgres\".\"public\".\"ffp_transfusion__dbt_tmp\" rename to \"ffp_transfusion\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\nalter table \"postgres\".\"public\".\"ffp_transfusion__dbt_tmp\" rename to \"ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.313793Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.314538Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.317495Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.317764Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.318010Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.320611Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ffp_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ffp_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.322946Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ffp_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\ndrop table if exists \"postgres\".\"public\".\"ffp_transfusion__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ffp_transfusion\"} */\ndrop table if exists \"postgres\".\"public\".\"ffp_transfusion__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.323180Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.325761Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.328582Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ffp_transfusion: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.328823Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f580>]}"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7c4c3ecd-5c14-4600-9281-0e21ba30ba00', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3f8a03f580>]}", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.329701Z", "type": "log_line"}
{"code": "Z039", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "warn", "log_version": 2, "msg": "Error sending message, disabling tracking", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.332545Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.ffp_transfusion", "execution_time": 0, "index": 25, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": "2022-07-18T00:10:28.014360", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "status": "SELECT 13583", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "25 of 107 OK created table model public.ffp_transfusion ........................ [\u001b[32mSELECT 13583\u001b[0m in 0.31s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.333182Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:28.333906", "node_name": "ffp_transfusion", "node_path": "fluid_balance/ffp_transfusion.sql", "node_started_at": "2022-07-18T00:10:28.014360", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.ffp_transfusion"}, "run_result": {"adapter_response": {"_message": "SELECT 13583", "code": "SELECT", "rows_affected": 13583}, "agate_table": null, "execution_time": 0.3138132095336914, "failures": null, "message": "SELECT 13583", "node": {"alias": "ffp_transfusion", "build_path": "target/run/mimic/models/fluid_balance/ffp_transfusion.sql", "checksum": {"checksum": "23fe8ba49b096b4f114c600f852de8c44624d50b4edae0104ea7473015a1b980", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/fluid_balance/ffp_transfusion.sql", "compiled_sql": "-- Retrieves instances of fresh frozen plasma transfusions\nWITH raw_ffp AS (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 200 mL when unit is not documented\n        -- this is an approximation which holds ~90% of the time\n        ELSE 200\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30005,  -- Fresh Frozen Plasma\n    30180   -- Fresh Froz Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    220970   -- Fresh Frozen Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_ffp as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    44172,  -- FFP GTT         \n    44236,  -- E.R. FFP        \n    46410,  -- angio FFP\n    46418,  -- ER ffp\n    46684,  -- ER FFP\n    44819,  -- FFP ON FARR 2\n    46530,  -- Floor FFP       \n    44044,  -- FFP Drip\n    46122,  -- ER in FFP\n    45669,  -- ED FFP\n    42323   -- er ffp\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227072  -- PACU FFP Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_ffp\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE cast(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN pre.amount IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_ffp AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6224709, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "fluid_balance", "ffp_transfusion"], "meta": {}, "name": "ffp_transfusion", "original_file_path": "models/fluid_balance/ffp_transfusion.sql", "package_name": "mimic", "patch_path": null, "path": "fluid_balance/ffp_transfusion.sql", "raw_sql": "-- Retrieves instances of fresh frozen plasma transfusions\nWITH raw_ffp AS (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 200 mL when unit is not documented\n        -- this is an approximation which holds ~90% of the time\n        ELSE 200\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30005,  -- Fresh Frozen Plasma\n    30180   -- Fresh Froz Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    220970   -- Fresh Frozen Plasma\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_ffp as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    44172,  -- FFP GTT         \n    44236,  -- E.R. FFP        \n    46410,  -- angio FFP\n    46418,  -- ER ffp\n    46684,  -- ER FFP\n    44819,  -- FFP ON FARR 2\n    46530,  -- Floor FFP       \n    44044,  -- FFP Drip\n    46122,  -- ER in FFP\n    45669,  -- ED FFP\n    42323   -- er ffp\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227072  -- PACU FFP Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_ffp\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE cast(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN pre.amount IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_ffp AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"ffp_transfusion\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.ffp_transfusion", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:28.018856Z", "name": "compile", "started_at": "2022-07-18T00:10:28.016933Z"}, {"completed_at": "2022-07-18T00:10:28.328553Z", "name": "execute", "started_at": "2022-07-18T00:10:28.019515Z"}]}, "unique_id": "model.mimic.ffp_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.ffp_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.334145Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": "2022-07-18T00:10:28.334592", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.334745Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.gcs", "index": 26, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": "2022-07-18T00:10:28.334592", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "26 of 107 START table model public.gcs ......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.335505Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.336517Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": "2022-07-18T00:10:28.334592", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.336742Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.337051Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.338794Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.339655Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.339955Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.gcs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.348597Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.349171Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.349375Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.349485Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.356466Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.356738Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\n\n\n  create  table \"postgres\".\"public\".\"gcs__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Find the glasgow coma *MOTOR* score for each adult patient\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, gcs as\n(\n    SELECT width_bucket(valuenum, 1, 30, 30) AS bucket\n    FROM chartevents ce\n    INNER JOIN agetbl\n    ON ce.subject_id = agetbl.subject_id\n    WHERE itemid IN\n    (\n        454 -- \"Motor Response\"\n      , 223900 -- \"GCS - Motor Response\"\n    )\n)\nSELECT bucket as GCS_Motor_Response, count(*)\nFROM gcs\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\n\n\n  create  table \"postgres\".\"public\".\"gcs__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Find the glasgow coma *MOTOR* score for each adult patient\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, gcs as\n(\n    SELECT width_bucket(valuenum, 1, 30, 30) AS bucket\n    FROM chartevents ce\n    INNER JOIN agetbl\n    ON ce.subject_id = agetbl.subject_id\n    WHERE itemid IN\n    (\n        454 -- \"Motor Response\"\n      , 223900 -- \"GCS - Motor Response\"\n    )\n)\nSELECT bucket as GCS_Motor_Response, count(*)\nFROM gcs\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.357075Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.17, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.17 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.525330Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.530484Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\nalter table \"postgres\".\"public\".\"gcs\" rename to \"gcs__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\nalter table \"postgres\".\"public\".\"gcs\" rename to \"gcs__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.530803Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.531716Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.536948Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\nalter table \"postgres\".\"public\".\"gcs__dbt_tmp\" rename to \"gcs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\nalter table \"postgres\".\"public\".\"gcs__dbt_tmp\" rename to \"gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.537215Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.538012Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.541580Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.541982Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.542265Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.544688Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.546757Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\ndrop table if exists \"postgres\".\"public\".\"gcs__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs\"} */\ndrop table if exists \"postgres\".\"public\".\"gcs__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.547015Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.549060Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.552969Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.553232Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.gcs", "execution_time": 0, "index": 26, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": "2022-07-18T00:10:28.334592", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "26 of 107 OK created table model public.gcs .................................... [\u001b[32mSELECT 0\u001b[0m in 0.22s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.554066Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:28.554577", "node_name": "gcs", "node_path": "cookbook/gcs.sql", "node_started_at": "2022-07-18T00:10:28.334592", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.gcs"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.2176516056060791, "failures": null, "message": "SELECT 0", "node": {"alias": "gcs", "build_path": "target/run/mimic/models/cookbook/gcs.sql", "checksum": {"checksum": "49dd1d6096c6d64fdb29268442652b1db4162d6106d6aac47181303a6ae2936b", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/gcs.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Find the glasgow coma *MOTOR* score for each adult patient\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, gcs as\n(\n    SELECT width_bucket(valuenum, 1, 30, 30) AS bucket\n    FROM chartevents ce\n    INNER JOIN agetbl\n    ON ce.subject_id = agetbl.subject_id\n    WHERE itemid IN\n    (\n        454 -- \"Motor Response\"\n      , 223900 -- \"GCS - Motor Response\"\n    )\n)\nSELECT bucket as GCS_Motor_Response, count(*)\nFROM gcs\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6678874, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "gcs"], "meta": {}, "name": "gcs", "original_file_path": "models/cookbook/gcs.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/gcs.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Find the glasgow coma *MOTOR* score for each adult patient\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n    SELECT ad.subject_id\n    FROM admissions ad\n    INNER JOIN patients p\n    ON ad.subject_id = p.subject_id\n    WHERE\n     -- filter to only adults\n    DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n    -- group by subject_id to ensure there is only 1 subject_id per row\n    group by ad.subject_id\n)\n, gcs as\n(\n    SELECT width_bucket(valuenum, 1, 30, 30) AS bucket\n    FROM chartevents ce\n    INNER JOIN agetbl\n    ON ce.subject_id = agetbl.subject_id\n    WHERE itemid IN\n    (\n        454 -- \"Motor Response\"\n      , 223900 -- \"GCS - Motor Response\"\n    )\n)\nSELECT bucket as GCS_Motor_Response, count(*)\nFROM gcs\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"gcs\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.gcs", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:28.339601Z", "name": "compile", "started_at": "2022-07-18T00:10:28.337010Z"}, {"completed_at": "2022-07-18T00:10:28.552929Z", "name": "execute", "started_at": "2022-07-18T00:10:28.340183Z"}]}, "unique_id": "model.mimic.gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.554763Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": "2022-07-18T00:10:28.555181", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.gcs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.555260Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.gcs_first_day", "index": 27, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": "2022-07-18T00:10:28.555181", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "27 of 107 START table model public.gcs_first_day ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.556221Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.557264Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": "2022-07-18T00:10:28.555181", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.gcs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.557755Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.gcs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.558115Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.559944Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.560759Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.gcs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.561877Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.gcs_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.576378Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.577411Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.577854Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.578257Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.585100Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.585984Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"gcs_first_day__dbt_tmp\"\n  as (\n    -- ITEMIDs used:\n\n-- CAREVUE\n--    723 as GCSVerbal\n--    454 as GCSMotor\n--    184 as GCSEyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form GCSVerbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  SELECT pvt.ICUSTAY_ID\n  , pvt.charttime\n\n  -- Easier names - note we coalesced Metavision and CareVue IDs below\n  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor\n  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal\n  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes\n\n  -- If verbal was set to 0 in the below select, then this is an intubated patient\n  , case\n      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0\n    then 1\n    else 0\n    end as EndoTrachFlag\n\n  , ROW_NUMBER ()\n          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn\n\n  FROM  (\n  select l.ICUSTAY_ID\n  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data\n  , case\n      when l.ITEMID in (723,223900) then 723\n      when l.ITEMID in (454,223901) then 454\n      when l.ITEMID in (184,220739) then 184\n      else l.ITEMID end\n    as ITEMID\n\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue\n      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision\n\n      else VALUENUM\n      end\n    as VALUENUM\n  , l.CHARTTIME\n  FROM chartevents l\n\n  -- get intime for charttime subselection\n  inner join icustays b\n    on l.icustay_id = b.icustay_id\n\n  -- Isolate the desired GCS variables\n  where l.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- Only get data for the first 24 hours\n  and l.charttime between b.intime and DATETIME_ADD(b.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (l.error IS NULL OR l.error = 0)\n  ) pvt\n  group by pvt.ICUSTAY_ID, pvt.charttime\n)\n, gcs as (\n  select b.*\n  , b2.GCSVerbal as GCSVerbalPrev\n  , b2.GCSMotor as GCSMotorPrev\n  , b2.GCSEyes as GCSEyesPrev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.GCSVerbal = 0\n        then 15\n      when b.GCSVerbal is null and b2.GCSVerbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.GCSVerbal = 0\n        then\n            coalesce(b.GCSMotor,6)\n          + coalesce(b.GCSVerbal,5)\n          + coalesce(b.GCSEyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))\n          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))\n          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))\n      end as GCS\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n, gcs_final as (\n  select gcs.*\n  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep\n  , ROW_NUMBER ()\n          OVER (PARTITION BY gcs.ICUSTAY_ID\n                ORDER BY gcs.GCS\n               ) as IsMinGCS\n  from gcs\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1\n, GCS as mingcs\n, coalesce(GCSMotor,GCSMotorPrev) as gcsmotor\n, coalesce(GCSVerbal,GCSVerbalPrev) as gcsverbal\n, coalesce(GCSEyes,GCSEyesPrev) as gcseyes\n, EndoTrachFlag as endotrachflag\n\n-- subselect down to the cohort of eligible patients\nFROM icustays ie\nleft join gcs_final gs\n  on ie.icustay_id = gs.icustay_id and gs.IsMinGCS = 1\nORDER BY ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"gcs_first_day__dbt_tmp\"\n  as (\n    -- ITEMIDs used:\n\n-- CAREVUE\n--    723 as GCSVerbal\n--    454 as GCSMotor\n--    184 as GCSEyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form GCSVerbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  SELECT pvt.ICUSTAY_ID\n  , pvt.charttime\n\n  -- Easier names - note we coalesced Metavision and CareVue IDs below\n  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor\n  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal\n  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes\n\n  -- If verbal was set to 0 in the below select, then this is an intubated patient\n  , case\n      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0\n    then 1\n    else 0\n    end as EndoTrachFlag\n\n  , ROW_NUMBER ()\n          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn\n\n  FROM  (\n  select l.ICUSTAY_ID\n  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data\n  , case\n      when l.ITEMID in (723,223900) then 723\n      when l.ITEMID in (454,223901) then 454\n      when l.ITEMID in (184,220739) then 184\n      else l.ITEMID end\n    as ITEMID\n\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue\n      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision\n\n      else VALUENUM\n      end\n    as VALUENUM\n  , l.CHARTTIME\n  FROM chartevents l\n\n  -- get intime for charttime subselection\n  inner join icustays b\n    on l.icustay_id = b.icustay_id\n\n  -- Isolate the desired GCS variables\n  where l.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- Only get data for the first 24 hours\n  and l.charttime between b.intime and DATETIME_ADD(b.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (l.error IS NULL OR l.error = 0)\n  ) pvt\n  group by pvt.ICUSTAY_ID, pvt.charttime\n)\n, gcs as (\n  select b.*\n  , b2.GCSVerbal as GCSVerbalPrev\n  , b2.GCSMotor as GCSMotorPrev\n  , b2.GCSEyes as GCSEyesPrev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.GCSVerbal = 0\n        then 15\n      when b.GCSVerbal is null and b2.GCSVerbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.GCSVerbal = 0\n        then\n            coalesce(b.GCSMotor,6)\n          + coalesce(b.GCSVerbal,5)\n          + coalesce(b.GCSEyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))\n          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))\n          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))\n      end as GCS\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n, gcs_final as (\n  select gcs.*\n  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep\n  , ROW_NUMBER ()\n          OVER (PARTITION BY gcs.ICUSTAY_ID\n                ORDER BY gcs.GCS\n               ) as IsMinGCS\n  from gcs\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1\n, GCS as mingcs\n, coalesce(GCSMotor,GCSMotorPrev) as gcsmotor\n, coalesce(GCSVerbal,GCSVerbalPrev) as gcsverbal\n, coalesce(GCSEyes,GCSEyesPrev) as gcseyes\n, EndoTrachFlag as endotrachflag\n\n-- subselect down to the cohort of eligible patients\nFROM icustays ie\nleft join gcs_final gs\n  on ie.icustay_id = gs.icustay_id and gs.IsMinGCS = 1\nORDER BY ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.586584Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.11, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.11 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.693878Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.698661Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\nalter table \"postgres\".\"public\".\"gcs_first_day\" rename to \"gcs_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\nalter table \"postgres\".\"public\".\"gcs_first_day\" rename to \"gcs_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.698918Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.699897Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.708471Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\nalter table \"postgres\".\"public\".\"gcs_first_day__dbt_tmp\" rename to \"gcs_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\nalter table \"postgres\".\"public\".\"gcs_first_day__dbt_tmp\" rename to \"gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.708701Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.709552Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.712539Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.712741Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.713087Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.718746Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.gcs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.gcs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.720940Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.gcs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"gcs_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.gcs_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"gcs_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.721231Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.725752Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.728613Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.gcs_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.728876Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.gcs_first_day", "execution_time": 0, "index": 27, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": "2022-07-18T00:10:28.555181", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "27 of 107 OK created table model public.gcs_first_day .......................... [\u001b[32mSELECT 61532\u001b[0m in 0.17s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.730114Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:28.731372", "node_name": "gcs_first_day", "node_path": "firstday/gcs_first_day.sql", "node_started_at": "2022-07-18T00:10:28.555181", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.gcs_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.17302536964416504, "failures": null, "message": "SELECT 61532", "node": {"alias": "gcs_first_day", "build_path": "target/run/mimic/models/firstday/gcs_first_day.sql", "checksum": {"checksum": "8a904a533500faa60edc17f2f83872ac24aef91923875712cce264a8cdd6517a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/gcs_first_day.sql", "compiled_sql": "-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as GCSVerbal\n--    454 as GCSMotor\n--    184 as GCSEyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form GCSVerbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  SELECT pvt.ICUSTAY_ID\n  , pvt.charttime\n\n  -- Easier names - note we coalesced Metavision and CareVue IDs below\n  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor\n  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal\n  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes\n\n  -- If verbal was set to 0 in the below select, then this is an intubated patient\n  , case\n      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0\n    then 1\n    else 0\n    end as EndoTrachFlag\n\n  , ROW_NUMBER ()\n          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn\n\n  FROM  (\n  select l.ICUSTAY_ID\n  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data\n  , case\n      when l.ITEMID in (723,223900) then 723\n      when l.ITEMID in (454,223901) then 454\n      when l.ITEMID in (184,220739) then 184\n      else l.ITEMID end\n    as ITEMID\n\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue\n      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision\n\n      else VALUENUM\n      end\n    as VALUENUM\n  , l.CHARTTIME\n  FROM chartevents l\n\n  -- get intime for charttime subselection\n  inner join icustays b\n    on l.icustay_id = b.icustay_id\n\n  -- Isolate the desired GCS variables\n  where l.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- Only get data for the first 24 hours\n  and l.charttime between b.intime and DATETIME_ADD(b.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (l.error IS NULL OR l.error = 0)\n  ) pvt\n  group by pvt.ICUSTAY_ID, pvt.charttime\n)\n, gcs as (\n  select b.*\n  , b2.GCSVerbal as GCSVerbalPrev\n  , b2.GCSMotor as GCSMotorPrev\n  , b2.GCSEyes as GCSEyesPrev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.GCSVerbal = 0\n        then 15\n      when b.GCSVerbal is null and b2.GCSVerbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.GCSVerbal = 0\n        then\n            coalesce(b.GCSMotor,6)\n          + coalesce(b.GCSVerbal,5)\n          + coalesce(b.GCSEyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))\n          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))\n          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))\n      end as GCS\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n, gcs_final as (\n  select gcs.*\n  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep\n  , ROW_NUMBER ()\n          OVER (PARTITION BY gcs.ICUSTAY_ID\n                ORDER BY gcs.GCS\n               ) as IsMinGCS\n  from gcs\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1\n, GCS as mingcs\n, coalesce(GCSMotor,GCSMotorPrev) as gcsmotor\n, coalesce(GCSVerbal,GCSVerbalPrev) as gcsverbal\n, coalesce(GCSEyes,GCSEyesPrev) as gcseyes\n, EndoTrachFlag as endotrachflag\n\n-- subselect down to the cohort of eligible patients\nFROM icustays ie\nleft join gcs_final gs\n  on ie.icustay_id = gs.icustay_id and gs.IsMinGCS = 1\nORDER BY ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5305269, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "gcs_first_day"], "meta": {}, "name": "gcs_first_day", "original_file_path": "models/firstday/gcs_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/gcs_first_day.sql", "raw_sql": "-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as GCSVerbal\n--    454 as GCSMotor\n--    184 as GCSEyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form GCSVerbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  SELECT pvt.ICUSTAY_ID\n  , pvt.charttime\n\n  -- Easier names - note we coalesced Metavision and CareVue IDs below\n  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor\n  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal\n  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes\n\n  -- If verbal was set to 0 in the below select, then this is an intubated patient\n  , case\n      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0\n    then 1\n    else 0\n    end as EndoTrachFlag\n\n  , ROW_NUMBER ()\n          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn\n\n  FROM  (\n  select l.ICUSTAY_ID\n  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data\n  , case\n      when l.ITEMID in (723,223900) then 723\n      when l.ITEMID in (454,223901) then 454\n      when l.ITEMID in (184,220739) then 184\n      else l.ITEMID end\n    as ITEMID\n\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue\n      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision\n\n      else VALUENUM\n      end\n    as VALUENUM\n  , l.CHARTTIME\n  FROM chartevents l\n\n  -- get intime for charttime subselection\n  inner join icustays b\n    on l.icustay_id = b.icustay_id\n\n  -- Isolate the desired GCS variables\n  where l.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- Only get data for the first 24 hours\n  and l.charttime between b.intime and DATETIME_ADD(b.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (l.error IS NULL OR l.error = 0)\n  ) pvt\n  group by pvt.ICUSTAY_ID, pvt.charttime\n)\n, gcs as (\n  select b.*\n  , b2.GCSVerbal as GCSVerbalPrev\n  , b2.GCSMotor as GCSMotorPrev\n  , b2.GCSEyes as GCSEyesPrev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.GCSVerbal = 0\n        then 15\n      when b.GCSVerbal is null and b2.GCSVerbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.GCSVerbal = 0\n        then\n            coalesce(b.GCSMotor,6)\n          + coalesce(b.GCSVerbal,5)\n          + coalesce(b.GCSEyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))\n          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))\n          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))\n      end as GCS\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n, gcs_final as (\n  select gcs.*\n  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep\n  , ROW_NUMBER ()\n          OVER (PARTITION BY gcs.ICUSTAY_ID\n                ORDER BY gcs.GCS\n               ) as IsMinGCS\n  from gcs\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1\n, GCS as mingcs\n, coalesce(GCSMotor,GCSMotorPrev) as gcsmotor\n, coalesce(GCSVerbal,GCSVerbalPrev) as gcsverbal\n, coalesce(GCSEyes,GCSEyesPrev) as gcseyes\n, EndoTrachFlag as endotrachflag\n\n-- subselect down to the cohort of eligible patients\nFROM icustays ie\nleft join gcs_final gs\n  on ie.icustay_id = gs.icustay_id and gs.IsMinGCS = 1\nORDER BY ie.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"gcs_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.gcs_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:28.560654Z", "name": "compile", "started_at": "2022-07-18T00:10:28.558091Z"}, {"completed_at": "2022-07-18T00:10:28.728580Z", "name": "execute", "started_at": "2022-07-18T00:10:28.562486Z"}]}, "unique_id": "model.mimic.gcs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.gcs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.731590Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": "2022-07-18T00:10:28.731990", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.glucose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.732198Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.glucose", "index": 28, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": "2022-07-18T00:10:28.731990", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "28 of 107 START table model public.glucose ..................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.732797Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.733383Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": "2022-07-18T00:10:28.731990", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.glucose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.734008Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.glucose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.734568Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.735940Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.736371Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.glucose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.736525Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.glucose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.743849Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.744303Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.744539Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.744750Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.751468Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.751977Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\n\n\n  create  table \"postgres\".\"public\".\"glucose__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves a glucose histogram of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, glc as\n(\n  SELECT width_bucket(valuenum, 0.5, 1000, 1000) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50809,50931)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as glucose, count(*)\nFROM glc\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\n\n\n  create  table \"postgres\".\"public\".\"glucose__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves a glucose histogram of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, glc as\n(\n  SELECT width_bucket(valuenum, 0.5, 1000, 1000) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50809,50931)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as glucose, count(*)\nFROM glc\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.752632Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.16, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.914593Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.921385Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\nalter table \"postgres\".\"public\".\"glucose\" rename to \"glucose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\nalter table \"postgres\".\"public\".\"glucose\" rename to \"glucose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.921709Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.922499Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.926183Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\nalter table \"postgres\".\"public\".\"glucose__dbt_tmp\" rename to \"glucose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\nalter table \"postgres\".\"public\".\"glucose__dbt_tmp\" rename to \"glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.926431Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.927160Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.930294Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.930539Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.930763Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.932214Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.glucose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.glucose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.935185Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.glucose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\ndrop table if exists \"postgres\".\"public\".\"glucose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.glucose\"} */\ndrop table if exists \"postgres\".\"public\".\"glucose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.935424Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.937469Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.940862Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.glucose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.941215Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.glucose", "execution_time": 0, "index": 28, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": "2022-07-18T00:10:28.731990", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "28 of 107 OK created table model public.glucose ................................ [\u001b[32mSELECT 0\u001b[0m in 0.21s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.942185Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:28.942665", "node_name": "glucose", "node_path": "cookbook/glucose.sql", "node_started_at": "2022-07-18T00:10:28.731990", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.glucose"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.2088944911956787, "failures": null, "message": "SELECT 0", "node": {"alias": "glucose", "build_path": "target/run/mimic/models/cookbook/glucose.sql", "checksum": {"checksum": "d837d2e09254c94eaa712d9b8e98ef09535f1acc3157e5d683663f5fd58739b5", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/glucose.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves a glucose histogram of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, glc as\n(\n  SELECT width_bucket(valuenum, 0.5, 1000, 1000) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50809,50931)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as glucose, count(*)\nFROM glc\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6817024, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "glucose"], "meta": {}, "name": "glucose", "original_file_path": "models/cookbook/glucose.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/glucose.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves a glucose histogram of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, glc as\n(\n  SELECT width_bucket(valuenum, 0.5, 1000, 1000) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50809,50931)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as glucose, count(*)\nFROM glc\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"glucose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.glucose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:28.736322Z", "name": "compile", "started_at": "2022-07-18T00:10:28.734533Z"}, {"completed_at": "2022-07-18T00:10:28.940833Z", "name": "execute", "started_at": "2022-07-18T00:10:28.736754Z"}]}, "unique_id": "model.mimic.glucose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.glucose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.942837Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": "2022-07-18T00:10:28.943220", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.hco"}, "unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.hco", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.943305Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.hco", "index": 29, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": "2022-07-18T00:10:28.943220", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.hco"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "29 of 107 START table model public.hco ......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.943985Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.944675Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": "2022-07-18T00:10:28.943220", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.hco"}, "unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.hco", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.944947Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.hco", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.945362Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.946764Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.947381Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.hco"}, "unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.hco", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.947635Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.hco\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.958939Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.959893Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.960393Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.961191Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.969002Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.969507Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\n\n\n  create  table \"postgres\".\"public\".\"hco__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram bicarbonate levels for all patients (adults and neonates)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hco as\n(\n  SELECT width_bucket(valuenum, 0, 231, 231) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50803, 50804, 50882)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as bicarbonate, count(*)\nFROM hco\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\n\n\n  create  table \"postgres\".\"public\".\"hco__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram bicarbonate levels for all patients (adults and neonates)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hco as\n(\n  SELECT width_bucket(valuenum, 0, 231, 231) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50803, 50804, 50882)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as bicarbonate, count(*)\nFROM hco\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:28.970063Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.15, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.118418Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.122934Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\nalter table \"postgres\".\"public\".\"hco\" rename to \"hco__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\nalter table \"postgres\".\"public\".\"hco\" rename to \"hco__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.123181Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.123955Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.127845Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\nalter table \"postgres\".\"public\".\"hco__dbt_tmp\" rename to \"hco\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\nalter table \"postgres\".\"public\".\"hco__dbt_tmp\" rename to \"hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.128089Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.128807Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.131791Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.132010Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.132265Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.133806Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.hco", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.hco\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.135699Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.hco", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\ndrop table if exists \"postgres\".\"public\".\"hco__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.hco\"} */\ndrop table if exists \"postgres\".\"public\".\"hco__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.135909Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.138508Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.142043Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.hco: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.142324Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.hco", "execution_time": 0, "index": 29, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": "2022-07-18T00:10:28.943220", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.hco"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "29 of 107 OK created table model public.hco .................................... [\u001b[32mSELECT 0\u001b[0m in 0.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.143176Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:29.143651", "node_name": "hco", "node_path": "cookbook/hco.sql", "node_started_at": "2022-07-18T00:10:28.943220", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.hco"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.19867968559265137, "failures": null, "message": "SELECT 0", "node": {"alias": "hco", "build_path": "target/run/mimic/models/cookbook/hco.sql", "checksum": {"checksum": "e575aa547c4e621bcdf74abe44fc1f2a3515ea55439316fb9fd640000ff3bc35", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/hco.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram bicarbonate levels for all patients (adults and neonates)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hco as\n(\n  SELECT width_bucket(valuenum, 0, 231, 231) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50803, 50804, 50882)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as bicarbonate, count(*)\nFROM hco\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6929355, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "hco"], "meta": {}, "name": "hco", "original_file_path": "models/cookbook/hco.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/hco.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram bicarbonate levels for all patients (adults and neonates)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hco as\n(\n  SELECT width_bucket(valuenum, 0, 231, 231) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50803, 50804, 50882)\n  AND valuenum IS NOT NULL\n)\nSELECT bucket as bicarbonate, count(*)\nFROM hco\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"hco\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.hco", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:28.947325Z", "name": "compile", "started_at": "2022-07-18T00:10:28.945301Z"}, {"completed_at": "2022-07-18T00:10:29.142009Z", "name": "execute", "started_at": "2022-07-18T00:10:28.947763Z"}]}, "unique_id": "model.mimic.hco"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.hco", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.143820Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": "2022-07-18T00:10:29.144200", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.heart_rate", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.144285Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.heart_rate", "index": 30, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": "2022-07-18T00:10:29.144200", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "30 of 107 START table model public.heart_rate .................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.145061Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.145840Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": "2022-07-18T00:10:29.144200", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.heart_rate", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.146391Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.heart_rate", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.146808Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.148312Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.148741Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.heart_rate", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.149190Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.heart_rate\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.163132Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.163982Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.164261Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.164421Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.173298Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.173928Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\n\n\n  create  table \"postgres\".\"public\".\"heart_rate__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram of heart rates for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hr as\n(\n  SELECT width_bucket(valuenum, 0, 300, 301) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (211,220045)\n)\nSELECT bucket as heart_rate, count(*)\nFROM hr\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\n\n\n  create  table \"postgres\".\"public\".\"heart_rate__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram of heart rates for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hr as\n(\n  SELECT width_bucket(valuenum, 0, 300, 301) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (211,220045)\n)\nSELECT bucket as heart_rate, count(*)\nFROM hr\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.174212Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.17, "status": "SELECT 75"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 75 in 0.17 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.342539Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.349227Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\nalter table \"postgres\".\"public\".\"heart_rate\" rename to \"heart_rate__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\nalter table \"postgres\".\"public\".\"heart_rate\" rename to \"heart_rate__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.349726Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.351217Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.356740Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\nalter table \"postgres\".\"public\".\"heart_rate__dbt_tmp\" rename to \"heart_rate\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\nalter table \"postgres\".\"public\".\"heart_rate__dbt_tmp\" rename to \"heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.356985Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.357845Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.360739Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.360962Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.361103Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.362833Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heart_rate", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heart_rate\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.407248Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heart_rate", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\ndrop table if exists \"postgres\".\"public\".\"heart_rate__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heart_rate\"} */\ndrop table if exists \"postgres\".\"public\".\"heart_rate__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.407519Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.409825Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.413220Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heart_rate: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.413473Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.heart_rate", "execution_time": 0, "index": 30, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": "2022-07-18T00:10:29.144200", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "status": "SELECT 75", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "30 of 107 OK created table model public.heart_rate ............................. [\u001b[32mSELECT 75\u001b[0m in 0.27s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.414512Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:29.415048", "node_name": "heart_rate", "node_path": "cookbook/heart_rate.sql", "node_started_at": "2022-07-18T00:10:29.144200", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.heart_rate"}, "run_result": {"adapter_response": {"_message": "SELECT 75", "code": "SELECT", "rows_affected": 75}, "agate_table": null, "execution_time": 0.2688751220703125, "failures": null, "message": "SELECT 75", "node": {"alias": "heart_rate", "build_path": "target/run/mimic/models/cookbook/heart_rate.sql", "checksum": {"checksum": "49955778ab10891853a66caa026973edc423fcf2b778387e6bbd576d22a93391", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/heart_rate.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram of heart rates for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hr as\n(\n  SELECT width_bucket(valuenum, 0, 300, 301) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (211,220045)\n)\nSELECT bucket as heart_rate, count(*)\nFROM hr\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6726282, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "heart_rate"], "meta": {}, "name": "heart_rate", "original_file_path": "models/cookbook/heart_rate.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/heart_rate.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram of heart rates for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, hr as\n(\n  SELECT width_bucket(valuenum, 0, 300, 301) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (211,220045)\n)\nSELECT bucket as heart_rate, count(*)\nFROM hr\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"heart_rate\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.heart_rate", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:29.148697Z", "name": "compile", "started_at": "2022-07-18T00:10:29.146778Z"}, {"completed_at": "2022-07-18T00:10:29.413192Z", "name": "execute", "started_at": "2022-07-18T00:10:29.149555Z"}]}, "unique_id": "model.mimic.heart_rate"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.heart_rate", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.415300Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": "2022-07-18T00:10:29.415860", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.height"}, "unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.416048Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.height", "index": 31, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": "2022-07-18T00:10:29.415860", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.height"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "31 of 107 START table model public.height ...................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.416753Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.417467Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": "2022-07-18T00:10:29.415860", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.height"}, "unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.417974Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.418342Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.420232Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.420925Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.height"}, "unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.421240Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.height\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.430494Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.431114Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.431354Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.431556Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.438852Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.439136Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\n\n\n  create  table \"postgres\".\"public\".\"height__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram of heights for all patients\n--  note: some height ITEMIDs were not included, which may implicitly exclude\n--  some neonates from this calculation\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH ht AS\n(\n  SELECT valuenum, width_bucket(valuenum, 1, 200, 200) AS bucket\n  FROM chartevents\n  WHERE itemid in (920,226730)\n  AND valuenum IS NOT NULL\n  AND valuenum > 0\n  AND valuenum < 500\n)\nSELECT bucket as height, count(*)\nFROM ht\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\n\n\n  create  table \"postgres\".\"public\".\"height__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Create a histogram of heights for all patients\n--  note: some height ITEMIDs were not included, which may implicitly exclude\n--  some neonates from this calculation\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH ht AS\n(\n  SELECT valuenum, width_bucket(valuenum, 1, 200, 200) AS bucket\n  FROM chartevents\n  WHERE itemid in (920,226730)\n  AND valuenum IS NOT NULL\n  AND valuenum > 0\n  AND valuenum < 500\n)\nSELECT bucket as height, count(*)\nFROM ht\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.439359Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 6"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 6 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.444744Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.449505Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\nalter table \"postgres\".\"public\".\"height\" rename to \"height__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\nalter table \"postgres\".\"public\".\"height\" rename to \"height__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.451699Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.453037Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.458463Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\nalter table \"postgres\".\"public\".\"height__dbt_tmp\" rename to \"height\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\nalter table \"postgres\".\"public\".\"height__dbt_tmp\" rename to \"height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.458771Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.459513Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.463655Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.463944Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.464161Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.465174Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.468290Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\ndrop table if exists \"postgres\".\"public\".\"height__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height\"} */\ndrop table if exists \"postgres\".\"public\".\"height__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.468681Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.471655Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.475477Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.475738Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.height", "execution_time": 0, "index": 31, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": "2022-07-18T00:10:29.415860", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.height"}, "status": "SELECT 6", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "31 of 107 OK created table model public.height ................................. [\u001b[32mSELECT 6\u001b[0m in 0.06s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.476738Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:29.477192", "node_name": "height", "node_path": "cookbook/height.sql", "node_started_at": "2022-07-18T00:10:29.415860", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.height"}, "run_result": {"adapter_response": {"_message": "SELECT 6", "code": "SELECT", "rows_affected": 6}, "agate_table": null, "execution_time": 0.05935478210449219, "failures": null, "message": "SELECT 6", "node": {"alias": "height", "build_path": "target/run/mimic/models/cookbook/height.sql", "checksum": {"checksum": "e73e0c1626c1f21299902becda10c203aa1df808391d2b048db95f0fb9081bc1", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/height.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram of heights for all patients\n--  note: some height ITEMIDs were not included, which may implicitly exclude\n--  some neonates from this calculation\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH ht AS\n(\n  SELECT valuenum, width_bucket(valuenum, 1, 200, 200) AS bucket\n  FROM chartevents\n  WHERE itemid in (920,226730)\n  AND valuenum IS NOT NULL\n  AND valuenum > 0\n  AND valuenum < 500\n)\nSELECT bucket as height, count(*)\nFROM ht\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6501138, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "height"], "meta": {}, "name": "height", "original_file_path": "models/cookbook/height.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/height.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Create a histogram of heights for all patients\n--  note: some height ITEMIDs were not included, which may implicitly exclude\n--  some neonates from this calculation\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH ht AS\n(\n  SELECT valuenum, width_bucket(valuenum, 1, 200, 200) AS bucket\n  FROM chartevents\n  WHERE itemid in (920,226730)\n  AND valuenum IS NOT NULL\n  AND valuenum > 0\n  AND valuenum < 500\n)\nSELECT bucket as height, count(*)\nFROM ht\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"height\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.height", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:29.420856Z", "name": "compile", "started_at": "2022-07-18T00:10:29.418314Z"}, {"completed_at": "2022-07-18T00:10:29.475443Z", "name": "execute", "started_at": "2022-07-18T00:10:29.421530Z"}]}, "unique_id": "model.mimic.height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.477322Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": "2022-07-18T00:10:29.477672", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.477800Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icd9agelimited", "index": 32, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": "2022-07-18T00:10:29.477672", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "32 of 107 START table model public.icd9agelimited .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.478608Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.479493Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": "2022-07-18T00:10:29.477672", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.479705Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.479943Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.481439Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.482076Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.482444Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icd9agelimited\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.493071Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.494350Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.494923Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.495277Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.503378Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.503775Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9agelimited__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\t-- filter to only adults above 30\n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 30\n\t-- group by subject_id to ensure there is only 1 subject_id per row\n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Hypertension Age 30+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nWHERE dia.icd9_code \n-- 401% relates to Hypertension\nLIKE '401%'\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9agelimited__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\t-- filter to only adults above 30\n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 30\n\t-- group by subject_id to ensure there is only 1 subject_id per row\n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Hypertension Age 30+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nWHERE dia.icd9_code \n-- 401% relates to Hypertension\nLIKE '401%'\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.504063Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.22, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.22 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.720465Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.724920Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9agelimited\" rename to \"icd9agelimited__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9agelimited\" rename to \"icd9agelimited__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.725133Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.726035Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.729435Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9agelimited__dbt_tmp\" rename to \"icd9agelimited\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9agelimited__dbt_tmp\" rename to \"icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.729971Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.730670Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.733925Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.734205Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.734418Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.735827Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.737536Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9agelimited__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9agelimited\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9agelimited__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.737888Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.739859Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.743479Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9agelimited: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.743732Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icd9agelimited", "execution_time": 0, "index": 32, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": "2022-07-18T00:10:29.477672", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "32 of 107 OK created table model public.icd9agelimited ......................... [\u001b[32mSELECT 1\u001b[0m in 0.27s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.744645Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:29.745031", "node_name": "icd9agelimited", "node_path": "cookbook/icd9agelimited.sql", "node_started_at": "2022-07-18T00:10:29.477672", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icd9agelimited"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.26523423194885254, "failures": null, "message": "SELECT 1", "node": {"alias": "icd9agelimited", "build_path": "target/run/mimic/models/cookbook/icd9agelimited.sql", "checksum": {"checksum": "d85e54d83b38eb8c30cf6cc689e4a64b3be5184fa677c007abf65d214a3bccc0", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icd9agelimited.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\t-- filter to only adults above 30\n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 30\n\t-- group by subject_id to ensure there is only 1 subject_id per row\n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Hypertension Age 30+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nWHERE dia.icd9_code \n-- 401% relates to Hypertension\nLIKE '401%'", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6446402, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icd9agelimited"], "meta": {}, "name": "icd9agelimited", "original_file_path": "models/cookbook/icd9agelimited.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icd9agelimited.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\t-- filter to only adults above 30\n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 30\n\t-- group by subject_id to ensure there is only 1 subject_id per row\n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Hypertension Age 30+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nWHERE dia.icd9_code \n-- 401% relates to Hypertension\nLIKE '401%'", "refs": [], "relation_name": "\"postgres\".\"public\".\"icd9agelimited\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icd9agelimited", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:29.481990Z", "name": "compile", "started_at": "2022-07-18T00:10:29.479920Z"}, {"completed_at": "2022-07-18T00:10:29.743449Z", "name": "execute", "started_at": "2022-07-18T00:10:29.482941Z"}]}, "unique_id": "model.mimic.icd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.745133Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": "2022-07-18T00:10:29.745496", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.745576Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icd9count", "index": 33, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": "2022-07-18T00:10:29.745496", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "33 of 107 START table model public.icd9count ................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.746476Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.747356Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": "2022-07-18T00:10:29.745496", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.748003Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.748407Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.750259Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.751105Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.751475Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icd9count\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.764735Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.766407Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.766811Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.767312Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.774478Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.774964Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9count__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT subject_id) \nAS \"Hypertension\" \nfrom diagnoses_icd \nWHERE icd9_code \n-- 401% will search for all icd9 codes relating to hypertension\nLIKE '401%'\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9count__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT subject_id) \nAS \"Hypertension\" \nfrom diagnoses_icd \nWHERE icd9_code \n-- 401% will search for all icd9 codes relating to hypertension\nLIKE '401%'\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.775467Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.03, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.03 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.802111Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.807164Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\nalter table \"postgres\".\"public\".\"icd9count\" rename to \"icd9count__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\nalter table \"postgres\".\"public\".\"icd9count\" rename to \"icd9count__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.807407Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.808251Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.813333Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\nalter table \"postgres\".\"public\".\"icd9count__dbt_tmp\" rename to \"icd9count\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\nalter table \"postgres\".\"public\".\"icd9count__dbt_tmp\" rename to \"icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.813729Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.814579Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.820022Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.820275Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.820405Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.821401Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.823490Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9count__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9count\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9count__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.823856Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.825793Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.828356Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9count: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.828606Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icd9count", "execution_time": 0, "index": 33, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": "2022-07-18T00:10:29.745496", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "33 of 107 OK created table model public.icd9count .............................. [\u001b[32mSELECT 1\u001b[0m in 0.08s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.829146Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:29.829403", "node_name": "icd9count", "node_path": "cookbook/icd9count.sql", "node_started_at": "2022-07-18T00:10:29.745496", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icd9count"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.0819847583770752, "failures": null, "message": "SELECT 1", "node": {"alias": "icd9count", "build_path": "target/run/mimic/models/cookbook/icd9count.sql", "checksum": {"checksum": "e078ed7d919fcb42f3fcca01d4026c09ec1399d6efb00476d6ba8cecc0495937", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icd9count.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT subject_id) \nAS \"Hypertension\" \nfrom diagnoses_icd \nWHERE icd9_code \n-- 401% will search for all icd9 codes relating to hypertension\nLIKE '401%'", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.662535, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icd9count"], "meta": {}, "name": "icd9count", "original_file_path": "models/cookbook/icd9count.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icd9count.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT subject_id) \nAS \"Hypertension\" \nfrom diagnoses_icd \nWHERE icd9_code \n-- 401% will search for all icd9 codes relating to hypertension\nLIKE '401%'", "refs": [], "relation_name": "\"postgres\".\"public\".\"icd9count\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icd9count", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:29.751025Z", "name": "compile", "started_at": "2022-07-18T00:10:29.748379Z"}, {"completed_at": "2022-07-18T00:10:29.828327Z", "name": "execute", "started_at": "2022-07-18T00:10:29.751681Z"}]}, "unique_id": "model.mimic.icd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.829493Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": "2022-07-18T00:10:29.829941", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icd9vagehistogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.830018Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icd9vagehistogram", "index": 34, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": "2022-07-18T00:10:29.829941", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "34 of 107 START table model public.icd9vagehistogram ........................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.830741Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.831524Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": "2022-07-18T00:10:29.829941", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icd9vagehistogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.831863Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icd9vagehistogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.832182Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.834329Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.834859Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icd9vagehistogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.835119Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icd9vagehistogram\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.844078Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.844580Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.844708Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.844816Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.851293Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.851744Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vagehistogram__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code and shows the output as a histogram with groups of age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgements: Made with help from Kris Kindle\n-- Reference: tompollard, alistairewj for code taken\n-- from age_hist.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH diatbl AS\n\t(\n\tSELECT DISTINCT ON (dia.subject_id) dia.subject_id, ad.admittime\n\tfrom diagnoses_icd dia\n\tINNER JOIN admissions ad\n\tON dia.subject_id = ad.subject_id\n\tWHERE dia.icd9_code\n\t-- 401% relates to hypertension\n\tLIKE '401%'\n\t),\nagetbl AS\n\t(\n\tSELECT dt.subject_id, DATETIME_DIFF(dt.admittime, p.dob, 'YEAR') AS age\n\tFROM diatbl dt\n\tINNER JOIN patients p\n\tON dt.subject_id = p.subject_id\n\t)\nSELECT\n        COUNT(*) AS TOTAL,\n        COUNT(CASE WHEN age >= 0 AND age < 16 THEN  '0 - 15' END) AS \"0-15\",\n        COUNT(CASE WHEN age >= 16 AND age < 21 THEN '16 - 20' END) AS \"16-20\",\n        COUNT(CASE WHEN age >= 21 AND age < 26 THEN '21 - 25' END) AS \"21-25\",\n        COUNT(CASE WHEN age >= 26 AND age < 31 THEN '26 - 30' END) AS \"26-30\",\n        COUNT(CASE WHEN age >= 31 AND age < 36 THEN '31 - 35' END) AS \"31-35\",\n        COUNT(CASE WHEN age >= 36 AND age < 41 THEN '36 - 40' END) AS \"36-40\",\n        COUNT(CASE WHEN age >= 41 AND age < 46 THEN '41 - 45' END) AS \"41-45\",\n        COUNT(CASE WHEN age >= 46 AND age < 51 THEN '46 - 50' END) AS \"46-50\",\n        COUNT(CASE WHEN age >= 51 AND age < 56 THEN '51 - 55' END) AS \"51-55\",\n        COUNT(CASE WHEN age >= 56 AND age < 61 THEN '56 - 60' END) AS \"56-60\",\n        COUNT(CASE WHEN age >= 61 AND age < 66 THEN '61 - 65' END) AS \"61-65\",\n        COUNT(CASE WHEN age >= 66 AND age < 71 THEN '66 - 70' END) AS \"66-70\",\n        COUNT(CASE WHEN age >= 71 AND age < 76 THEN '71 - 75' END) AS \"71-75\",\n        COUNT(CASE WHEN age >= 76 AND age < 81 THEN '76 - 80' END) AS \"76-80\",\n        COUNT(CASE WHEN age >= 81 AND age < 86 THEN '81 - 85' END) AS \"81-85\",\n        COUNT(CASE WHEN age >= 86 AND age < 91 THEN '86 - 90' END) AS \"86-91\",\n        COUNT(CASE WHEN age >= 91 THEN 'Over 91' END) AS \">91\"\nFROM agetbl\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vagehistogram__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code and shows the output as a histogram with groups of age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgements: Made with help from Kris Kindle\n-- Reference: tompollard, alistairewj for code taken\n-- from age_hist.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH diatbl AS\n\t(\n\tSELECT DISTINCT ON (dia.subject_id) dia.subject_id, ad.admittime\n\tfrom diagnoses_icd dia\n\tINNER JOIN admissions ad\n\tON dia.subject_id = ad.subject_id\n\tWHERE dia.icd9_code\n\t-- 401% relates to hypertension\n\tLIKE '401%'\n\t),\nagetbl AS\n\t(\n\tSELECT dt.subject_id, DATETIME_DIFF(dt.admittime, p.dob, 'YEAR') AS age\n\tFROM diatbl dt\n\tINNER JOIN patients p\n\tON dt.subject_id = p.subject_id\n\t)\nSELECT\n        COUNT(*) AS TOTAL,\n        COUNT(CASE WHEN age >= 0 AND age < 16 THEN  '0 - 15' END) AS \"0-15\",\n        COUNT(CASE WHEN age >= 16 AND age < 21 THEN '16 - 20' END) AS \"16-20\",\n        COUNT(CASE WHEN age >= 21 AND age < 26 THEN '21 - 25' END) AS \"21-25\",\n        COUNT(CASE WHEN age >= 26 AND age < 31 THEN '26 - 30' END) AS \"26-30\",\n        COUNT(CASE WHEN age >= 31 AND age < 36 THEN '31 - 35' END) AS \"31-35\",\n        COUNT(CASE WHEN age >= 36 AND age < 41 THEN '36 - 40' END) AS \"36-40\",\n        COUNT(CASE WHEN age >= 41 AND age < 46 THEN '41 - 45' END) AS \"41-45\",\n        COUNT(CASE WHEN age >= 46 AND age < 51 THEN '46 - 50' END) AS \"46-50\",\n        COUNT(CASE WHEN age >= 51 AND age < 56 THEN '51 - 55' END) AS \"51-55\",\n        COUNT(CASE WHEN age >= 56 AND age < 61 THEN '56 - 60' END) AS \"56-60\",\n        COUNT(CASE WHEN age >= 61 AND age < 66 THEN '61 - 65' END) AS \"61-65\",\n        COUNT(CASE WHEN age >= 66 AND age < 71 THEN '66 - 70' END) AS \"66-70\",\n        COUNT(CASE WHEN age >= 71 AND age < 76 THEN '71 - 75' END) AS \"71-75\",\n        COUNT(CASE WHEN age >= 76 AND age < 81 THEN '76 - 80' END) AS \"76-80\",\n        COUNT(CASE WHEN age >= 81 AND age < 86 THEN '81 - 85' END) AS \"81-85\",\n        COUNT(CASE WHEN age >= 86 AND age < 91 THEN '86 - 90' END) AS \"86-91\",\n        COUNT(CASE WHEN age >= 91 THEN 'Over 91' END) AS \">91\"\nFROM agetbl\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:29.851902Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.15, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.006644Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.011195Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\nalter table \"postgres\".\"public\".\"icd9vagehistogram\" rename to \"icd9vagehistogram__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\nalter table \"postgres\".\"public\".\"icd9vagehistogram\" rename to \"icd9vagehistogram__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.011428Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.012205Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.017374Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\nalter table \"postgres\".\"public\".\"icd9vagehistogram__dbt_tmp\" rename to \"icd9vagehistogram\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\nalter table \"postgres\".\"public\".\"icd9vagehistogram__dbt_tmp\" rename to \"icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.018253Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.019118Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.022399Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.022643Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.022858Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.023976Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vagehistogram", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vagehistogram\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.026199Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vagehistogram", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vagehistogram__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vagehistogram\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vagehistogram__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.026464Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.028623Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.032358Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vagehistogram: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.032965Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icd9vagehistogram", "execution_time": 0, "index": 34, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": "2022-07-18T00:10:29.829941", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "34 of 107 OK created table model public.icd9vagehistogram ...................... [\u001b[32mSELECT 1\u001b[0m in 0.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.034796Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:30.035478", "node_name": "icd9vagehistogram", "node_path": "cookbook/icd9vagehistogram.sql", "node_started_at": "2022-07-18T00:10:29.829941", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icd9vagehistogram"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.20295071601867676, "failures": null, "message": "SELECT 1", "node": {"alias": "icd9vagehistogram", "build_path": "target/run/mimic/models/cookbook/icd9vagehistogram.sql", "checksum": {"checksum": "794fd185c8ab35d3fe83c036ffdb6d5c03dfb640c5b3d1efe614c86338f93237", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icd9vagehistogram.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code and shows the output as a histogram with groups of age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgements: Made with help from Kris Kindle\n-- Reference: tompollard, alistairewj for code taken\n-- from age_hist.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH diatbl AS\n\t(\n\tSELECT DISTINCT ON (dia.subject_id) dia.subject_id, ad.admittime\n\tfrom diagnoses_icd dia\n\tINNER JOIN admissions ad\n\tON dia.subject_id = ad.subject_id\n\tWHERE dia.icd9_code\n\t-- 401% relates to hypertension\n\tLIKE '401%'\n\t),\nagetbl AS\n\t(\n\tSELECT dt.subject_id, DATETIME_DIFF(dt.admittime, p.dob, 'YEAR') AS age\n\tFROM diatbl dt\n\tINNER JOIN patients p\n\tON dt.subject_id = p.subject_id\n\t)\nSELECT\n        COUNT(*) AS TOTAL,\n        COUNT(CASE WHEN age >= 0 AND age < 16 THEN  '0 - 15' END) AS \"0-15\",\n        COUNT(CASE WHEN age >= 16 AND age < 21 THEN '16 - 20' END) AS \"16-20\",\n        COUNT(CASE WHEN age >= 21 AND age < 26 THEN '21 - 25' END) AS \"21-25\",\n        COUNT(CASE WHEN age >= 26 AND age < 31 THEN '26 - 30' END) AS \"26-30\",\n        COUNT(CASE WHEN age >= 31 AND age < 36 THEN '31 - 35' END) AS \"31-35\",\n        COUNT(CASE WHEN age >= 36 AND age < 41 THEN '36 - 40' END) AS \"36-40\",\n        COUNT(CASE WHEN age >= 41 AND age < 46 THEN '41 - 45' END) AS \"41-45\",\n        COUNT(CASE WHEN age >= 46 AND age < 51 THEN '46 - 50' END) AS \"46-50\",\n        COUNT(CASE WHEN age >= 51 AND age < 56 THEN '51 - 55' END) AS \"51-55\",\n        COUNT(CASE WHEN age >= 56 AND age < 61 THEN '56 - 60' END) AS \"56-60\",\n        COUNT(CASE WHEN age >= 61 AND age < 66 THEN '61 - 65' END) AS \"61-65\",\n        COUNT(CASE WHEN age >= 66 AND age < 71 THEN '66 - 70' END) AS \"66-70\",\n        COUNT(CASE WHEN age >= 71 AND age < 76 THEN '71 - 75' END) AS \"71-75\",\n        COUNT(CASE WHEN age >= 76 AND age < 81 THEN '76 - 80' END) AS \"76-80\",\n        COUNT(CASE WHEN age >= 81 AND age < 86 THEN '81 - 85' END) AS \"81-85\",\n        COUNT(CASE WHEN age >= 86 AND age < 91 THEN '86 - 90' END) AS \"86-91\",\n        COUNT(CASE WHEN age >= 91 THEN 'Over 91' END) AS \">91\"\nFROM agetbl", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.665298, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icd9vagehistogram"], "meta": {}, "name": "icd9vagehistogram", "original_file_path": "models/cookbook/icd9vagehistogram.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icd9vagehistogram.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with a specific icd9 code and shows the output as a histogram with groups of age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgements: Made with help from Kris Kindle\n-- Reference: tompollard, alistairewj for code taken\n-- from age_hist.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH diatbl AS\n\t(\n\tSELECT DISTINCT ON (dia.subject_id) dia.subject_id, ad.admittime\n\tfrom diagnoses_icd dia\n\tINNER JOIN admissions ad\n\tON dia.subject_id = ad.subject_id\n\tWHERE dia.icd9_code\n\t-- 401% relates to hypertension\n\tLIKE '401%'\n\t),\nagetbl AS\n\t(\n\tSELECT dt.subject_id, DATETIME_DIFF(dt.admittime, p.dob, 'YEAR') AS age\n\tFROM diatbl dt\n\tINNER JOIN patients p\n\tON dt.subject_id = p.subject_id\n\t)\nSELECT\n        COUNT(*) AS TOTAL,\n        COUNT(CASE WHEN age >= 0 AND age < 16 THEN  '0 - 15' END) AS \"0-15\",\n        COUNT(CASE WHEN age >= 16 AND age < 21 THEN '16 - 20' END) AS \"16-20\",\n        COUNT(CASE WHEN age >= 21 AND age < 26 THEN '21 - 25' END) AS \"21-25\",\n        COUNT(CASE WHEN age >= 26 AND age < 31 THEN '26 - 30' END) AS \"26-30\",\n        COUNT(CASE WHEN age >= 31 AND age < 36 THEN '31 - 35' END) AS \"31-35\",\n        COUNT(CASE WHEN age >= 36 AND age < 41 THEN '36 - 40' END) AS \"36-40\",\n        COUNT(CASE WHEN age >= 41 AND age < 46 THEN '41 - 45' END) AS \"41-45\",\n        COUNT(CASE WHEN age >= 46 AND age < 51 THEN '46 - 50' END) AS \"46-50\",\n        COUNT(CASE WHEN age >= 51 AND age < 56 THEN '51 - 55' END) AS \"51-55\",\n        COUNT(CASE WHEN age >= 56 AND age < 61 THEN '56 - 60' END) AS \"56-60\",\n        COUNT(CASE WHEN age >= 61 AND age < 66 THEN '61 - 65' END) AS \"61-65\",\n        COUNT(CASE WHEN age >= 66 AND age < 71 THEN '66 - 70' END) AS \"66-70\",\n        COUNT(CASE WHEN age >= 71 AND age < 76 THEN '71 - 75' END) AS \"71-75\",\n        COUNT(CASE WHEN age >= 76 AND age < 81 THEN '76 - 80' END) AS \"76-80\",\n        COUNT(CASE WHEN age >= 81 AND age < 86 THEN '81 - 85' END) AS \"81-85\",\n        COUNT(CASE WHEN age >= 86 AND age < 91 THEN '86 - 90' END) AS \"86-91\",\n        COUNT(CASE WHEN age >= 91 THEN 'Over 91' END) AS \">91\"\nFROM agetbl", "refs": [], "relation_name": "\"postgres\".\"public\".\"icd9vagehistogram\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icd9vagehistogram", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:29.834790Z", "name": "compile", "started_at": "2022-07-18T00:10:29.832143Z"}, {"completed_at": "2022-07-18T00:10:30.032278Z", "name": "execute", "started_at": "2022-07-18T00:10:29.835246Z"}]}, "unique_id": "model.mimic.icd9vagehistogram"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icd9vagehistogram", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.035871Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": "2022-07-18T00:10:30.036408", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icd9vicd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.036604Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icd9vicd9agelimited", "index": 35, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": "2022-07-18T00:10:30.036408", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "35 of 107 START table model public.icd9vicd9agelimited ......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.037237Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.038523Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": "2022-07-18T00:10:30.036408", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icd9vicd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.038886Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icd9vicd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.039224Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.040682Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.041378Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icd9vicd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.041794Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icd9vicd9agelimited\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.048998Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.050445Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.051457Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.052036Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.057546Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.058023Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 40 \n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Obesity vs Hypertension Age 40+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nINNER JOIN diagnoses_icd dib \nON dia.subject_id = dib.subject_id \nWHERE dia.icd9_code \n-- 278% relates to obesity\nLIKE '278%' \nAND dib.icd9_code \n-- 401% relates to hypertension\nLIKE '401%'\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 40 \n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Obesity vs Hypertension Age 40+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nINNER JOIN diagnoses_icd dib \nON dia.subject_id = dib.subject_id \nWHERE dia.icd9_code \n-- 278% relates to obesity\nLIKE '278%' \nAND dib.icd9_code \n-- 401% relates to hypertension\nLIKE '401%'\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.058305Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.33, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.33 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.387323Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.394896Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9agelimited\" rename to \"icd9vicd9agelimited__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9agelimited\" rename to \"icd9vicd9agelimited__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.395361Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.396654Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.401886Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_tmp\" rename to \"icd9vicd9agelimited\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_tmp\" rename to \"icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.402146Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.402863Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.406013Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.406262Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.406476Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.407588Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9agelimited\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.409657Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9agelimited", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9agelimited\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vicd9agelimited__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.409980Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.411733Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.415568Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9agelimited: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.415899Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icd9vicd9agelimited", "execution_time": 0, "index": 35, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": "2022-07-18T00:10:30.036408", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "35 of 107 OK created table model public.icd9vicd9agelimited .................... [\u001b[32mSELECT 1\u001b[0m in 0.38s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.416808Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:30.417291", "node_name": "icd9vicd9agelimited", "node_path": "cookbook/icd9vicd9agelimited.sql", "node_started_at": "2022-07-18T00:10:30.036408", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9agelimited"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.3785829544067383, "failures": null, "message": "SELECT 1", "node": {"alias": "icd9vicd9agelimited", "build_path": "target/run/mimic/models/cookbook/icd9vicd9agelimited.sql", "checksum": {"checksum": "ef269b68e7350f48e6d560fdbfc365aea59dfd5d71d79023f0b26c050b7c7366", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icd9vicd9agelimited.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 40 \n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Obesity vs Hypertension Age 40+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nINNER JOIN diagnoses_icd dib \nON dia.subject_id = dib.subject_id \nWHERE dia.icd9_code \n-- 278% relates to obesity\nLIKE '278%' \nAND dib.icd9_code \n-- 401% relates to hypertension\nLIKE '401%'", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6600842, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icd9vicd9agelimited"], "meta": {}, "name": "icd9vicd9agelimited", "original_file_path": "models/cookbook/icd9vicd9agelimited.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icd9vicd9agelimited.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes above a certain age\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Reference: tompollard, alistairewj, erinhong for code taken\n-- from sodium.sql on the MIMIC III github repository\n-- ------------------------------------------------------------------\n\nWITH agetbl AS \n\t(\n\tSELECT ad.subject_id \n\tFROM admissions ad \n\tINNER JOIN patients p \n\tON ad.subject_id = p.subject_id \n\tWHERE \n\tDATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 40 \n\tGROUP BY ad.subject_id\n\t) \nSELECT COUNT(DISTINCT dia.subject_id) \nAS \"Obesity vs Hypertension Age 40+\" \nfrom diagnoses_icd dia \nINNER JOIN agetbl \nON dia.subject_id = agetbl.subject_id \nINNER JOIN diagnoses_icd dib \nON dia.subject_id = dib.subject_id \nWHERE dia.icd9_code \n-- 278% relates to obesity\nLIKE '278%' \nAND dib.icd9_code \n-- 401% relates to hypertension\nLIKE '401%'", "refs": [], "relation_name": "\"postgres\".\"public\".\"icd9vicd9agelimited\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icd9vicd9agelimited", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:30.041252Z", "name": "compile", "started_at": "2022-07-18T00:10:30.039176Z"}, {"completed_at": "2022-07-18T00:10:30.415535Z", "name": "execute", "started_at": "2022-07-18T00:10:30.042060Z"}]}, "unique_id": "model.mimic.icd9vicd9agelimited"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icd9vicd9agelimited", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.417462Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": "2022-07-18T00:10:30.417915", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icd9vicd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.418044Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icd9vicd9count", "index": 36, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": "2022-07-18T00:10:30.417915", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "36 of 107 START table model public.icd9vicd9count .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.418816Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.419627Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": "2022-07-18T00:10:30.417915", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icd9vicd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.420139Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icd9vicd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.420600Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.421981Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.422678Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icd9vicd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.422992Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icd9vicd9count\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.434610Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.435550Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.435996Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.436266Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.442962Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.443347Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vicd9count__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT a.subject_id) \nAS \"Obesity and Dyslipidemia\" \nfrom diagnoses_icd a \nINNER JOIN diagnoses_icd b \nON a.subject_id = b.subject_id \nWHERE a.icd9_code\n-- 278% relates to obesity \nLIKE '278%' \nAND b.icd9_code \n-- 272 relates to Dyslipidemia\nLIKE '272%'\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\n\n\n  create  table \"postgres\".\"public\".\"icd9vicd9count__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT a.subject_id) \nAS \"Obesity and Dyslipidemia\" \nfrom diagnoses_icd a \nINNER JOIN diagnoses_icd b \nON a.subject_id = b.subject_id \nWHERE a.icd9_code\n-- 278% relates to obesity \nLIKE '278%' \nAND b.icd9_code \n-- 272 relates to Dyslipidemia\nLIKE '272%'\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.443650Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.03, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.03 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.476846Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.480832Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9count\" rename to \"icd9vicd9count__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9count\" rename to \"icd9vicd9count__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.481047Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.481867Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.489440Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9count__dbt_tmp\" rename to \"icd9vicd9count\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\nalter table \"postgres\".\"public\".\"icd9vicd9count__dbt_tmp\" rename to \"icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.489833Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.490623Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.494154Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.494487Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.494749Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.495897Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icd9vicd9count", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icd9vicd9count\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.498061Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icd9vicd9count", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vicd9count__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icd9vicd9count\"} */\ndrop table if exists \"postgres\".\"public\".\"icd9vicd9count__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.498461Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.502479Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.505483Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icd9vicd9count: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.505859Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icd9vicd9count", "execution_time": 0, "index": 36, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": "2022-07-18T00:10:30.417915", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "36 of 107 OK created table model public.icd9vicd9count ......................... [\u001b[32mSELECT 1\u001b[0m in 0.09s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.506781Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:30.507276", "node_name": "icd9vicd9count", "node_path": "cookbook/icd9vicd9count.sql", "node_started_at": "2022-07-18T00:10:30.417915", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icd9vicd9count"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.08727622032165527, "failures": null, "message": "SELECT 1", "node": {"alias": "icd9vicd9count", "build_path": "target/run/mimic/models/cookbook/icd9vicd9count.sql", "checksum": {"checksum": "f5ba6cf706cc7a80f6b42fcdfa03add9f3d5e3b8276957bcd8cda59a3a9f7aa2", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icd9vicd9count.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT a.subject_id) \nAS \"Obesity and Dyslipidemia\" \nfrom diagnoses_icd a \nINNER JOIN diagnoses_icd b \nON a.subject_id = b.subject_id \nWHERE a.icd9_code\n-- 278% relates to obesity \nLIKE '278%' \nAND b.icd9_code \n-- 272 relates to Dyslipidemia\nLIKE '272%'", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6886892, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icd9vicd9count"], "meta": {}, "name": "icd9vicd9count", "original_file_path": "models/cookbook/icd9vicd9count.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icd9vicd9count.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Count the number of patients with two specific icd9 codes\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n-- SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Acknowledgement: Credit goes to Kris Kindle\n-- ------------------------------------------------------------------\n\nSELECT COUNT(DISTINCT a.subject_id) \nAS \"Obesity and Dyslipidemia\" \nfrom diagnoses_icd a \nINNER JOIN diagnoses_icd b \nON a.subject_id = b.subject_id \nWHERE a.icd9_code\n-- 278% relates to obesity \nLIKE '278%' \nAND b.icd9_code \n-- 272 relates to Dyslipidemia\nLIKE '272%'", "refs": [], "relation_name": "\"postgres\".\"public\".\"icd9vicd9count\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icd9vicd9count", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:30.422615Z", "name": "compile", "started_at": "2022-07-18T00:10:30.420569Z"}, {"completed_at": "2022-07-18T00:10:30.505455Z", "name": "execute", "started_at": "2022-07-18T00:10:30.423266Z"}]}, "unique_id": "model.mimic.icd9vicd9count"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icd9vicd9count", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.507492Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": "2022-07-18T00:10:30.508009", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icustay_days", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.508107Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icustay_days", "index": 37, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": "2022-07-18T00:10:30.508009", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "37 of 107 START table model public.icustay_days ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.508840Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icustay_days", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icustay_days\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.509711Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": "2022-07-18T00:10:30.508009", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icustay_days", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.510000Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icustay_days", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.510312Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icustay_days\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.511496Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.512001Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icustay_days", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.512301Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icustay_days\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icustay_days\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.520172Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_days", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_days\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.521092Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_days", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_days: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.521571Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.522583Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.529117Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_days", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_days\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.529467Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_days", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_days\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_days__dbt_tmp\"\n  as (\n    -- ----------------------------------------------------------\n-- Create a table that counts each day spent in the ICU    --\n-- and assign a timestamp to the start and end of each day --\n-- ----------------------------------------------------------\n\n-- ----------\n-- Columns:\n-- ----------\n-- icustay_id\n-- intime\n-- outime\n-- icudayseq_asc:  Counting days since arrival in the ICU\n-- \t\t\t\t         0 = day of arrival in the ICU\n--                 1 = day 1 after arrival\n--                 2 = day 2 after arrival etc\n-- icudayseq_desc: Counting down to the day of discharge from the ICU\n--                 2 = day 2 before discharge etc\n--                 1 = day 1 before discharge\n-- \t\t\t\t         0 = day of discharge from the ICU\n-- startday: if day of arrival then intime, else midnight at start of day\n-- endday: if day of discharge then outtime, else midnight at end of day\n-- ----------\n\nDROP MATERIALIZED VIEW icustay_days;\nCREATE VIEW icustay_days AS\nWITH dayseq AS (\n\tSELECT icustay_id, intime, outtime,\n       GENERATE_SERIES(0,CEIL(los)::INT-1,1) AS icudayseq_asc,\n       GENERATE_SERIES(CEIL(los)::INT-1,0,-1) AS icudayseq_desc\n\tFROM icustays)\nSELECT icustay_id, intime, outtime,\n    icudayseq_asc, icudayseq_desc,\n    CASE WHEN icudayseq_asc = 0 THEN intime\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc DAY)\n        END AS startday,\n    CASE WHEN icudayseq_desc = 0 THEN OUTTIME\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc+1 DAY)\n\t\t\t\tEND AS endday\nFROM dayseq\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_days: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_days\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_days__dbt_tmp\"\n  as (\n    -- ----------------------------------------------------------\n-- Create a table that counts each day spent in the ICU    --\n-- and assign a timestamp to the start and end of each day --\n-- ----------------------------------------------------------\n\n-- ----------\n-- Columns:\n-- ----------\n-- icustay_id\n-- intime\n-- outime\n-- icudayseq_asc:  Counting days since arrival in the ICU\n-- \t\t\t\t         0 = day of arrival in the ICU\n--                 1 = day 1 after arrival\n--                 2 = day 2 after arrival etc\n-- icudayseq_desc: Counting down to the day of discharge from the ICU\n--                 2 = day 2 before discharge etc\n--                 1 = day 1 before discharge\n-- \t\t\t\t         0 = day of discharge from the ICU\n-- startday: if day of arrival then intime, else midnight at start of day\n-- endday: if day of discharge then outtime, else midnight at end of day\n-- ----------\n\nDROP MATERIALIZED VIEW icustay_days;\nCREATE VIEW icustay_days AS\nWITH dayseq AS (\n\tSELECT icustay_id, intime, outtime,\n       GENERATE_SERIES(0,CEIL(los)::INT-1,1) AS icudayseq_asc,\n       GENERATE_SERIES(CEIL(los)::INT-1,0,-1) AS icudayseq_desc\n\tFROM icustays)\nSELECT icustay_id, intime, outtime,\n    icudayseq_asc, icudayseq_desc,\n    CASE WHEN icudayseq_asc = 0 THEN intime\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc DAY)\n        END AS startday,\n    CASE WHEN icudayseq_desc = 0 THEN OUTTIME\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc+1 DAY)\n\t\t\t\tEND AS endday\nFROM dayseq\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.529637Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Postgres error: syntax error at or near \"DROP\"\nLINE 29: DROP MATERIALIZED VIEW icustay_days;\n         ^\n", "name": "Postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Postgres error: syntax error at or near \"DROP\"\nLINE 29: DROP MATERIALIZED VIEW icustay_days;\n         ^\n", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.530002Z", "type": "log_line"}
{"code": "E012", "data": {"conn_name": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_days: ROLLBACK", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.530181Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.530545Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_days: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.530726Z", "type": "log_line"}
{"code": "W002", "data": {"exc": "Database Error in model icustay_days (models/cookbook/icustay_days.sql)\n  syntax error at or near \"DROP\"\n  LINE 29: DROP MATERIALIZED VIEW icustay_days;\n           ^\n  compiled SQL at target/run/mimic/models/cookbook/icustay_days.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Database Error in model icustay_days (models/cookbook/icustay_days.sql)\n  syntax error at or near \"DROP\"\n  LINE 29: DROP MATERIALIZED VIEW icustay_days;\n           ^\n  compiled SQL at target/run/mimic/models/cookbook/icustay_days.sql", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.531317Z", "type": "log_line"}
{"code": "Q035", "data": {"description": "table model public.icustay_days", "execution_time": 0, "index": 37, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": "2022-07-18T00:10:30.508009", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "status": "error", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "37 of 107 ERROR creating table model public.icustay_days ....................... [\u001b[31mERROR\u001b[0m in 0.02s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.531708Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:30.532131", "node_name": "icustay_days", "node_path": "cookbook/icustay_days.sql", "node_started_at": "2022-07-18T00:10:30.508009", "node_status": "error", "resource_type": "model", "unique_id": "model.mimic.icustay_days"}, "run_result": {"adapter_response": {}, "agate_table": null, "execution_time": 0.022283315658569336, "failures": null, "message": "Database Error in model icustay_days (models/cookbook/icustay_days.sql)\n  syntax error at or near \"DROP\"\n  LINE 29: DROP MATERIALIZED VIEW icustay_days;\n           ^\n  compiled SQL at target/run/mimic/models/cookbook/icustay_days.sql", "node": {"alias": "icustay_days", "build_path": "target/run/mimic/models/cookbook/icustay_days.sql", "checksum": {"checksum": "e10c53aee7f5f2e12f9cd9fb7f547461a1b5d0b5245002673a8a336ffeaf0de2", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/icustay_days.sql", "compiled_sql": "-- ----------------------------------------------------------\n-- Create a table that counts each day spent in the ICU    --\n-- and assign a timestamp to the start and end of each day --\n-- ----------------------------------------------------------\n\n-- ----------\n-- Columns:\n-- ----------\n-- icustay_id\n-- intime\n-- outime\n-- icudayseq_asc:  Counting days since arrival in the ICU\n-- \t\t\t\t         0 = day of arrival in the ICU\n--                 1 = day 1 after arrival\n--                 2 = day 2 after arrival etc\n-- icudayseq_desc: Counting down to the day of discharge from the ICU\n--                 2 = day 2 before discharge etc\n--                 1 = day 1 before discharge\n-- \t\t\t\t         0 = day of discharge from the ICU\n-- startday: if day of arrival then intime, else midnight at start of day\n-- endday: if day of discharge then outtime, else midnight at end of day\n-- ----------\n\nDROP MATERIALIZED VIEW icustay_days;\nCREATE VIEW icustay_days AS\nWITH dayseq AS (\n\tSELECT icustay_id, intime, outtime,\n       GENERATE_SERIES(0,CEIL(los)::INT-1,1) AS icudayseq_asc,\n       GENERATE_SERIES(CEIL(los)::INT-1,0,-1) AS icudayseq_desc\n\tFROM icustays)\nSELECT icustay_id, intime, outtime,\n    icudayseq_asc, icudayseq_desc,\n    CASE WHEN icudayseq_asc = 0 THEN intime\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc DAY)\n        END AS startday,\n    CASE WHEN icudayseq_desc = 0 THEN OUTTIME\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc+1 DAY)\n\t\t\t\tEND AS endday\nFROM dayseq", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.657773, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "icustay_days"], "meta": {}, "name": "icustay_days", "original_file_path": "models/cookbook/icustay_days.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/icustay_days.sql", "raw_sql": "-- ----------------------------------------------------------\n-- Create a table that counts each day spent in the ICU    --\n-- and assign a timestamp to the start and end of each day --\n-- ----------------------------------------------------------\n\n-- ----------\n-- Columns:\n-- ----------\n-- icustay_id\n-- intime\n-- outime\n-- icudayseq_asc:  Counting days since arrival in the ICU\n-- \t\t\t\t         0 = day of arrival in the ICU\n--                 1 = day 1 after arrival\n--                 2 = day 2 after arrival etc\n-- icudayseq_desc: Counting down to the day of discharge from the ICU\n--                 2 = day 2 before discharge etc\n--                 1 = day 1 before discharge\n-- \t\t\t\t         0 = day of discharge from the ICU\n-- startday: if day of arrival then intime, else midnight at start of day\n-- endday: if day of discharge then outtime, else midnight at end of day\n-- ----------\n\nDROP MATERIALIZED VIEW icustay_days;\nCREATE VIEW icustay_days AS\nWITH dayseq AS (\n\tSELECT icustay_id, intime, outtime,\n       GENERATE_SERIES(0,CEIL(los)::INT-1,1) AS icudayseq_asc,\n       GENERATE_SERIES(CEIL(los)::INT-1,0,-1) AS icudayseq_desc\n\tFROM icustays)\nSELECT icustay_id, intime, outtime,\n    icudayseq_asc, icudayseq_desc,\n    CASE WHEN icudayseq_asc = 0 THEN intime\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc DAY)\n        END AS startday,\n    CASE WHEN icudayseq_desc = 0 THEN OUTTIME\n        ELSE DATETIME_ADD(date_trunc('day', intime), INTERVAL icudayseq_asc+1 DAY)\n\t\t\t\tEND AS endday\nFROM dayseq", "refs": [], "relation_name": "\"postgres\".\"public\".\"icustay_days\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icustay_days", "unrendered_config": {"materialized": "table"}}, "status": "error", "thread_id": "Thread-1", "timing": []}, "unique_id": "model.mimic.icustay_days"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icustay_days", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.532333Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": "2022-07-18T00:10:30.532671", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icustay_detail", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.532710Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icustay_detail", "index": 38, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": "2022-07-18T00:10:30.532671", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "38 of 107 START table model public.icustay_detail .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.532962Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.534243Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": "2022-07-18T00:10:30.532671", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icustay_detail", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.534421Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icustay_detail", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.534600Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.536109Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.536512Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icustay_detail", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.536687Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icustay_detail\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.545185Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.546089Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.546401Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.546652Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.554153Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.554523Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_detail__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Detailed information on ICUSTAY_ID\n-- Description: This query provides a useful set of information regarding patient\n--              ICU stays. The information is combined from the admissions, patients, and\n--              icustays tables. It includes age, length of stay, sequence, and expiry flags.\n-- MIMIC version: MIMIC-III v1.3\n-- ------------------------------------------------------------------\n\n-- This query extracts useful demographic/administrative information for patient ICU stays\n\nSELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n\n-- patient level factors\n, pat.gender, pat.dod\n\n-- hospital level factors\n, adm.admittime, adm.dischtime\n, DATETIME_DIFF(adm.dischtime, adm.admittime, 'DAY') as los_hospital\n, DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as admission_age\n, adm.ethnicity\n, case when ethnicity in\n  (\n       'WHITE' --  40996\n     , 'WHITE - RUSSIAN' --    164\n     , 'WHITE - OTHER EUROPEAN' --     81\n     , 'WHITE - BRAZILIAN' --     59\n     , 'WHITE - EASTERN EUROPEAN' --     25\n  ) then 'white'\n  when ethnicity in\n  (\n      'BLACK/AFRICAN AMERICAN' --   5440\n    , 'BLACK/CAPE VERDEAN' --    200\n    , 'BLACK/HAITIAN' --    101\n    , 'BLACK/AFRICAN' --     44\n    , 'CARIBBEAN ISLAND' --      9\n  ) then 'black'\n  when ethnicity in\n    (\n      'HISPANIC OR LATINO' --   1696\n    , 'HISPANIC/LATINO - PUERTO RICAN' --    232\n    , 'HISPANIC/LATINO - DOMINICAN' --     78\n    , 'HISPANIC/LATINO - GUATEMALAN' --     40\n    , 'HISPANIC/LATINO - CUBAN' --     24\n    , 'HISPANIC/LATINO - SALVADORAN' --     19\n    , 'HISPANIC/LATINO - CENTRAL AMERICAN (OTHER)' --     13\n    , 'HISPANIC/LATINO - MEXICAN' --     13\n    , 'HISPANIC/LATINO - COLOMBIAN' --      9\n    , 'HISPANIC/LATINO - HONDURAN' --      4\n  ) then 'hispanic'\n  when ethnicity in\n  (\n      'ASIAN' --   1509\n    , 'ASIAN - CHINESE' --    277\n    , 'ASIAN - ASIAN INDIAN' --     85\n    , 'ASIAN - VIETNAMESE' --     53\n    , 'ASIAN - FILIPINO' --     25\n    , 'ASIAN - CAMBODIAN' --     17\n    , 'ASIAN - OTHER' --     17\n    , 'ASIAN - KOREAN' --     13\n    , 'ASIAN - JAPANESE' --      7\n    , 'ASIAN - THAI' --      4\n  ) then 'asian'\n  when ethnicity in\n  (\n       'AMERICAN INDIAN/ALASKA NATIVE' --     51\n     , 'AMERICAN INDIAN/ALASKA NATIVE FEDERALLY RECOGNIZED TRIBE' --      3\n  ) then 'native'\n  when ethnicity in\n  (\n      'UNKNOWN/NOT SPECIFIED' --   4523\n    , 'UNABLE TO OBTAIN' --    814\n    , 'PATIENT DECLINED TO ANSWER' --    559\n  ) then 'unknown'\n  else 'other' end as ethnicity_grouped\n  -- , 'OTHER' --   1512\n  -- , 'MULTI RACE ETHNICITY' --    130\n  -- , 'PORTUGUESE' --     61\n  -- , 'MIDDLE EASTERN' --     43\n  -- , 'NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER' --     18\n  -- , 'SOUTH AMERICAN' --      8\n, adm.hospital_expire_flag\n, DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) AS hospstay_seq\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) = 1 THEN True\n    ELSE False END AS first_hosp_stay\n\n-- icu level factors\n, ie.intime, ie.outtime\n, DATETIME_DIFF(ie.outtime, ie.intime, 'DAY') as los_icu\n, DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) AS icustay_seq\n\n-- first ICU stay *for the current hospitalization*\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) = 1 THEN True\n    ELSE False END AS first_icu_stay\n\nFROM icustays ie\nINNER JOIN admissions adm\n    ON ie.hadm_id = adm.hadm_id\nINNER JOIN patients pat\n    ON ie.subject_id = pat.subject_id\nWHERE adm.has_chartevents_data = 1\nORDER BY ie.subject_id, adm.admittime, ie.intime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_detail__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Detailed information on ICUSTAY_ID\n-- Description: This query provides a useful set of information regarding patient\n--              ICU stays. The information is combined from the admissions, patients, and\n--              icustays tables. It includes age, length of stay, sequence, and expiry flags.\n-- MIMIC version: MIMIC-III v1.3\n-- ------------------------------------------------------------------\n\n-- This query extracts useful demographic/administrative information for patient ICU stays\n\nSELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n\n-- patient level factors\n, pat.gender, pat.dod\n\n-- hospital level factors\n, adm.admittime, adm.dischtime\n, DATETIME_DIFF(adm.dischtime, adm.admittime, 'DAY') as los_hospital\n, DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as admission_age\n, adm.ethnicity\n, case when ethnicity in\n  (\n       'WHITE' --  40996\n     , 'WHITE - RUSSIAN' --    164\n     , 'WHITE - OTHER EUROPEAN' --     81\n     , 'WHITE - BRAZILIAN' --     59\n     , 'WHITE - EASTERN EUROPEAN' --     25\n  ) then 'white'\n  when ethnicity in\n  (\n      'BLACK/AFRICAN AMERICAN' --   5440\n    , 'BLACK/CAPE VERDEAN' --    200\n    , 'BLACK/HAITIAN' --    101\n    , 'BLACK/AFRICAN' --     44\n    , 'CARIBBEAN ISLAND' --      9\n  ) then 'black'\n  when ethnicity in\n    (\n      'HISPANIC OR LATINO' --   1696\n    , 'HISPANIC/LATINO - PUERTO RICAN' --    232\n    , 'HISPANIC/LATINO - DOMINICAN' --     78\n    , 'HISPANIC/LATINO - GUATEMALAN' --     40\n    , 'HISPANIC/LATINO - CUBAN' --     24\n    , 'HISPANIC/LATINO - SALVADORAN' --     19\n    , 'HISPANIC/LATINO - CENTRAL AMERICAN (OTHER)' --     13\n    , 'HISPANIC/LATINO - MEXICAN' --     13\n    , 'HISPANIC/LATINO - COLOMBIAN' --      9\n    , 'HISPANIC/LATINO - HONDURAN' --      4\n  ) then 'hispanic'\n  when ethnicity in\n  (\n      'ASIAN' --   1509\n    , 'ASIAN - CHINESE' --    277\n    , 'ASIAN - ASIAN INDIAN' --     85\n    , 'ASIAN - VIETNAMESE' --     53\n    , 'ASIAN - FILIPINO' --     25\n    , 'ASIAN - CAMBODIAN' --     17\n    , 'ASIAN - OTHER' --     17\n    , 'ASIAN - KOREAN' --     13\n    , 'ASIAN - JAPANESE' --      7\n    , 'ASIAN - THAI' --      4\n  ) then 'asian'\n  when ethnicity in\n  (\n       'AMERICAN INDIAN/ALASKA NATIVE' --     51\n     , 'AMERICAN INDIAN/ALASKA NATIVE FEDERALLY RECOGNIZED TRIBE' --      3\n  ) then 'native'\n  when ethnicity in\n  (\n      'UNKNOWN/NOT SPECIFIED' --   4523\n    , 'UNABLE TO OBTAIN' --    814\n    , 'PATIENT DECLINED TO ANSWER' --    559\n  ) then 'unknown'\n  else 'other' end as ethnicity_grouped\n  -- , 'OTHER' --   1512\n  -- , 'MULTI RACE ETHNICITY' --    130\n  -- , 'PORTUGUESE' --     61\n  -- , 'MIDDLE EASTERN' --     43\n  -- , 'NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER' --     18\n  -- , 'SOUTH AMERICAN' --      8\n, adm.hospital_expire_flag\n, DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) AS hospstay_seq\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) = 1 THEN True\n    ELSE False END AS first_hosp_stay\n\n-- icu level factors\n, ie.intime, ie.outtime\n, DATETIME_DIFF(ie.outtime, ie.intime, 'DAY') as los_icu\n, DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) AS icustay_seq\n\n-- first ICU stay *for the current hospitalization*\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) = 1 THEN True\n    ELSE False END AS first_icu_stay\n\nFROM icustays ie\nINNER JOIN admissions adm\n    ON ie.hadm_id = adm.hadm_id\nINNER JOIN patients pat\n    ON ie.subject_id = pat.subject_id\nWHERE adm.has_chartevents_data = 1\nORDER BY ie.subject_id, adm.admittime, ie.intime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:30.554685Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.56, "status": "SELECT 61051"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61051 in 0.56 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.111273Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.116359Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\nalter table \"postgres\".\"public\".\"icustay_detail\" rename to \"icustay_detail__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\nalter table \"postgres\".\"public\".\"icustay_detail\" rename to \"icustay_detail__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.116589Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.117894Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.121269Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\nalter table \"postgres\".\"public\".\"icustay_detail__dbt_tmp\" rename to \"icustay_detail\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\nalter table \"postgres\".\"public\".\"icustay_detail__dbt_tmp\" rename to \"icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.121474Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.122352Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.125842Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.126090Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.126300Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.130654Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_detail", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_detail\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.132591Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_detail", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_detail__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_detail\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_detail__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.132851Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.135611Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.140775Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_detail: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.141064Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icustay_detail", "execution_time": 0, "index": 38, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": "2022-07-18T00:10:30.532671", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "status": "SELECT 61051", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "38 of 107 OK created table model public.icustay_detail ......................... [\u001b[32mSELECT 61051\u001b[0m in 0.61s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.141941Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:31.142577", "node_name": "icustay_detail", "node_path": "demographics/icustay_detail.sql", "node_started_at": "2022-07-18T00:10:30.532671", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icustay_detail"}, "run_result": {"adapter_response": {"_message": "SELECT 61051", "code": "SELECT", "rows_affected": 61051}, "agate_table": null, "execution_time": 0.6077594757080078, "failures": null, "message": "SELECT 61051", "node": {"alias": "icustay_detail", "build_path": "target/run/mimic/models/demographics/icustay_detail.sql", "checksum": {"checksum": "5a68c102e59070ba09882d9c62fd91986437ec5294a38f9f83ceca39815ad698", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/demographics/icustay_detail.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Detailed information on ICUSTAY_ID\n-- Description: This query provides a useful set of information regarding patient\n--              ICU stays. The information is combined from the admissions, patients, and\n--              icustays tables. It includes age, length of stay, sequence, and expiry flags.\n-- MIMIC version: MIMIC-III v1.3\n-- ------------------------------------------------------------------\n\n-- This query extracts useful demographic/administrative information for patient ICU stays\n\nSELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n\n-- patient level factors\n, pat.gender, pat.dod\n\n-- hospital level factors\n, adm.admittime, adm.dischtime\n, DATETIME_DIFF(adm.dischtime, adm.admittime, 'DAY') as los_hospital\n, DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as admission_age\n, adm.ethnicity\n, case when ethnicity in\n  (\n       'WHITE' --  40996\n     , 'WHITE - RUSSIAN' --    164\n     , 'WHITE - OTHER EUROPEAN' --     81\n     , 'WHITE - BRAZILIAN' --     59\n     , 'WHITE - EASTERN EUROPEAN' --     25\n  ) then 'white'\n  when ethnicity in\n  (\n      'BLACK/AFRICAN AMERICAN' --   5440\n    , 'BLACK/CAPE VERDEAN' --    200\n    , 'BLACK/HAITIAN' --    101\n    , 'BLACK/AFRICAN' --     44\n    , 'CARIBBEAN ISLAND' --      9\n  ) then 'black'\n  when ethnicity in\n    (\n      'HISPANIC OR LATINO' --   1696\n    , 'HISPANIC/LATINO - PUERTO RICAN' --    232\n    , 'HISPANIC/LATINO - DOMINICAN' --     78\n    , 'HISPANIC/LATINO - GUATEMALAN' --     40\n    , 'HISPANIC/LATINO - CUBAN' --     24\n    , 'HISPANIC/LATINO - SALVADORAN' --     19\n    , 'HISPANIC/LATINO - CENTRAL AMERICAN (OTHER)' --     13\n    , 'HISPANIC/LATINO - MEXICAN' --     13\n    , 'HISPANIC/LATINO - COLOMBIAN' --      9\n    , 'HISPANIC/LATINO - HONDURAN' --      4\n  ) then 'hispanic'\n  when ethnicity in\n  (\n      'ASIAN' --   1509\n    , 'ASIAN - CHINESE' --    277\n    , 'ASIAN - ASIAN INDIAN' --     85\n    , 'ASIAN - VIETNAMESE' --     53\n    , 'ASIAN - FILIPINO' --     25\n    , 'ASIAN - CAMBODIAN' --     17\n    , 'ASIAN - OTHER' --     17\n    , 'ASIAN - KOREAN' --     13\n    , 'ASIAN - JAPANESE' --      7\n    , 'ASIAN - THAI' --      4\n  ) then 'asian'\n  when ethnicity in\n  (\n       'AMERICAN INDIAN/ALASKA NATIVE' --     51\n     , 'AMERICAN INDIAN/ALASKA NATIVE FEDERALLY RECOGNIZED TRIBE' --      3\n  ) then 'native'\n  when ethnicity in\n  (\n      'UNKNOWN/NOT SPECIFIED' --   4523\n    , 'UNABLE TO OBTAIN' --    814\n    , 'PATIENT DECLINED TO ANSWER' --    559\n  ) then 'unknown'\n  else 'other' end as ethnicity_grouped\n  -- , 'OTHER' --   1512\n  -- , 'MULTI RACE ETHNICITY' --    130\n  -- , 'PORTUGUESE' --     61\n  -- , 'MIDDLE EASTERN' --     43\n  -- , 'NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER' --     18\n  -- , 'SOUTH AMERICAN' --      8\n, adm.hospital_expire_flag\n, DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) AS hospstay_seq\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) = 1 THEN True\n    ELSE False END AS first_hosp_stay\n\n-- icu level factors\n, ie.intime, ie.outtime\n, DATETIME_DIFF(ie.outtime, ie.intime, 'DAY') as los_icu\n, DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) AS icustay_seq\n\n-- first ICU stay *for the current hospitalization*\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) = 1 THEN True\n    ELSE False END AS first_icu_stay\n\nFROM icustays ie\nINNER JOIN admissions adm\n    ON ie.hadm_id = adm.hadm_id\nINNER JOIN patients pat\n    ON ie.subject_id = pat.subject_id\nWHERE adm.has_chartevents_data = 1\nORDER BY ie.subject_id, adm.admittime, ie.intime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6304195, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "demographics", "icustay_detail"], "meta": {}, "name": "icustay_detail", "original_file_path": "models/demographics/icustay_detail.sql", "package_name": "mimic", "patch_path": null, "path": "demographics/icustay_detail.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Detailed information on ICUSTAY_ID\n-- Description: This query provides a useful set of information regarding patient\n--              ICU stays. The information is combined from the admissions, patients, and\n--              icustays tables. It includes age, length of stay, sequence, and expiry flags.\n-- MIMIC version: MIMIC-III v1.3\n-- ------------------------------------------------------------------\n\n-- This query extracts useful demographic/administrative information for patient ICU stays\n\nSELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n\n-- patient level factors\n, pat.gender, pat.dod\n\n-- hospital level factors\n, adm.admittime, adm.dischtime\n, DATETIME_DIFF(adm.dischtime, adm.admittime, 'DAY') as los_hospital\n, DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as admission_age\n, adm.ethnicity\n, case when ethnicity in\n  (\n       'WHITE' --  40996\n     , 'WHITE - RUSSIAN' --    164\n     , 'WHITE - OTHER EUROPEAN' --     81\n     , 'WHITE - BRAZILIAN' --     59\n     , 'WHITE - EASTERN EUROPEAN' --     25\n  ) then 'white'\n  when ethnicity in\n  (\n      'BLACK/AFRICAN AMERICAN' --   5440\n    , 'BLACK/CAPE VERDEAN' --    200\n    , 'BLACK/HAITIAN' --    101\n    , 'BLACK/AFRICAN' --     44\n    , 'CARIBBEAN ISLAND' --      9\n  ) then 'black'\n  when ethnicity in\n    (\n      'HISPANIC OR LATINO' --   1696\n    , 'HISPANIC/LATINO - PUERTO RICAN' --    232\n    , 'HISPANIC/LATINO - DOMINICAN' --     78\n    , 'HISPANIC/LATINO - GUATEMALAN' --     40\n    , 'HISPANIC/LATINO - CUBAN' --     24\n    , 'HISPANIC/LATINO - SALVADORAN' --     19\n    , 'HISPANIC/LATINO - CENTRAL AMERICAN (OTHER)' --     13\n    , 'HISPANIC/LATINO - MEXICAN' --     13\n    , 'HISPANIC/LATINO - COLOMBIAN' --      9\n    , 'HISPANIC/LATINO - HONDURAN' --      4\n  ) then 'hispanic'\n  when ethnicity in\n  (\n      'ASIAN' --   1509\n    , 'ASIAN - CHINESE' --    277\n    , 'ASIAN - ASIAN INDIAN' --     85\n    , 'ASIAN - VIETNAMESE' --     53\n    , 'ASIAN - FILIPINO' --     25\n    , 'ASIAN - CAMBODIAN' --     17\n    , 'ASIAN - OTHER' --     17\n    , 'ASIAN - KOREAN' --     13\n    , 'ASIAN - JAPANESE' --      7\n    , 'ASIAN - THAI' --      4\n  ) then 'asian'\n  when ethnicity in\n  (\n       'AMERICAN INDIAN/ALASKA NATIVE' --     51\n     , 'AMERICAN INDIAN/ALASKA NATIVE FEDERALLY RECOGNIZED TRIBE' --      3\n  ) then 'native'\n  when ethnicity in\n  (\n      'UNKNOWN/NOT SPECIFIED' --   4523\n    , 'UNABLE TO OBTAIN' --    814\n    , 'PATIENT DECLINED TO ANSWER' --    559\n  ) then 'unknown'\n  else 'other' end as ethnicity_grouped\n  -- , 'OTHER' --   1512\n  -- , 'MULTI RACE ETHNICITY' --    130\n  -- , 'PORTUGUESE' --     61\n  -- , 'MIDDLE EASTERN' --     43\n  -- , 'NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER' --     18\n  -- , 'SOUTH AMERICAN' --      8\n, adm.hospital_expire_flag\n, DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) AS hospstay_seq\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY adm.subject_id ORDER BY adm.admittime) = 1 THEN True\n    ELSE False END AS first_hosp_stay\n\n-- icu level factors\n, ie.intime, ie.outtime\n, DATETIME_DIFF(ie.outtime, ie.intime, 'DAY') as los_icu\n, DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) AS icustay_seq\n\n-- first ICU stay *for the current hospitalization*\n, CASE\n    WHEN DENSE_RANK() OVER (PARTITION BY ie.hadm_id ORDER BY ie.intime) = 1 THEN True\n    ELSE False END AS first_icu_stay\n\nFROM icustays ie\nINNER JOIN admissions adm\n    ON ie.hadm_id = adm.hadm_id\nINNER JOIN patients pat\n    ON ie.subject_id = pat.subject_id\nWHERE adm.has_chartevents_data = 1\nORDER BY ie.subject_id, adm.admittime, ie.intime", "refs": [], "relation_name": "\"postgres\".\"public\".\"icustay_detail\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icustay_detail", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:30.536469Z", "name": "compile", "started_at": "2022-07-18T00:10:30.534583Z"}, {"completed_at": "2022-07-18T00:10:31.140738Z", "name": "execute", "started_at": "2022-07-18T00:10:30.536839Z"}]}, "unique_id": "model.mimic.icustay_detail"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icustay_detail", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.142776Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": "2022-07-18T00:10:31.143271", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icustay_times", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.143376Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icustay_times", "index": 39, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": "2022-07-18T00:10:31.143271", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "39 of 107 START table model public.icustay_times ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.144231Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.145153Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": "2022-07-18T00:10:31.143271", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icustay_times", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.145375Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icustay_times", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.145515Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.147019Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.147575Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icustay_times", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.147919Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icustay_times\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.159002Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.159991Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.160439Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.160664Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.168333Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.168588Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_times__dbt_tmp\"\n  as (\n    -- create a table which has fuzzy boundaries on hospital admission\n-- involves first creating a lag/lead version of disch/admit time\nwith h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  FROM admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24 HOUR'))\n          then DATETIME_SUB(h.admittime, (DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2  || ' SECOND')::interval)\n      else DATETIME_SUB(h.admittime, INTERVAL '12 HOUR')\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24 HOUR'))\n          then DATETIME_ADD(h.dischtime, (DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 || ' SECOND')::interval)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12 HOUR'))\n      end as data_end\n    from h\n)\n-- get first/last heart rate measurement during hospitalization for each ICUSTAY_ID\n, t1 as\n(\nselect ce.icustay_id\n, min(charttime) as intime_hr\n, max(charttime) as outtime_hr\nFROM chartevents ce\n-- very loose join to admissions to ensure charttime is near patient admission\ninner join adm\n  on ce.hadm_id = adm.hadm_id\n  and ce.charttime >= adm.data_start\n  and ce.charttime <  adm.data_end\n-- only look at heart rate\nwhere ce.itemid in (211,220045)\ngroup by ce.icustay_id\n)\n-- add in subject_id/hadm_id\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  , t1.intime_hr\n  , t1.outtime_hr\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_times__dbt_tmp\"\n  as (\n    -- create a table which has fuzzy boundaries on hospital admission\n-- involves first creating a lag/lead version of disch/admit time\nwith h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  FROM admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24 HOUR'))\n          then DATETIME_SUB(h.admittime, (DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2  || ' SECOND')::interval)\n      else DATETIME_SUB(h.admittime, INTERVAL '12 HOUR')\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24 HOUR'))\n          then DATETIME_ADD(h.dischtime, (DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 || ' SECOND')::interval)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12 HOUR'))\n      end as data_end\n    from h\n)\n-- get first/last heart rate measurement during hospitalization for each ICUSTAY_ID\n, t1 as\n(\nselect ce.icustay_id\n, min(charttime) as intime_hr\n, max(charttime) as outtime_hr\nFROM chartevents ce\n-- very loose join to admissions to ensure charttime is near patient admission\ninner join adm\n  on ce.hadm_id = adm.hadm_id\n  and ce.charttime >= adm.data_start\n  and ce.charttime <  adm.data_end\n-- only look at heart rate\nwhere ce.itemid in (211,220045)\ngroup by ce.icustay_id\n)\n-- add in subject_id/hadm_id\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  , t1.intime_hr\n  , t1.outtime_hr\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.168712Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.24, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.24 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.409544Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.417780Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\nalter table \"postgres\".\"public\".\"icustay_times\" rename to \"icustay_times__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\nalter table \"postgres\".\"public\".\"icustay_times\" rename to \"icustay_times__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.418193Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.419136Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.422990Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\nalter table \"postgres\".\"public\".\"icustay_times__dbt_tmp\" rename to \"icustay_times\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\nalter table \"postgres\".\"public\".\"icustay_times__dbt_tmp\" rename to \"icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.423223Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.424042Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.427274Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.427499Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.427735Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.433134Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_times", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_times\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.435749Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_times", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_times__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_times\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_times__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.435979Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.438364Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.441531Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_times: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.441893Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icustay_times", "execution_time": 0, "index": 39, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": "2022-07-18T00:10:31.143271", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "39 of 107 OK created table model public.icustay_times .......................... [\u001b[32mSELECT 61532\u001b[0m in 0.30s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.443030Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:31.443561", "node_name": "icustay_times", "node_path": "demographics/icustay_times.sql", "node_started_at": "2022-07-18T00:10:31.143271", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icustay_times"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.29794883728027344, "failures": null, "message": "SELECT 61532", "node": {"alias": "icustay_times", "build_path": "target/run/mimic/models/demographics/icustay_times.sql", "checksum": {"checksum": "14b1be78e3ea09246b2d75233578ed2e304725c4a583351a1c43f8f45d204191", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/demographics/icustay_times.sql", "compiled_sql": "-- create a table which has fuzzy boundaries on hospital admission\n-- involves first creating a lag/lead version of disch/admit time\nwith h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  FROM admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24 HOUR'))\n          then DATETIME_SUB(h.admittime, (DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2  || ' SECOND')::interval)\n      else DATETIME_SUB(h.admittime, INTERVAL '12 HOUR')\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24 HOUR'))\n          then DATETIME_ADD(h.dischtime, (DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 || ' SECOND')::interval)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12 HOUR'))\n      end as data_end\n    from h\n)\n-- get first/last heart rate measurement during hospitalization for each ICUSTAY_ID\n, t1 as\n(\nselect ce.icustay_id\n, min(charttime) as intime_hr\n, max(charttime) as outtime_hr\nFROM chartevents ce\n-- very loose join to admissions to ensure charttime is near patient admission\ninner join adm\n  on ce.hadm_id = adm.hadm_id\n  and ce.charttime >= adm.data_start\n  and ce.charttime <  adm.data_end\n-- only look at heart rate\nwhere ce.itemid in (211,220045)\ngroup by ce.icustay_id\n)\n-- add in subject_id/hadm_id\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  , t1.intime_hr\n  , t1.outtime_hr\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.632813, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "demographics", "icustay_times"], "meta": {}, "name": "icustay_times", "original_file_path": "models/demographics/icustay_times.sql", "package_name": "mimic", "patch_path": null, "path": "demographics/icustay_times.sql", "raw_sql": "-- create a table which has fuzzy boundaries on hospital admission\n-- involves first creating a lag/lead version of disch/admit time\nwith h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  FROM admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24 HOUR'))\n          then DATETIME_SUB(h.admittime, (DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2  || ' SECOND')::interval)\n      else DATETIME_SUB(h.admittime, INTERVAL '12 HOUR')\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24 HOUR'))\n          then DATETIME_ADD(h.dischtime, (DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 || ' SECOND')::interval)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12 HOUR'))\n      end as data_end\n    from h\n)\n-- get first/last heart rate measurement during hospitalization for each ICUSTAY_ID\n, t1 as\n(\nselect ce.icustay_id\n, min(charttime) as intime_hr\n, max(charttime) as outtime_hr\nFROM chartevents ce\n-- very loose join to admissions to ensure charttime is near patient admission\ninner join adm\n  on ce.hadm_id = adm.hadm_id\n  and ce.charttime >= adm.data_start\n  and ce.charttime <  adm.data_end\n-- only look at heart rate\nwhere ce.itemid in (211,220045)\ngroup by ce.icustay_id\n)\n-- add in subject_id/hadm_id\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  , t1.intime_hr\n  , t1.outtime_hr\nFROM icustays ie\nleft join t1\n  on ie.icustay_id = t1.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"icustay_times\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icustay_times", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:31.147506Z", "name": "compile", "started_at": "2022-07-18T00:10:31.145497Z"}, {"completed_at": "2022-07-18T00:10:31.441497Z", "name": "execute", "started_at": "2022-07-18T00:10:31.148154Z"}]}, "unique_id": "model.mimic.icustay_times"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icustay_times", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.443708Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": "2022-07-18T00:10:31.444078", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.isuprel_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.444181Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.isuprel_durations", "index": 40, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": "2022-07-18T00:10:31.444078", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "40 of 107 START table model public.isuprel_durations ........................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.444938Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.445982Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": "2022-07-18T00:10:31.444078", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.isuprel_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.446375Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.isuprel_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.446708Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.448152Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.448727Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.isuprel_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.449049Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.isuprel_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.464505Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.465528Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.466339Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.466609Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.472176Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.472739Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"isuprel_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of isuprel administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30046 then 1 else 0 end) as vaso -- Isuprel\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30046 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30046 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30046 then rate else null end) as vaso_rate\n    , max(case when itemid = 30046 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30046 -- Isuprel\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 227692 -- Isuprel\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"isuprel_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of isuprel administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30046 then 1 else 0 end) as vaso -- Isuprel\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30046 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30046 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30046 then rate else null end) as vaso_rate\n    , max(case when itemid = 30046 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30046 -- Isuprel\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 227692 -- Isuprel\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.472934Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 26"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 26 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.484881Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.490761Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\nalter table \"postgres\".\"public\".\"isuprel_durations\" rename to \"isuprel_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\nalter table \"postgres\".\"public\".\"isuprel_durations\" rename to \"isuprel_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.491011Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.492150Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.497536Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\nalter table \"postgres\".\"public\".\"isuprel_durations__dbt_tmp\" rename to \"isuprel_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\nalter table \"postgres\".\"public\".\"isuprel_durations__dbt_tmp\" rename to \"isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.499428Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.500823Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.504872Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.505124Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.505383Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.506657Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.isuprel_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.isuprel_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.508726Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.isuprel_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"isuprel_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.isuprel_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"isuprel_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.508953Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.511226Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.514157Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.isuprel_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.514978Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.isuprel_durations", "execution_time": 0, "index": 40, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": "2022-07-18T00:10:31.444078", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "status": "SELECT 26", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "40 of 107 OK created table model public.isuprel_durations ...................... [\u001b[32mSELECT 26\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.517535Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:31.518664", "node_name": "isuprel_durations", "node_path": "durations/isuprel_durations.sql", "node_started_at": "2022-07-18T00:10:31.444078", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.isuprel_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 26", "code": "SELECT", "rows_affected": 26}, "agate_table": null, "execution_time": 0.07156109809875488, "failures": null, "message": "SELECT 26", "node": {"alias": "isuprel_durations", "build_path": "target/run/mimic/models/durations/isuprel_durations.sql", "checksum": {"checksum": "2db2b566d0ca45dcac9607937e9c6d5aa2b0f8d06101f0095e7d7da80af78311", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/isuprel_durations.sql", "compiled_sql": "-- This query extracts durations of isuprel administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30046 then 1 else 0 end) as vaso -- Isuprel\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30046 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30046 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30046 then rate else null end) as vaso_rate\n    , max(case when itemid = 30046 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30046 -- Isuprel\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 227692 -- Isuprel\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4719005, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "isuprel_durations"], "meta": {}, "name": "isuprel_durations", "original_file_path": "models/durations/isuprel_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/isuprel_durations.sql", "raw_sql": "-- This query extracts durations of isuprel administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30046 then 1 else 0 end) as vaso -- Isuprel\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30046 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30046 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30046 then rate else null end) as vaso_rate\n    , max(case when itemid = 30046 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30046 -- Isuprel\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 227692 -- Isuprel\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"isuprel_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.isuprel_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:31.448659Z", "name": "compile", "started_at": "2022-07-18T00:10:31.446686Z"}, {"completed_at": "2022-07-18T00:10:31.514089Z", "name": "execute", "started_at": "2022-07-18T00:10:31.449164Z"}]}, "unique_id": "model.mimic.isuprel_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.isuprel_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.518839Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": "2022-07-18T00:10:31.519270", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.kdigo_creatinine", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.519358Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.kdigo_creatinine", "index": 41, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": "2022-07-18T00:10:31.519270", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "41 of 107 START table model public.kdigo_creatinine ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.520069Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.520778Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": "2022-07-18T00:10:31.519270", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.kdigo_creatinine", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.521053Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.kdigo_creatinine", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.521434Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.522658Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.523304Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.kdigo_creatinine", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.523733Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.kdigo_creatinine\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.532155Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.532797Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.533039Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.533231Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.539413Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.539867Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_creatinine__dbt_tmp\"\n  as (\n    -- Extract all creatinine values FROM labevents around patient's ICU stay\nwith cr as\n(\nselect\n    ie.icustay_id\n  , ie.intime, ie.outtime\n  , le.valuenum as creat\n  , le.charttime\n  FROM icustays ie\n  left join labevents le\n    on ie.subject_id = le.subject_id\n    and le.ITEMID = 50912\n    and le.VALUENUM is not null\n    and DATETIME_DIFF(le.charttime, ie.intime, 'HOUR') <= (7*24-6)\n    and le.CHARTTIME >= DATETIME_SUB(ie.intime, INTERVAL '6 HOUR')\n    and le.CHARTTIME <= DATETIME_ADD(ie.intime, INTERVAL '7 DAY')\n)\n-- add in the lowest value in the previous 48 hours/7 days\nSELECT\n  cr.icustay_id\n  , cr.charttime\n  , cr.creat\n  , MIN(cr48.creat) AS creat_low_past_48hr\n  , MIN(cr7.creat) AS creat_low_past_7day\nFROM cr\n-- add in all creatinine values in the last 48 hours\nLEFT JOIN cr cr48\n  ON cr.icustay_id = cr48.icustay_id\n  AND cr48.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr48.charttime, 'HOUR') <= 48\n-- add in all creatinine values in the last 7 days\nLEFT JOIN cr cr7\n  ON cr.icustay_id = cr7.icustay_id\n  AND cr7.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr7.charttime, 'DAY') <= 7\nGROUP BY cr.icustay_id, cr.charttime, cr.creat\nORDER BY cr.icustay_id, cr.charttime, cr.creat\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_creatinine__dbt_tmp\"\n  as (\n    -- Extract all creatinine values FROM labevents around patient's ICU stay\nwith cr as\n(\nselect\n    ie.icustay_id\n  , ie.intime, ie.outtime\n  , le.valuenum as creat\n  , le.charttime\n  FROM icustays ie\n  left join labevents le\n    on ie.subject_id = le.subject_id\n    and le.ITEMID = 50912\n    and le.VALUENUM is not null\n    and DATETIME_DIFF(le.charttime, ie.intime, 'HOUR') <= (7*24-6)\n    and le.CHARTTIME >= DATETIME_SUB(ie.intime, INTERVAL '6 HOUR')\n    and le.CHARTTIME <= DATETIME_ADD(ie.intime, INTERVAL '7 DAY')\n)\n-- add in the lowest value in the previous 48 hours/7 days\nSELECT\n  cr.icustay_id\n  , cr.charttime\n  , cr.creat\n  , MIN(cr48.creat) AS creat_low_past_48hr\n  , MIN(cr7.creat) AS creat_low_past_7day\nFROM cr\n-- add in all creatinine values in the last 48 hours\nLEFT JOIN cr cr48\n  ON cr.icustay_id = cr48.icustay_id\n  AND cr48.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr48.charttime, 'HOUR') <= 48\n-- add in all creatinine values in the last 7 days\nLEFT JOIN cr cr7\n  ON cr.icustay_id = cr7.icustay_id\n  AND cr7.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr7.charttime, 'DAY') <= 7\nGROUP BY cr.icustay_id, cr.charttime, cr.creat\nORDER BY cr.icustay_id, cr.charttime, cr.creat\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:31.540155Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.62, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.62 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.161243Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.168080Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\nalter table \"postgres\".\"public\".\"kdigo_creatinine\" rename to \"kdigo_creatinine__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\nalter table \"postgres\".\"public\".\"kdigo_creatinine\" rename to \"kdigo_creatinine__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.168609Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.170862Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.174957Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\nalter table \"postgres\".\"public\".\"kdigo_creatinine__dbt_tmp\" rename to \"kdigo_creatinine\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\nalter table \"postgres\".\"public\".\"kdigo_creatinine__dbt_tmp\" rename to \"kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.175208Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.175920Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.179208Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.179448Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.179678Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.187033Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_creatinine", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_creatinine\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.189206Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_creatinine", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_creatinine__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_creatinine\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_creatinine__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.189428Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.191455Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.194282Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_creatinine: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.194554Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.kdigo_creatinine", "execution_time": 0, "index": 41, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": "2022-07-18T00:10:31.519270", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "41 of 107 OK created table model public.kdigo_creatinine ....................... [\u001b[32mSELECT 61532\u001b[0m in 0.67s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.195416Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:32.195901", "node_name": "kdigo_creatinine", "node_path": "organfailure/kdigo_creatinine.sql", "node_started_at": "2022-07-18T00:10:31.519270", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.kdigo_creatinine"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.6747243404388428, "failures": null, "message": "SELECT 61532", "node": {"alias": "kdigo_creatinine", "build_path": "target/run/mimic/models/organfailure/kdigo_creatinine.sql", "checksum": {"checksum": "b42ad5be92ed2610b882eb8c92b1b7c5d38769ea615ae0367bf4943e50d98b07", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/kdigo_creatinine.sql", "compiled_sql": "-- Extract all creatinine values FROM labevents around patient's ICU stay\nwith cr as\n(\nselect\n    ie.icustay_id\n  , ie.intime, ie.outtime\n  , le.valuenum as creat\n  , le.charttime\n  FROM icustays ie\n  left join labevents le\n    on ie.subject_id = le.subject_id\n    and le.ITEMID = 50912\n    and le.VALUENUM is not null\n    and DATETIME_DIFF(le.charttime, ie.intime, 'HOUR') <= (7*24-6)\n    and le.CHARTTIME >= DATETIME_SUB(ie.intime, INTERVAL '6 HOUR')\n    and le.CHARTTIME <= DATETIME_ADD(ie.intime, INTERVAL '7 DAY')\n)\n-- add in the lowest value in the previous 48 hours/7 days\nSELECT\n  cr.icustay_id\n  , cr.charttime\n  , cr.creat\n  , MIN(cr48.creat) AS creat_low_past_48hr\n  , MIN(cr7.creat) AS creat_low_past_7day\nFROM cr\n-- add in all creatinine values in the last 48 hours\nLEFT JOIN cr cr48\n  ON cr.icustay_id = cr48.icustay_id\n  AND cr48.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr48.charttime, 'HOUR') <= 48\n-- add in all creatinine values in the last 7 days\nLEFT JOIN cr cr7\n  ON cr.icustay_id = cr7.icustay_id\n  AND cr7.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr7.charttime, 'DAY') <= 7\nGROUP BY cr.icustay_id, cr.charttime, cr.creat\nORDER BY cr.icustay_id, cr.charttime, cr.creat", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5582705, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "kdigo_creatinine"], "meta": {}, "name": "kdigo_creatinine", "original_file_path": "models/organfailure/kdigo_creatinine.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/kdigo_creatinine.sql", "raw_sql": "-- Extract all creatinine values FROM labevents around patient's ICU stay\nwith cr as\n(\nselect\n    ie.icustay_id\n  , ie.intime, ie.outtime\n  , le.valuenum as creat\n  , le.charttime\n  FROM icustays ie\n  left join labevents le\n    on ie.subject_id = le.subject_id\n    and le.ITEMID = 50912\n    and le.VALUENUM is not null\n    and DATETIME_DIFF(le.charttime, ie.intime, 'HOUR') <= (7*24-6)\n    and le.CHARTTIME >= DATETIME_SUB(ie.intime, INTERVAL '6 HOUR')\n    and le.CHARTTIME <= DATETIME_ADD(ie.intime, INTERVAL '7 DAY')\n)\n-- add in the lowest value in the previous 48 hours/7 days\nSELECT\n  cr.icustay_id\n  , cr.charttime\n  , cr.creat\n  , MIN(cr48.creat) AS creat_low_past_48hr\n  , MIN(cr7.creat) AS creat_low_past_7day\nFROM cr\n-- add in all creatinine values in the last 48 hours\nLEFT JOIN cr cr48\n  ON cr.icustay_id = cr48.icustay_id\n  AND cr48.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr48.charttime, 'HOUR') <= 48\n-- add in all creatinine values in the last 7 days\nLEFT JOIN cr cr7\n  ON cr.icustay_id = cr7.icustay_id\n  AND cr7.charttime <  cr.charttime\n  AND DATETIME_DIFF(cr.charttime, cr7.charttime, 'DAY') <= 7\nGROUP BY cr.icustay_id, cr.charttime, cr.creat\nORDER BY cr.icustay_id, cr.charttime, cr.creat", "refs": [], "relation_name": "\"postgres\".\"public\".\"kdigo_creatinine\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.kdigo_creatinine", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:31.523219Z", "name": "compile", "started_at": "2022-07-18T00:10:31.521409Z"}, {"completed_at": "2022-07-18T00:10:32.194250Z", "name": "execute", "started_at": "2022-07-18T00:10:31.524097Z"}]}, "unique_id": "model.mimic.kdigo_creatinine"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.kdigo_creatinine", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.196054Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": "2022-07-18T00:10:32.196320", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.labs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.196342Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.labs_first_day", "index": 42, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": "2022-07-18T00:10:32.196320", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "42 of 107 START table model public.labs_first_day .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.196605Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.197730Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": "2022-07-18T00:10:32.196320", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.labs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.198439Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.labs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.199446Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.202447Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.203260Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.labs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.203640Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.labs_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.211081Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.211746Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.212071Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.212365Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.221726Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.222010Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"labs_first_day__dbt_tmp\"\n  as (\n    -- This query pivots lab values taken in the first 24 hours of a patient's stay\n\n-- Have already confirmed that the unit of measurement is always the same: null or the correct unit\n\nSELECT\n  pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n  , min(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_min\n  , max(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_max\n  , min(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_min\n  , max(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_max\n  , min(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_min\n  , max(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_max\n  , min(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_min\n  , max(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_max\n  , min(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_min\n  , max(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_max\n  , min(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_min\n  , max(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_max\n  , min(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_min\n  , max(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_max\n  , min(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_min\n  , max(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_max\n  , min(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_min\n  , max(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_max\n  , min(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_min\n  , max(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_max\n  , min(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_min\n  , max(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_max\n  , min(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_min\n  , max(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_max\n  , min(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_min\n  , max(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_max\n  , min(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_min\n  , max(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_max\n  , min(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_min\n  , max(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_max\n  , min(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_min\n  , max(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_max\n  , min(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_min\n  , max(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_max\n  , min(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_min\n  , max(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_max\n  , min(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_min\n  , max(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_max\n\n\nFROM\n( -- begin query that extracts the data\n  SELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END as label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE le.valuenum\n    END as valuenum\n\n  FROM icustays ie\n\n  LEFT JOIN labevents le\n    ON le.subject_id = ie.subject_id AND le.hadm_id = ie.hadm_id\n    AND le.charttime BETWEEN (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) AND (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n    AND le.ITEMID in\n    (\n      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n      51144, -- BANDS - hematology\n      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n      51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n      51274, -- PT | HEMATOLOGY | BLOOD | 469090\n      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n    )\n    AND valuenum IS NOT null AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\nORDER BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"labs_first_day__dbt_tmp\"\n  as (\n    -- This query pivots lab values taken in the first 24 hours of a patient's stay\n\n-- Have already confirmed that the unit of measurement is always the same: null or the correct unit\n\nSELECT\n  pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n  , min(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_min\n  , max(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_max\n  , min(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_min\n  , max(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_max\n  , min(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_min\n  , max(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_max\n  , min(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_min\n  , max(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_max\n  , min(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_min\n  , max(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_max\n  , min(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_min\n  , max(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_max\n  , min(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_min\n  , max(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_max\n  , min(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_min\n  , max(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_max\n  , min(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_min\n  , max(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_max\n  , min(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_min\n  , max(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_max\n  , min(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_min\n  , max(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_max\n  , min(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_min\n  , max(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_max\n  , min(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_min\n  , max(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_max\n  , min(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_min\n  , max(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_max\n  , min(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_min\n  , max(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_max\n  , min(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_min\n  , max(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_max\n  , min(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_min\n  , max(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_max\n  , min(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_min\n  , max(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_max\n  , min(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_min\n  , max(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_max\n\n\nFROM\n( -- begin query that extracts the data\n  SELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END as label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE le.valuenum\n    END as valuenum\n\n  FROM icustays ie\n\n  LEFT JOIN labevents le\n    ON le.subject_id = ie.subject_id AND le.hadm_id = ie.hadm_id\n    AND le.charttime BETWEEN (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) AND (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n    AND le.ITEMID in\n    (\n      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n      51144, -- BANDS - hematology\n      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n      51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n      51274, -- PT | HEMATOLOGY | BLOOD | 469090\n      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n    )\n    AND valuenum IS NOT null AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\nORDER BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:32.222278Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.25, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 1.25 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.473397Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.477540Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\nalter table \"postgres\".\"public\".\"labs_first_day\" rename to \"labs_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\nalter table \"postgres\".\"public\".\"labs_first_day\" rename to \"labs_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.477997Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.479223Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.487013Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\nalter table \"postgres\".\"public\".\"labs_first_day__dbt_tmp\" rename to \"labs_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\nalter table \"postgres\".\"public\".\"labs_first_day__dbt_tmp\" rename to \"labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.487310Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.488022Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.491195Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.491422Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.491543Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.492879Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.labs_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.labs_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.495593Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.labs_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"labs_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.labs_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"labs_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.495918Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.501163Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.505011Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.labs_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.505381Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.labs_first_day", "execution_time": 1, "index": 42, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": "2022-07-18T00:10:32.196320", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "42 of 107 OK created table model public.labs_first_day ......................... [\u001b[32mSELECT 61532\u001b[0m in 1.31s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.506371Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:33.506942", "node_name": "labs_first_day", "node_path": "firstday/labs_first_day.sql", "node_started_at": "2022-07-18T00:10:32.196320", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.labs_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 1.3089039325714111, "failures": null, "message": "SELECT 61532", "node": {"alias": "labs_first_day", "build_path": "target/run/mimic/models/firstday/labs_first_day.sql", "checksum": {"checksum": "61fcae9b4e2c32e81de96eac44e16631670264226f8f9dec61bf817afb54b92a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/labs_first_day.sql", "compiled_sql": "-- This query pivots lab values taken in the first 24 hours of a patient's stay\n\n-- Have already confirmed that the unit of measurement is always the same: null or the correct unit\n\nSELECT\n  pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n  , min(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_min\n  , max(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_max\n  , min(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_min\n  , max(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_max\n  , min(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_min\n  , max(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_max\n  , min(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_min\n  , max(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_max\n  , min(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_min\n  , max(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_max\n  , min(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_min\n  , max(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_max\n  , min(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_min\n  , max(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_max\n  , min(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_min\n  , max(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_max\n  , min(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_min\n  , max(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_max\n  , min(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_min\n  , max(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_max\n  , min(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_min\n  , max(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_max\n  , min(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_min\n  , max(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_max\n  , min(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_min\n  , max(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_max\n  , min(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_min\n  , max(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_max\n  , min(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_min\n  , max(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_max\n  , min(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_min\n  , max(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_max\n  , min(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_min\n  , max(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_max\n  , min(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_min\n  , max(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_max\n  , min(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_min\n  , max(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_max\n\n\nFROM\n( -- begin query that extracts the data\n  SELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END as label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE le.valuenum\n    END as valuenum\n\n  FROM icustays ie\n\n  LEFT JOIN labevents le\n    ON le.subject_id = ie.subject_id AND le.hadm_id = ie.hadm_id\n    AND le.charttime BETWEEN (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) AND (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n    AND le.ITEMID in\n    (\n      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n      51144, -- BANDS - hematology\n      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n      51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n      51274, -- PT | HEMATOLOGY | BLOOD | 469090\n      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n    )\n    AND valuenum IS NOT null AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\nORDER BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5352914, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "labs_first_day"], "meta": {}, "name": "labs_first_day", "original_file_path": "models/firstday/labs_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/labs_first_day.sql", "raw_sql": "-- This query pivots lab values taken in the first 24 hours of a patient's stay\n\n-- Have already confirmed that the unit of measurement is always the same: null or the correct unit\n\nSELECT\n  pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n  , min(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_min\n  , max(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE NULL END) AS aniongap_max\n  , min(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_min\n  , max(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE NULL END) AS albumin_max\n  , min(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_min\n  , max(CASE WHEN label = 'BANDS' THEN valuenum ELSE NULL END) AS bands_max\n  , min(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_min\n  , max(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE NULL END) AS bicarbonate_max\n  , min(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_min\n  , max(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE NULL END) AS bilirubin_max\n  , min(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_min\n  , max(CASE WHEN label = 'CREATININE' THEN valuenum ELSE NULL END) AS creatinine_max\n  , min(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_min\n  , max(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE NULL END) AS chloride_max\n  , min(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_min\n  , max(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE NULL END) AS glucose_max\n  , min(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_min\n  , max(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE NULL END) AS hematocrit_max\n  , min(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_min\n  , max(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE NULL END) AS hemoglobin_max\n  , min(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_min\n  , max(CASE WHEN label = 'LACTATE' THEN valuenum ELSE NULL END) AS lactate_max\n  , min(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_min\n  , max(CASE WHEN label = 'PLATELET' THEN valuenum ELSE NULL END) AS platelet_max\n  , min(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_min\n  , max(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE NULL END) AS potassium_max\n  , min(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_min\n  , max(CASE WHEN label = 'PTT' THEN valuenum ELSE NULL END) AS ptt_max\n  , min(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_min\n  , max(CASE WHEN label = 'INR' THEN valuenum ELSE NULL END) AS inr_max\n  , min(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_min\n  , max(CASE WHEN label = 'PT' THEN valuenum ELSE NULL END) AS pt_max\n  , min(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_min\n  , max(CASE WHEN label = 'SODIUM' THEN valuenum ELSE NULL END) AS sodium_max\n  , min(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_min\n  , max(CASE WHEN label = 'BUN' THEN valuenum ELSE NULL END) AS bun_max\n  , min(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_min\n  , max(CASE WHEN label = 'WBC' THEN valuenum ELSE NULL END) AS wbc_max\n\n\nFROM\n( -- begin query that extracts the data\n  SELECT ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END as label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE le.valuenum\n    END as valuenum\n\n  FROM icustays ie\n\n  LEFT JOIN labevents le\n    ON le.subject_id = ie.subject_id AND le.hadm_id = ie.hadm_id\n    AND le.charttime BETWEEN (DATETIME_SUB(ie.intime, INTERVAL '6' HOUR)) AND (DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n    AND le.ITEMID in\n    (\n      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n      51144, -- BANDS - hematology\n      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n      51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n      51274, -- PT | HEMATOLOGY | BLOOD | 469090\n      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n    )\n    AND valuenum IS NOT null AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id\nORDER BY pvt.subject_id, pvt.hadm_id, pvt.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"labs_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.labs_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:32.203195Z", "name": "compile", "started_at": "2022-07-18T00:10:32.199409Z"}, {"completed_at": "2022-07-18T00:10:33.504975Z", "name": "execute", "started_at": "2022-07-18T00:10:32.203893Z"}]}, "unique_id": "model.mimic.labs_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.labs_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.507114Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": "2022-07-18T00:10:33.507545", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.martin"}, "unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.martin", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.507654Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.martin", "index": 43, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": "2022-07-18T00:10:33.507545", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.martin"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "43 of 107 START table model public.martin ...................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.508343Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.509259Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": "2022-07-18T00:10:33.507545", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.martin"}, "unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.martin", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.509461Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.martin", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.509749Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.512522Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.514190Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.martin"}, "unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.martin", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.515200Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.martin\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.532529Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.533377Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.533760Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.534038Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.540124Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.540391Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\n\n\n  create  table \"postgres\".\"public\".\"martin__dbt_tmp\"\n  as (\n    -- ICD-9 codes for sepsis as validated by Martin et al.\n\n-- Greg S. Martin, David M. Mannino, Stephanie Eaton, and Marc Moss. The epidemiology of\n-- sepsis in the united states from 1979 through 2000. N Engl J Med, 348(16):1546\u20131554, Apr\n-- 2003. doi: 10.1056/NEJMoa022139. URL http://dx.doi.org/10.1056/NEJMoa022139.\n \nWITH co_dx AS\n(\n\tSELECT subject_id, hadm_id\n  , MAX(\n    \tCASE\n        -- septicemia\n    \t\tWHEN SUBSTR(icd9_code,1,3) = '038' THEN 1\n        -- septicemic, bacteremia, disseminated fungal infection, disseminated candida infection\n\t\t\t\t-- NOTE: the paper specifies 020.0 ... but this is bubonic plague\n\t\t\t\t-- presumably, they meant 020.2, which is septicemic plague\n        WHEN SUBSTR(icd9_code,1,4) in ('0202','7907','1179','1125') THEN 1\n        -- disseminated fungal endocarditis\n        WHEN SUBSTR(icd9_code,1,5) = '11281' THEN 1\n      ELSE 0 END\n    ) AS sepsis\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('7991') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('51881','51882','51885','78609') THEN 1\n      ELSE 0 END\n    ) AS respiratory\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('4580','7855','4580','4588','4589','7963') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('785.51','785.59') THEN 1\n      ELSE 0 END\n    ) AS cardiovascular\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('584','580','585') THEN 1\n      ELSE 0 END\n    ) AS renal\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('570') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('5722','5733') THEN 1\n      ELSE 0 END\n    ) AS hepatic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2862','2866','2869','2873','2874','2875') THEN 1\n      ELSE 0 END\n    ) AS hematologic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2762') THEN 1\n      ELSE 0 END\n    ) AS metabolic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('293') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('3481','3483') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('78001','78009') THEN 1\n      ELSE 0 END\n    ) AS neurologic\n  from diagnoses_icd\n  GROUP BY subject_id, hadm_id\n)\n-- procedure codes:\n-- \"96.7 - Ventilator management\"\n-- translated:\n--    9670\tContinuous invasive mechanical ventilation of unspecified duration\n--    9671\tContinuous invasive mechanical ventilation for less than 96 consecutive hours\n--    9672\tContinuous invasive mechanical ventilation for 96 consecutive hours or more\n-- \"39.95 - Hemodialysis\"\n--    3995\tHemodialysis\n-- \"89.14 - Electroencephalography\"\n--    8914\tElectroencephalogram\n, co_proc as\n(\n  SELECT subject_id, hadm_id\n  , MAX(CASE WHEN icd9_code = '967' then 1 ELSE 0 END) as respiratory\n  , MAX(CASE WHEN icd9_code = '3995' then 1 ELSE 0 END) as renal\n  , MAX(CASE WHEN icd9_code = '8914' then 1 ELSE 0 END) as neurologic\n  FROM procedures_icd\n  GROUP BY subject_id, hadm_id\n)\nselect adm.subject_id, adm.hadm_id\n, co_dx.sepsis\n, CASE\n    WHEN co_dx.respiratory = 1 OR co_proc.respiratory = 1\n      OR co_dx.cardiovascular = 1\n      OR co_dx.renal = 1 OR co_proc.renal = 1\n      OR co_dx.hepatic = 1\n      OR co_dx.hematologic = 1\n      OR co_dx.metabolic = 1\n      OR co_dx.neurologic = 1 OR co_proc.neurologic = 1\n    THEN 1\n  ELSE 0 END as organ_failure\n, case when co_dx.respiratory = 1 or co_proc.respiratory = 1 then 1 else 0 end as respiratory\n, co_dx.cardiovascular\n, case when co_dx.renal = 1 or co_proc.renal = 1 then 1 else 0 end as renal\n, co_dx.hepatic\n, co_dx.hematologic\n, co_dx.metabolic\n, case when co_dx.neurologic = 1 or co_proc.neurologic = 1 then 1 else 0 end as neurologic\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\nleft join co_proc\n  on adm.hadm_id = co_proc.hadm_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\n\n\n  create  table \"postgres\".\"public\".\"martin__dbt_tmp\"\n  as (\n    -- ICD-9 codes for sepsis as validated by Martin et al.\n\n-- Greg S. Martin, David M. Mannino, Stephanie Eaton, and Marc Moss. The epidemiology of\n-- sepsis in the united states from 1979 through 2000. N Engl J Med, 348(16):1546\u20131554, Apr\n-- 2003. doi: 10.1056/NEJMoa022139. URL http://dx.doi.org/10.1056/NEJMoa022139.\n \nWITH co_dx AS\n(\n\tSELECT subject_id, hadm_id\n  , MAX(\n    \tCASE\n        -- septicemia\n    \t\tWHEN SUBSTR(icd9_code,1,3) = '038' THEN 1\n        -- septicemic, bacteremia, disseminated fungal infection, disseminated candida infection\n\t\t\t\t-- NOTE: the paper specifies 020.0 ... but this is bubonic plague\n\t\t\t\t-- presumably, they meant 020.2, which is septicemic plague\n        WHEN SUBSTR(icd9_code,1,4) in ('0202','7907','1179','1125') THEN 1\n        -- disseminated fungal endocarditis\n        WHEN SUBSTR(icd9_code,1,5) = '11281' THEN 1\n      ELSE 0 END\n    ) AS sepsis\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('7991') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('51881','51882','51885','78609') THEN 1\n      ELSE 0 END\n    ) AS respiratory\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('4580','7855','4580','4588','4589','7963') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('785.51','785.59') THEN 1\n      ELSE 0 END\n    ) AS cardiovascular\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('584','580','585') THEN 1\n      ELSE 0 END\n    ) AS renal\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('570') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('5722','5733') THEN 1\n      ELSE 0 END\n    ) AS hepatic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2862','2866','2869','2873','2874','2875') THEN 1\n      ELSE 0 END\n    ) AS hematologic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2762') THEN 1\n      ELSE 0 END\n    ) AS metabolic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('293') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('3481','3483') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('78001','78009') THEN 1\n      ELSE 0 END\n    ) AS neurologic\n  from diagnoses_icd\n  GROUP BY subject_id, hadm_id\n)\n-- procedure codes:\n-- \"96.7 - Ventilator management\"\n-- translated:\n--    9670\tContinuous invasive mechanical ventilation of unspecified duration\n--    9671\tContinuous invasive mechanical ventilation for less than 96 consecutive hours\n--    9672\tContinuous invasive mechanical ventilation for 96 consecutive hours or more\n-- \"39.95 - Hemodialysis\"\n--    3995\tHemodialysis\n-- \"89.14 - Electroencephalography\"\n--    8914\tElectroencephalogram\n, co_proc as\n(\n  SELECT subject_id, hadm_id\n  , MAX(CASE WHEN icd9_code = '967' then 1 ELSE 0 END) as respiratory\n  , MAX(CASE WHEN icd9_code = '3995' then 1 ELSE 0 END) as renal\n  , MAX(CASE WHEN icd9_code = '8914' then 1 ELSE 0 END) as neurologic\n  FROM procedures_icd\n  GROUP BY subject_id, hadm_id\n)\nselect adm.subject_id, adm.hadm_id\n, co_dx.sepsis\n, CASE\n    WHEN co_dx.respiratory = 1 OR co_proc.respiratory = 1\n      OR co_dx.cardiovascular = 1\n      OR co_dx.renal = 1 OR co_proc.renal = 1\n      OR co_dx.hepatic = 1\n      OR co_dx.hematologic = 1\n      OR co_dx.metabolic = 1\n      OR co_dx.neurologic = 1 OR co_proc.neurologic = 1\n    THEN 1\n  ELSE 0 END as organ_failure\n, case when co_dx.respiratory = 1 or co_proc.respiratory = 1 then 1 else 0 end as respiratory\n, co_dx.cardiovascular\n, case when co_dx.renal = 1 or co_proc.renal = 1 then 1 else 0 end as renal\n, co_dx.hepatic\n, co_dx.hematologic\n, co_dx.metabolic\n, case when co_dx.neurologic = 1 or co_proc.neurologic = 1 then 1 else 0 end as neurologic\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\nleft join co_proc\n  on adm.hadm_id = co_proc.hadm_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:33.540597Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.91, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 0.91 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.447027Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.453973Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\nalter table \"postgres\".\"public\".\"martin\" rename to \"martin__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\nalter table \"postgres\".\"public\".\"martin\" rename to \"martin__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.454240Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.454971Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.458761Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\nalter table \"postgres\".\"public\".\"martin__dbt_tmp\" rename to \"martin\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\nalter table \"postgres\".\"public\".\"martin__dbt_tmp\" rename to \"martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.459014Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.459700Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.464120Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.464685Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.465056Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.470635Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.martin", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.martin\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.472879Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.martin", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\ndrop table if exists \"postgres\".\"public\".\"martin__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.martin\"} */\ndrop table if exists \"postgres\".\"public\".\"martin__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.473109Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.475218Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.478155Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.martin: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.478659Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.martin", "execution_time": 0, "index": 43, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": "2022-07-18T00:10:33.507545", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.martin"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "43 of 107 OK created table model public.martin ................................. [\u001b[32mSELECT 58976\u001b[0m in 0.97s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.481195Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:34.482467", "node_name": "martin", "node_path": "sepsis/martin.sql", "node_started_at": "2022-07-18T00:10:33.507545", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.martin"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 0.9715878963470459, "failures": null, "message": "SELECT 58976", "node": {"alias": "martin", "build_path": "target/run/mimic/models/sepsis/martin.sql", "checksum": {"checksum": "8de31314f964530fb83e91be75600480e7f10409ca1efb35b3b95b3c4721368c", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/sepsis/martin.sql", "compiled_sql": "-- ICD-9 codes for sepsis as validated by Martin et al.\n\n-- Greg S. Martin, David M. Mannino, Stephanie Eaton, and Marc Moss. The epidemiology of\n-- sepsis in the united states from 1979 through 2000. N Engl J Med, 348(16):1546\u20131554, Apr\n-- 2003. doi: 10.1056/NEJMoa022139. URL http://dx.doi.org/10.1056/NEJMoa022139.\n \nWITH co_dx AS\n(\n\tSELECT subject_id, hadm_id\n  , MAX(\n    \tCASE\n        -- septicemia\n    \t\tWHEN SUBSTR(icd9_code,1,3) = '038' THEN 1\n        -- septicemic, bacteremia, disseminated fungal infection, disseminated candida infection\n\t\t\t\t-- NOTE: the paper specifies 020.0 ... but this is bubonic plague\n\t\t\t\t-- presumably, they meant 020.2, which is septicemic plague\n        WHEN SUBSTR(icd9_code,1,4) in ('0202','7907','1179','1125') THEN 1\n        -- disseminated fungal endocarditis\n        WHEN SUBSTR(icd9_code,1,5) = '11281' THEN 1\n      ELSE 0 END\n    ) AS sepsis\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('7991') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('51881','51882','51885','78609') THEN 1\n      ELSE 0 END\n    ) AS respiratory\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('4580','7855','4580','4588','4589','7963') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('785.51','785.59') THEN 1\n      ELSE 0 END\n    ) AS cardiovascular\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('584','580','585') THEN 1\n      ELSE 0 END\n    ) AS renal\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('570') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('5722','5733') THEN 1\n      ELSE 0 END\n    ) AS hepatic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2862','2866','2869','2873','2874','2875') THEN 1\n      ELSE 0 END\n    ) AS hematologic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2762') THEN 1\n      ELSE 0 END\n    ) AS metabolic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('293') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('3481','3483') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('78001','78009') THEN 1\n      ELSE 0 END\n    ) AS neurologic\n  from diagnoses_icd\n  GROUP BY subject_id, hadm_id\n)\n-- procedure codes:\n-- \"96.7 - Ventilator management\"\n-- translated:\n--    9670\tContinuous invasive mechanical ventilation of unspecified duration\n--    9671\tContinuous invasive mechanical ventilation for less than 96 consecutive hours\n--    9672\tContinuous invasive mechanical ventilation for 96 consecutive hours or more\n-- \"39.95 - Hemodialysis\"\n--    3995\tHemodialysis\n-- \"89.14 - Electroencephalography\"\n--    8914\tElectroencephalogram\n, co_proc as\n(\n  SELECT subject_id, hadm_id\n  , MAX(CASE WHEN icd9_code = '967' then 1 ELSE 0 END) as respiratory\n  , MAX(CASE WHEN icd9_code = '3995' then 1 ELSE 0 END) as renal\n  , MAX(CASE WHEN icd9_code = '8914' then 1 ELSE 0 END) as neurologic\n  FROM procedures_icd\n  GROUP BY subject_id, hadm_id\n)\nselect adm.subject_id, adm.hadm_id\n, co_dx.sepsis\n, CASE\n    WHEN co_dx.respiratory = 1 OR co_proc.respiratory = 1\n      OR co_dx.cardiovascular = 1\n      OR co_dx.renal = 1 OR co_proc.renal = 1\n      OR co_dx.hepatic = 1\n      OR co_dx.hematologic = 1\n      OR co_dx.metabolic = 1\n      OR co_dx.neurologic = 1 OR co_proc.neurologic = 1\n    THEN 1\n  ELSE 0 END as organ_failure\n, case when co_dx.respiratory = 1 or co_proc.respiratory = 1 then 1 else 0 end as respiratory\n, co_dx.cardiovascular\n, case when co_dx.renal = 1 or co_proc.renal = 1 then 1 else 0 end as renal\n, co_dx.hepatic\n, co_dx.hematologic\n, co_dx.metabolic\n, case when co_dx.neurologic = 1 or co_proc.neurologic = 1 then 1 else 0 end as neurologic\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\nleft join co_proc\n  on adm.hadm_id = co_proc.hadm_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5232792, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "sepsis", "martin"], "meta": {}, "name": "martin", "original_file_path": "models/sepsis/martin.sql", "package_name": "mimic", "patch_path": null, "path": "sepsis/martin.sql", "raw_sql": "-- ICD-9 codes for sepsis as validated by Martin et al.\n\n-- Greg S. Martin, David M. Mannino, Stephanie Eaton, and Marc Moss. The epidemiology of\n-- sepsis in the united states from 1979 through 2000. N Engl J Med, 348(16):1546\u20131554, Apr\n-- 2003. doi: 10.1056/NEJMoa022139. URL http://dx.doi.org/10.1056/NEJMoa022139.\n{{ config(materialized = 'table') }} \nWITH co_dx AS\n(\n\tSELECT subject_id, hadm_id\n  , MAX(\n    \tCASE\n        -- septicemia\n    \t\tWHEN SUBSTR(icd9_code,1,3) = '038' THEN 1\n        -- septicemic, bacteremia, disseminated fungal infection, disseminated candida infection\n\t\t\t\t-- NOTE: the paper specifies 020.0 ... but this is bubonic plague\n\t\t\t\t-- presumably, they meant 020.2, which is septicemic plague\n        WHEN SUBSTR(icd9_code,1,4) in ('0202','7907','1179','1125') THEN 1\n        -- disseminated fungal endocarditis\n        WHEN SUBSTR(icd9_code,1,5) = '11281' THEN 1\n      ELSE 0 END\n    ) AS sepsis\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('7991') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('51881','51882','51885','78609') THEN 1\n      ELSE 0 END\n    ) AS respiratory\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('4580','7855','4580','4588','4589','7963') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('785.51','785.59') THEN 1\n      ELSE 0 END\n    ) AS cardiovascular\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('584','580','585') THEN 1\n      ELSE 0 END\n    ) AS renal\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('570') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('5722','5733') THEN 1\n      ELSE 0 END\n    ) AS hepatic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2862','2866','2869','2873','2874','2875') THEN 1\n      ELSE 0 END\n    ) AS hematologic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,4) in ('2762') THEN 1\n      ELSE 0 END\n    ) AS metabolic\n    , MAX(\n      CASE\n        WHEN SUBSTR(icd9_code,1,3) in ('293') THEN 1\n        WHEN SUBSTR(icd9_code,1,4) in ('3481','3483') THEN 1\n        WHEN SUBSTR(icd9_code,1,5) in ('78001','78009') THEN 1\n      ELSE 0 END\n    ) AS neurologic\n  from diagnoses_icd\n  GROUP BY subject_id, hadm_id\n)\n-- procedure codes:\n-- \"96.7 - Ventilator management\"\n-- translated:\n--    9670\tContinuous invasive mechanical ventilation of unspecified duration\n--    9671\tContinuous invasive mechanical ventilation for less than 96 consecutive hours\n--    9672\tContinuous invasive mechanical ventilation for 96 consecutive hours or more\n-- \"39.95 - Hemodialysis\"\n--    3995\tHemodialysis\n-- \"89.14 - Electroencephalography\"\n--    8914\tElectroencephalogram\n, co_proc as\n(\n  SELECT subject_id, hadm_id\n  , MAX(CASE WHEN icd9_code = '967' then 1 ELSE 0 END) as respiratory\n  , MAX(CASE WHEN icd9_code = '3995' then 1 ELSE 0 END) as renal\n  , MAX(CASE WHEN icd9_code = '8914' then 1 ELSE 0 END) as neurologic\n  FROM procedures_icd\n  GROUP BY subject_id, hadm_id\n)\nselect adm.subject_id, adm.hadm_id\n, co_dx.sepsis\n, CASE\n    WHEN co_dx.respiratory = 1 OR co_proc.respiratory = 1\n      OR co_dx.cardiovascular = 1\n      OR co_dx.renal = 1 OR co_proc.renal = 1\n      OR co_dx.hepatic = 1\n      OR co_dx.hematologic = 1\n      OR co_dx.metabolic = 1\n      OR co_dx.neurologic = 1 OR co_proc.neurologic = 1\n    THEN 1\n  ELSE 0 END as organ_failure\n, case when co_dx.respiratory = 1 or co_proc.respiratory = 1 then 1 else 0 end as respiratory\n, co_dx.cardiovascular\n, case when co_dx.renal = 1 or co_proc.renal = 1 then 1 else 0 end as renal\n, co_dx.hepatic\n, co_dx.hematologic\n, co_dx.metabolic\n, case when co_dx.neurologic = 1 or co_proc.neurologic = 1 then 1 else 0 end as neurologic\nFROM admissions adm\nleft join co_dx\n  on adm.hadm_id = co_dx.hadm_id\nleft join co_proc\n  on adm.hadm_id = co_proc.hadm_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"martin\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.martin", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:33.513998Z", "name": "compile", "started_at": "2022-07-18T00:10:33.509616Z"}, {"completed_at": "2022-07-18T00:10:34.478121Z", "name": "execute", "started_at": "2022-07-18T00:10:33.515771Z"}]}, "unique_id": "model.mimic.martin"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.martin", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.482785Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-07-18T00:10:34.483628", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.milrinone_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.483692Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.milrinone_durations", "index": 44, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-07-18T00:10:34.483628", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "44 of 107 START table model public.milrinone_durations ......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.484429Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.485766Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-07-18T00:10:34.483628", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.milrinone_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.486079Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.milrinone_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.486476Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.487915Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.488371Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.milrinone_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.488517Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.milrinone_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.495970Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.497105Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.497283Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.497433Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.504419Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.504719Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"milrinone_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"milrinone_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:34.504868Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.26, "status": "SELECT 3600"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3600 in 1.26 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.760849Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.768235Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"postgres\".\"public\".\"milrinone_durations\" rename to \"milrinone_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"postgres\".\"public\".\"milrinone_durations\" rename to \"milrinone_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.768603Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.769937Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.774317Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"postgres\".\"public\".\"milrinone_durations__dbt_tmp\" rename to \"milrinone_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"postgres\".\"public\".\"milrinone_durations__dbt_tmp\" rename to \"milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.774562Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.775360Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.780473Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.780855Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.781167Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.784153Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.786903Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"milrinone_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"milrinone_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.787139Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.789190Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.792696Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.792954Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.milrinone_durations", "execution_time": 1, "index": 44, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-07-18T00:10:34.483628", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "status": "SELECT 3600", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "44 of 107 OK created table model public.milrinone_durations .................... [\u001b[32mSELECT 3600\u001b[0m in 1.31s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.794133Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:35.795731", "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-07-18T00:10:34.483628", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 3600", "code": "SELECT", "rows_affected": 3600}, "agate_table": null, "execution_time": 1.3085155487060547, "failures": null, "message": "SELECT 3600", "node": {"alias": "milrinone_durations", "build_path": "target/run/mimic/models/durations/milrinone_durations.sql", "checksum": {"checksum": "de72a370a9b322a2f7547be6c61aba0a9ccbc41cf90b3eabb0b30915b86e00fd", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/milrinone_durations.sql", "compiled_sql": "-- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4952633, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "milrinone_durations"], "meta": {}, "name": "milrinone_durations", "original_file_path": "models/durations/milrinone_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/milrinone_durations.sql", "raw_sql": "-- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"milrinone_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.milrinone_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:34.488332Z", "name": "compile", "started_at": "2022-07-18T00:10:34.486439Z"}, {"completed_at": "2022-07-18T00:10:35.792665Z", "name": "execute", "started_at": "2022-07-18T00:10:34.488647Z"}]}, "unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.milrinone_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.795981Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": "2022-07-18T00:10:35.797046", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.min_surviving_bp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.797141Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.min_surviving_bp", "index": 45, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": "2022-07-18T00:10:35.797046", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "45 of 107 START table model public.min_surviving_bp ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.798397Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.799512Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": "2022-07-18T00:10:35.797046", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.min_surviving_bp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.800086Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.min_surviving_bp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.800402Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.802141Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.802866Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.min_surviving_bp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.803146Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.min_surviving_bp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.811892Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.813273Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.813976Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.814533Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.820868Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.821130Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\n\n\n  create  table \"postgres\".\"public\".\"min_surviving_bp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure of hospital survivors\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, min_surviving_bp as\n(\n  SELECT p.subject_id, ce.icustay_id, min(valuenum) AS min_sbp\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  -- here we filter down to only survivors\n  INNER JOIN patients p\n  ON ce.subject_id = p.subject_id and p.expire_flag = 0\n  WHERE itemid IN (6, 51, 455, 6701, 220179, 220050)\n  GROUP BY p.subject_id, ce.icustay_id\n)\n, min_surviving_bp_counted as\n(\n  SELECT width_bucket(min_sbp, 0, 300, 300) AS bucket\n  FROM min_surviving_bp\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM min_surviving_bp_counted\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\n\n\n  create  table \"postgres\".\"public\".\"min_surviving_bp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure of hospital survivors\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, min_surviving_bp as\n(\n  SELECT p.subject_id, ce.icustay_id, min(valuenum) AS min_sbp\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  -- here we filter down to only survivors\n  INNER JOIN patients p\n  ON ce.subject_id = p.subject_id and p.expire_flag = 0\n  WHERE itemid IN (6, 51, 455, 6701, 220179, 220050)\n  GROUP BY p.subject_id, ce.icustay_id\n)\n, min_surviving_bp_counted as\n(\n  SELECT width_bucket(min_sbp, 0, 300, 300) AS bucket\n  FROM min_surviving_bp\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM min_surviving_bp_counted\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:35.821280Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.19, "status": "SELECT 4"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 4 in 0.19 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.014487Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.020775Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\nalter table \"postgres\".\"public\".\"min_surviving_bp\" rename to \"min_surviving_bp__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\nalter table \"postgres\".\"public\".\"min_surviving_bp\" rename to \"min_surviving_bp__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.021046Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.021821Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.026382Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\nalter table \"postgres\".\"public\".\"min_surviving_bp__dbt_tmp\" rename to \"min_surviving_bp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\nalter table \"postgres\".\"public\".\"min_surviving_bp__dbt_tmp\" rename to \"min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.026950Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.029426Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.034772Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.035072Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.035278Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.037213Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.min_surviving_bp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.min_surviving_bp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.039346Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.min_surviving_bp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\ndrop table if exists \"postgres\".\"public\".\"min_surviving_bp__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.min_surviving_bp\"} */\ndrop table if exists \"postgres\".\"public\".\"min_surviving_bp__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.039575Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.041383Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.046259Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.min_surviving_bp: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.046884Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.min_surviving_bp", "execution_time": 0, "index": 45, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": "2022-07-18T00:10:35.797046", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "status": "SELECT 4", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "45 of 107 OK created table model public.min_surviving_bp ....................... [\u001b[32mSELECT 4\u001b[0m in 0.25s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.048353Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:36.048751", "node_name": "min_surviving_bp", "node_path": "cookbook/min_surviving_bp.sql", "node_started_at": "2022-07-18T00:10:35.797046", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.min_surviving_bp"}, "run_result": {"adapter_response": {"_message": "SELECT 4", "code": "SELECT", "rows_affected": 4}, "agate_table": null, "execution_time": 0.24908065795898438, "failures": null, "message": "SELECT 4", "node": {"alias": "min_surviving_bp", "build_path": "target/run/mimic/models/cookbook/min_surviving_bp.sql", "checksum": {"checksum": "17d63f15b76c37074abdc7f3d6d91b19bed649802b9d9c333ba308174d9ec132", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/min_surviving_bp.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure of hospital survivors\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, min_surviving_bp as\n(\n  SELECT p.subject_id, ce.icustay_id, min(valuenum) AS min_sbp\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  -- here we filter down to only survivors\n  INNER JOIN patients p\n  ON ce.subject_id = p.subject_id and p.expire_flag = 0\n  WHERE itemid IN (6, 51, 455, 6701, 220179, 220050)\n  GROUP BY p.subject_id, ce.icustay_id\n)\n, min_surviving_bp_counted as\n(\n  SELECT width_bucket(min_sbp, 0, 300, 300) AS bucket\n  FROM min_surviving_bp\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM min_surviving_bp_counted\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6704714, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "min_surviving_bp"], "meta": {}, "name": "min_surviving_bp", "original_file_path": "models/cookbook/min_surviving_bp.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/min_surviving_bp.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure of hospital survivors\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, min_surviving_bp as\n(\n  SELECT p.subject_id, ce.icustay_id, min(valuenum) AS min_sbp\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  -- here we filter down to only survivors\n  INNER JOIN patients p\n  ON ce.subject_id = p.subject_id and p.expire_flag = 0\n  WHERE itemid IN (6, 51, 455, 6701, 220179, 220050)\n  GROUP BY p.subject_id, ce.icustay_id\n)\n, min_surviving_bp_counted as\n(\n  SELECT width_bucket(min_sbp, 0, 300, 300) AS bucket\n  FROM min_surviving_bp\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM min_surviving_bp_counted\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"min_surviving_bp\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.min_surviving_bp", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:35.802803Z", "name": "compile", "started_at": "2022-07-18T00:10:35.800381Z"}, {"completed_at": "2022-07-18T00:10:36.046216Z", "name": "execute", "started_at": "2022-07-18T00:10:35.803427Z"}]}, "unique_id": "model.mimic.min_surviving_bp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.min_surviving_bp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.048937Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": "2022-07-18T00:10:36.049341", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.mortality", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.049400Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.mortality", "index": 46, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": "2022-07-18T00:10:36.049341", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "46 of 107 START table model public.mortality ................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.050100Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.051006Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": "2022-07-18T00:10:36.049341", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.mortality", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.051259Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.mortality", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.051625Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.052772Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.053285Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.mortality", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.053551Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.mortality\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.066741Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.067567Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.067882Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.068059Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.073371Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.073909Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\n\n\n  create  table \"postgres\".\"public\".\"mortality__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Calculate in-hospital, 30-day, and 1 year mortality (from hospital admission)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Inclusion criteria: Adult (>15 year old) patients, *MOST RECENT* hospital admission\n-- ------------------------------------------------------------------\n\nWITH tmp as\n(\n    SELECT adm.hadm_id, admittime, dischtime, adm.deathtime, pat.dod\n    FROM admissions adm\n    INNER JOIN patients pat\n    ON adm.subject_id = pat.subject_id\n    -- filter out organ donor accounts\n    WHERE lower(diagnosis) NOT LIKE '%organ donor%'\n    -- at least 15 years old\n    AND DATETIME_DIFF(admittime, dob, 'YEAR') > 15\n    -- filter that removes hospital admissions with no corresponding ICU data\n    AND HAS_CHARTEVENTS_DATA = 1\n)\nSELECT COUNT(hadm_id) AS NumPat -- total number of patients\n, round( cast(COUNT(deathtime) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort -- % hospital mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '30' DAY) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100.0 , 4) AS HospMort30day -- % 30 day mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '1' YEAR) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort1yr -- % 1 year mortality\nFROM tmp\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\n\n\n  create  table \"postgres\".\"public\".\"mortality__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Calculate in-hospital, 30-day, and 1 year mortality (from hospital admission)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Inclusion criteria: Adult (>15 year old) patients, *MOST RECENT* hospital admission\n-- ------------------------------------------------------------------\n\nWITH tmp as\n(\n    SELECT adm.hadm_id, admittime, dischtime, adm.deathtime, pat.dod\n    FROM admissions adm\n    INNER JOIN patients pat\n    ON adm.subject_id = pat.subject_id\n    -- filter out organ donor accounts\n    WHERE lower(diagnosis) NOT LIKE '%organ donor%'\n    -- at least 15 years old\n    AND DATETIME_DIFF(admittime, dob, 'YEAR') > 15\n    -- filter that removes hospital admissions with no corresponding ICU data\n    AND HAS_CHARTEVENTS_DATA = 1\n)\nSELECT COUNT(hadm_id) AS NumPat -- total number of patients\n, round( cast(COUNT(deathtime) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort -- % hospital mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '30' DAY) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100.0 , 4) AS HospMort30day -- % 30 day mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '1' YEAR) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort1yr -- % 1 year mortality\nFROM tmp\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.074232Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.24, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.24 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.314043Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.321876Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\nalter table \"postgres\".\"public\".\"mortality\" rename to \"mortality__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\nalter table \"postgres\".\"public\".\"mortality\" rename to \"mortality__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.322338Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.323622Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.328959Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\nalter table \"postgres\".\"public\".\"mortality__dbt_tmp\" rename to \"mortality\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\nalter table \"postgres\".\"public\".\"mortality__dbt_tmp\" rename to \"mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.329239Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.330017Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.333171Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.333393Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.333764Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.335005Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mortality", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mortality\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.337026Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mortality", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\ndrop table if exists \"postgres\".\"public\".\"mortality__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mortality\"} */\ndrop table if exists \"postgres\".\"public\".\"mortality__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.337253Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.339375Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.342333Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mortality: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.342595Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.mortality", "execution_time": 0, "index": 46, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": "2022-07-18T00:10:36.049341", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "46 of 107 OK created table model public.mortality .............................. [\u001b[32mSELECT 1\u001b[0m in 0.29s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.343601Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:36.344105", "node_name": "mortality", "node_path": "cookbook/mortality.sql", "node_started_at": "2022-07-18T00:10:36.049341", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.mortality"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.29276275634765625, "failures": null, "message": "SELECT 1", "node": {"alias": "mortality", "build_path": "target/run/mimic/models/cookbook/mortality.sql", "checksum": {"checksum": "4bf4f84655739e8368229e19625ed28fe75635546c429dddf6319b59c95097e4", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/mortality.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Calculate in-hospital, 30-day, and 1 year mortality (from hospital admission)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Inclusion criteria: Adult (>15 year old) patients, *MOST RECENT* hospital admission\n-- ------------------------------------------------------------------\n\nWITH tmp as\n(\n    SELECT adm.hadm_id, admittime, dischtime, adm.deathtime, pat.dod\n    FROM admissions adm\n    INNER JOIN patients pat\n    ON adm.subject_id = pat.subject_id\n    -- filter out organ donor accounts\n    WHERE lower(diagnosis) NOT LIKE '%organ donor%'\n    -- at least 15 years old\n    AND DATETIME_DIFF(admittime, dob, 'YEAR') > 15\n    -- filter that removes hospital admissions with no corresponding ICU data\n    AND HAS_CHARTEVENTS_DATA = 1\n)\nSELECT COUNT(hadm_id) AS NumPat -- total number of patients\n, round( cast(COUNT(deathtime) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort -- % hospital mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '30' DAY) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100.0 , 4) AS HospMort30day -- % 30 day mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '1' YEAR) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort1yr -- % 1 year mortality\nFROM tmp", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.642068, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "mortality"], "meta": {}, "name": "mortality", "original_file_path": "models/cookbook/mortality.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/mortality.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Calculate in-hospital, 30-day, and 1 year mortality (from hospital admission)\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- Inclusion criteria: Adult (>15 year old) patients, *MOST RECENT* hospital admission\n-- ------------------------------------------------------------------\n\nWITH tmp as\n(\n    SELECT adm.hadm_id, admittime, dischtime, adm.deathtime, pat.dod\n    FROM admissions adm\n    INNER JOIN patients pat\n    ON adm.subject_id = pat.subject_id\n    -- filter out organ donor accounts\n    WHERE lower(diagnosis) NOT LIKE '%organ donor%'\n    -- at least 15 years old\n    AND DATETIME_DIFF(admittime, dob, 'YEAR') > 15\n    -- filter that removes hospital admissions with no corresponding ICU data\n    AND HAS_CHARTEVENTS_DATA = 1\n)\nSELECT COUNT(hadm_id) AS NumPat -- total number of patients\n, round( cast(COUNT(deathtime) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort -- % hospital mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '30' DAY) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100.0 , 4) AS HospMort30day -- % 30 day mortality\n, round( cast(SUM(CASE WHEN dod < DATETIME_ADD(admittime, INTERVAL '1' YEAR) THEN 1 ELSE 0 END) AS NUMERIC)/COUNT(hadm_id)*100 , 4) AS HospMort1yr -- % 1 year mortality\nFROM tmp", "refs": [], "relation_name": "\"postgres\".\"public\".\"mortality\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.mortality", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:36.053228Z", "name": "compile", "started_at": "2022-07-18T00:10:36.051597Z"}, {"completed_at": "2022-07-18T00:10:36.342300Z", "name": "execute", "started_at": "2022-07-18T00:10:36.053917Z"}]}, "unique_id": "model.mimic.mortality"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.mortality", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.344293Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": "2022-07-18T00:10:36.344712", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.neuroblock_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.344808Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.neuroblock_dose", "index": 47, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": "2022-07-18T00:10:36.344712", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "47 of 107 START table model public.neuroblock_dose ............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.345649Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.346633Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": "2022-07-18T00:10:36.344712", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.neuroblock_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.347025Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.neuroblock_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.347413Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.348906Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.349375Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.neuroblock_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.349523Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.neuroblock_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.360600Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.361674Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.362069Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.362384Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.368036Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.368291Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"neuroblock_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of neuromuscular blocking agents\n-- Note: we assume that injections will be filtered for carevue as they will have starttime = stopttime.\n\n-- Get drug administration data from CareVue and MetaVision\n-- metavision is simple and only requires one temporary table\n\nwith drugmv as\n(\n  select\n      icustay_id, orderid\n    , rate as drug_rate\n    , amount as drug_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid in\n  (\n      222062 -- Vecuronium (664 rows, 154 infusion rows)\n    , 221555 -- Cisatracurium (9334 rows, 8970 infusion rows)\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n  and rate is not null -- only continuous infusions\n)\n, drugcv1 as\n(\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n\n    -- we only include continuous infusions, therefore expect a rate\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 and amount is not null then 1\n            when itemid <  40000 and rate is not null then 1\n          else 0 end) as drug_null\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 then coalesce(rate, amount)\n          else rate end) as drug_rate\n    , max(amount) as drug_amount\n  from inputevents_cv\n  where itemid in\n  (\n      30114 -- Cisatracurium (63994 rows)\n    , 30138\t-- Vecuronium\t (5160 rows)\n    , 30113 -- Atracurium  (1163 rows)\n    -- Below rows are less frequent ad-hoc documentation, but worth including!\n    , 42174\t-- nimbex cc/hr (207 rows)\n    , 42385\t-- Cisatracurium gtt (156 rows)\n    , 41916\t-- NIMBEX\tinputevents_cv (136 rows)\n    , 42100\t-- cistatracurium\t(132 rows)\n    , 42045\t-- nimbex mcg/kg/min (78 rows)\n    , 42246 -- CISATRICARIUM CC/HR (70 rows)\n    , 42291\t-- NIMBEX CC/HR (48 rows)\n    , 42590\t-- nimbex\tinputevents_cv (38 rows)\n    , 42284\t-- CISATRACURIUM DRIP (9 rows)\n    , 45096\t-- Vecuronium drip (2 rows)\n  )\n  group by icustay_id, charttime\n  UNION\n  -- add data from chartevents\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n    , max(case when valuenum <= 10 then 0 else 1 end) as drug_null\n\n    -- educated guess!\n    , max(case when valuenum <= 10 then valuenum else null end) as drug_rate\n    , max(case when valuenum  > 10 then valuenum else null end) as drug_amount\n  from chartevents\n  where itemid in\n  (\n      1856 -- Vecuronium mcg/min  (8 rows)\n    , 2164 -- NIMBEX MG/KG/HR  (243 rows)\n    , 2548 -- nimbex mg/kg/hr  (103 rows)\n    , 2285 -- nimbex mcg/kg/min  (85 rows)\n    , 2290 -- nimbex mcg/kg/m  (32 rows)\n    , 2670 -- nimbex  (38 rows)\n    , 2546 -- CISATRACURIUMMG/KG/H  (7 rows)\n    , 1098 -- cisatracurium mg/kg  (36 rows)\n    , 2390 -- cisatracurium mg/hr  (15 rows)\n    , 2511 -- CISATRACURIUM GTT  (4 rows)\n    , 1028 -- Cisatracurium  (208 rows)\n    , 1858 -- cisatracurium  (351 rows)\n  )\n  group by icustay_id, charttime\n\n)\n, drugcv2 as\n(\n  select v.*\n    , sum(drug_null) over (partition by icustay_id order by charttime) as drug_partition\n  from\n    drugcv1 v\n)\n, drugcv3 as\n(\n  select v.*\n    , first_value(drug_rate) over (partition by icustay_id, drug_partition order by charttime) as drug_prevrate_ifnull\n  from\n    drugcv2 v\n)\n, drugcv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) AS delta\n\n    , drug\n    , drug_rate\n    , drug_amount\n    , drug_stopped\n    , drug_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when drug = 0 then null\n\n        -- if this is the first instance of the drug\n        when drug_rate > 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug, drug_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes drugnum sequential\n        when drug_rate = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- drug_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when drug_prevrate_ifnull = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newdrug = 1\n        when LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded drug was D/C'd, newdrug = 1\n        when\n          LAG(drug_stopped,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 1 then 1\n\n        when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) > (interval '8 hours') then 1\n      else null\n      end as drug_start\n\nFROM\n  drugcv3\n)\n-- propagate start/stop flags forward in time\n, drugcv5 as\n(\n  select v.*\n    , SUM(drug_start) OVER (partition by icustay_id, drug order by charttime) as drug_first\nFROM\n  drugcv4 v\n)\n, drugcv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when drug = 0\n          then null\n\n        -- If the recorded drug was D/C'd, this is an end time\n        when drug_stopped = 1\n          then drug_first\n\n        -- If the rate is zero, this is the end time\n        when drug_rate = 0\n          then drug_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on drug\n        -- in principle, this could add an extra end time for the drug\n        -- however, since we later group on drug_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) is null\n          then drug_first\n\n        else null\n        end as drug_stop\n    from drugcv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, drug, drug_rate, drug_amount\n--     , drug_stopped\n--     , drug_start\n--     , drug_first\n--     , drug_stop\n-- from drugcv6 order by icustay_id, charttime\n\n, drugcv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, drug_first order by charttime) as endtime\n  , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\nfrom drugcv6\nwhere\n  drug_first is not null -- bogus data\nand\n  drug_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, drugcv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv7\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, drugcv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(drug_rate) OVER (partition by icustay_id order by starttime, endtime) = drug_rate\n        THEN 0\n      else 1\n    end as drug_groups\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv8\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n, drugcv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug_groups\n    , SUM(drug_groups) OVER (partition by icustay_id order by starttime, endtime) as drug_groups_sum\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv9\n)\n, drugcv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , drug_groups_sum\n  , drug_rate\n  , sum(drug_amount) as drug_amount\n  from drugcv10\n  group by icustay_id, drug_groups_sum, drug_rate\n)\n-- now assign this data to every hour of the patient's stay\n-- drug_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugcv\nUNION\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugmv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"neuroblock_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of neuromuscular blocking agents\n-- Note: we assume that injections will be filtered for carevue as they will have starttime = stopttime.\n\n-- Get drug administration data from CareVue and MetaVision\n-- metavision is simple and only requires one temporary table\n\nwith drugmv as\n(\n  select\n      icustay_id, orderid\n    , rate as drug_rate\n    , amount as drug_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid in\n  (\n      222062 -- Vecuronium (664 rows, 154 infusion rows)\n    , 221555 -- Cisatracurium (9334 rows, 8970 infusion rows)\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n  and rate is not null -- only continuous infusions\n)\n, drugcv1 as\n(\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n\n    -- we only include continuous infusions, therefore expect a rate\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 and amount is not null then 1\n            when itemid <  40000 and rate is not null then 1\n          else 0 end) as drug_null\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 then coalesce(rate, amount)\n          else rate end) as drug_rate\n    , max(amount) as drug_amount\n  from inputevents_cv\n  where itemid in\n  (\n      30114 -- Cisatracurium (63994 rows)\n    , 30138\t-- Vecuronium\t (5160 rows)\n    , 30113 -- Atracurium  (1163 rows)\n    -- Below rows are less frequent ad-hoc documentation, but worth including!\n    , 42174\t-- nimbex cc/hr (207 rows)\n    , 42385\t-- Cisatracurium gtt (156 rows)\n    , 41916\t-- NIMBEX\tinputevents_cv (136 rows)\n    , 42100\t-- cistatracurium\t(132 rows)\n    , 42045\t-- nimbex mcg/kg/min (78 rows)\n    , 42246 -- CISATRICARIUM CC/HR (70 rows)\n    , 42291\t-- NIMBEX CC/HR (48 rows)\n    , 42590\t-- nimbex\tinputevents_cv (38 rows)\n    , 42284\t-- CISATRACURIUM DRIP (9 rows)\n    , 45096\t-- Vecuronium drip (2 rows)\n  )\n  group by icustay_id, charttime\n  UNION\n  -- add data from chartevents\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n    , max(case when valuenum <= 10 then 0 else 1 end) as drug_null\n\n    -- educated guess!\n    , max(case when valuenum <= 10 then valuenum else null end) as drug_rate\n    , max(case when valuenum  > 10 then valuenum else null end) as drug_amount\n  from chartevents\n  where itemid in\n  (\n      1856 -- Vecuronium mcg/min  (8 rows)\n    , 2164 -- NIMBEX MG/KG/HR  (243 rows)\n    , 2548 -- nimbex mg/kg/hr  (103 rows)\n    , 2285 -- nimbex mcg/kg/min  (85 rows)\n    , 2290 -- nimbex mcg/kg/m  (32 rows)\n    , 2670 -- nimbex  (38 rows)\n    , 2546 -- CISATRACURIUMMG/KG/H  (7 rows)\n    , 1098 -- cisatracurium mg/kg  (36 rows)\n    , 2390 -- cisatracurium mg/hr  (15 rows)\n    , 2511 -- CISATRACURIUM GTT  (4 rows)\n    , 1028 -- Cisatracurium  (208 rows)\n    , 1858 -- cisatracurium  (351 rows)\n  )\n  group by icustay_id, charttime\n\n)\n, drugcv2 as\n(\n  select v.*\n    , sum(drug_null) over (partition by icustay_id order by charttime) as drug_partition\n  from\n    drugcv1 v\n)\n, drugcv3 as\n(\n  select v.*\n    , first_value(drug_rate) over (partition by icustay_id, drug_partition order by charttime) as drug_prevrate_ifnull\n  from\n    drugcv2 v\n)\n, drugcv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) AS delta\n\n    , drug\n    , drug_rate\n    , drug_amount\n    , drug_stopped\n    , drug_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when drug = 0 then null\n\n        -- if this is the first instance of the drug\n        when drug_rate > 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug, drug_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes drugnum sequential\n        when drug_rate = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- drug_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when drug_prevrate_ifnull = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newdrug = 1\n        when LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded drug was D/C'd, newdrug = 1\n        when\n          LAG(drug_stopped,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 1 then 1\n\n        when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) > (interval '8 hours') then 1\n      else null\n      end as drug_start\n\nFROM\n  drugcv3\n)\n-- propagate start/stop flags forward in time\n, drugcv5 as\n(\n  select v.*\n    , SUM(drug_start) OVER (partition by icustay_id, drug order by charttime) as drug_first\nFROM\n  drugcv4 v\n)\n, drugcv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when drug = 0\n          then null\n\n        -- If the recorded drug was D/C'd, this is an end time\n        when drug_stopped = 1\n          then drug_first\n\n        -- If the rate is zero, this is the end time\n        when drug_rate = 0\n          then drug_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on drug\n        -- in principle, this could add an extra end time for the drug\n        -- however, since we later group on drug_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) is null\n          then drug_first\n\n        else null\n        end as drug_stop\n    from drugcv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, drug, drug_rate, drug_amount\n--     , drug_stopped\n--     , drug_start\n--     , drug_first\n--     , drug_stop\n-- from drugcv6 order by icustay_id, charttime\n\n, drugcv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, drug_first order by charttime) as endtime\n  , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\nfrom drugcv6\nwhere\n  drug_first is not null -- bogus data\nand\n  drug_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, drugcv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv7\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, drugcv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(drug_rate) OVER (partition by icustay_id order by starttime, endtime) = drug_rate\n        THEN 0\n      else 1\n    end as drug_groups\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv8\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n, drugcv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug_groups\n    , SUM(drug_groups) OVER (partition by icustay_id order by starttime, endtime) as drug_groups_sum\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv9\n)\n, drugcv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , drug_groups_sum\n  , drug_rate\n  , sum(drug_amount) as drug_amount\n  from drugcv10\n  group by icustay_id, drug_groups_sum, drug_rate\n)\n-- now assign this data to every hour of the patient's stay\n-- drug_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugcv\nUNION\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugmv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:36.368585Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.73, "status": "SELECT 9704"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 9704 in 0.73 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.103610Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.112427Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\nalter table \"postgres\".\"public\".\"neuroblock_dose\" rename to \"neuroblock_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\nalter table \"postgres\".\"public\".\"neuroblock_dose\" rename to \"neuroblock_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.112830Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.114201Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.119644Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\nalter table \"postgres\".\"public\".\"neuroblock_dose__dbt_tmp\" rename to \"neuroblock_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\nalter table \"postgres\".\"public\".\"neuroblock_dose__dbt_tmp\" rename to \"neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.119894Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.120749Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.123959Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.124320Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.124570Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.127126Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.neuroblock_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.neuroblock_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.131851Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.neuroblock_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"neuroblock_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.neuroblock_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"neuroblock_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.132121Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.134150Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.137136Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.neuroblock_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.137378Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.neuroblock_dose", "execution_time": 0, "index": 47, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": "2022-07-18T00:10:36.344712", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "status": "SELECT 9704", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "47 of 107 OK created table model public.neuroblock_dose ........................ [\u001b[32mSELECT 9704\u001b[0m in 0.79s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.138346Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:37.138829", "node_name": "neuroblock_dose", "node_path": "durations/neuroblock_dose.sql", "node_started_at": "2022-07-18T00:10:36.344712", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.neuroblock_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 9704", "code": "SELECT", "rows_affected": 9704}, "agate_table": null, "execution_time": 0.791872501373291, "failures": null, "message": "SELECT 9704", "node": {"alias": "neuroblock_dose", "build_path": "target/run/mimic/models/durations/neuroblock_dose.sql", "checksum": {"checksum": "74eedfa824a0d83f932f56cffca518862c4472c6946068b0719d61c7a429e2d8", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/neuroblock_dose.sql", "compiled_sql": "-- This query extracts dose+durations of neuromuscular blocking agents\n-- Note: we assume that injections will be filtered for carevue as they will have starttime = stopttime.\n\n-- Get drug administration data from CareVue and MetaVision\n-- metavision is simple and only requires one temporary table\n\nwith drugmv as\n(\n  select\n      icustay_id, orderid\n    , rate as drug_rate\n    , amount as drug_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid in\n  (\n      222062 -- Vecuronium (664 rows, 154 infusion rows)\n    , 221555 -- Cisatracurium (9334 rows, 8970 infusion rows)\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n  and rate is not null -- only continuous infusions\n)\n, drugcv1 as\n(\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n\n    -- we only include continuous infusions, therefore expect a rate\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 and amount is not null then 1\n            when itemid <  40000 and rate is not null then 1\n          else 0 end) as drug_null\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 then coalesce(rate, amount)\n          else rate end) as drug_rate\n    , max(amount) as drug_amount\n  from inputevents_cv\n  where itemid in\n  (\n      30114 -- Cisatracurium (63994 rows)\n    , 30138\t-- Vecuronium\t (5160 rows)\n    , 30113 -- Atracurium  (1163 rows)\n    -- Below rows are less frequent ad-hoc documentation, but worth including!\n    , 42174\t-- nimbex cc/hr (207 rows)\n    , 42385\t-- Cisatracurium gtt (156 rows)\n    , 41916\t-- NIMBEX\tinputevents_cv (136 rows)\n    , 42100\t-- cistatracurium\t(132 rows)\n    , 42045\t-- nimbex mcg/kg/min (78 rows)\n    , 42246 -- CISATRICARIUM CC/HR (70 rows)\n    , 42291\t-- NIMBEX CC/HR (48 rows)\n    , 42590\t-- nimbex\tinputevents_cv (38 rows)\n    , 42284\t-- CISATRACURIUM DRIP (9 rows)\n    , 45096\t-- Vecuronium drip (2 rows)\n  )\n  group by icustay_id, charttime\n  UNION\n  -- add data from chartevents\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n    , max(case when valuenum <= 10 then 0 else 1 end) as drug_null\n\n    -- educated guess!\n    , max(case when valuenum <= 10 then valuenum else null end) as drug_rate\n    , max(case when valuenum  > 10 then valuenum else null end) as drug_amount\n  from chartevents\n  where itemid in\n  (\n      1856 -- Vecuronium mcg/min  (8 rows)\n    , 2164 -- NIMBEX MG/KG/HR  (243 rows)\n    , 2548 -- nimbex mg/kg/hr  (103 rows)\n    , 2285 -- nimbex mcg/kg/min  (85 rows)\n    , 2290 -- nimbex mcg/kg/m  (32 rows)\n    , 2670 -- nimbex  (38 rows)\n    , 2546 -- CISATRACURIUMMG/KG/H  (7 rows)\n    , 1098 -- cisatracurium mg/kg  (36 rows)\n    , 2390 -- cisatracurium mg/hr  (15 rows)\n    , 2511 -- CISATRACURIUM GTT  (4 rows)\n    , 1028 -- Cisatracurium  (208 rows)\n    , 1858 -- cisatracurium  (351 rows)\n  )\n  group by icustay_id, charttime\n\n)\n, drugcv2 as\n(\n  select v.*\n    , sum(drug_null) over (partition by icustay_id order by charttime) as drug_partition\n  from\n    drugcv1 v\n)\n, drugcv3 as\n(\n  select v.*\n    , first_value(drug_rate) over (partition by icustay_id, drug_partition order by charttime) as drug_prevrate_ifnull\n  from\n    drugcv2 v\n)\n, drugcv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) AS delta\n\n    , drug\n    , drug_rate\n    , drug_amount\n    , drug_stopped\n    , drug_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when drug = 0 then null\n\n        -- if this is the first instance of the drug\n        when drug_rate > 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug, drug_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes drugnum sequential\n        when drug_rate = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- drug_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when drug_prevrate_ifnull = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newdrug = 1\n        when LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded drug was D/C'd, newdrug = 1\n        when\n          LAG(drug_stopped,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 1 then 1\n\n        when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) > (interval '8 hours') then 1\n      else null\n      end as drug_start\n\nFROM\n  drugcv3\n)\n-- propagate start/stop flags forward in time\n, drugcv5 as\n(\n  select v.*\n    , SUM(drug_start) OVER (partition by icustay_id, drug order by charttime) as drug_first\nFROM\n  drugcv4 v\n)\n, drugcv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when drug = 0\n          then null\n\n        -- If the recorded drug was D/C'd, this is an end time\n        when drug_stopped = 1\n          then drug_first\n\n        -- If the rate is zero, this is the end time\n        when drug_rate = 0\n          then drug_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on drug\n        -- in principle, this could add an extra end time for the drug\n        -- however, since we later group on drug_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) is null\n          then drug_first\n\n        else null\n        end as drug_stop\n    from drugcv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, drug, drug_rate, drug_amount\n--     , drug_stopped\n--     , drug_start\n--     , drug_first\n--     , drug_stop\n-- from drugcv6 order by icustay_id, charttime\n\n, drugcv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, drug_first order by charttime) as endtime\n  , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\nfrom drugcv6\nwhere\n  drug_first is not null -- bogus data\nand\n  drug_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, drugcv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv7\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, drugcv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(drug_rate) OVER (partition by icustay_id order by starttime, endtime) = drug_rate\n        THEN 0\n      else 1\n    end as drug_groups\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv8\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n, drugcv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug_groups\n    , SUM(drug_groups) OVER (partition by icustay_id order by starttime, endtime) as drug_groups_sum\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv9\n)\n, drugcv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , drug_groups_sum\n  , drug_rate\n  , sum(drug_amount) as drug_amount\n  from drugcv10\n  group by icustay_id, drug_groups_sum, drug_rate\n)\n-- now assign this data to every hour of the patient's stay\n-- drug_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugcv\nUNION\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugmv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5056405, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "neuroblock_dose"], "meta": {}, "name": "neuroblock_dose", "original_file_path": "models/durations/neuroblock_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/neuroblock_dose.sql", "raw_sql": "-- This query extracts dose+durations of neuromuscular blocking agents\n-- Note: we assume that injections will be filtered for carevue as they will have starttime = stopttime.\n\n-- Get drug administration data from CareVue and MetaVision\n-- metavision is simple and only requires one temporary table\n\nwith drugmv as\n(\n  select\n      icustay_id, orderid\n    , rate as drug_rate\n    , amount as drug_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid in\n  (\n      222062 -- Vecuronium (664 rows, 154 infusion rows)\n    , 221555 -- Cisatracurium (9334 rows, 8970 infusion rows)\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n  and rate is not null -- only continuous infusions\n)\n, drugcv1 as\n(\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n\n    -- we only include continuous infusions, therefore expect a rate\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 and amount is not null then 1\n            when itemid <  40000 and rate is not null then 1\n          else 0 end) as drug_null\n    , max(case\n            -- for \"free form\" entries (itemid >= 40000) rate is not available\n            when itemid >= 40000 then coalesce(rate, amount)\n          else rate end) as drug_rate\n    , max(amount) as drug_amount\n  from inputevents_cv\n  where itemid in\n  (\n      30114 -- Cisatracurium (63994 rows)\n    , 30138\t-- Vecuronium\t (5160 rows)\n    , 30113 -- Atracurium  (1163 rows)\n    -- Below rows are less frequent ad-hoc documentation, but worth including!\n    , 42174\t-- nimbex cc/hr (207 rows)\n    , 42385\t-- Cisatracurium gtt (156 rows)\n    , 41916\t-- NIMBEX\tinputevents_cv (136 rows)\n    , 42100\t-- cistatracurium\t(132 rows)\n    , 42045\t-- nimbex mcg/kg/min (78 rows)\n    , 42246 -- CISATRICARIUM CC/HR (70 rows)\n    , 42291\t-- NIMBEX CC/HR (48 rows)\n    , 42590\t-- nimbex\tinputevents_cv (38 rows)\n    , 42284\t-- CISATRACURIUM DRIP (9 rows)\n    , 45096\t-- Vecuronium drip (2 rows)\n  )\n  group by icustay_id, charttime\n  UNION\n  -- add data from chartevents\n  select\n    icustay_id, charttime\n    -- where clause below ensures all rows are instance of the drug\n    , 1 as drug\n\n    -- the 'stopped' column indicates if a drug has been disconnected\n    , max(case when stopped in ('Stopped','D/C''d') then 1 else 0 end) as drug_stopped\n    , max(case when valuenum <= 10 then 0 else 1 end) as drug_null\n\n    -- educated guess!\n    , max(case when valuenum <= 10 then valuenum else null end) as drug_rate\n    , max(case when valuenum  > 10 then valuenum else null end) as drug_amount\n  from chartevents\n  where itemid in\n  (\n      1856 -- Vecuronium mcg/min  (8 rows)\n    , 2164 -- NIMBEX MG/KG/HR  (243 rows)\n    , 2548 -- nimbex mg/kg/hr  (103 rows)\n    , 2285 -- nimbex mcg/kg/min  (85 rows)\n    , 2290 -- nimbex mcg/kg/m  (32 rows)\n    , 2670 -- nimbex  (38 rows)\n    , 2546 -- CISATRACURIUMMG/KG/H  (7 rows)\n    , 1098 -- cisatracurium mg/kg  (36 rows)\n    , 2390 -- cisatracurium mg/hr  (15 rows)\n    , 2511 -- CISATRACURIUM GTT  (4 rows)\n    , 1028 -- Cisatracurium  (208 rows)\n    , 1858 -- cisatracurium  (351 rows)\n  )\n  group by icustay_id, charttime\n\n)\n, drugcv2 as\n(\n  select v.*\n    , sum(drug_null) over (partition by icustay_id order by charttime) as drug_partition\n  from\n    drugcv1 v\n)\n, drugcv3 as\n(\n  select v.*\n    , first_value(drug_rate) over (partition by icustay_id, drug_partition order by charttime) as drug_prevrate_ifnull\n  from\n    drugcv2 v\n)\n, drugcv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) AS delta\n\n    , drug\n    , drug_rate\n    , drug_amount\n    , drug_stopped\n    , drug_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when drug = 0 then null\n\n        -- if this is the first instance of the drug\n        when drug_rate > 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug, drug_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes drugnum sequential\n        when drug_rate = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- drug_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when drug_prevrate_ifnull = 0 and\n          LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newdrug = 1\n        when LAG(drug_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded drug was D/C'd, newdrug = 1\n        when\n          LAG(drug_stopped,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          )\n          = 1 then 1\n\n        when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, drug order by charttime))) > (interval '8 hours') then 1\n      else null\n      end as drug_start\n\nFROM\n  drugcv3\n)\n-- propagate start/stop flags forward in time\n, drugcv5 as\n(\n  select v.*\n    , SUM(drug_start) OVER (partition by icustay_id, drug order by charttime) as drug_first\nFROM\n  drugcv4 v\n)\n, drugcv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when drug = 0\n          then null\n\n        -- If the recorded drug was D/C'd, this is an end time\n        when drug_stopped = 1\n          then drug_first\n\n        -- If the rate is zero, this is the end time\n        when drug_rate = 0\n          then drug_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on drug\n        -- in principle, this could add an extra end time for the drug\n        -- however, since we later group on drug_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, drug\n          order by charttime\n          ) is null\n          then drug_first\n\n        else null\n        end as drug_stop\n    from drugcv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, drug, drug_rate, drug_amount\n--     , drug_stopped\n--     , drug_start\n--     , drug_first\n--     , drug_stop\n-- from drugcv6 order by icustay_id, charttime\n\n, drugcv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, drug_first order by charttime) as endtime\n  , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\nfrom drugcv6\nwhere\n  drug_first is not null -- bogus data\nand\n  drug_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, drugcv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv7\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, drugcv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(drug_rate) OVER (partition by icustay_id order by starttime, endtime) = drug_rate\n        THEN 0\n      else 1\n    end as drug_groups\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv8\n  where endtime is not null\n  and drug_rate > 0\n  and starttime != endtime\n)\n, drugcv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , drug_groups\n    , SUM(drug_groups) OVER (partition by icustay_id order by starttime, endtime) as drug_groups_sum\n    , drug, drug_rate, drug_amount, drug_stop, drug_start, drug_first\n  from drugcv9\n)\n, drugcv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , drug_groups_sum\n  , drug_rate\n  , sum(drug_amount) as drug_amount\n  from drugcv10\n  group by icustay_id, drug_groups_sum, drug_rate\n)\n-- now assign this data to every hour of the patient's stay\n-- drug_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugcv\nUNION\nSELECT icustay_id\n  , starttime, endtime\n  , drug_rate, drug_amount\nfrom drugmv\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"neuroblock_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.neuroblock_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:36.349331Z", "name": "compile", "started_at": "2022-07-18T00:10:36.347387Z"}, {"completed_at": "2022-07-18T00:10:37.137107Z", "name": "execute", "started_at": "2022-07-18T00:10:36.349907Z"}]}, "unique_id": "model.mimic.neuroblock_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.neuroblock_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.139000Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:37.139458", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.norepinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.139548Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.norepinephrine_durations", "index": 48, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:37.139458", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "48 of 107 START table model public.norepinephrine_durations .................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.140295Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.141155Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:37.139458", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.norepinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.141444Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.norepinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.141881Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.144026Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.145475Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.norepinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.146261Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.norepinephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.156418Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.157276Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.157932Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.159020Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.167860Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.168137Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"norepinephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of norepinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30047,30120) then rate else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30047,30120) -- norepinephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the carevue data before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"norepinephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of norepinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30047,30120) then rate else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30047,30120) -- norepinephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the carevue data before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:37.168270Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.82, "status": "SELECT 23188"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 23188 in 3.82 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:40.990042Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:40.996947Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_durations\" rename to \"norepinephrine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_durations\" rename to \"norepinephrine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:40.997424Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:40.998803Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.002786Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_durations__dbt_tmp\" rename to \"norepinephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_durations__dbt_tmp\" rename to \"norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.003050Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.003763Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.007002Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.007234Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.007455Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.013451Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.016540Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"norepinephrine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"norepinephrine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.016884Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.019708Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.022760Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.023073Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.norepinephrine_durations", "execution_time": 3, "index": 48, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:37.139458", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "status": "SELECT 23188", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "48 of 107 OK created table model public.norepinephrine_durations ............... [\u001b[32mSELECT 23188\u001b[0m in 3.88s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.023948Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:41.024425", "node_name": "norepinephrine_durations", "node_path": "durations/norepinephrine_durations.sql", "node_started_at": "2022-07-18T00:10:37.139458", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 23188", "code": "SELECT", "rows_affected": 23188}, "agate_table": null, "execution_time": 3.882927417755127, "failures": null, "message": "SELECT 23188", "node": {"alias": "norepinephrine_durations", "build_path": "target/run/mimic/models/durations/norepinephrine_durations.sql", "checksum": {"checksum": "0f645b0c8e60bf8856c4d2cb6247415a338587d6985cf059e11442264c41a4ac", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/norepinephrine_durations.sql", "compiled_sql": "-- This query extracts durations of norepinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30047,30120) then rate else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30047,30120) -- norepinephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the carevue data before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5131402, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "norepinephrine_durations"], "meta": {}, "name": "norepinephrine_durations", "original_file_path": "models/durations/norepinephrine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/norepinephrine_durations.sql", "raw_sql": "-- This query extracts durations of norepinephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30047,30120) then rate else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30047,30120) -- norepinephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the carevue data before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"norepinephrine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.norepinephrine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:37.145305Z", "name": "compile", "started_at": "2022-07-18T00:10:37.141841Z"}, {"completed_at": "2022-07-18T00:10:41.022723Z", "name": "execute", "started_at": "2022-07-18T00:10:37.146961Z"}]}, "unique_id": "model.mimic.norepinephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.norepinephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.024598Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": "2022-07-18T00:10:41.025102", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.number_of_patients", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.025257Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.number_of_patients", "index": 49, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": "2022-07-18T00:10:41.025102", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "49 of 107 START table model public.number_of_patients .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.025868Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.027216Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": "2022-07-18T00:10:41.025102", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.number_of_patients", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.027570Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.number_of_patients", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.028125Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.034162Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.034860Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.number_of_patients", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.035142Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.number_of_patients\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.045086Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.046000Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.046403Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.046717Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.052352Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.052772Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\n\n\n  create  table \"postgres\".\"public\".\"number_of_patients__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Counts the total number of patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nSELECT count(*)\nFROM patients\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\n\n\n  create  table \"postgres\".\"public\".\"number_of_patients__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Counts the total number of patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nSELECT count(*)\nFROM patients\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.053025Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 1"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.059852Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.066447Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\nalter table \"postgres\".\"public\".\"number_of_patients\" rename to \"number_of_patients__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\nalter table \"postgres\".\"public\".\"number_of_patients\" rename to \"number_of_patients__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.066695Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.067441Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.071444Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\nalter table \"postgres\".\"public\".\"number_of_patients__dbt_tmp\" rename to \"number_of_patients\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\nalter table \"postgres\".\"public\".\"number_of_patients__dbt_tmp\" rename to \"number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.071678Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.072481Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.078855Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.079105Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.079432Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.081196Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.number_of_patients", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.number_of_patients\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.084668Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.number_of_patients", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\ndrop table if exists \"postgres\".\"public\".\"number_of_patients__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.number_of_patients\"} */\ndrop table if exists \"postgres\".\"public\".\"number_of_patients__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.085157Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.087622Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.093555Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.number_of_patients: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.094215Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.number_of_patients", "execution_time": 0, "index": 49, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": "2022-07-18T00:10:41.025102", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "status": "SELECT 1", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "49 of 107 OK created table model public.number_of_patients ..................... [\u001b[32mSELECT 1\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.095620Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:41.096073", "node_name": "number_of_patients", "node_path": "cookbook/number_of_patients.sql", "node_started_at": "2022-07-18T00:10:41.025102", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.number_of_patients"}, "run_result": {"adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "agate_table": null, "execution_time": 0.0686798095703125, "failures": null, "message": "SELECT 1", "node": {"alias": "number_of_patients", "build_path": "target/run/mimic/models/cookbook/number_of_patients.sql", "checksum": {"checksum": "87567dd10e0eea18c4f01815e494a7062afbe5b5ccea159dca910abf06c03f12", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/number_of_patients.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Counts the total number of patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nSELECT count(*)\nFROM patients", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.655203, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "number_of_patients"], "meta": {}, "name": "number_of_patients", "original_file_path": "models/cookbook/number_of_patients.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/number_of_patients.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Counts the total number of patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nSELECT count(*)\nFROM patients", "refs": [], "relation_name": "\"postgres\".\"public\".\"number_of_patients\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.number_of_patients", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:41.034808Z", "name": "compile", "started_at": "2022-07-18T00:10:41.028081Z"}, {"completed_at": "2022-07-18T00:10:41.093516Z", "name": "execute", "started_at": "2022-07-18T00:10:41.035415Z"}]}, "unique_id": "model.mimic.number_of_patients"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.number_of_patients", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.096215Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": "2022-07-18T00:10:41.096483", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.phenylephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.096510Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.phenylephrine_dose", "index": 50, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": "2022-07-18T00:10:41.096483", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "50 of 107 START table model public.phenylephrine_dose .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.096899Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.097518Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": "2022-07-18T00:10:41.096483", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.phenylephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.098048Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.phenylephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.098312Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.100202Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.100646Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.phenylephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.100783Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.phenylephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.112679Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.113404Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.113545Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.114003Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.119792Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.120534Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"phenylephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of phenylephrine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30127,30128) -- phenylephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"phenylephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of phenylephrine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30127,30128) -- phenylephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:41.120807Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.37, "status": "SELECT 186281"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 186281 in 3.37 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.494769Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.500792Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_dose\" rename to \"phenylephrine_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_dose\" rename to \"phenylephrine_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.501044Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.502483Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.508341Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_dose__dbt_tmp\" rename to \"phenylephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_dose__dbt_tmp\" rename to \"phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.508593Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.509399Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.512419Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.512639Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.512990Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.518056Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.521411Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"phenylephrine_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"phenylephrine_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.521702Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.524303Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.527299Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.527556Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.phenylephrine_dose", "execution_time": 3, "index": 50, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": "2022-07-18T00:10:41.096483", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "status": "SELECT 186281", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "50 of 107 OK created table model public.phenylephrine_dose ..................... [\u001b[32mSELECT 186281\u001b[0m in 3.43s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.528517Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:44.528869", "node_name": "phenylephrine_dose", "node_path": "durations/phenylephrine_dose.sql", "node_started_at": "2022-07-18T00:10:41.096483", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 186281", "code": "SELECT", "rows_affected": 186281}, "agate_table": null, "execution_time": 3.4311094284057617, "failures": null, "message": "SELECT 186281", "node": {"alias": "phenylephrine_dose", "build_path": "target/run/mimic/models/durations/phenylephrine_dose.sql", "checksum": {"checksum": "8f25620afdba297cc5f1cd52e8e4d7549acb59e08899f644f408924a24dcb941", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/phenylephrine_dose.sql", "compiled_sql": "-- This query extracts dose+durations of phenylephrine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30127,30128) -- phenylephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.497838, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "phenylephrine_dose"], "meta": {}, "name": "phenylephrine_dose", "original_file_path": "models/durations/phenylephrine_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/phenylephrine_dose.sql", "raw_sql": "-- This query extracts dose+durations of phenylephrine administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in (30127,30128) -- phenylephrine\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"phenylephrine_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.phenylephrine_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:41.100609Z", "name": "compile", "started_at": "2022-07-18T00:10:41.098291Z"}, {"completed_at": "2022-07-18T00:10:44.527271Z", "name": "execute", "started_at": "2022-07-18T00:10:41.100898Z"}]}, "unique_id": "model.mimic.phenylephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.phenylephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.528977Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": "2022-07-18T00:10:44.529214", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.phenylephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.529263Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.phenylephrine_durations", "index": 51, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": "2022-07-18T00:10:44.529214", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "51 of 107 START table model public.phenylephrine_durations ..................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.529445Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.530696Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": "2022-07-18T00:10:44.529214", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.phenylephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.531035Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.phenylephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.531601Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.534078Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.535125Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.phenylephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.535625Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.phenylephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.548959Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.549528Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.550120Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.550481Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.558413Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.559237Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"phenylephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of phenylephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30127,30128 -- phenylephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"phenylephrine_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of phenylephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30127,30128 -- phenylephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:44.559435Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.77, "status": "SELECT 33141"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 33141 in 3.77 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.328195Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.332109Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_durations\" rename to \"phenylephrine_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_durations\" rename to \"phenylephrine_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.332332Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.333171Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.337047Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_durations__dbt_tmp\" rename to \"phenylephrine_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\nalter table \"postgres\".\"public\".\"phenylephrine_durations__dbt_tmp\" rename to \"phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.337273Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.338101Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.340926Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.341135Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.341244Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.345807Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.phenylephrine_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.phenylephrine_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.347875Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.phenylephrine_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"phenylephrine_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.phenylephrine_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"phenylephrine_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.348103Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.350547Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.353113Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.phenylephrine_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.353508Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.phenylephrine_durations", "execution_time": 3, "index": 51, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": "2022-07-18T00:10:44.529214", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "status": "SELECT 33141", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "51 of 107 OK created table model public.phenylephrine_durations ................ [\u001b[32mSELECT 33141\u001b[0m in 3.82s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.354590Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.355191", "node_name": "phenylephrine_durations", "node_path": "durations/phenylephrine_durations.sql", "node_started_at": "2022-07-18T00:10:44.529214", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.phenylephrine_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 33141", "code": "SELECT", "rows_affected": 33141}, "agate_table": null, "execution_time": 3.8240199089050293, "failures": null, "message": "SELECT 33141", "node": {"alias": "phenylephrine_durations", "build_path": "target/run/mimic/models/durations/phenylephrine_durations.sql", "checksum": {"checksum": "99901c0a96cc83e68d4ec056e31827f8b0d39e5c6dff3411fe7a4d194eb66424", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/phenylephrine_durations.sql", "compiled_sql": "-- This query extracts durations of phenylephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30127,30128 -- phenylephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4635146, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "phenylephrine_durations"], "meta": {}, "name": "phenylephrine_durations", "original_file_path": "models/durations/phenylephrine_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/phenylephrine_durations.sql", "raw_sql": "-- This query extracts durations of phenylephrine administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30127,30128) then 1 else 0 end) as vaso -- phenylephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30127,30128) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30127,30128) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid in (30127,30128) then rate else null end) as vaso_rate\n    , max(case when itemid in (30127,30128) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid in\n  (\n        30127,30128 -- phenylephrine\n  )\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221749 -- phenylephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"phenylephrine_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.phenylephrine_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:44.535030Z", "name": "compile", "started_at": "2022-07-18T00:10:44.531518Z"}, {"completed_at": "2022-07-18T00:10:48.353085Z", "name": "execute", "started_at": "2022-07-18T00:10:44.535839Z"}]}, "unique_id": "model.mimic.phenylephrine_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.phenylephrine_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.355394Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": "2022-07-18T00:10:48.355932", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_bg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.356034Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_bg", "index": 52, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": "2022-07-18T00:10:48.355932", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "52 of 107 START table model public.pivoted_bg .................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.356868Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.357586Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": "2022-07-18T00:10:48.355932", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_bg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.358137Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_bg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.358657Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.362946Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.363803Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_bg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.364117Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_bg\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.376686Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.377434Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.377772Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.378061Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.388330Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.389035Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_bg__dbt_tmp\"\n  as (\n    -- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- create a table which has fuzzy boundaries on ICU admission\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  FROM icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (cast(round((DATETIME_DIFF(i.intime, i.outtime_lag, 'hour')/2)) as integer) || 'HOUR')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (cast(round((DATETIME_DIFF(i.intime_lead, i.outtime, 'minute')/2)) as integer) || 'MINUTE')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n, pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 then null\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n    FROM labevents le\n    where le.ITEMID in\n    -- blood gases\n    (\n      50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n      , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n      , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n      , 51545\n    )\n)\n, grp as\n(\n  select pvt.hadm_id, pvt.charttime\n  , max(case when label = 'SPECIMEN' then value else null end) as specimen\n  , avg(case when label = 'AADO2' then valuenum else null end) as aado2\n  , avg(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n  , avg(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n  , avg(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n  , avg(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n  , avg(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n  , avg(case when label = 'CALCIUM' then valuenum else null end) as calcium\n  , avg(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n  , avg(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n  , avg(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n  , avg(case when label = 'INTUBATED' then valuenum else null end) as intubated\n  , avg(case when label = 'LACTATE' then valuenum else null end) as lactate\n  , avg(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n  , avg(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n  , avg(case when label = 'FIO2' then valuenum else null end) as fio2\n  , avg(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n  , avg(case when label = 'PCO2' then valuenum else null end) as pco2\n  , avg(case when label = 'PEEP' then valuenum else null end) as peep\n  , avg(case when label = 'PH' then valuenum else null end) as ph\n  , avg(case when label = 'PO2' then valuenum else null end) as po2\n  , avg(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n  , avg(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n  , avg(case when label = 'SODIUM' then valuenum else null end) as sodium\n  , avg(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n  , avg(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n  , max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n  , max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\n  from pvt\n  group by pvt.hadm_id, pvt.charttime\n  -- remove observations if there is more than one specimen listed\n  -- we do not know whether these are arterial or mixed venous, etc...\n  -- happily this is a small fraction of the total number of observations\n  having sum(case when label = 'SPECIMEN' then 1 else 0 end)<2\n)\nselect\n  iid.icustay_id, grp.*\nfrom grp\ninner join admissions adm\n  on grp.hadm_id = adm.hadm_id\nleft join iid_assign iid\n  on adm.subject_id = iid.subject_id\n  and grp.charttime >= iid.data_start\n  and grp.charttime < iid.data_end\norder by grp.hadm_id, grp.charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_bg__dbt_tmp\"\n  as (\n    -- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- create a table which has fuzzy boundaries on ICU admission\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  FROM icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (cast(round((DATETIME_DIFF(i.intime, i.outtime_lag, 'hour')/2)) as integer) || 'HOUR')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (cast(round((DATETIME_DIFF(i.intime_lead, i.outtime, 'minute')/2)) as integer) || 'MINUTE')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n, pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 then null\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n    FROM labevents le\n    where le.ITEMID in\n    -- blood gases\n    (\n      50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n      , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n      , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n      , 51545\n    )\n)\n, grp as\n(\n  select pvt.hadm_id, pvt.charttime\n  , max(case when label = 'SPECIMEN' then value else null end) as specimen\n  , avg(case when label = 'AADO2' then valuenum else null end) as aado2\n  , avg(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n  , avg(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n  , avg(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n  , avg(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n  , avg(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n  , avg(case when label = 'CALCIUM' then valuenum else null end) as calcium\n  , avg(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n  , avg(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n  , avg(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n  , avg(case when label = 'INTUBATED' then valuenum else null end) as intubated\n  , avg(case when label = 'LACTATE' then valuenum else null end) as lactate\n  , avg(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n  , avg(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n  , avg(case when label = 'FIO2' then valuenum else null end) as fio2\n  , avg(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n  , avg(case when label = 'PCO2' then valuenum else null end) as pco2\n  , avg(case when label = 'PEEP' then valuenum else null end) as peep\n  , avg(case when label = 'PH' then valuenum else null end) as ph\n  , avg(case when label = 'PO2' then valuenum else null end) as po2\n  , avg(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n  , avg(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n  , avg(case when label = 'SODIUM' then valuenum else null end) as sodium\n  , avg(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n  , avg(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n  , max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n  , max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\n  from pvt\n  group by pvt.hadm_id, pvt.charttime\n  -- remove observations if there is more than one specimen listed\n  -- we do not know whether these are arterial or mixed venous, etc...\n  -- happily this is a small fraction of the total number of observations\n  having sum(case when label = 'SPECIMEN' then 1 else 0 end)<2\n)\nselect\n  iid.icustay_id, grp.*\nfrom grp\ninner join admissions adm\n  on grp.hadm_id = adm.hadm_id\nleft join iid_assign iid\n  on adm.subject_id = iid.subject_id\n  and grp.charttime >= iid.data_start\n  and grp.charttime < iid.data_end\norder by grp.hadm_id, grp.charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.389215Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.08, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.08 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.472446Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.477558Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg\" rename to \"pivoted_bg__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg\" rename to \"pivoted_bg__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.478029Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.480108Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.486550Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg__dbt_tmp\" rename to \"pivoted_bg\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg__dbt_tmp\" rename to \"pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.487024Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.487940Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.491140Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.491361Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.491704Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.492922Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.495558Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_bg__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_bg__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.495799Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.497986Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.501555Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.502087Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_bg", "execution_time": 0, "index": 52, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": "2022-07-18T00:10:48.355932", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "52 of 107 OK created table model public.pivoted_bg ............................. [\u001b[32mSELECT 0\u001b[0m in 0.15s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.503680Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.504057", "node_name": "pivoted_bg", "node_path": "pivot/pivoted_bg.sql", "node_started_at": "2022-07-18T00:10:48.355932", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.14617419242858887, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_bg", "build_path": "target/run/mimic/models/pivot/pivoted_bg.sql", "checksum": {"checksum": "90c76d626f0dc83a92c83e39727c4ba0104b7ace92580882f639c97fe2a661b5", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_bg.sql", "compiled_sql": "-- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- create a table which has fuzzy boundaries on ICU admission\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  FROM icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (cast(round((DATETIME_DIFF(i.intime, i.outtime_lag, 'hour')/2)) as integer) || 'HOUR')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (cast(round((DATETIME_DIFF(i.intime_lead, i.outtime, 'minute')/2)) as integer) || 'MINUTE')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n, pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 then null\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n    FROM labevents le\n    where le.ITEMID in\n    -- blood gases\n    (\n      50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n      , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n      , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n      , 51545\n    )\n)\n, grp as\n(\n  select pvt.hadm_id, pvt.charttime\n  , max(case when label = 'SPECIMEN' then value else null end) as specimen\n  , avg(case when label = 'AADO2' then valuenum else null end) as aado2\n  , avg(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n  , avg(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n  , avg(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n  , avg(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n  , avg(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n  , avg(case when label = 'CALCIUM' then valuenum else null end) as calcium\n  , avg(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n  , avg(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n  , avg(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n  , avg(case when label = 'INTUBATED' then valuenum else null end) as intubated\n  , avg(case when label = 'LACTATE' then valuenum else null end) as lactate\n  , avg(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n  , avg(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n  , avg(case when label = 'FIO2' then valuenum else null end) as fio2\n  , avg(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n  , avg(case when label = 'PCO2' then valuenum else null end) as pco2\n  , avg(case when label = 'PEEP' then valuenum else null end) as peep\n  , avg(case when label = 'PH' then valuenum else null end) as ph\n  , avg(case when label = 'PO2' then valuenum else null end) as po2\n  , avg(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n  , avg(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n  , avg(case when label = 'SODIUM' then valuenum else null end) as sodium\n  , avg(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n  , avg(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n  , max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n  , max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\n  from pvt\n  group by pvt.hadm_id, pvt.charttime\n  -- remove observations if there is more than one specimen listed\n  -- we do not know whether these are arterial or mixed venous, etc...\n  -- happily this is a small fraction of the total number of observations\n  having sum(case when label = 'SPECIMEN' then 1 else 0 end)<2\n)\nselect\n  iid.icustay_id, grp.*\nfrom grp\ninner join admissions adm\n  on grp.hadm_id = adm.hadm_id\nleft join iid_assign iid\n  on adm.subject_id = iid.subject_id\n  and grp.charttime >= iid.data_start\n  and grp.charttime < iid.data_end\norder by grp.hadm_id, grp.charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5864484, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_bg"], "meta": {}, "name": "pivoted_bg", "original_file_path": "models/pivot/pivoted_bg.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_bg.sql", "raw_sql": "-- The aim of this query is to pivot entries related to blood gases and\n-- chemistry values which were found in LABEVENTS\n\n-- create a table which has fuzzy boundaries on ICU admission\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  FROM icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (cast(round((DATETIME_DIFF(i.intime, i.outtime_lag, 'hour')/2)) as integer) || 'HOUR')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (cast(round((DATETIME_DIFF(i.intime_lead, i.outtime, 'minute')/2)) as integer) || 'MINUTE')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n, pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 then null\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          -- ensure FiO2 is a valid number between 21-100\n          -- mistakes are rare (<100 obs out of ~100,000)\n          -- there are 862 obs of valuenum == 20 - some people round down!\n          -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n          when itemid = 50816 and valuenum < 20 then null\n          when itemid = 50816 and valuenum > 100 then null\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n    FROM labevents le\n    where le.ITEMID in\n    -- blood gases\n    (\n      50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n      , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n      , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n      , 51545\n    )\n)\n, grp as\n(\n  select pvt.hadm_id, pvt.charttime\n  , max(case when label = 'SPECIMEN' then value else null end) as specimen\n  , avg(case when label = 'AADO2' then valuenum else null end) as aado2\n  , avg(case when label = 'BASEEXCESS' then valuenum else null end) as baseexcess\n  , avg(case when label = 'BICARBONATE' then valuenum else null end) as bicarbonate\n  , avg(case when label = 'TOTALCO2' then valuenum else null end) as totalco2\n  , avg(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as carboxyhemoglobin\n  , avg(case when label = 'CHLORIDE' then valuenum else null end) as chloride\n  , avg(case when label = 'CALCIUM' then valuenum else null end) as calcium\n  , avg(case when label = 'GLUCOSE' then valuenum else null end) as glucose\n  , avg(case when label = 'HEMATOCRIT' then valuenum else null end) as hematocrit\n  , avg(case when label = 'HEMOGLOBIN' then valuenum else null end) as hemoglobin\n  , avg(case when label = 'INTUBATED' then valuenum else null end) as intubated\n  , avg(case when label = 'LACTATE' then valuenum else null end) as lactate\n  , avg(case when label = 'METHEMOGLOBIN' then valuenum else null end) as methemoglobin\n  , avg(case when label = 'O2FLOW' then valuenum else null end) as o2flow\n  , avg(case when label = 'FIO2' then valuenum else null end) as fio2\n  , avg(case when label = 'SO2' then valuenum else null end) as so2 -- OXYGENSATURATION\n  , avg(case when label = 'PCO2' then valuenum else null end) as pco2\n  , avg(case when label = 'PEEP' then valuenum else null end) as peep\n  , avg(case when label = 'PH' then valuenum else null end) as ph\n  , avg(case when label = 'PO2' then valuenum else null end) as po2\n  , avg(case when label = 'POTASSIUM' then valuenum else null end) as potassium\n  , avg(case when label = 'REQUIREDO2' then valuenum else null end) as requiredo2\n  , avg(case when label = 'SODIUM' then valuenum else null end) as sodium\n  , avg(case when label = 'TEMPERATURE' then valuenum else null end) as temperature\n  , avg(case when label = 'TIDALVOLUME' then valuenum else null end) as tidalvolume\n  , max(case when label = 'VENTILATIONRATE' then valuenum else null end) as ventilationrate\n  , max(case when label = 'VENTILATOR' then valuenum else null end) as ventilator\n  from pvt\n  group by pvt.hadm_id, pvt.charttime\n  -- remove observations if there is more than one specimen listed\n  -- we do not know whether these are arterial or mixed venous, etc...\n  -- happily this is a small fraction of the total number of observations\n  having sum(case when label = 'SPECIMEN' then 1 else 0 end)<2\n)\nselect\n  iid.icustay_id, grp.*\nfrom grp\ninner join admissions adm\n  on grp.hadm_id = adm.hadm_id\nleft join iid_assign iid\n  on adm.subject_id = iid.subject_id\n  and grp.charttime >= iid.data_start\n  and grp.charttime < iid.data_end\norder by grp.hadm_id, grp.charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_bg\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_bg", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.363727Z", "name": "compile", "started_at": "2022-07-18T00:10:48.358617Z"}, {"completed_at": "2022-07-18T00:10:48.501523Z", "name": "execute", "started_at": "2022-07-18T00:10:48.364322Z"}]}, "unique_id": "model.mimic.pivoted_bg"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_bg", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.504321Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": "2022-07-18T00:10:48.504887", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_fio2", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.504981Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_fio2", "index": 53, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": "2022-07-18T00:10:48.504887", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "53 of 107 START table model public.pivoted_fio2 ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.505526Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.506864Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": "2022-07-18T00:10:48.504887", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_fio2", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.507301Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_fio2", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.507638Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.509399Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.510381Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_fio2", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.510705Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_fio2\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.520364Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.520853Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.520990Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.521101Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.529552Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.530334Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_fio2__dbt_tmp\"\n  as (\n    with pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  , le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n    -- add in some sanity checks on the values\n    , ROUND(MAX((case\n        when valuenum <= 0 then null\n        -- ensure FiO2 is a valid number between 21-100\n        -- mistakes are rare (<100 obs out of ~100,000)\n        -- there are 862 obs of valuenum == 20 - some people round down!\n        -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n        when itemid = 50816 and valuenum < 20 then null\n        when itemid = 50816 and valuenum > 100 then null\n    ELSE valuenum END))::numeric, 2) AS valuenum\n    FROM labevents le\n    where le.ITEMID = 50816\n    GROUP BY le.hadm_id, le.charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , ROUND((MAX(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ))::numeric, 2) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\nselect\n  ie.icustay_id\n  , COALESCE(pvt.charttime, fi.charttime) AS charttime\n  , COALESCE(pvt.valuenum, fi.fio2_chartevents) AS fio2\nfrom \n(\n    -- one row per icustay_id/charttime\n    SELECT hadm_id, charttime\n    from pvt\n    UNION DISTINCT\n    SELECT hadm_id, charttime\n    from stg_fio2\n) base\nINNER JOIN icustays ie\n  on base.hadm_id = ie.hadm_id\n  AND base.charttime >= DATETIME_SUB(ie.intime, INTERVAL '12' HOUR)\n  AND base.charttime <= DATETIME_ADD(ie.outtime, INTERVAL '12' HOUR)\nLEFT JOIN pvt\n  ON base.hadm_id = pvt.hadm_id\n  AND base.charttime = pvt.charttime\nLEFT JOIN stg_fio2 fi\n  ON base.hadm_id = fi.hadm_id\n  AND base.charttime = fi.charttime\nORDER BY icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_fio2__dbt_tmp\"\n  as (\n    with pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  , le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n    -- add in some sanity checks on the values\n    , ROUND(MAX((case\n        when valuenum <= 0 then null\n        -- ensure FiO2 is a valid number between 21-100\n        -- mistakes are rare (<100 obs out of ~100,000)\n        -- there are 862 obs of valuenum == 20 - some people round down!\n        -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n        when itemid = 50816 and valuenum < 20 then null\n        when itemid = 50816 and valuenum > 100 then null\n    ELSE valuenum END))::numeric, 2) AS valuenum\n    FROM labevents le\n    where le.ITEMID = 50816\n    GROUP BY le.hadm_id, le.charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , ROUND((MAX(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ))::numeric, 2) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\nselect\n  ie.icustay_id\n  , COALESCE(pvt.charttime, fi.charttime) AS charttime\n  , COALESCE(pvt.valuenum, fi.fio2_chartevents) AS fio2\nfrom \n(\n    -- one row per icustay_id/charttime\n    SELECT hadm_id, charttime\n    from pvt\n    UNION DISTINCT\n    SELECT hadm_id, charttime\n    from stg_fio2\n) base\nINNER JOIN icustays ie\n  on base.hadm_id = ie.hadm_id\n  AND base.charttime >= DATETIME_SUB(ie.intime, INTERVAL '12' HOUR)\n  AND base.charttime <= DATETIME_ADD(ie.outtime, INTERVAL '12' HOUR)\nLEFT JOIN pvt\n  ON base.hadm_id = pvt.hadm_id\n  AND base.charttime = pvt.charttime\nLEFT JOIN stg_fio2 fi\n  ON base.hadm_id = fi.hadm_id\n  AND base.charttime = fi.charttime\nORDER BY icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.530680Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 28"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 28 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.543402Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.548020Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\nalter table \"postgres\".\"public\".\"pivoted_fio2\" rename to \"pivoted_fio2__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\nalter table \"postgres\".\"public\".\"pivoted_fio2\" rename to \"pivoted_fio2__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.548228Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.549081Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.555888Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\nalter table \"postgres\".\"public\".\"pivoted_fio2__dbt_tmp\" rename to \"pivoted_fio2\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\nalter table \"postgres\".\"public\".\"pivoted_fio2__dbt_tmp\" rename to \"pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.556206Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.557031Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.563020Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.563391Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.563662Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.564794Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_fio2", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_fio2\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.569014Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_fio2", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_fio2__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_fio2\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_fio2__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.569543Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.572696Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.575945Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_fio2: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.576239Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_fio2", "execution_time": 0, "index": 53, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": "2022-07-18T00:10:48.504887", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "status": "SELECT 28", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "53 of 107 OK created table model public.pivoted_fio2 ........................... [\u001b[32mSELECT 28\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.576871Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.577131", "node_name": "pivoted_fio2", "node_path": "pivot/pivoted_fio2.sql", "node_started_at": "2022-07-18T00:10:48.504887", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_fio2"}, "run_result": {"adapter_response": {"_message": "SELECT 28", "code": "SELECT", "rows_affected": 28}, "agate_table": null, "execution_time": 0.07025361061096191, "failures": null, "message": "SELECT 28", "node": {"alias": "pivoted_fio2", "build_path": "target/run/mimic/models/pivot/pivoted_fio2.sql", "checksum": {"checksum": "6aac5a5779a4cf5bd41f9266f0440ba96eca618ef9459a4283056504618e08b2", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_fio2.sql", "compiled_sql": "with pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  , le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n    -- add in some sanity checks on the values\n    , ROUND(MAX((case\n        when valuenum <= 0 then null\n        -- ensure FiO2 is a valid number between 21-100\n        -- mistakes are rare (<100 obs out of ~100,000)\n        -- there are 862 obs of valuenum == 20 - some people round down!\n        -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n        when itemid = 50816 and valuenum < 20 then null\n        when itemid = 50816 and valuenum > 100 then null\n    ELSE valuenum END))::numeric, 2) AS valuenum\n    FROM labevents le\n    where le.ITEMID = 50816\n    GROUP BY le.hadm_id, le.charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , ROUND((MAX(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ))::numeric, 2) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\nselect\n  ie.icustay_id\n  , COALESCE(pvt.charttime, fi.charttime) AS charttime\n  , COALESCE(pvt.valuenum, fi.fio2_chartevents) AS fio2\nfrom \n(\n    -- one row per icustay_id/charttime\n    SELECT hadm_id, charttime\n    from pvt\n    UNION DISTINCT\n    SELECT hadm_id, charttime\n    from stg_fio2\n) base\nINNER JOIN icustays ie\n  on base.hadm_id = ie.hadm_id\n  AND base.charttime >= DATETIME_SUB(ie.intime, INTERVAL '12' HOUR)\n  AND base.charttime <= DATETIME_ADD(ie.outtime, INTERVAL '12' HOUR)\nLEFT JOIN pvt\n  ON base.hadm_id = pvt.hadm_id\n  AND base.charttime = pvt.charttime\nLEFT JOIN stg_fio2 fi\n  ON base.hadm_id = fi.hadm_id\n  AND base.charttime = fi.charttime\nORDER BY icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5938597, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_fio2"], "meta": {}, "name": "pivoted_fio2", "original_file_path": "models/pivot/pivoted_fio2.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_fio2.sql", "raw_sql": "with pvt as\n( -- begin query that extracts the data\n  select le.hadm_id\n  , le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n    -- add in some sanity checks on the values\n    , ROUND(MAX((case\n        when valuenum <= 0 then null\n        -- ensure FiO2 is a valid number between 21-100\n        -- mistakes are rare (<100 obs out of ~100,000)\n        -- there are 862 obs of valuenum == 20 - some people round down!\n        -- rather than risk imputing garbage data for FiO2, we simply NULL invalid values\n        when itemid = 50816 and valuenum < 20 then null\n        when itemid = 50816 and valuenum > 100 then null\n    ELSE valuenum END))::numeric, 2) AS valuenum\n    FROM labevents le\n    where le.ITEMID = 50816\n    GROUP BY le.hadm_id, le.charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , ROUND((MAX(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ))::numeric, 2) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\nselect\n  ie.icustay_id\n  , COALESCE(pvt.charttime, fi.charttime) AS charttime\n  , COALESCE(pvt.valuenum, fi.fio2_chartevents) AS fio2\nfrom \n(\n    -- one row per icustay_id/charttime\n    SELECT hadm_id, charttime\n    from pvt\n    UNION DISTINCT\n    SELECT hadm_id, charttime\n    from stg_fio2\n) base\nINNER JOIN icustays ie\n  on base.hadm_id = ie.hadm_id\n  AND base.charttime >= DATETIME_SUB(ie.intime, INTERVAL '12' HOUR)\n  AND base.charttime <= DATETIME_ADD(ie.outtime, INTERVAL '12' HOUR)\nLEFT JOIN pvt\n  ON base.hadm_id = pvt.hadm_id\n  AND base.charttime = pvt.charttime\nLEFT JOIN stg_fio2 fi\n  ON base.hadm_id = fi.hadm_id\n  AND base.charttime = fi.charttime\nORDER BY icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_fio2\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_fio2", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.510312Z", "name": "compile", "started_at": "2022-07-18T00:10:48.507617Z"}, {"completed_at": "2022-07-18T00:10:48.575910Z", "name": "execute", "started_at": "2022-07-18T00:10:48.511007Z"}]}, "unique_id": "model.mimic.pivoted_fio2"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_fio2", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.577222Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": "2022-07-18T00:10:48.577415", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.577433Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_gcs", "index": 54, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": "2022-07-18T00:10:48.577415", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "54 of 107 START table model public.pivoted_gcs ................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.578337Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.579077Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": "2022-07-18T00:10:48.577415", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.579415Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.579691Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.581179Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.581762Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.582067Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_gcs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.590970Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.591411Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.591749Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.591992Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.597132Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.597385Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_gcs__dbt_tmp\"\n  as (\n    -- This query extracts the Glasgow Coma Scale, a measure of neurological function.\n-- The query has a few special rules:\n--    (1) The verbal component can be set to 0 if the patient is ventilated.\n--    This is corrected to 5 - the overall GCS is set to 15 in these cases.\n--    (2) Often only one of three components is documented. The other components\n--    are carried forward.\n\n-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as gcsverbal\n--    454 as gcsmotor\n--    184 as gcseyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form gcsverbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  select ce.icustay_id, ce.charttime\n  -- pivot each value into its own column\n  , max(case when ce.ITEMID in (454,223901) then ce.valuenum else null end) as gcsmotor\n  , max(case\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 0\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 0\n      when ce.ITEMID in (723,223900) then ce.valuenum\n      else null \n    end) as gcsverbal\n  , max(case when ce.ITEMID in (184,220739) then ce.valuenum else null end) as gcseyes\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , max(case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 1 -- carevue\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 1 -- metavision\n    else 0 end)\n    as endotrachflag\n  , ROW_NUMBER ()\n          OVER (PARTITION BY ce.icustay_id ORDER BY ce.charttime ASC) as rn\n  FROM chartevents ce\n  -- Isolate the desired GCS variables\n  where ce.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error != 1)\n  group by ce.icustay_id, ce.charttime\n)\n, gcs_stg0 as (\n  select b.*\n  , b2.gcsverbal as gcsverbalprev\n  , b2.gcsmotor as gcsmotorprev\n  , b2.gcseyes as gcseyesprev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.gcsverbal = 0\n        then 15\n      when b.gcsverbal is null and b2.gcsverbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.gcsverbal = 0\n        then\n            coalesce(b.gcsmotor,6)\n          + coalesce(b.gcsverbal,5)\n          + coalesce(b.gcseyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.gcsmotor,coalesce(b2.gcsmotor,6))\n          + coalesce(b.gcsverbal,coalesce(b2.gcsverbal,5))\n          + coalesce(b.gcseyes,coalesce(b2.gcseyes,4))\n      end as gcs\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.icustay_id = b2.icustay_id\n    and b.rn = b2.rn+1\n    and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n-- combine components with previous within 6 hours\n-- filter down to cohort which is not excluded\n-- truncate charttime to the hour\n, gcs_stg1 as\n(\n  select gs.icustay_id, gs.charttime\n  , gs.gcs\n  , coalesce(gcsmotor,gcsmotorprev) as gcsmotor\n  , coalesce(gcsverbal,gcsverbalprev) as gcsverbal\n  , coalesce(gcseyes,gcseyesprev) as gcseyes\n  , case when coalesce(gcsmotor,gcsmotorprev) is null then 0 else 1 end\n  + case when coalesce(gcsverbal,gcsverbalprev) is null then 0 else 1 end\n  + case when coalesce(gcseyes,gcseyesprev) is null then 0 else 1 end\n    as components_measured\n  , endotrachflag\n  from gcs_stg0 gs\n)\n-- priority is:\n--  (i) complete data, (ii) non-sedated GCS, (iii) lowest GCS, (iv) charttime\n, gcs_priority as\n(\n  select icustay_id\n    , charttime\n    , gcs\n    , gcsmotor\n    , gcsverbal\n    , gcseyes\n    , endotrachflag\n    , ROW_NUMBER() over\n      (\n        PARTITION BY icustay_id, charttime\n        ORDER BY components_measured DESC, endotrachflag, gcs, charttime DESC\n      ) as rn\n  from gcs_stg1\n)\nselect icustay_id\n  , charttime\n  , gcs\n  , gcsmotor\n  , gcsverbal\n  , gcseyes\n  , endotrachflag\nfrom gcs_priority gs\nwhere rn = 1\nORDER BY icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_gcs__dbt_tmp\"\n  as (\n    -- This query extracts the Glasgow Coma Scale, a measure of neurological function.\n-- The query has a few special rules:\n--    (1) The verbal component can be set to 0 if the patient is ventilated.\n--    This is corrected to 5 - the overall GCS is set to 15 in these cases.\n--    (2) Often only one of three components is documented. The other components\n--    are carried forward.\n\n-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as gcsverbal\n--    454 as gcsmotor\n--    184 as gcseyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form gcsverbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  select ce.icustay_id, ce.charttime\n  -- pivot each value into its own column\n  , max(case when ce.ITEMID in (454,223901) then ce.valuenum else null end) as gcsmotor\n  , max(case\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 0\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 0\n      when ce.ITEMID in (723,223900) then ce.valuenum\n      else null \n    end) as gcsverbal\n  , max(case when ce.ITEMID in (184,220739) then ce.valuenum else null end) as gcseyes\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , max(case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 1 -- carevue\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 1 -- metavision\n    else 0 end)\n    as endotrachflag\n  , ROW_NUMBER ()\n          OVER (PARTITION BY ce.icustay_id ORDER BY ce.charttime ASC) as rn\n  FROM chartevents ce\n  -- Isolate the desired GCS variables\n  where ce.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error != 1)\n  group by ce.icustay_id, ce.charttime\n)\n, gcs_stg0 as (\n  select b.*\n  , b2.gcsverbal as gcsverbalprev\n  , b2.gcsmotor as gcsmotorprev\n  , b2.gcseyes as gcseyesprev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.gcsverbal = 0\n        then 15\n      when b.gcsverbal is null and b2.gcsverbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.gcsverbal = 0\n        then\n            coalesce(b.gcsmotor,6)\n          + coalesce(b.gcsverbal,5)\n          + coalesce(b.gcseyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.gcsmotor,coalesce(b2.gcsmotor,6))\n          + coalesce(b.gcsverbal,coalesce(b2.gcsverbal,5))\n          + coalesce(b.gcseyes,coalesce(b2.gcseyes,4))\n      end as gcs\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.icustay_id = b2.icustay_id\n    and b.rn = b2.rn+1\n    and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n-- combine components with previous within 6 hours\n-- filter down to cohort which is not excluded\n-- truncate charttime to the hour\n, gcs_stg1 as\n(\n  select gs.icustay_id, gs.charttime\n  , gs.gcs\n  , coalesce(gcsmotor,gcsmotorprev) as gcsmotor\n  , coalesce(gcsverbal,gcsverbalprev) as gcsverbal\n  , coalesce(gcseyes,gcseyesprev) as gcseyes\n  , case when coalesce(gcsmotor,gcsmotorprev) is null then 0 else 1 end\n  + case when coalesce(gcsverbal,gcsverbalprev) is null then 0 else 1 end\n  + case when coalesce(gcseyes,gcseyesprev) is null then 0 else 1 end\n    as components_measured\n  , endotrachflag\n  from gcs_stg0 gs\n)\n-- priority is:\n--  (i) complete data, (ii) non-sedated GCS, (iii) lowest GCS, (iv) charttime\n, gcs_priority as\n(\n  select icustay_id\n    , charttime\n    , gcs\n    , gcsmotor\n    , gcsverbal\n    , gcseyes\n    , endotrachflag\n    , ROW_NUMBER() over\n      (\n        PARTITION BY icustay_id, charttime\n        ORDER BY components_measured DESC, endotrachflag, gcs, charttime DESC\n      ) as rn\n  from gcs_stg1\n)\nselect icustay_id\n  , charttime\n  , gcs\n  , gcsmotor\n  , gcsverbal\n  , gcseyes\n  , endotrachflag\nfrom gcs_priority gs\nwhere rn = 1\nORDER BY icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.597523Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.604265Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.608592Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\nalter table \"postgres\".\"public\".\"pivoted_gcs\" rename to \"pivoted_gcs__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\nalter table \"postgres\".\"public\".\"pivoted_gcs\" rename to \"pivoted_gcs__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.608817Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.609526Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.613121Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\nalter table \"postgres\".\"public\".\"pivoted_gcs__dbt_tmp\" rename to \"pivoted_gcs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\nalter table \"postgres\".\"public\".\"pivoted_gcs__dbt_tmp\" rename to \"pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.613354Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.614162Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.617652Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.617956Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.618200Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.619349Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_gcs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_gcs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.621734Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_gcs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_gcs__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_gcs\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_gcs__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.622003Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.623865Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.626904Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_gcs: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.627347Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_gcs", "execution_time": 0, "index": 54, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": "2022-07-18T00:10:48.577415", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "54 of 107 OK created table model public.pivoted_gcs ............................ [\u001b[32mSELECT 0\u001b[0m in 0.05s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.628188Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.628668", "node_name": "pivoted_gcs", "node_path": "pivot/pivoted_gcs.sql", "node_started_at": "2022-07-18T00:10:48.577415", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_gcs"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.04920172691345215, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_gcs", "build_path": "target/run/mimic/models/pivot/pivoted_gcs.sql", "checksum": {"checksum": "98baa3f1f63bf29253ff3314d48449e8f71877c729e6fa6c7b3e58b19a1f0485", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_gcs.sql", "compiled_sql": "-- This query extracts the Glasgow Coma Scale, a measure of neurological function.\n-- The query has a few special rules:\n--    (1) The verbal component can be set to 0 if the patient is ventilated.\n--    This is corrected to 5 - the overall GCS is set to 15 in these cases.\n--    (2) Often only one of three components is documented. The other components\n--    are carried forward.\n\n-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as gcsverbal\n--    454 as gcsmotor\n--    184 as gcseyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form gcsverbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  select ce.icustay_id, ce.charttime\n  -- pivot each value into its own column\n  , max(case when ce.ITEMID in (454,223901) then ce.valuenum else null end) as gcsmotor\n  , max(case\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 0\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 0\n      when ce.ITEMID in (723,223900) then ce.valuenum\n      else null \n    end) as gcsverbal\n  , max(case when ce.ITEMID in (184,220739) then ce.valuenum else null end) as gcseyes\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , max(case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 1 -- carevue\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 1 -- metavision\n    else 0 end)\n    as endotrachflag\n  , ROW_NUMBER ()\n          OVER (PARTITION BY ce.icustay_id ORDER BY ce.charttime ASC) as rn\n  FROM chartevents ce\n  -- Isolate the desired GCS variables\n  where ce.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error != 1)\n  group by ce.icustay_id, ce.charttime\n)\n, gcs_stg0 as (\n  select b.*\n  , b2.gcsverbal as gcsverbalprev\n  , b2.gcsmotor as gcsmotorprev\n  , b2.gcseyes as gcseyesprev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.gcsverbal = 0\n        then 15\n      when b.gcsverbal is null and b2.gcsverbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.gcsverbal = 0\n        then\n            coalesce(b.gcsmotor,6)\n          + coalesce(b.gcsverbal,5)\n          + coalesce(b.gcseyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.gcsmotor,coalesce(b2.gcsmotor,6))\n          + coalesce(b.gcsverbal,coalesce(b2.gcsverbal,5))\n          + coalesce(b.gcseyes,coalesce(b2.gcseyes,4))\n      end as gcs\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.icustay_id = b2.icustay_id\n    and b.rn = b2.rn+1\n    and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n-- combine components with previous within 6 hours\n-- filter down to cohort which is not excluded\n-- truncate charttime to the hour\n, gcs_stg1 as\n(\n  select gs.icustay_id, gs.charttime\n  , gs.gcs\n  , coalesce(gcsmotor,gcsmotorprev) as gcsmotor\n  , coalesce(gcsverbal,gcsverbalprev) as gcsverbal\n  , coalesce(gcseyes,gcseyesprev) as gcseyes\n  , case when coalesce(gcsmotor,gcsmotorprev) is null then 0 else 1 end\n  + case when coalesce(gcsverbal,gcsverbalprev) is null then 0 else 1 end\n  + case when coalesce(gcseyes,gcseyesprev) is null then 0 else 1 end\n    as components_measured\n  , endotrachflag\n  from gcs_stg0 gs\n)\n-- priority is:\n--  (i) complete data, (ii) non-sedated GCS, (iii) lowest GCS, (iv) charttime\n, gcs_priority as\n(\n  select icustay_id\n    , charttime\n    , gcs\n    , gcsmotor\n    , gcsverbal\n    , gcseyes\n    , endotrachflag\n    , ROW_NUMBER() over\n      (\n        PARTITION BY icustay_id, charttime\n        ORDER BY components_measured DESC, endotrachflag, gcs, charttime DESC\n      ) as rn\n  from gcs_stg1\n)\nselect icustay_id\n  , charttime\n  , gcs\n  , gcsmotor\n  , gcsverbal\n  , gcseyes\n  , endotrachflag\nfrom gcs_priority gs\nwhere rn = 1\nORDER BY icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5742786, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_gcs"], "meta": {}, "name": "pivoted_gcs", "original_file_path": "models/pivot/pivoted_gcs.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_gcs.sql", "raw_sql": "-- This query extracts the Glasgow Coma Scale, a measure of neurological function.\n-- The query has a few special rules:\n--    (1) The verbal component can be set to 0 if the patient is ventilated.\n--    This is corrected to 5 - the overall GCS is set to 15 in these cases.\n--    (2) Often only one of three components is documented. The other components\n--    are carried forward.\n\n-- ITEMIDs used:\n\n-- CAREVUE\n--    723 as gcsverbal\n--    454 as gcsmotor\n--    184 as gcseyes\n\n-- METAVISION\n--    223900 GCS - Verbal Response\n--    223901 GCS - Motor Response\n--    220739 GCS - Eye Opening\n\n-- The code combines the ITEMIDs into the carevue itemids, then pivots those\n-- So 223900 is changed to 723, then the ITEMID 723 is pivoted to form gcsverbal\n\n-- Note:\n--  The GCS for sedated patients is defaulted to 15 in this code.\n--  This is in line with how the data is meant to be collected.\n--  e.g., from the SAPS II publication:\n--    For sedated patients, the Glasgow Coma Score before sedation was used.\n--    This was ascertained either from interviewing the physician who ordered the sedation,\n--    or by reviewing the patient's medical record.\n\nwith base as\n(\n  select ce.icustay_id, ce.charttime\n  -- pivot each value into its own column\n  , max(case when ce.ITEMID in (454,223901) then ce.valuenum else null end) as gcsmotor\n  , max(case\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 0\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 0\n      when ce.ITEMID in (723,223900) then ce.valuenum\n      else null \n    end) as gcsverbal\n  , max(case when ce.ITEMID in (184,220739) then ce.valuenum else null end) as gcseyes\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , max(case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when ce.ITEMID = 723 and ce.VALUE = '1.0 ET/Trach' then 1 -- carevue\n      when ce.ITEMID = 223900 and ce.VALUE = 'No Response-ETT' then 1 -- metavision\n    else 0 end)\n    as endotrachflag\n  , ROW_NUMBER ()\n          OVER (PARTITION BY ce.icustay_id ORDER BY ce.charttime ASC) as rn\n  FROM chartevents ce\n  -- Isolate the desired GCS variables\n  where ce.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error != 1)\n  group by ce.icustay_id, ce.charttime\n)\n, gcs_stg0 as (\n  select b.*\n  , b2.gcsverbal as gcsverbalprev\n  , b2.gcsmotor as gcsmotorprev\n  , b2.gcseyes as gcseyesprev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.gcsverbal = 0\n        then 15\n      when b.gcsverbal is null and b2.gcsverbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.gcsverbal = 0\n        then\n            coalesce(b.gcsmotor,6)\n          + coalesce(b.gcsverbal,5)\n          + coalesce(b.gcseyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.gcsmotor,coalesce(b2.gcsmotor,6))\n          + coalesce(b.gcsverbal,coalesce(b2.gcsverbal,5))\n          + coalesce(b.gcseyes,coalesce(b2.gcseyes,4))\n      end as gcs\n\n  from base b\n  -- join to itself within 6 hours to get previous value\n  left join base b2\n    on b.icustay_id = b2.icustay_id\n    and b.rn = b2.rn+1\n    and b2.charttime > DATETIME_SUB(b.charttime, INTERVAL '6' HOUR)\n)\n-- combine components with previous within 6 hours\n-- filter down to cohort which is not excluded\n-- truncate charttime to the hour\n, gcs_stg1 as\n(\n  select gs.icustay_id, gs.charttime\n  , gs.gcs\n  , coalesce(gcsmotor,gcsmotorprev) as gcsmotor\n  , coalesce(gcsverbal,gcsverbalprev) as gcsverbal\n  , coalesce(gcseyes,gcseyesprev) as gcseyes\n  , case when coalesce(gcsmotor,gcsmotorprev) is null then 0 else 1 end\n  + case when coalesce(gcsverbal,gcsverbalprev) is null then 0 else 1 end\n  + case when coalesce(gcseyes,gcseyesprev) is null then 0 else 1 end\n    as components_measured\n  , endotrachflag\n  from gcs_stg0 gs\n)\n-- priority is:\n--  (i) complete data, (ii) non-sedated GCS, (iii) lowest GCS, (iv) charttime\n, gcs_priority as\n(\n  select icustay_id\n    , charttime\n    , gcs\n    , gcsmotor\n    , gcsverbal\n    , gcseyes\n    , endotrachflag\n    , ROW_NUMBER() over\n      (\n        PARTITION BY icustay_id, charttime\n        ORDER BY components_measured DESC, endotrachflag, gcs, charttime DESC\n      ) as rn\n  from gcs_stg1\n)\nselect icustay_id\n  , charttime\n  , gcs\n  , gcsmotor\n  , gcsverbal\n  , gcseyes\n  , endotrachflag\nfrom gcs_priority gs\nwhere rn = 1\nORDER BY icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_gcs\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_gcs", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.581540Z", "name": "compile", "started_at": "2022-07-18T00:10:48.579671Z"}, {"completed_at": "2022-07-18T00:10:48.626867Z", "name": "execute", "started_at": "2022-07-18T00:10:48.582326Z"}]}, "unique_id": "model.mimic.pivoted_gcs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_gcs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.628843Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": "2022-07-18T00:10:48.629167", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.629189Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_height", "index": 55, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": "2022-07-18T00:10:48.629167", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "55 of 107 START table model public.pivoted_height .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.629849Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.630887Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": "2022-07-18T00:10:48.629167", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.631365Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.631756Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.635724Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.636338Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.636608Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_height\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.647006Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.647430Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.647745Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.648317Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.656322Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.656648Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_height__dbt_tmp\"\n  as (\n    -- prep height\nWITH ht_in AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN ROUND((c.valuenum * 2.54)::numeric, 2)\n        -- ROUND(value::numeric, 2)\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n    , c.valuenum as height_orig\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height (measured in inches)\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486\n    -- Metavision\n    , 226707\n  )\n)\n, ht_cm AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN c.valuenum * 2.54\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height cm\n  AND c.itemid IN\n  (\n    -- CareVue\n    3485, 4188\n    -- MetaVision\n    , 226730\n  )\n)\n-- merge cm/height, only take 1 value per charted row\n, ht_stg0 AS\n(\n  SELECT\n  COALESCE(h1.subject_id, h1.subject_id) as subject_id\n  , COALESCE(h1.charttime, h1.charttime) AS charttime\n  , COALESCE(h1.height, h2.height) as height\n  FROM ht_cm h1\n  FULL OUTER JOIN ht_in h2\n    ON h1.subject_id = h2.subject_id\n    AND h1.charttime = h2.charttime\n)\n-- filter out bad heights\n, ht_stg1 AS\n(\n  SELECT\n    h.subject_id\n    , charttime\n    , CASE\n        -- rule for neonates\n        -- [charrtime don't have year coloum?]\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) <= 1 AND height < 80 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) <= 1 AND height < 80 THEN height\n        \n        -- rule for adults\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) > 1 AND height > 120 AND height < 230 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) > 1 AND height > 120 AND height < 230 THEN height\n      ELSE NULL END as height\n  FROM ht_stg0 h\n  INNER JOIN patients pt\n    ON h.subject_id = pt.subject_id\n)\n-- heights from echo-cardiography notes\n, echo_note AS\n(\n  SELECT\n    subject_id\n    -- extract the time of the note from the text itself\n    -- add this to the structured date in the chartdate column\n    , PARSE_DATETIME('%b-%d-%Y%H:%M',\n      CONCAT(\n        FORMAT_DATE('%b-%d-%Y', chartdate),\n        REGEXP_EXTRACT(ne.text, 'Date/Time: [\\\\[\\\\]0-9*-]+ at ([0-9:]+)')\n       )\n    ) AS charttime\n    -- sometimes numeric values contain de-id numbers, e.g. [** Numeric Identifier **]\n    -- this case is used to ignore that text\n    , case\n        when REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') like '%*%'\n            then null\n        else cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') as numeric)\n        end * 2.54 as height\n  FROM noteevents ne\n  WHERE ne.category = 'Echo'\n)\n-- use documented ideal body weights to back-calculate height\n, ibw_note AS\n(\n    SELECT subject_id\n    , ne.category\n    , charttime\n    , CAST(REGEXP_EXTRACT(text, 'Ideal body weight: ([0-9]+\\\\.?[0-9]*)') AS NUMERIC) as ibw\n    FROM noteevents ne\n    WHERE text like '%Ideal body weight:%'\n    AND ne.category != 'Echo'\n)\n, ht_from_ibw AS\n(\n    -- IBW formulas\n    -- inches\n    -- F:  IBW = 45.5 kg + 2.3 kg * (height in inches - 60)\n    -- M:  IBW = 50 kg + 2.3 kg * (height in inches - 60)\n    \n    -- cm\n    -- F: 45.5 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    -- M: 50 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    \n    SELECT ne.subject_id\n    , charttime\n    , CASE\n        WHEN gender = 'F' THEN (ibw - 45.5)/0.91 + 152.4\n        ELSE (ibw - 50)/0.91 + 152.4 END AS height\n    FROM ibw_note ne\n    INNER JOIN patients pt\n      ON ne.subject_id = pt.subject_id\n    WHERE ibw IS NOT NULL AND ibw != 0\n)\n, ht_nutrition AS\n(\n    -- nutrition notes usually only document height\n    -- but the original note formatting has been lost, so we can't do a clever regex\n    -- instead, we just look for the unit of measure (cm)\n    SELECT subject_id\n    , charttime\n    , CAST(REGEXP_EXTRACT(ne.text, '([0-9]+) cm') AS NUMERIC) as height\n    FROM noteevents ne\n    WHERE category = 'Nutrition'\n    AND lower(text) like '%height%'\n)\nSELECT subject_id, charttime, 'chartevents' as source, height\nFROM ht_stg1\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - echo' as source, height\nFROM echo_note\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - ibw' as source, height\nFROM ht_from_ibw\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - nutrition' as source\n-- convert the heights\n    , CASE \n        WHEN height < 80 THEN height*2.54\n        ELSE height\n    END AS height\nFROM ht_nutrition\nWHERE height IS NOT NULL AND height > 0\nORDER BY subject_id, charttime, source, height\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_height__dbt_tmp\"\n  as (\n    -- prep height\nWITH ht_in AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN ROUND((c.valuenum * 2.54)::numeric, 2)\n        -- ROUND(value::numeric, 2)\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n    , c.valuenum as height_orig\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height (measured in inches)\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486\n    -- Metavision\n    , 226707\n  )\n)\n, ht_cm AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN c.valuenum * 2.54\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height cm\n  AND c.itemid IN\n  (\n    -- CareVue\n    3485, 4188\n    -- MetaVision\n    , 226730\n  )\n)\n-- merge cm/height, only take 1 value per charted row\n, ht_stg0 AS\n(\n  SELECT\n  COALESCE(h1.subject_id, h1.subject_id) as subject_id\n  , COALESCE(h1.charttime, h1.charttime) AS charttime\n  , COALESCE(h1.height, h2.height) as height\n  FROM ht_cm h1\n  FULL OUTER JOIN ht_in h2\n    ON h1.subject_id = h2.subject_id\n    AND h1.charttime = h2.charttime\n)\n-- filter out bad heights\n, ht_stg1 AS\n(\n  SELECT\n    h.subject_id\n    , charttime\n    , CASE\n        -- rule for neonates\n        -- [charrtime don't have year coloum?]\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) <= 1 AND height < 80 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) <= 1 AND height < 80 THEN height\n        \n        -- rule for adults\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) > 1 AND height > 120 AND height < 230 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) > 1 AND height > 120 AND height < 230 THEN height\n      ELSE NULL END as height\n  FROM ht_stg0 h\n  INNER JOIN patients pt\n    ON h.subject_id = pt.subject_id\n)\n-- heights from echo-cardiography notes\n, echo_note AS\n(\n  SELECT\n    subject_id\n    -- extract the time of the note from the text itself\n    -- add this to the structured date in the chartdate column\n    , PARSE_DATETIME('%b-%d-%Y%H:%M',\n      CONCAT(\n        FORMAT_DATE('%b-%d-%Y', chartdate),\n        REGEXP_EXTRACT(ne.text, 'Date/Time: [\\\\[\\\\]0-9*-]+ at ([0-9:]+)')\n       )\n    ) AS charttime\n    -- sometimes numeric values contain de-id numbers, e.g. [** Numeric Identifier **]\n    -- this case is used to ignore that text\n    , case\n        when REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') like '%*%'\n            then null\n        else cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') as numeric)\n        end * 2.54 as height\n  FROM noteevents ne\n  WHERE ne.category = 'Echo'\n)\n-- use documented ideal body weights to back-calculate height\n, ibw_note AS\n(\n    SELECT subject_id\n    , ne.category\n    , charttime\n    , CAST(REGEXP_EXTRACT(text, 'Ideal body weight: ([0-9]+\\\\.?[0-9]*)') AS NUMERIC) as ibw\n    FROM noteevents ne\n    WHERE text like '%Ideal body weight:%'\n    AND ne.category != 'Echo'\n)\n, ht_from_ibw AS\n(\n    -- IBW formulas\n    -- inches\n    -- F:  IBW = 45.5 kg + 2.3 kg * (height in inches - 60)\n    -- M:  IBW = 50 kg + 2.3 kg * (height in inches - 60)\n    \n    -- cm\n    -- F: 45.5 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    -- M: 50 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    \n    SELECT ne.subject_id\n    , charttime\n    , CASE\n        WHEN gender = 'F' THEN (ibw - 45.5)/0.91 + 152.4\n        ELSE (ibw - 50)/0.91 + 152.4 END AS height\n    FROM ibw_note ne\n    INNER JOIN patients pt\n      ON ne.subject_id = pt.subject_id\n    WHERE ibw IS NOT NULL AND ibw != 0\n)\n, ht_nutrition AS\n(\n    -- nutrition notes usually only document height\n    -- but the original note formatting has been lost, so we can't do a clever regex\n    -- instead, we just look for the unit of measure (cm)\n    SELECT subject_id\n    , charttime\n    , CAST(REGEXP_EXTRACT(ne.text, '([0-9]+) cm') AS NUMERIC) as height\n    FROM noteevents ne\n    WHERE category = 'Nutrition'\n    AND lower(text) like '%height%'\n)\nSELECT subject_id, charttime, 'chartevents' as source, height\nFROM ht_stg1\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - echo' as source, height\nFROM echo_note\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - ibw' as source, height\nFROM ht_from_ibw\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - nutrition' as source\n-- convert the heights\n    , CASE \n        WHEN height < 80 THEN height*2.54\n        ELSE height\n    END AS height\nFROM ht_nutrition\nWHERE height IS NOT NULL AND height > 0\nORDER BY subject_id, charttime, source, height\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.656872Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.669524Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.675917Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\nalter table \"postgres\".\"public\".\"pivoted_height\" rename to \"pivoted_height__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\nalter table \"postgres\".\"public\".\"pivoted_height\" rename to \"pivoted_height__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.676171Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.676932Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.680407Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\nalter table \"postgres\".\"public\".\"pivoted_height__dbt_tmp\" rename to \"pivoted_height\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\nalter table \"postgres\".\"public\".\"pivoted_height__dbt_tmp\" rename to \"pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.680631Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.681414Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.689323Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.689667Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.689981Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.691121Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_height", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_height\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.692737Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_height", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_height__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_height\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_height__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.692939Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.695207Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.698301Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_height: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.698565Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_height", "execution_time": 0, "index": 55, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": "2022-07-18T00:10:48.629167", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "55 of 107 OK created table model public.pivoted_height ......................... [\u001b[32mSELECT 0\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.699465Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.700198", "node_name": "pivoted_height", "node_path": "pivot/pivoted_height.sql", "node_started_at": "2022-07-18T00:10:48.629167", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_height"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.06873226165771484, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_height", "build_path": "target/run/mimic/models/pivot/pivoted_height.sql", "checksum": {"checksum": "e640d109fa2fbe472a978aebb8274faf4f315dcee2caff464f13b55c2770b2b1", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_height.sql", "compiled_sql": "-- prep height\nWITH ht_in AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN ROUND((c.valuenum * 2.54)::numeric, 2)\n        -- ROUND(value::numeric, 2)\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n    , c.valuenum as height_orig\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height (measured in inches)\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486\n    -- Metavision\n    , 226707\n  )\n)\n, ht_cm AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN c.valuenum * 2.54\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height cm\n  AND c.itemid IN\n  (\n    -- CareVue\n    3485, 4188\n    -- MetaVision\n    , 226730\n  )\n)\n-- merge cm/height, only take 1 value per charted row\n, ht_stg0 AS\n(\n  SELECT\n  COALESCE(h1.subject_id, h1.subject_id) as subject_id\n  , COALESCE(h1.charttime, h1.charttime) AS charttime\n  , COALESCE(h1.height, h2.height) as height\n  FROM ht_cm h1\n  FULL OUTER JOIN ht_in h2\n    ON h1.subject_id = h2.subject_id\n    AND h1.charttime = h2.charttime\n)\n-- filter out bad heights\n, ht_stg1 AS\n(\n  SELECT\n    h.subject_id\n    , charttime\n    , CASE\n        -- rule for neonates\n        -- [charrtime don't have year coloum?]\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) <= 1 AND height < 80 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) <= 1 AND height < 80 THEN height\n        \n        -- rule for adults\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) > 1 AND height > 120 AND height < 230 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) > 1 AND height > 120 AND height < 230 THEN height\n      ELSE NULL END as height\n  FROM ht_stg0 h\n  INNER JOIN patients pt\n    ON h.subject_id = pt.subject_id\n)\n-- heights from echo-cardiography notes\n, echo_note AS\n(\n  SELECT\n    subject_id\n    -- extract the time of the note from the text itself\n    -- add this to the structured date in the chartdate column\n    , PARSE_DATETIME('%b-%d-%Y%H:%M',\n      CONCAT(\n        FORMAT_DATE('%b-%d-%Y', chartdate),\n        REGEXP_EXTRACT(ne.text, 'Date/Time: [\\\\[\\\\]0-9*-]+ at ([0-9:]+)')\n       )\n    ) AS charttime\n    -- sometimes numeric values contain de-id numbers, e.g. [** Numeric Identifier **]\n    -- this case is used to ignore that text\n    , case\n        when REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') like '%*%'\n            then null\n        else cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') as numeric)\n        end * 2.54 as height\n  FROM noteevents ne\n  WHERE ne.category = 'Echo'\n)\n-- use documented ideal body weights to back-calculate height\n, ibw_note AS\n(\n    SELECT subject_id\n    , ne.category\n    , charttime\n    , CAST(REGEXP_EXTRACT(text, 'Ideal body weight: ([0-9]+\\\\.?[0-9]*)') AS NUMERIC) as ibw\n    FROM noteevents ne\n    WHERE text like '%Ideal body weight:%'\n    AND ne.category != 'Echo'\n)\n, ht_from_ibw AS\n(\n    -- IBW formulas\n    -- inches\n    -- F:  IBW = 45.5 kg + 2.3 kg * (height in inches - 60)\n    -- M:  IBW = 50 kg + 2.3 kg * (height in inches - 60)\n    \n    -- cm\n    -- F: 45.5 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    -- M: 50 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    \n    SELECT ne.subject_id\n    , charttime\n    , CASE\n        WHEN gender = 'F' THEN (ibw - 45.5)/0.91 + 152.4\n        ELSE (ibw - 50)/0.91 + 152.4 END AS height\n    FROM ibw_note ne\n    INNER JOIN patients pt\n      ON ne.subject_id = pt.subject_id\n    WHERE ibw IS NOT NULL AND ibw != 0\n)\n, ht_nutrition AS\n(\n    -- nutrition notes usually only document height\n    -- but the original note formatting has been lost, so we can't do a clever regex\n    -- instead, we just look for the unit of measure (cm)\n    SELECT subject_id\n    , charttime\n    , CAST(REGEXP_EXTRACT(ne.text, '([0-9]+) cm') AS NUMERIC) as height\n    FROM noteevents ne\n    WHERE category = 'Nutrition'\n    AND lower(text) like '%height%'\n)\nSELECT subject_id, charttime, 'chartevents' as source, height\nFROM ht_stg1\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - echo' as source, height\nFROM echo_note\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - ibw' as source, height\nFROM ht_from_ibw\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - nutrition' as source\n-- convert the heights\n    , CASE \n        WHEN height < 80 THEN height*2.54\n        ELSE height\n    END AS height\nFROM ht_nutrition\nWHERE height IS NOT NULL AND height > 0\nORDER BY subject_id, charttime, source, height", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5812612, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_height"], "meta": {}, "name": "pivoted_height", "original_file_path": "models/pivot/pivoted_height.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_height.sql", "raw_sql": "-- prep height\nWITH ht_in AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN ROUND((c.valuenum * 2.54)::numeric, 2)\n        -- ROUND(value::numeric, 2)\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n    , c.valuenum as height_orig\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height (measured in inches)\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486\n    -- Metavision\n    , 226707\n  )\n)\n, ht_cm AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters\n    ROUND((CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n        THEN c.valuenum * 2.54\n      ELSE c.valuenum\n    END)::numeric, 2) AS height\n  FROM chartevents c\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  -- Height cm\n  AND c.itemid IN\n  (\n    -- CareVue\n    3485, 4188\n    -- MetaVision\n    , 226730\n  )\n)\n-- merge cm/height, only take 1 value per charted row\n, ht_stg0 AS\n(\n  SELECT\n  COALESCE(h1.subject_id, h1.subject_id) as subject_id\n  , COALESCE(h1.charttime, h1.charttime) AS charttime\n  , COALESCE(h1.height, h2.height) as height\n  FROM ht_cm h1\n  FULL OUTER JOIN ht_in h2\n    ON h1.subject_id = h2.subject_id\n    AND h1.charttime = h2.charttime\n)\n-- filter out bad heights\n, ht_stg1 AS\n(\n  SELECT\n    h.subject_id\n    , charttime\n    , CASE\n        -- rule for neonates\n        -- [charrtime don't have year coloum?]\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) <= 1 AND height < 80 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) <= 1 AND height < 80 THEN height\n        \n        -- rule for adults\n        -- WHEN DATETIME_DIFF(charttime, pt.dob, `YEAR`) > 1 AND height > 120 AND height < 230 THEN height\n        WHEN EXTRACT(YEAR FROM charttime-pt.dob) > 1 AND height > 120 AND height < 230 THEN height\n      ELSE NULL END as height\n  FROM ht_stg0 h\n  INNER JOIN patients pt\n    ON h.subject_id = pt.subject_id\n)\n-- heights from echo-cardiography notes\n, echo_note AS\n(\n  SELECT\n    subject_id\n    -- extract the time of the note from the text itself\n    -- add this to the structured date in the chartdate column\n    , PARSE_DATETIME('%b-%d-%Y%H:%M',\n      CONCAT(\n        FORMAT_DATE('%b-%d-%Y', chartdate),\n        REGEXP_EXTRACT(ne.text, 'Date/Time: [\\\\[\\\\]0-9*-]+ at ([0-9:]+)')\n       )\n    ) AS charttime\n    -- sometimes numeric values contain de-id numbers, e.g. [** Numeric Identifier **]\n    -- this case is used to ignore that text\n    , case\n        when REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') like '%*%'\n            then null\n        else cast(REGEXP_EXTRACT(ne.text, 'Height: \\\\(in\\\\) (.*?)\\n') as numeric)\n        end * 2.54 as height\n  FROM noteevents ne\n  WHERE ne.category = 'Echo'\n)\n-- use documented ideal body weights to back-calculate height\n, ibw_note AS\n(\n    SELECT subject_id\n    , ne.category\n    , charttime\n    , CAST(REGEXP_EXTRACT(text, 'Ideal body weight: ([0-9]+\\\\.?[0-9]*)') AS NUMERIC) as ibw\n    FROM noteevents ne\n    WHERE text like '%Ideal body weight:%'\n    AND ne.category != 'Echo'\n)\n, ht_from_ibw AS\n(\n    -- IBW formulas\n    -- inches\n    -- F:  IBW = 45.5 kg + 2.3 kg * (height in inches - 60)\n    -- M:  IBW = 50 kg + 2.3 kg * (height in inches - 60)\n    \n    -- cm\n    -- F: 45.5 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    -- M: 50 + (0.91 \u00d7 [height in centimeters \u2212 152.4])\n    \n    SELECT ne.subject_id\n    , charttime\n    , CASE\n        WHEN gender = 'F' THEN (ibw - 45.5)/0.91 + 152.4\n        ELSE (ibw - 50)/0.91 + 152.4 END AS height\n    FROM ibw_note ne\n    INNER JOIN patients pt\n      ON ne.subject_id = pt.subject_id\n    WHERE ibw IS NOT NULL AND ibw != 0\n)\n, ht_nutrition AS\n(\n    -- nutrition notes usually only document height\n    -- but the original note formatting has been lost, so we can't do a clever regex\n    -- instead, we just look for the unit of measure (cm)\n    SELECT subject_id\n    , charttime\n    , CAST(REGEXP_EXTRACT(ne.text, '([0-9]+) cm') AS NUMERIC) as height\n    FROM noteevents ne\n    WHERE category = 'Nutrition'\n    AND lower(text) like '%height%'\n)\nSELECT subject_id, charttime, 'chartevents' as source, height\nFROM ht_stg1\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - echo' as source, height\nFROM echo_note\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - ibw' as source, height\nFROM ht_from_ibw\nWHERE height IS NOT NULL AND height > 0\nUNION ALL\nSELECT subject_id, charttime, 'noteevents - nutrition' as source\n-- convert the heights\n    , CASE \n        WHEN height < 80 THEN height*2.54\n        ELSE height\n    END AS height\nFROM ht_nutrition\nWHERE height IS NOT NULL AND height > 0\nORDER BY subject_id, charttime, source, height", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_height\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_height", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.636283Z", "name": "compile", "started_at": "2022-07-18T00:10:48.631730Z"}, {"completed_at": "2022-07-18T00:10:48.698270Z", "name": "execute", "started_at": "2022-07-18T00:10:48.636754Z"}]}, "unique_id": "model.mimic.pivoted_height"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_height", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.700667Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": "2022-07-18T00:10:48.702271", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_icp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.702526Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_icp", "index": 56, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": "2022-07-18T00:10:48.702271", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "56 of 107 START table model public.pivoted_icp ................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.704042Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.705145Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": "2022-07-18T00:10:48.702271", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_icp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.705337Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_icp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.705462Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.707079Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.708573Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_icp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.708996Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_icp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.718230Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.719036Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.719722Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.719928Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.725106Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.725580Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_icp__dbt_tmp\"\n  as (\n    with ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    -- TODO: handle high ICPs when monitoring two ICPs\n    , case when valuenum > 0 and valuenum < 100 then valuenum else null end as icp\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error = 0)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n   226 -- ICP -- 99159\n  ,1374 -- ICP Right -- 100\n  ,2045 -- icp left -- 70\n  ,2635 -- VENT ICP -- 195\n  ,2660 -- ICP Camino -- 40\n  ,2733 -- RIGHT VENT ICP -- 203\n  ,2745 -- ICP LEFT -- 232\n  ,2870 -- ICP-ventriculostomuy -- 114\n  ,2956 -- ventriculostomy icp -- 64\n  ,2985 -- ICP ventricle -- 85\n  ,5856 -- icp -- 7\n  ,7116 -- Rt ICP -- 80\n  ,8218 -- left icp -- 6\n  ,8298 -- L ICP -- 47\n  ,8299 -- R ICP -- 16\n  ,8305 -- ICP  Right -- 49\n  ,220765 -- Intra Cranial Pressure -- 92306\n  ,227989 -- Intra Cranial Pressure #2 -- 1052\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , MAX(icp) as icp\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_icp__dbt_tmp\"\n  as (\n    with ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    -- TODO: handle high ICPs when monitoring two ICPs\n    , case when valuenum > 0 and valuenum < 100 then valuenum else null end as icp\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error = 0)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n   226 -- ICP -- 99159\n  ,1374 -- ICP Right -- 100\n  ,2045 -- icp left -- 70\n  ,2635 -- VENT ICP -- 195\n  ,2660 -- ICP Camino -- 40\n  ,2733 -- RIGHT VENT ICP -- 203\n  ,2745 -- ICP LEFT -- 232\n  ,2870 -- ICP-ventriculostomuy -- 114\n  ,2956 -- ventriculostomy icp -- 64\n  ,2985 -- ICP ventricle -- 85\n  ,5856 -- icp -- 7\n  ,7116 -- Rt ICP -- 80\n  ,8218 -- left icp -- 6\n  ,8298 -- L ICP -- 47\n  ,8299 -- R ICP -- 16\n  ,8305 -- ICP  Right -- 49\n  ,220765 -- Intra Cranial Pressure -- 92306\n  ,227989 -- Intra Cranial Pressure #2 -- 1052\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , MAX(icp) as icp\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.726349Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.732761Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.739675Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\nalter table \"postgres\".\"public\".\"pivoted_icp\" rename to \"pivoted_icp__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\nalter table \"postgres\".\"public\".\"pivoted_icp\" rename to \"pivoted_icp__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.740043Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.740872Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.745648Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\nalter table \"postgres\".\"public\".\"pivoted_icp__dbt_tmp\" rename to \"pivoted_icp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\nalter table \"postgres\".\"public\".\"pivoted_icp__dbt_tmp\" rename to \"pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.745995Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.746819Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.751864Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.752311Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.752978Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.754817Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_icp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_icp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.757446Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_icp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_icp__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_icp\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_icp__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.758056Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.760433Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.764212Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_icp: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.764478Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_icp", "execution_time": 0, "index": 56, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": "2022-07-18T00:10:48.702271", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "56 of 107 OK created table model public.pivoted_icp ............................ [\u001b[32mSELECT 0\u001b[0m in 0.06s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.765495Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.766251", "node_name": "pivoted_icp", "node_path": "pivot/pivoted_icp.sql", "node_started_at": "2022-07-18T00:10:48.702271", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_icp"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.06043672561645508, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_icp", "build_path": "target/run/mimic/models/pivot/pivoted_icp.sql", "checksum": {"checksum": "2ca017a507412372c4aa75d90827cc8290ad3e01777441262d4cab337ec50313", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_icp.sql", "compiled_sql": "with ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    -- TODO: handle high ICPs when monitoring two ICPs\n    , case when valuenum > 0 and valuenum < 100 then valuenum else null end as icp\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error = 0)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n   226 -- ICP -- 99159\n  ,1374 -- ICP Right -- 100\n  ,2045 -- icp left -- 70\n  ,2635 -- VENT ICP -- 195\n  ,2660 -- ICP Camino -- 40\n  ,2733 -- RIGHT VENT ICP -- 203\n  ,2745 -- ICP LEFT -- 232\n  ,2870 -- ICP-ventriculostomuy -- 114\n  ,2956 -- ventriculostomy icp -- 64\n  ,2985 -- ICP ventricle -- 85\n  ,5856 -- icp -- 7\n  ,7116 -- Rt ICP -- 80\n  ,8218 -- left icp -- 6\n  ,8298 -- L ICP -- 47\n  ,8299 -- R ICP -- 16\n  ,8305 -- ICP  Right -- 49\n  ,220765 -- Intra Cranial Pressure -- 92306\n  ,227989 -- Intra Cranial Pressure #2 -- 1052\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , MAX(icp) as icp\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5963109, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_icp"], "meta": {}, "name": "pivoted_icp", "original_file_path": "models/pivot/pivoted_icp.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_icp.sql", "raw_sql": "with ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    -- TODO: handle high ICPs when monitoring two ICPs\n    , case when valuenum > 0 and valuenum < 100 then valuenum else null end as icp\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error = 0)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n   226 -- ICP -- 99159\n  ,1374 -- ICP Right -- 100\n  ,2045 -- icp left -- 70\n  ,2635 -- VENT ICP -- 195\n  ,2660 -- ICP Camino -- 40\n  ,2733 -- RIGHT VENT ICP -- 203\n  ,2745 -- ICP LEFT -- 232\n  ,2870 -- ICP-ventriculostomuy -- 114\n  ,2956 -- ventriculostomy icp -- 64\n  ,2985 -- ICP ventricle -- 85\n  ,5856 -- icp -- 7\n  ,7116 -- Rt ICP -- 80\n  ,8218 -- left icp -- 6\n  ,8298 -- L ICP -- 47\n  ,8299 -- R ICP -- 16\n  ,8305 -- ICP  Right -- 49\n  ,220765 -- Intra Cranial Pressure -- 92306\n  ,227989 -- Intra Cranial Pressure #2 -- 1052\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , MAX(icp) as icp\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_icp\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_icp", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.708450Z", "name": "compile", "started_at": "2022-07-18T00:10:48.705449Z"}, {"completed_at": "2022-07-18T00:10:48.764181Z", "name": "execute", "started_at": "2022-07-18T00:10:48.709197Z"}]}, "unique_id": "model.mimic.pivoted_icp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_icp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.766427Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": "2022-07-18T00:10:48.767231", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_invasive_lines", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.767374Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_invasive_lines", "index": 57, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": "2022-07-18T00:10:48.767231", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "57 of 107 START table model public.pivoted_invasive_lines ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.768924Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.770499Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": "2022-07-18T00:10:48.767231", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_invasive_lines", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.771051Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_invasive_lines", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.771399Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.773285Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.774411Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_invasive_lines", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.774801Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_invasive_lines\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.785327Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.787319Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.787728Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.787892Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.793394Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.793937Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_tmp\"\n  as (\n    WITH stg0 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , storetime\n        , itemid\n        -- create partition which separates the lines\n        , CASE\n            WHEN itemid IN (229, 8392) THEN 1\n            WHEN itemid IN (235, 8393) THEN 2\n            WHEN itemid IN (241, 8394) THEN 3\n            WHEN itemid IN (247, 8395) THEN 4\n            WHEN itemid IN (253, 8396) THEN 5\n            WHEN itemid IN (259, 8397) THEN 6\n            WHEN itemid IN (265, 8398) THEN 7\n            WHEN itemid IN (271, 8399) THEN 8\n          ELSE NULL END AS line_number\n        , CASE WHEN itemid < 8000 THEN value ELSE NULL END AS line_type\n        , CASE WHEN itemid > 8000 THEN value ELSE NULL END AS line_site\n        -- the stopped column is always present for invasive lines\n        , CASE \n            --   WHEN ce.stopped = 'D/C\\'d' THEN 1\n              WHEN ce.stopped = 'D/C''d' THEN 1\n              WHEN ce.stopped = 'NotStopd' THEN 0\n          ELSE NULL END AS line_dc\n    FROM chartevents ce\n    WHERE ce.itemid IN \n    (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n    )\n    AND icustay_id IS NOT NULL\n    AND COALESCE(ce.error, 0) = 0\n)\n, stg0_rn AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site, line_dc\n        -- only keep the last documented value\n        , ROW_NUMBER() OVER (PARTITION BY icustay_id, charttime, itemid ORDER BY storetime DESC) as rn_last_stored\n    FROM stg0\n)\n, stg1 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        -- collapse line type/site into a single row\n        -- MAX() always collapses a single value, due to where rn_last_stored = 1\n        , MAX(line_type) as line_type\n        , MAX(line_site) as line_site\n        -- any disconnection at this charttime turns off the line\n        , MAX(line_dc) AS line_dc\n    FROM stg0_rn\n    WHERE rn_last_stored = 1\n    GROUP BY icustay_id, charttime, line_number\n)\n, stg2 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site\n        , line_dc\n        -- carry forward the line type\n        , CASE\n            -- if the previous line was D/C'd then it's a new line\n            WHEN LAG(line_dc) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = 1 THEN 1\n            -- if it's the same line as before, within 16 hours, continue the event\n            WHEN LAG(line_type) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = line_type\n            AND DATETIME_DIFF(\n                charttime,\n                LAG(charttime) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime),\n                'HOUR'\n                ) < 16 THEN 0\n            -- otherwise, it's been more than 16 hours since the line was last documented\n            -- (or it's the first documentation of this line)\n            -- so we consider this a new event\n            ELSE 1\n        END AS rn_part\n    FROM stg1\n)\n-- rn_part is 1 if it's a new event, and 0 if it's a continuation of the previous\n-- so cumulatively summing it will result in a sequential integer which partitions\n-- distinct line events. we can later group on this integer.\n, stg3 AS\n(\n    SELECT\n        icustay_id, charttime, line_number\n        , line_type, line_site\n        , line_dc\n        , SUM(rn_part) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) as line_event\n    FROM stg2\n)\n-- group by line_event to determine line start/stop times\n, stg4 AS\n(\n    SELECT\n        icustay_id, line_number\n        , line_event\n        , line_type, line_site\n        , MIN(charttime) as starttime\n        , MAX(charttime) as endtime\n    FROM stg3\n    -- filter out the D/C'd rows so they don't impact the starttime of future events\n    WHERE line_dc = 0 \n    GROUP BY icustay_id, line_number, line_event, line_type, line_site\n)\n-- metavision\n, mv AS\n(\n    SELECT \n        icustay_id\n        -- since metavision separates lines using itemid, we can use it as the line number\n        , mv.itemid AS line_number\n        , di.label AS line_type\n        , mv.location AS line_site\n        , starttime, endtime\n    FROM procedureevents_mv mv\n    INNER JOIN d_items di\n      ON mv.itemid = di.itemid\n    WHERE mv.itemid IN\n    (\n      227719 -- AVA Line\n    , 225752 -- Arterial Line\n    , 224269 -- CCO PAC\n    , 224267 -- Cordis/Introducer\n    , 224270 -- Dialysis Catheter\n    , 224272 -- IABP line\n    , 226124 -- ICP Catheter\n    , 228169 -- Impella Line\n    , 225202 -- Indwelling Port (PortaCath)\n    , 228286 -- Intraosseous Device\n    , 225204 -- Midline\n    , 224263 -- Multi Lumen\n    , 224560 -- PA Catheter\n    , 224264 -- PICC Line\n    , 225203 -- Pheresis Catheter\n    , 224273 -- Presep Catheter\n    , 225789 -- Sheath\n    , 225761 -- Sheath Insertion\n    , 228201 -- Tandem Heart Access Line\n    , 228202 -- Tandem Heart Return Line\n    , 224268 -- Trauma line\n    , 225199 -- Triple Introducer\n    , 225315 -- Tunneled (Hickman) Line\n    , 225205 -- RIC\n    )\n    AND icustay_id IS NOT NULL\n    AND statusdescription != 'Rewritten'\n),\ncombined AS\n(\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM stg4\n    UNION DISTINCT\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM mv\n)\n-- as a final step, combine any similar terms together\n-- this was comprehensive as of MIMIC-III v1.4\nselect \n    icustay_id\n    , CASE\n        WHEN line_type IN ('Arterial Line', 'A-Line') THEN 'Arterial'\n        WHEN line_type IN ('CCO PA Line', 'CCO PAC') THEN 'Continuous Cardiac Output PA'\n        WHEN line_type IN ('Dialysis Catheter', 'Dialysis Line') THEN 'Dialysis'\n        WHEN line_type IN ('Hickman', 'Tunneled (Hickman) Line') THEN 'Hickman'\n        WHEN line_type IN ('IABP', 'IABP line') THEN 'IABP'\n        WHEN line_type IN ('Multi Lumen', 'Multi-lumen') THEN 'Multi Lumen'\n        WHEN line_type IN ('PA Catheter', 'PA line') THEN 'PA'\n        WHEN line_type IN ('PICC Line', 'PICC line') THEN 'PICC'\n        WHEN line_type IN ('Pre-Sep Catheter', 'Presep Catheter') THEN 'Pre-Sep'\n        WHEN line_type IN ('Trauma Line', 'Trauma line') THEN 'Trauma'\n        WHEN line_type IN ('Triple Introducer', 'TripleIntroducer') THEN 'Triple Introducer'\n        WHEN line_type IN ('Portacath', 'Indwelling Port (PortaCath)') THEN 'Portacath'\n        -- AVA Line\n        -- Camino Bolt\n        -- Cordis/Introducer\n        -- ICP Catheter\n        -- Impella Line\n        -- Intraosseous Device\n        -- Introducer\n        -- Lumbar Drain\n        -- Midline\n        -- Other/Remarks\n        -- PacerIntroducer\n        -- PermaCath\n        -- Pheresis Catheter\n        -- RIC\n        -- Sheath\n        -- Tandem Heart Access Line\n        -- Tandem Heart Return Line\n        -- Venous Access\n        -- Ventriculostomy\n    ELSE line_type END AS line_type\n    , CASE\n        WHEN line_site IN ('Left Antecub', 'Left Antecube') THEN 'Left Antecube'\n        WHEN line_site IN ('Left Axilla', 'Left Axilla.') THEN 'Left Axilla'\n        WHEN line_site IN ('Left Brachial', 'Left Brachial.') THEN 'Left Brachial'\n        WHEN line_site IN ('Left Femoral', 'Left Femoral.') THEN 'Left Femoral'\n        WHEN line_site IN ('Right Antecub', 'Right Antecube') THEN 'Right Antecube' \n        WHEN line_site IN ('Right Axilla', 'Right Axilla.') THEN 'Right Axilla' \n        WHEN line_site IN ('Right Brachial', 'Right Brachial.') THEN 'Right Brachial' \n        WHEN line_site IN ('Right Femoral', 'Right Femoral.') THEN 'Right Femoral' \n        -- 'Left Foot'\n        -- 'Left IJ'\n        -- 'Left Radial'\n        -- 'Left Subclavian'\n        -- 'Left Ulnar'\n        -- 'Left Upper Arm'\n        -- 'Right Foot'\n        -- 'Right IJ'\n        -- 'Right Radial'\n        -- 'Right Side Head'\n        -- 'Right Subclavian'\n        -- 'Right Ulnar'\n        -- 'Right Upper Arm'\n        -- 'Transthoracic'\n        -- 'Other/Remarks'\n    ELSE line_site END AS line_site\n    , starttime\n    , endtime\nFROM combined\nORDER BY icustay_id, starttime, line_type, line_site\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_tmp\"\n  as (\n    WITH stg0 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , storetime\n        , itemid\n        -- create partition which separates the lines\n        , CASE\n            WHEN itemid IN (229, 8392) THEN 1\n            WHEN itemid IN (235, 8393) THEN 2\n            WHEN itemid IN (241, 8394) THEN 3\n            WHEN itemid IN (247, 8395) THEN 4\n            WHEN itemid IN (253, 8396) THEN 5\n            WHEN itemid IN (259, 8397) THEN 6\n            WHEN itemid IN (265, 8398) THEN 7\n            WHEN itemid IN (271, 8399) THEN 8\n          ELSE NULL END AS line_number\n        , CASE WHEN itemid < 8000 THEN value ELSE NULL END AS line_type\n        , CASE WHEN itemid > 8000 THEN value ELSE NULL END AS line_site\n        -- the stopped column is always present for invasive lines\n        , CASE \n            --   WHEN ce.stopped = 'D/C\\'d' THEN 1\n              WHEN ce.stopped = 'D/C''d' THEN 1\n              WHEN ce.stopped = 'NotStopd' THEN 0\n          ELSE NULL END AS line_dc\n    FROM chartevents ce\n    WHERE ce.itemid IN \n    (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n    )\n    AND icustay_id IS NOT NULL\n    AND COALESCE(ce.error, 0) = 0\n)\n, stg0_rn AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site, line_dc\n        -- only keep the last documented value\n        , ROW_NUMBER() OVER (PARTITION BY icustay_id, charttime, itemid ORDER BY storetime DESC) as rn_last_stored\n    FROM stg0\n)\n, stg1 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        -- collapse line type/site into a single row\n        -- MAX() always collapses a single value, due to where rn_last_stored = 1\n        , MAX(line_type) as line_type\n        , MAX(line_site) as line_site\n        -- any disconnection at this charttime turns off the line\n        , MAX(line_dc) AS line_dc\n    FROM stg0_rn\n    WHERE rn_last_stored = 1\n    GROUP BY icustay_id, charttime, line_number\n)\n, stg2 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site\n        , line_dc\n        -- carry forward the line type\n        , CASE\n            -- if the previous line was D/C'd then it's a new line\n            WHEN LAG(line_dc) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = 1 THEN 1\n            -- if it's the same line as before, within 16 hours, continue the event\n            WHEN LAG(line_type) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = line_type\n            AND DATETIME_DIFF(\n                charttime,\n                LAG(charttime) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime),\n                'HOUR'\n                ) < 16 THEN 0\n            -- otherwise, it's been more than 16 hours since the line was last documented\n            -- (or it's the first documentation of this line)\n            -- so we consider this a new event\n            ELSE 1\n        END AS rn_part\n    FROM stg1\n)\n-- rn_part is 1 if it's a new event, and 0 if it's a continuation of the previous\n-- so cumulatively summing it will result in a sequential integer which partitions\n-- distinct line events. we can later group on this integer.\n, stg3 AS\n(\n    SELECT\n        icustay_id, charttime, line_number\n        , line_type, line_site\n        , line_dc\n        , SUM(rn_part) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) as line_event\n    FROM stg2\n)\n-- group by line_event to determine line start/stop times\n, stg4 AS\n(\n    SELECT\n        icustay_id, line_number\n        , line_event\n        , line_type, line_site\n        , MIN(charttime) as starttime\n        , MAX(charttime) as endtime\n    FROM stg3\n    -- filter out the D/C'd rows so they don't impact the starttime of future events\n    WHERE line_dc = 0 \n    GROUP BY icustay_id, line_number, line_event, line_type, line_site\n)\n-- metavision\n, mv AS\n(\n    SELECT \n        icustay_id\n        -- since metavision separates lines using itemid, we can use it as the line number\n        , mv.itemid AS line_number\n        , di.label AS line_type\n        , mv.location AS line_site\n        , starttime, endtime\n    FROM procedureevents_mv mv\n    INNER JOIN d_items di\n      ON mv.itemid = di.itemid\n    WHERE mv.itemid IN\n    (\n      227719 -- AVA Line\n    , 225752 -- Arterial Line\n    , 224269 -- CCO PAC\n    , 224267 -- Cordis/Introducer\n    , 224270 -- Dialysis Catheter\n    , 224272 -- IABP line\n    , 226124 -- ICP Catheter\n    , 228169 -- Impella Line\n    , 225202 -- Indwelling Port (PortaCath)\n    , 228286 -- Intraosseous Device\n    , 225204 -- Midline\n    , 224263 -- Multi Lumen\n    , 224560 -- PA Catheter\n    , 224264 -- PICC Line\n    , 225203 -- Pheresis Catheter\n    , 224273 -- Presep Catheter\n    , 225789 -- Sheath\n    , 225761 -- Sheath Insertion\n    , 228201 -- Tandem Heart Access Line\n    , 228202 -- Tandem Heart Return Line\n    , 224268 -- Trauma line\n    , 225199 -- Triple Introducer\n    , 225315 -- Tunneled (Hickman) Line\n    , 225205 -- RIC\n    )\n    AND icustay_id IS NOT NULL\n    AND statusdescription != 'Rewritten'\n),\ncombined AS\n(\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM stg4\n    UNION DISTINCT\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM mv\n)\n-- as a final step, combine any similar terms together\n-- this was comprehensive as of MIMIC-III v1.4\nselect \n    icustay_id\n    , CASE\n        WHEN line_type IN ('Arterial Line', 'A-Line') THEN 'Arterial'\n        WHEN line_type IN ('CCO PA Line', 'CCO PAC') THEN 'Continuous Cardiac Output PA'\n        WHEN line_type IN ('Dialysis Catheter', 'Dialysis Line') THEN 'Dialysis'\n        WHEN line_type IN ('Hickman', 'Tunneled (Hickman) Line') THEN 'Hickman'\n        WHEN line_type IN ('IABP', 'IABP line') THEN 'IABP'\n        WHEN line_type IN ('Multi Lumen', 'Multi-lumen') THEN 'Multi Lumen'\n        WHEN line_type IN ('PA Catheter', 'PA line') THEN 'PA'\n        WHEN line_type IN ('PICC Line', 'PICC line') THEN 'PICC'\n        WHEN line_type IN ('Pre-Sep Catheter', 'Presep Catheter') THEN 'Pre-Sep'\n        WHEN line_type IN ('Trauma Line', 'Trauma line') THEN 'Trauma'\n        WHEN line_type IN ('Triple Introducer', 'TripleIntroducer') THEN 'Triple Introducer'\n        WHEN line_type IN ('Portacath', 'Indwelling Port (PortaCath)') THEN 'Portacath'\n        -- AVA Line\n        -- Camino Bolt\n        -- Cordis/Introducer\n        -- ICP Catheter\n        -- Impella Line\n        -- Intraosseous Device\n        -- Introducer\n        -- Lumbar Drain\n        -- Midline\n        -- Other/Remarks\n        -- PacerIntroducer\n        -- PermaCath\n        -- Pheresis Catheter\n        -- RIC\n        -- Sheath\n        -- Tandem Heart Access Line\n        -- Tandem Heart Return Line\n        -- Venous Access\n        -- Ventriculostomy\n    ELSE line_type END AS line_type\n    , CASE\n        WHEN line_site IN ('Left Antecub', 'Left Antecube') THEN 'Left Antecube'\n        WHEN line_site IN ('Left Axilla', 'Left Axilla.') THEN 'Left Axilla'\n        WHEN line_site IN ('Left Brachial', 'Left Brachial.') THEN 'Left Brachial'\n        WHEN line_site IN ('Left Femoral', 'Left Femoral.') THEN 'Left Femoral'\n        WHEN line_site IN ('Right Antecub', 'Right Antecube') THEN 'Right Antecube' \n        WHEN line_site IN ('Right Axilla', 'Right Axilla.') THEN 'Right Axilla' \n        WHEN line_site IN ('Right Brachial', 'Right Brachial.') THEN 'Right Brachial' \n        WHEN line_site IN ('Right Femoral', 'Right Femoral.') THEN 'Right Femoral' \n        -- 'Left Foot'\n        -- 'Left IJ'\n        -- 'Left Radial'\n        -- 'Left Subclavian'\n        -- 'Left Ulnar'\n        -- 'Left Upper Arm'\n        -- 'Right Foot'\n        -- 'Right IJ'\n        -- 'Right Radial'\n        -- 'Right Side Head'\n        -- 'Right Subclavian'\n        -- 'Right Ulnar'\n        -- 'Right Upper Arm'\n        -- 'Transthoracic'\n        -- 'Other/Remarks'\n    ELSE line_site END AS line_site\n    , starttime\n    , endtime\nFROM combined\nORDER BY icustay_id, starttime, line_type, line_site\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.794226Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.13, "status": "SELECT 34483"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 34483 in 0.13 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.922789Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.927972Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\nalter table \"postgres\".\"public\".\"pivoted_invasive_lines\" rename to \"pivoted_invasive_lines__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\nalter table \"postgres\".\"public\".\"pivoted_invasive_lines\" rename to \"pivoted_invasive_lines__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.928241Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.929167Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.933531Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\nalter table \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_tmp\" rename to \"pivoted_invasive_lines\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\nalter table \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_tmp\" rename to \"pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.933925Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.934670Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.938343Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.938608Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.938828Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.944397Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_invasive_lines\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.946427Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_invasive_lines", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_invasive_lines\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_invasive_lines__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.946691Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.948815Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.953571Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_invasive_lines: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.954085Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_invasive_lines", "execution_time": 0, "index": 57, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": "2022-07-18T00:10:48.767231", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "status": "SELECT 34483", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "57 of 107 OK created table model public.pivoted_invasive_lines ................. [\u001b[32mSELECT 34483\u001b[0m in 0.18s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.955257Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:48.956144", "node_name": "pivoted_invasive_lines", "node_path": "pivot/pivoted_invasive_lines.sql", "node_started_at": "2022-07-18T00:10:48.767231", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_invasive_lines"}, "run_result": {"adapter_response": {"_message": "SELECT 34483", "code": "SELECT", "rows_affected": 34483}, "agate_table": null, "execution_time": 0.18486285209655762, "failures": null, "message": "SELECT 34483", "node": {"alias": "pivoted_invasive_lines", "build_path": "target/run/mimic/models/pivot/pivoted_invasive_lines.sql", "checksum": {"checksum": "3613925fc71e6f264b354416dca6a21d8cfdf65763d67c88d9d2fd892f69e5ab", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_invasive_lines.sql", "compiled_sql": "WITH stg0 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , storetime\n        , itemid\n        -- create partition which separates the lines\n        , CASE\n            WHEN itemid IN (229, 8392) THEN 1\n            WHEN itemid IN (235, 8393) THEN 2\n            WHEN itemid IN (241, 8394) THEN 3\n            WHEN itemid IN (247, 8395) THEN 4\n            WHEN itemid IN (253, 8396) THEN 5\n            WHEN itemid IN (259, 8397) THEN 6\n            WHEN itemid IN (265, 8398) THEN 7\n            WHEN itemid IN (271, 8399) THEN 8\n          ELSE NULL END AS line_number\n        , CASE WHEN itemid < 8000 THEN value ELSE NULL END AS line_type\n        , CASE WHEN itemid > 8000 THEN value ELSE NULL END AS line_site\n        -- the stopped column is always present for invasive lines\n        , CASE \n            --   WHEN ce.stopped = 'D/C\\'d' THEN 1\n              WHEN ce.stopped = 'D/C''d' THEN 1\n              WHEN ce.stopped = 'NotStopd' THEN 0\n          ELSE NULL END AS line_dc\n    FROM chartevents ce\n    WHERE ce.itemid IN \n    (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n    )\n    AND icustay_id IS NOT NULL\n    AND COALESCE(ce.error, 0) = 0\n)\n, stg0_rn AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site, line_dc\n        -- only keep the last documented value\n        , ROW_NUMBER() OVER (PARTITION BY icustay_id, charttime, itemid ORDER BY storetime DESC) as rn_last_stored\n    FROM stg0\n)\n, stg1 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        -- collapse line type/site into a single row\n        -- MAX() always collapses a single value, due to where rn_last_stored = 1\n        , MAX(line_type) as line_type\n        , MAX(line_site) as line_site\n        -- any disconnection at this charttime turns off the line\n        , MAX(line_dc) AS line_dc\n    FROM stg0_rn\n    WHERE rn_last_stored = 1\n    GROUP BY icustay_id, charttime, line_number\n)\n, stg2 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site\n        , line_dc\n        -- carry forward the line type\n        , CASE\n            -- if the previous line was D/C'd then it's a new line\n            WHEN LAG(line_dc) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = 1 THEN 1\n            -- if it's the same line as before, within 16 hours, continue the event\n            WHEN LAG(line_type) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = line_type\n            AND DATETIME_DIFF(\n                charttime,\n                LAG(charttime) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime),\n                'HOUR'\n                ) < 16 THEN 0\n            -- otherwise, it's been more than 16 hours since the line was last documented\n            -- (or it's the first documentation of this line)\n            -- so we consider this a new event\n            ELSE 1\n        END AS rn_part\n    FROM stg1\n)\n-- rn_part is 1 if it's a new event, and 0 if it's a continuation of the previous\n-- so cumulatively summing it will result in a sequential integer which partitions\n-- distinct line events. we can later group on this integer.\n, stg3 AS\n(\n    SELECT\n        icustay_id, charttime, line_number\n        , line_type, line_site\n        , line_dc\n        , SUM(rn_part) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) as line_event\n    FROM stg2\n)\n-- group by line_event to determine line start/stop times\n, stg4 AS\n(\n    SELECT\n        icustay_id, line_number\n        , line_event\n        , line_type, line_site\n        , MIN(charttime) as starttime\n        , MAX(charttime) as endtime\n    FROM stg3\n    -- filter out the D/C'd rows so they don't impact the starttime of future events\n    WHERE line_dc = 0 \n    GROUP BY icustay_id, line_number, line_event, line_type, line_site\n)\n-- metavision\n, mv AS\n(\n    SELECT \n        icustay_id\n        -- since metavision separates lines using itemid, we can use it as the line number\n        , mv.itemid AS line_number\n        , di.label AS line_type\n        , mv.location AS line_site\n        , starttime, endtime\n    FROM procedureevents_mv mv\n    INNER JOIN d_items di\n      ON mv.itemid = di.itemid\n    WHERE mv.itemid IN\n    (\n      227719 -- AVA Line\n    , 225752 -- Arterial Line\n    , 224269 -- CCO PAC\n    , 224267 -- Cordis/Introducer\n    , 224270 -- Dialysis Catheter\n    , 224272 -- IABP line\n    , 226124 -- ICP Catheter\n    , 228169 -- Impella Line\n    , 225202 -- Indwelling Port (PortaCath)\n    , 228286 -- Intraosseous Device\n    , 225204 -- Midline\n    , 224263 -- Multi Lumen\n    , 224560 -- PA Catheter\n    , 224264 -- PICC Line\n    , 225203 -- Pheresis Catheter\n    , 224273 -- Presep Catheter\n    , 225789 -- Sheath\n    , 225761 -- Sheath Insertion\n    , 228201 -- Tandem Heart Access Line\n    , 228202 -- Tandem Heart Return Line\n    , 224268 -- Trauma line\n    , 225199 -- Triple Introducer\n    , 225315 -- Tunneled (Hickman) Line\n    , 225205 -- RIC\n    )\n    AND icustay_id IS NOT NULL\n    AND statusdescription != 'Rewritten'\n),\ncombined AS\n(\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM stg4\n    UNION DISTINCT\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM mv\n)\n-- as a final step, combine any similar terms together\n-- this was comprehensive as of MIMIC-III v1.4\nselect \n    icustay_id\n    , CASE\n        WHEN line_type IN ('Arterial Line', 'A-Line') THEN 'Arterial'\n        WHEN line_type IN ('CCO PA Line', 'CCO PAC') THEN 'Continuous Cardiac Output PA'\n        WHEN line_type IN ('Dialysis Catheter', 'Dialysis Line') THEN 'Dialysis'\n        WHEN line_type IN ('Hickman', 'Tunneled (Hickman) Line') THEN 'Hickman'\n        WHEN line_type IN ('IABP', 'IABP line') THEN 'IABP'\n        WHEN line_type IN ('Multi Lumen', 'Multi-lumen') THEN 'Multi Lumen'\n        WHEN line_type IN ('PA Catheter', 'PA line') THEN 'PA'\n        WHEN line_type IN ('PICC Line', 'PICC line') THEN 'PICC'\n        WHEN line_type IN ('Pre-Sep Catheter', 'Presep Catheter') THEN 'Pre-Sep'\n        WHEN line_type IN ('Trauma Line', 'Trauma line') THEN 'Trauma'\n        WHEN line_type IN ('Triple Introducer', 'TripleIntroducer') THEN 'Triple Introducer'\n        WHEN line_type IN ('Portacath', 'Indwelling Port (PortaCath)') THEN 'Portacath'\n        -- AVA Line\n        -- Camino Bolt\n        -- Cordis/Introducer\n        -- ICP Catheter\n        -- Impella Line\n        -- Intraosseous Device\n        -- Introducer\n        -- Lumbar Drain\n        -- Midline\n        -- Other/Remarks\n        -- PacerIntroducer\n        -- PermaCath\n        -- Pheresis Catheter\n        -- RIC\n        -- Sheath\n        -- Tandem Heart Access Line\n        -- Tandem Heart Return Line\n        -- Venous Access\n        -- Ventriculostomy\n    ELSE line_type END AS line_type\n    , CASE\n        WHEN line_site IN ('Left Antecub', 'Left Antecube') THEN 'Left Antecube'\n        WHEN line_site IN ('Left Axilla', 'Left Axilla.') THEN 'Left Axilla'\n        WHEN line_site IN ('Left Brachial', 'Left Brachial.') THEN 'Left Brachial'\n        WHEN line_site IN ('Left Femoral', 'Left Femoral.') THEN 'Left Femoral'\n        WHEN line_site IN ('Right Antecub', 'Right Antecube') THEN 'Right Antecube' \n        WHEN line_site IN ('Right Axilla', 'Right Axilla.') THEN 'Right Axilla' \n        WHEN line_site IN ('Right Brachial', 'Right Brachial.') THEN 'Right Brachial' \n        WHEN line_site IN ('Right Femoral', 'Right Femoral.') THEN 'Right Femoral' \n        -- 'Left Foot'\n        -- 'Left IJ'\n        -- 'Left Radial'\n        -- 'Left Subclavian'\n        -- 'Left Ulnar'\n        -- 'Left Upper Arm'\n        -- 'Right Foot'\n        -- 'Right IJ'\n        -- 'Right Radial'\n        -- 'Right Side Head'\n        -- 'Right Subclavian'\n        -- 'Right Ulnar'\n        -- 'Right Upper Arm'\n        -- 'Transthoracic'\n        -- 'Other/Remarks'\n    ELSE line_site END AS line_site\n    , starttime\n    , endtime\nFROM combined\nORDER BY icustay_id, starttime, line_type, line_site", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6006956, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_invasive_lines"], "meta": {}, "name": "pivoted_invasive_lines", "original_file_path": "models/pivot/pivoted_invasive_lines.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_invasive_lines.sql", "raw_sql": "WITH stg0 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , storetime\n        , itemid\n        -- create partition which separates the lines\n        , CASE\n            WHEN itemid IN (229, 8392) THEN 1\n            WHEN itemid IN (235, 8393) THEN 2\n            WHEN itemid IN (241, 8394) THEN 3\n            WHEN itemid IN (247, 8395) THEN 4\n            WHEN itemid IN (253, 8396) THEN 5\n            WHEN itemid IN (259, 8397) THEN 6\n            WHEN itemid IN (265, 8398) THEN 7\n            WHEN itemid IN (271, 8399) THEN 8\n          ELSE NULL END AS line_number\n        , CASE WHEN itemid < 8000 THEN value ELSE NULL END AS line_type\n        , CASE WHEN itemid > 8000 THEN value ELSE NULL END AS line_site\n        -- the stopped column is always present for invasive lines\n        , CASE \n            --   WHEN ce.stopped = 'D/C\\'d' THEN 1\n              WHEN ce.stopped = 'D/C''d' THEN 1\n              WHEN ce.stopped = 'NotStopd' THEN 0\n          ELSE NULL END AS line_dc\n    FROM chartevents ce\n    WHERE ce.itemid IN \n    (\n      229 -- INV Line#1 [Type]\n    , 235 -- INV Line#2 [Type]\n    , 241 -- INV Line#3 [Type]\n    , 247 -- INV Line#4 [Type]\n    , 253 -- INV Line#5 [Type]\n    , 259 -- INV Line#6 [Type]\n    , 265 -- INV Line#7 [Type]\n    , 271 -- INV Line#8 [Type]\n    , 8392 -- INV Line#1 [Site]\n    , 8393 -- INV Line#2 [Site]\n    , 8394 -- INV Line#3 [Site]\n    , 8395 -- INV Line#4 [Site]\n    , 8396 -- INV Line#5 [Site]\n    , 8397 -- INV Line#6 [Site]\n    , 8398 -- INV Line#7 [Site]\n    , 8399 -- INV Line#8 [Site]\n    )\n    AND icustay_id IS NOT NULL\n    AND COALESCE(ce.error, 0) = 0\n)\n, stg0_rn AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site, line_dc\n        -- only keep the last documented value\n        , ROW_NUMBER() OVER (PARTITION BY icustay_id, charttime, itemid ORDER BY storetime DESC) as rn_last_stored\n    FROM stg0\n)\n, stg1 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        -- collapse line type/site into a single row\n        -- MAX() always collapses a single value, due to where rn_last_stored = 1\n        , MAX(line_type) as line_type\n        , MAX(line_site) as line_site\n        -- any disconnection at this charttime turns off the line\n        , MAX(line_dc) AS line_dc\n    FROM stg0_rn\n    WHERE rn_last_stored = 1\n    GROUP BY icustay_id, charttime, line_number\n)\n, stg2 AS\n(\n    SELECT \n        icustay_id\n        , charttime\n        , line_number\n        , line_type, line_site\n        , line_dc\n        -- carry forward the line type\n        , CASE\n            -- if the previous line was D/C'd then it's a new line\n            WHEN LAG(line_dc) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = 1 THEN 1\n            -- if it's the same line as before, within 16 hours, continue the event\n            WHEN LAG(line_type) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) = line_type\n            AND DATETIME_DIFF(\n                charttime,\n                LAG(charttime) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime),\n                'HOUR'\n                ) < 16 THEN 0\n            -- otherwise, it's been more than 16 hours since the line was last documented\n            -- (or it's the first documentation of this line)\n            -- so we consider this a new event\n            ELSE 1\n        END AS rn_part\n    FROM stg1\n)\n-- rn_part is 1 if it's a new event, and 0 if it's a continuation of the previous\n-- so cumulatively summing it will result in a sequential integer which partitions\n-- distinct line events. we can later group on this integer.\n, stg3 AS\n(\n    SELECT\n        icustay_id, charttime, line_number\n        , line_type, line_site\n        , line_dc\n        , SUM(rn_part) OVER (PARTITION BY icustay_id, line_number ORDER BY charttime) as line_event\n    FROM stg2\n)\n-- group by line_event to determine line start/stop times\n, stg4 AS\n(\n    SELECT\n        icustay_id, line_number\n        , line_event\n        , line_type, line_site\n        , MIN(charttime) as starttime\n        , MAX(charttime) as endtime\n    FROM stg3\n    -- filter out the D/C'd rows so they don't impact the starttime of future events\n    WHERE line_dc = 0 \n    GROUP BY icustay_id, line_number, line_event, line_type, line_site\n)\n-- metavision\n, mv AS\n(\n    SELECT \n        icustay_id\n        -- since metavision separates lines using itemid, we can use it as the line number\n        , mv.itemid AS line_number\n        , di.label AS line_type\n        , mv.location AS line_site\n        , starttime, endtime\n    FROM procedureevents_mv mv\n    INNER JOIN d_items di\n      ON mv.itemid = di.itemid\n    WHERE mv.itemid IN\n    (\n      227719 -- AVA Line\n    , 225752 -- Arterial Line\n    , 224269 -- CCO PAC\n    , 224267 -- Cordis/Introducer\n    , 224270 -- Dialysis Catheter\n    , 224272 -- IABP line\n    , 226124 -- ICP Catheter\n    , 228169 -- Impella Line\n    , 225202 -- Indwelling Port (PortaCath)\n    , 228286 -- Intraosseous Device\n    , 225204 -- Midline\n    , 224263 -- Multi Lumen\n    , 224560 -- PA Catheter\n    , 224264 -- PICC Line\n    , 225203 -- Pheresis Catheter\n    , 224273 -- Presep Catheter\n    , 225789 -- Sheath\n    , 225761 -- Sheath Insertion\n    , 228201 -- Tandem Heart Access Line\n    , 228202 -- Tandem Heart Return Line\n    , 224268 -- Trauma line\n    , 225199 -- Triple Introducer\n    , 225315 -- Tunneled (Hickman) Line\n    , 225205 -- RIC\n    )\n    AND icustay_id IS NOT NULL\n    AND statusdescription != 'Rewritten'\n),\ncombined AS\n(\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM stg4\n    UNION DISTINCT\n    select \n        icustay_id\n        , line_type, line_site\n        , starttime\n        , endtime\n    FROM mv\n)\n-- as a final step, combine any similar terms together\n-- this was comprehensive as of MIMIC-III v1.4\nselect \n    icustay_id\n    , CASE\n        WHEN line_type IN ('Arterial Line', 'A-Line') THEN 'Arterial'\n        WHEN line_type IN ('CCO PA Line', 'CCO PAC') THEN 'Continuous Cardiac Output PA'\n        WHEN line_type IN ('Dialysis Catheter', 'Dialysis Line') THEN 'Dialysis'\n        WHEN line_type IN ('Hickman', 'Tunneled (Hickman) Line') THEN 'Hickman'\n        WHEN line_type IN ('IABP', 'IABP line') THEN 'IABP'\n        WHEN line_type IN ('Multi Lumen', 'Multi-lumen') THEN 'Multi Lumen'\n        WHEN line_type IN ('PA Catheter', 'PA line') THEN 'PA'\n        WHEN line_type IN ('PICC Line', 'PICC line') THEN 'PICC'\n        WHEN line_type IN ('Pre-Sep Catheter', 'Presep Catheter') THEN 'Pre-Sep'\n        WHEN line_type IN ('Trauma Line', 'Trauma line') THEN 'Trauma'\n        WHEN line_type IN ('Triple Introducer', 'TripleIntroducer') THEN 'Triple Introducer'\n        WHEN line_type IN ('Portacath', 'Indwelling Port (PortaCath)') THEN 'Portacath'\n        -- AVA Line\n        -- Camino Bolt\n        -- Cordis/Introducer\n        -- ICP Catheter\n        -- Impella Line\n        -- Intraosseous Device\n        -- Introducer\n        -- Lumbar Drain\n        -- Midline\n        -- Other/Remarks\n        -- PacerIntroducer\n        -- PermaCath\n        -- Pheresis Catheter\n        -- RIC\n        -- Sheath\n        -- Tandem Heart Access Line\n        -- Tandem Heart Return Line\n        -- Venous Access\n        -- Ventriculostomy\n    ELSE line_type END AS line_type\n    , CASE\n        WHEN line_site IN ('Left Antecub', 'Left Antecube') THEN 'Left Antecube'\n        WHEN line_site IN ('Left Axilla', 'Left Axilla.') THEN 'Left Axilla'\n        WHEN line_site IN ('Left Brachial', 'Left Brachial.') THEN 'Left Brachial'\n        WHEN line_site IN ('Left Femoral', 'Left Femoral.') THEN 'Left Femoral'\n        WHEN line_site IN ('Right Antecub', 'Right Antecube') THEN 'Right Antecube' \n        WHEN line_site IN ('Right Axilla', 'Right Axilla.') THEN 'Right Axilla' \n        WHEN line_site IN ('Right Brachial', 'Right Brachial.') THEN 'Right Brachial' \n        WHEN line_site IN ('Right Femoral', 'Right Femoral.') THEN 'Right Femoral' \n        -- 'Left Foot'\n        -- 'Left IJ'\n        -- 'Left Radial'\n        -- 'Left Subclavian'\n        -- 'Left Ulnar'\n        -- 'Left Upper Arm'\n        -- 'Right Foot'\n        -- 'Right IJ'\n        -- 'Right Radial'\n        -- 'Right Side Head'\n        -- 'Right Subclavian'\n        -- 'Right Ulnar'\n        -- 'Right Upper Arm'\n        -- 'Transthoracic'\n        -- 'Other/Remarks'\n    ELSE line_site END AS line_site\n    , starttime\n    , endtime\nFROM combined\nORDER BY icustay_id, starttime, line_type, line_site", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_invasive_lines\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_invasive_lines", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.774283Z", "name": "compile", "started_at": "2022-07-18T00:10:48.771371Z"}, {"completed_at": "2022-07-18T00:10:48.953527Z", "name": "execute", "started_at": "2022-07-18T00:10:48.775067Z"}]}, "unique_id": "model.mimic.pivoted_invasive_lines"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_invasive_lines", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.956417Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": "2022-07-18T00:10:48.957072", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_lab", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.957154Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_lab", "index": 58, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": "2022-07-18T00:10:48.957072", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "58 of 107 START table model public.pivoted_lab ................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.957938Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.959380Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": "2022-07-18T00:10:48.957072", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_lab", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.959653Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_lab", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.960262Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.961425Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.962296Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_lab", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.962666Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_lab\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.971855Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.972887Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.973225Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.973395Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.980992Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.981311Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_lab__dbt_tmp\"\n  as (\n    -- create a table which has fuzzy boundaries on ICU admission (+- 12 hours from documented time)\n-- this is used to assign icustay_id to lab data, which can be collected outside ICU\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  from icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two ICU stays within 24 hours, set the start/stop\n    --  time as half way between the two ICU stays\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (CAST(DATETIME_DIFF(i.intime, i.outtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (CAST(DATETIME_DIFF(i.intime_lead, i.outtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n-- also create fuzzy boundaries on hospitalization\n, h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  from admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(h.admittime, (CAST(DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(h.admittime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(h.dischtime, (CAST(DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12' HOUR))\n      end as data_end\n    from h\n)\n, le_avg as\n(\nSELECT\n    pvt.subject_id, pvt.charttime\n  , avg(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP\n  , avg(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN\n  , avg(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS\n  , avg(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE\n  , avg(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN\n  , avg(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE\n  , avg(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE\n  , avg(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE\n  , avg(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT\n  , avg(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN\n  , avg(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE\n  , avg(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET\n  , avg(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM\n  , avg(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT\n  , avg(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR\n  , avg(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT\n  , avg(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null end) as SODIUM\n  , avg(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN\n  , avg(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC\nFROM\n( -- begin query that extracts the data\n  SELECT le.subject_id, le.hadm_id, le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        -- exclude blood gas\n        -- WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        -- exclude blood gas\n        -- WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        -- exclude blood gas\n        --WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        -- exclude blood gas\n        --WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        -- exclude blood gas\n        -- WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        -- exclude blood gas\n        -- WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END AS label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE valuenum\n    END AS valuenum\n  FROM labevents le\n  WHERE le.ITEMID in\n  (\n    -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n    50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n    50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n    51144, -- BANDS - hematology\n    50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n    50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n    50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n    50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n    -- 50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n    50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n    -- 50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n    51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n    -- 50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n    51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n    -- 50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n    50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n    51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n    50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n    -- 50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n    51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n    51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n    51274, -- PT | HEMATOLOGY | BLOOD | 469090\n    50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n    -- 50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n    51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n    51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n    51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n  )\n  AND valuenum IS NOT NULL AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.charttime\n)\nselect\n  iid.icustay_id, adm.hadm_id, le_avg.*\nfrom le_avg\nleft join adm\n  on le_avg.subject_id  = adm.subject_id\n  and le_avg.charttime >= adm.data_start\n  and le_avg.charttime  < adm.data_end\nleft join iid_assign iid\n  on  le_avg.subject_id = iid.subject_id\n  and le_avg.charttime >= iid.data_start\n  and le_avg.charttime  < iid.data_end\norder by le_avg.subject_id, le_avg.charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_lab__dbt_tmp\"\n  as (\n    -- create a table which has fuzzy boundaries on ICU admission (+- 12 hours from documented time)\n-- this is used to assign icustay_id to lab data, which can be collected outside ICU\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  from icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two ICU stays within 24 hours, set the start/stop\n    --  time as half way between the two ICU stays\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (CAST(DATETIME_DIFF(i.intime, i.outtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (CAST(DATETIME_DIFF(i.intime_lead, i.outtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n-- also create fuzzy boundaries on hospitalization\n, h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  from admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(h.admittime, (CAST(DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(h.admittime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(h.dischtime, (CAST(DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12' HOUR))\n      end as data_end\n    from h\n)\n, le_avg as\n(\nSELECT\n    pvt.subject_id, pvt.charttime\n  , avg(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP\n  , avg(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN\n  , avg(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS\n  , avg(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE\n  , avg(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN\n  , avg(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE\n  , avg(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE\n  , avg(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE\n  , avg(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT\n  , avg(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN\n  , avg(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE\n  , avg(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET\n  , avg(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM\n  , avg(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT\n  , avg(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR\n  , avg(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT\n  , avg(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null end) as SODIUM\n  , avg(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN\n  , avg(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC\nFROM\n( -- begin query that extracts the data\n  SELECT le.subject_id, le.hadm_id, le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        -- exclude blood gas\n        -- WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        -- exclude blood gas\n        -- WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        -- exclude blood gas\n        --WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        -- exclude blood gas\n        --WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        -- exclude blood gas\n        -- WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        -- exclude blood gas\n        -- WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END AS label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE valuenum\n    END AS valuenum\n  FROM labevents le\n  WHERE le.ITEMID in\n  (\n    -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n    50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n    50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n    51144, -- BANDS - hematology\n    50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n    50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n    50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n    50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n    -- 50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n    50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n    -- 50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n    51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n    -- 50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n    51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n    -- 50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n    50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n    51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n    50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n    -- 50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n    51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n    51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n    51274, -- PT | HEMATOLOGY | BLOOD | 469090\n    50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n    -- 50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n    51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n    51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n    51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n  )\n  AND valuenum IS NOT NULL AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.charttime\n)\nselect\n  iid.icustay_id, adm.hadm_id, le_avg.*\nfrom le_avg\nleft join adm\n  on le_avg.subject_id  = adm.subject_id\n  and le_avg.charttime >= adm.data_start\n  and le_avg.charttime  < adm.data_end\nleft join iid_assign iid\n  on  le_avg.subject_id = iid.subject_id\n  and le_avg.charttime >= iid.data_start\n  and le_avg.charttime  < iid.data_end\norder by le_avg.subject_id, le_avg.charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:48.981436Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.1, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.1 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.077407Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.084585Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\nalter table \"postgres\".\"public\".\"pivoted_lab\" rename to \"pivoted_lab__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\nalter table \"postgres\".\"public\".\"pivoted_lab\" rename to \"pivoted_lab__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.085275Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.088320Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.092619Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\nalter table \"postgres\".\"public\".\"pivoted_lab__dbt_tmp\" rename to \"pivoted_lab\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\nalter table \"postgres\".\"public\".\"pivoted_lab__dbt_tmp\" rename to \"pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.092924Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.093703Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.096963Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.097207Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.097354Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.098492Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_lab", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_lab\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.101728Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_lab", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_lab__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_lab\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_lab__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.102048Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.104229Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.107852Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_lab: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.108111Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_lab", "execution_time": 0, "index": 58, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": "2022-07-18T00:10:48.957072", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "58 of 107 OK created table model public.pivoted_lab ............................ [\u001b[32mSELECT 0\u001b[0m in 0.15s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.108665Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:49.108926", "node_name": "pivoted_lab", "node_path": "pivot/pivoted_lab.sql", "node_started_at": "2022-07-18T00:10:48.957072", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_lab"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.14964509010314941, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_lab", "build_path": "target/run/mimic/models/pivot/pivoted_lab.sql", "checksum": {"checksum": "43f1124aff9b923acaf45cfa9947eb1083dd94df5b8189dd05da41618b55568f", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_lab.sql", "compiled_sql": "-- create a table which has fuzzy boundaries on ICU admission (+- 12 hours from documented time)\n-- this is used to assign icustay_id to lab data, which can be collected outside ICU\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  from icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two ICU stays within 24 hours, set the start/stop\n    --  time as half way between the two ICU stays\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (CAST(DATETIME_DIFF(i.intime, i.outtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (CAST(DATETIME_DIFF(i.intime_lead, i.outtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n-- also create fuzzy boundaries on hospitalization\n, h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  from admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(h.admittime, (CAST(DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(h.admittime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(h.dischtime, (CAST(DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12' HOUR))\n      end as data_end\n    from h\n)\n, le_avg as\n(\nSELECT\n    pvt.subject_id, pvt.charttime\n  , avg(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP\n  , avg(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN\n  , avg(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS\n  , avg(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE\n  , avg(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN\n  , avg(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE\n  , avg(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE\n  , avg(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE\n  , avg(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT\n  , avg(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN\n  , avg(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE\n  , avg(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET\n  , avg(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM\n  , avg(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT\n  , avg(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR\n  , avg(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT\n  , avg(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null end) as SODIUM\n  , avg(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN\n  , avg(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC\nFROM\n( -- begin query that extracts the data\n  SELECT le.subject_id, le.hadm_id, le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        -- exclude blood gas\n        -- WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        -- exclude blood gas\n        -- WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        -- exclude blood gas\n        --WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        -- exclude blood gas\n        --WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        -- exclude blood gas\n        -- WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        -- exclude blood gas\n        -- WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END AS label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE valuenum\n    END AS valuenum\n  FROM labevents le\n  WHERE le.ITEMID in\n  (\n    -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n    50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n    50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n    51144, -- BANDS - hematology\n    50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n    50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n    50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n    50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n    -- 50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n    50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n    -- 50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n    51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n    -- 50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n    51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n    -- 50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n    50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n    51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n    50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n    -- 50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n    51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n    51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n    51274, -- PT | HEMATOLOGY | BLOOD | 469090\n    50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n    -- 50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n    51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n    51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n    51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n  )\n  AND valuenum IS NOT NULL AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.charttime\n)\nselect\n  iid.icustay_id, adm.hadm_id, le_avg.*\nfrom le_avg\nleft join adm\n  on le_avg.subject_id  = adm.subject_id\n  and le_avg.charttime >= adm.data_start\n  and le_avg.charttime  < adm.data_end\nleft join iid_assign iid\n  on  le_avg.subject_id = iid.subject_id\n  and le_avg.charttime >= iid.data_start\n  and le_avg.charttime  < iid.data_end\norder by le_avg.subject_id, le_avg.charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5765035, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_lab"], "meta": {}, "name": "pivoted_lab", "original_file_path": "models/pivot/pivoted_lab.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_lab.sql", "raw_sql": "-- create a table which has fuzzy boundaries on ICU admission (+- 12 hours from documented time)\n-- this is used to assign icustay_id to lab data, which can be collected outside ICU\n-- involves first creating a lag/lead version of intime/outtime\nwith i as\n(\n  select\n    subject_id, icustay_id, intime, outtime\n    , lag (outtime) over (partition by subject_id order by intime) as outtime_lag\n    , lead (intime) over (partition by subject_id order by intime) as intime_lead\n  from icustays\n)\n, iid_assign as\n(\n  select\n    i.subject_id, i.icustay_id\n    -- this rule is:\n    --  if there are two ICU stays within 24 hours, set the start/stop\n    --  time as half way between the two ICU stays\n    , case\n        when i.outtime_lag is not null\n        and i.outtime_lag > (DATETIME_SUB(i.intime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(i.intime, (CAST(DATETIME_DIFF(i.intime, i.outtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(i.intime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when i.intime_lead is not null\n        and i.intime_lead < (DATETIME_ADD(i.outtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(i.outtime, (CAST(DATETIME_DIFF(i.intime_lead, i.outtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(i.outtime, INTERVAL '12' HOUR))\n      end as data_end\n    from i\n)\n-- also create fuzzy boundaries on hospitalization\n, h as\n(\n  select\n    subject_id, hadm_id, admittime, dischtime\n    , lag (dischtime) over (partition by subject_id order by admittime) as dischtime_lag\n    , lead (admittime) over (partition by subject_id order by admittime) as admittime_lead\n  from admissions\n)\n, adm as\n(\n  select\n    h.subject_id, h.hadm_id\n    -- this rule is:\n    --  if there are two hospitalizations within 24 hours, set the start/stop\n    --  time as half way between the two admissions\n    , case\n        when h.dischtime_lag is not null\n        and h.dischtime_lag > (DATETIME_SUB(h.admittime, INTERVAL '24' HOUR))\n          then DATETIME_SUB(h.admittime, (CAST(DATETIME_DIFF(h.admittime, h.dischtime_lag, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else DATETIME_SUB(h.admittime, INTERVAL '12' HOUR)\n      end as data_start\n    , case\n        when h.admittime_lead is not null\n        and h.admittime_lead < (DATETIME_ADD(h.dischtime, INTERVAL '24' HOUR))\n          then DATETIME_ADD(h.dischtime, (CAST(DATETIME_DIFF(h.admittime_lead, h.dischtime, 'SECOND')/2 AS integer) || 'SECOND')::INTERVAL)\n      else (DATETIME_ADD(h.dischtime, INTERVAL '12' HOUR))\n      end as data_end\n    from h\n)\n, le_avg as\n(\nSELECT\n    pvt.subject_id, pvt.charttime\n  , avg(CASE WHEN label = 'ANION GAP' THEN valuenum ELSE null END) as ANIONGAP\n  , avg(CASE WHEN label = 'ALBUMIN' THEN valuenum ELSE null END) as ALBUMIN\n  , avg(CASE WHEN label = 'BANDS' THEN valuenum ELSE null END) as BANDS\n  , avg(CASE WHEN label = 'BICARBONATE' THEN valuenum ELSE null END) as BICARBONATE\n  , avg(CASE WHEN label = 'BILIRUBIN' THEN valuenum ELSE null END) as BILIRUBIN\n  , avg(CASE WHEN label = 'CREATININE' THEN valuenum ELSE null END) as CREATININE\n  , avg(CASE WHEN label = 'CHLORIDE' THEN valuenum ELSE null END) as CHLORIDE\n  , avg(CASE WHEN label = 'GLUCOSE' THEN valuenum ELSE null END) as GLUCOSE\n  , avg(CASE WHEN label = 'HEMATOCRIT' THEN valuenum ELSE null END) as HEMATOCRIT\n  , avg(CASE WHEN label = 'HEMOGLOBIN' THEN valuenum ELSE null END) as HEMOGLOBIN\n  , avg(CASE WHEN label = 'LACTATE' THEN valuenum ELSE null END) as LACTATE\n  , avg(CASE WHEN label = 'PLATELET' THEN valuenum ELSE null END) as PLATELET\n  , avg(CASE WHEN label = 'POTASSIUM' THEN valuenum ELSE null END) as POTASSIUM\n  , avg(CASE WHEN label = 'PTT' THEN valuenum ELSE null END) as PTT\n  , avg(CASE WHEN label = 'INR' THEN valuenum ELSE null END) as INR\n  , avg(CASE WHEN label = 'PT' THEN valuenum ELSE null END) as PT\n  , avg(CASE WHEN label = 'SODIUM' THEN valuenum ELSE null end) as SODIUM\n  , avg(CASE WHEN label = 'BUN' THEN valuenum ELSE null end) as BUN\n  , avg(CASE WHEN label = 'WBC' THEN valuenum ELSE null end) as WBC\nFROM\n( -- begin query that extracts the data\n  SELECT le.subject_id, le.hadm_id, le.charttime\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , CASE\n        WHEN itemid = 50868 THEN 'ANION GAP'\n        WHEN itemid = 50862 THEN 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        WHEN itemid = 50882 THEN 'BICARBONATE'\n        WHEN itemid = 50885 THEN 'BILIRUBIN'\n        WHEN itemid = 50912 THEN 'CREATININE'\n        -- exclude blood gas\n        -- WHEN itemid = 50806 THEN 'CHLORIDE'\n        WHEN itemid = 50902 THEN 'CHLORIDE'\n        -- exclude blood gas\n        -- WHEN itemid = 50809 THEN 'GLUCOSE'\n        WHEN itemid = 50931 THEN 'GLUCOSE'\n        -- exclude blood gas\n        --WHEN itemid = 50810 THEN 'HEMATOCRIT'\n        WHEN itemid = 51221 THEN 'HEMATOCRIT'\n        -- exclude blood gas\n        --WHEN itemid = 50811 THEN 'HEMOGLOBIN'\n        WHEN itemid = 51222 THEN 'HEMOGLOBIN'\n        WHEN itemid = 50813 THEN 'LACTATE'\n        WHEN itemid = 51265 THEN 'PLATELET'\n        -- exclude blood gas\n        -- WHEN itemid = 50822 THEN 'POTASSIUM'\n        WHEN itemid = 50971 THEN 'POTASSIUM'\n        WHEN itemid = 51275 THEN 'PTT'\n        WHEN itemid = 51237 THEN 'INR'\n        WHEN itemid = 51274 THEN 'PT'\n        -- exclude blood gas\n        -- WHEN itemid = 50824 THEN 'SODIUM'\n        WHEN itemid = 50983 THEN 'SODIUM'\n        WHEN itemid = 51006 THEN 'BUN'\n        WHEN itemid = 51300 THEN 'WBC'\n        WHEN itemid = 51301 THEN 'WBC'\n      ELSE null\n    END AS label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    CASE\n      WHEN itemid = 50862 and valuenum >    10 THEN null -- g/dL 'ALBUMIN'\n      WHEN itemid = 50868 and valuenum > 10000 THEN null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum >   100 THEN null -- immature band forms, %\n      WHEN itemid = 50882 and valuenum > 10000 THEN null -- mEq/L 'BICARBONATE'\n      WHEN itemid = 50885 and valuenum >   150 THEN null -- mg/dL 'BILIRUBIN'\n      WHEN itemid = 50806 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50902 and valuenum > 10000 THEN null -- mEq/L 'CHLORIDE'\n      WHEN itemid = 50912 and valuenum >   150 THEN null -- mg/dL 'CREATININE'\n      WHEN itemid = 50809 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50931 and valuenum > 10000 THEN null -- mg/dL 'GLUCOSE'\n      WHEN itemid = 50810 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 51221 and valuenum >   100 THEN null -- % 'HEMATOCRIT'\n      WHEN itemid = 50811 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 51222 and valuenum >    50 THEN null -- g/dL 'HEMOGLOBIN'\n      WHEN itemid = 50813 and valuenum >    50 THEN null -- mmol/L 'LACTATE'\n      WHEN itemid = 51265 and valuenum > 10000 THEN null -- K/uL 'PLATELET'\n      WHEN itemid = 50822 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 50971 and valuenum >    30 THEN null -- mEq/L 'POTASSIUM'\n      WHEN itemid = 51275 and valuenum >   150 THEN null -- sec 'PTT'\n      WHEN itemid = 51237 and valuenum >    50 THEN null -- 'INR'\n      WHEN itemid = 51274 and valuenum >   150 THEN null -- sec 'PT'\n      WHEN itemid = 50824 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 50983 and valuenum >   200 THEN null -- mEq/L == mmol/L 'SODIUM'\n      WHEN itemid = 51006 and valuenum >   300 THEN null -- 'BUN'\n      WHEN itemid = 51300 and valuenum >  1000 THEN null -- 'WBC'\n      WHEN itemid = 51301 and valuenum >  1000 THEN null -- 'WBC'\n    ELSE valuenum\n    END AS valuenum\n  FROM labevents le\n  WHERE le.ITEMID in\n  (\n    -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n    50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n    50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n    51144, -- BANDS - hematology\n    50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n    50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n    50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n    50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n    -- 50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n    50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n    -- 50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n    51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n    -- 50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n    51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n    -- 50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n    50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n    51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n    50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n    -- 50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n    51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n    51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n    51274, -- PT | HEMATOLOGY | BLOOD | 469090\n    50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n    -- 50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n    51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n    51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n    51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n  )\n  AND valuenum IS NOT NULL AND valuenum > 0 -- lab values cannot be 0 and cannot be negative\n) pvt\nGROUP BY pvt.subject_id, pvt.charttime\n)\nselect\n  iid.icustay_id, adm.hadm_id, le_avg.*\nfrom le_avg\nleft join adm\n  on le_avg.subject_id  = adm.subject_id\n  and le_avg.charttime >= adm.data_start\n  and le_avg.charttime  < adm.data_end\nleft join iid_assign iid\n  on  le_avg.subject_id = iid.subject_id\n  and le_avg.charttime >= iid.data_start\n  and le_avg.charttime  < iid.data_end\norder by le_avg.subject_id, le_avg.charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_lab\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_lab", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:48.962242Z", "name": "compile", "started_at": "2022-07-18T00:10:48.960227Z"}, {"completed_at": "2022-07-18T00:10:49.107820Z", "name": "execute", "started_at": "2022-07-18T00:10:48.962940Z"}]}, "unique_id": "model.mimic.pivoted_lab"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_lab", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.109019Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": "2022-07-18T00:10:49.109339", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_rrt", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.109361Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_rrt", "index": 59, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": "2022-07-18T00:10:49.109339", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "59 of 107 START table model public.pivoted_rrt ................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.110305Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.111083Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": "2022-07-18T00:10:49.109339", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_rrt", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.111320Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_rrt", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.111634Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.113286Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.113922Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_rrt", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.114423Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_rrt\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.122524Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.123196Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.123466Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.123674Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.129044Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.129350Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_rrt__dbt_tmp\"\n  as (\n    -- Creates a table with icustay_id / time / dialysis type (if present)\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n          -- when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          -- when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          -- when ce.itemid = 466 and value = 'Dialysis RN' then 1\n          -- when ce.itemid = 927 and value = 'Dialysis Solutions' then 1\n          -- when ce.itemid = 6250 and value = 'dialys' then 1\n          -- when ce.\n          -- when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n    , CASE\n        WHEN ce.itemid IN\n        (\n          146 -- \"Dialysate Flow ml/hr\"\n          , 147 -- \"Dialysate Infusing\";56605\n          , 148 -- \"Dialysis Access Site\";60335\n          , 149 -- \"Dialysis Access Type\";60030\n          , 150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n          , 151 -- \"Dialysis Site Appear\";37345\n          , 152 -- \"Dialysis Type\";61449\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid IN (229, 235, 241, 247, 253, 259, 265, 271) AND value = 'Dialysis Line' \n          THEN 1\n        -- WHEN ce.itemid = 917 AND value IN\n        -- (\n        --   '+ INITIATE DIALYSIS', 'BLEEDING FROM DIALYSIS CATHETER',\n        --   -- 'FAILED DIALYSIS CATH.',\n        --   'FEBRILE SYNDROME;DIALYSIS', 'HYPOTENSION WITH HEMODIALYSIS',\n        --   'HYPOTENSION.GLOGGED DIALYSIS',\n        --   'INFECTED DIALYSIS CATHETER'\n        -- )\n        -- metavision itemids\n\n        -- checkboxes\n        WHEN ce.itemid IN\n        (\n            226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n          , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n          , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n        ) THEN 1\n        -- numeric data\n        WHEN ce.itemid IN\n        (\n            226499 -- | Hemodialysis Output                               | Dialysis\n          , 224154 -- | Dialysate Rate                                    | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224149 -- | Access Pressure                  | Dialysis\n          , 224150 -- | Filter Pressure                  | Dialysis\n          , 224151 -- | Effluent Pressure                | Dialysis\n          , 224152 -- | Return Pressure                  | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 224404 -- | ART Lumen Volume                 | Dialysis\n          , 224406 -- | VEN Lumen Volume                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n\n        -- text fields\n        WHEN ce.itemid IN\n        (\n            224135 -- | Dialysis Access Site | Dialysis\n          , 224139 -- | Dialysis Site Appearance | Dialysis\n          , 224146 -- | System Integrity | Dialysis\n          , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive\n          , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive\n          , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225954 -- | Dialysis Access Type | Dialysis\n          , 225956 -- | Reason for CRRT Filter Change | Dialysis\n          , 225958 -- | Heparin Concentration (units/mL) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 225976 -- | Replacement Fluid | Dialysis\n          , 225977 -- | Dialysate Fluid | Dialysis\n          , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive\n          , 227290 -- | CRRT mode | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n          , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_present\n    , CASE\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end'\n        ) THEN 0\n        WHEN ce.itemid = 147 AND value = 'Yes' THEN 1 -- \"Dialysate Infusing\";56605\n        WHEN ce.itemid = 225965 -- Peritoneal Dialysis Catheter Status\n          AND value = 'In use' THEN 1\n        WHEN ce.itemid IN\n        (\n            146    -- Dialysate Flow ml/hr\n          , 226499 -- | Hemodialysis Output              | Dialysis\n          , 224154 -- | Dialysate Rate                   | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_active\n    , CASE\n        -- dialysis mode\n        WHEN ce.itemid in (152, 227290) THEN\n          CASE\n            WHEN value = 'CVVH' THEN 'CVVH'\n            WHEN value = 'CVVHD' THEN 'CVVHD'\n            WHEN value = 'CVVHDF' THEN 'CVVHDF'\n            WHEN value = 'SCUF' THEN 'SCUF'\n            WHEN value = 'Peritoneal' THEN 'Peritoneal'\n          END\n        -- itemids which imply a certain dialysis mode\n\n        -- peritoneal dialysis\n        WHEN ce.itemid IN \n        (\n            225810 -- | Dwell Time (Peritoneal Dialysis) | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n        )\n          THEN 'Peritoneal'\n        WHEN ce.itemid IN (226499)\n          THEN 'IHD'\n        WHEN ce.itemid = 582 THEN\n          CASE\n            WHEN value IN ('CAVH Start','CAVH D/C')\n              THEN 'CAVH'\n            WHEN value IN ('CVVHD Start','CVVHD D/C')\n              THEN 'CVVHD'\n            WHEN value IN ('Hemodialysis st', 'Hemodialysis end')\n              -- null is ambiguous\n              THEN NULL\n          ELSE NULL\n          END\n      ELSE NULL END as dialysis_type\n  from chartevents ce\n  WHERE ce.itemid in\n  (\n     152 -- \"Dialysis Type\";61449\n    ,146 -- \"Dialysate Flow ml/hr\";57445\n    ,147 -- \"Dialysate Infusing\";56605\n    ,148 -- \"Dialysis Access Site\";60335\n    ,149 -- \"Dialysis Access Type\";60030\n    ,150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n    ,151 -- \"Dialysis Site Appear\";37345\n    ,582 -- Procedures\n    -- below indicate existence of a dialysis line\n    ,229 -- INV Line#1 [Type]\n    ,235 -- INV Line#2 [Type]\n    ,241 -- INV Line#3 [Type]\n    ,247 -- INV Line#4 [Type]\n    ,253 -- INV Line#5 [Type]\n    ,259 -- INV Line#6 [Type]\n    ,265 -- INV Line#7 [Type]\n    ,271 -- INV Line#8 [Type]\n    \n    -- dialysis consults can't be 100% guaranteed to be active\n    -- ,466 -- Nursing Consultation\n    -- diagnosis has 6 or 7 dx related to dialysis, probably not worth including\n    -- as the chart time isn't going to match the start time of dialysis\n    -- , 917 -- Diagnosis/op\n    -- ,7949 -- \"Calcium for CVVH\" - only has 2 null values\n    \n    -- === MetaVision itemids === --\n  \n    -- Checkboxes\n    , 226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n    , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n    , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n\n    -- Numeric values\n    , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n    , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n    , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n    , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n    , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n    , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n    , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n    , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n    , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n    , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n    , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n    , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n    , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n    , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n    , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n    , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n    , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n    , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n    , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n    , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis | chartevents | Numeric\n    -- Text values\n    , 224135 -- | Dialysis Access Site | Dialysis | chartevents | Text\n    , 224139 -- | Dialysis Site Appearance | Dialysis | chartevents | Text\n    , 224146 -- | System Integrity | Dialysis | chartevents | Text\n    , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive | chartevents | Text\n    , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive | chartevents | Text\n    , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive | chartevents | Text\n    , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis | chartevents | Text\n    , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225954 -- | Dialysis Access Type | Dialysis | chartevents | Text\n    , 225956 -- | Reason for CRRT Filter Change | Dialysis | chartevents | Text\n    , 225958 -- | Heparin Concentration (units/mL) | Dialysis | chartevents | Text\n    , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis | chartevents | Text\n    , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis | chartevents | Text\n    , 225976 -- | Replacement Fluid | Dialysis | chartevents | Text\n    , 225977 -- | Dialysate Fluid | Dialysis | chartevents | Text\n    , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive | chartevents | Text\n    , 227290 -- | CRRT mode | Dialysis | chartevents | Text\n    , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive | chartevents | Text\n  )\n  AND ce.value IS NOT NULL\n  AND ce.icustay_id IS NOT NULL\n  -- exclude rows marked as error\n  and COALESCE(ce.error, 0) = 0\n)\n\n-- TODO:\n--   charttime + dialysis_present + dialysis_active\n--  for inputevents_cv, outputevents\n--  for procedures_mv, left join and set the dialysis_type\n, cv_ie as\n(\n  select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          44954 -- OR CVVHDF |  | inputevents_cv\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n            40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n          , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n          , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n          , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n          , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n          , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n        ) THEN 'Peritoneal'\n        WHEN itemid IN\n        (\n            45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n          , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n        ) THEN 'CVVH'\n        WHEN itemid IN\n        (\n            45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n          , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n          , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHD'\n        WHEN itemid IN\n        (\n            46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n          , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n          , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n          , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHDF'\n      ELSE NULL END AS dialysis_type\n  from inputevents_cv\n  where itemid in\n  (\n        40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n      , 40907 -- dialysate | Free Form Intake | inputevents_cv\n      , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n      , 41147 -- Dialysate instilled | Free Form Intake | inputevents_cv\n      , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n      , 41460 -- capd dialysate | Free Form Intake | inputevents_cv\n      , 41620 -- dialysate in | Free Form Intake | inputevents_cv\n      , 41711 -- CAPD dialysate dwell | Free Form Intake | inputevents_cv\n      , 41791 -- 2.5% dialysate in | Free Form Intake | inputevents_cv\n      , 41792 -- 1.5% dialysate | Free Form Intake | inputevents_cv\n      , 42562 -- pos. dialysate intak | Free Form Intake | inputevents_cv\n      , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n      , 44037 -- Dialysate Instilled | Free Form Intake | inputevents_cv\n      , 44188 -- rep.+dialysate | Free Form Intake | inputevents_cv\n      , 44526 -- dialysate 1.5% dex | Free Form Intake | inputevents_cv\n      , 44527 -- dialysate 2.5% | Free Form Intake | inputevents_cv\n      , 44584 -- Dialysate IN | Free Form Intake | inputevents_cv\n      , 44591 -- dialysate 4.25% | Free Form Intake | inputevents_cv\n      , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n      , 44927 -- CRRT HEPARIN | Free Form Intake | inputevents_cv\n      , 44954 -- OR CVVHDF |  | inputevents_cv\n      , 45157 -- ca+ gtt for cvvh | Free Form Intake | inputevents_cv\n      , 45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n      , 45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n      , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n      , 46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n      , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n      , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n      , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n      , 46250 -- EBL  CVVH |  | inputevents_cv\n      , 46262 -- dialysate 2.5% in | Free Form Intake | inputevents_cv\n      , 46292 -- CRRT Irrigation | Free Form Intake | inputevents_cv\n      , 46293 -- CRRT Citrate | Free Form Intake | inputevents_cv\n      , 46311 -- crrt irrigation | Free Form Intake | inputevents_cv\n      , 46389 -- CRRT FLUSH | Free Form Intake | inputevents_cv\n      , 46574 -- CRRT rescue line NS | Free Form Intake | inputevents_cv\n      , 46681 -- CRRT Rescue Flush | Free Form Intake | inputevents_cv\n      , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n      , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n      , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n  )\n  and amount > 0 -- also ensures it's not null\n)\n, oe as\n(\n select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          41897 -- CVVH OUTPUT FROM OR\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n          40789 -- PD dialysate out\n        , 40910 -- PERITONEAL DIALYSIS\n        , 41069 -- PD Dialysate Output\n        , 44843 -- peritoneal dialysis\n        , 46394 -- Peritoneal dialysis\n        ) THEN 'Peritoneal'\n      ELSE NULL END AS dialysis_type\n from outputevents\n where itemid in\n (\n       40386 -- hemodialysis\n     , 40425 -- dialysis output\n     , 40426 -- dialysis out\n     , 40507 -- Dialysis out\n     , 40613 -- DIALYSIS OUT\n     , 40624 -- dialysis\n     , 40690 -- DIALYSIS\n     , 40745 -- Dialysis\n     , 40789 -- PD dialysate out\n     , 40881 -- Hemodialysis\n     , 40910 -- PERITONEAL DIALYSIS\n     , 41016 -- hemodialysis out\n     , 41034 -- dialysis in\n     , 41069 -- PD Dialysate Output\n     , 41112 -- Dialysys out\n     , 41250 -- HEMODIALYSIS OUT\n     , 41374 -- Dialysis Out\n     , 41417 -- Hemodialysis Out\n     , 41500 -- hemodialysis output\n     , 41527 -- HEMODIALYSIS\n     , 41623 -- dialysate out\n     , 41635 -- Hemodialysis removal\n     , 41713 -- dialyslate out\n     , 41750 -- dialysis  out\n     , 41829 -- HEMODIALYSIS OUTPUT\n     , 41842 -- Dialysis Output.\n     , 41897 -- CVVH OUTPUT FROM OR\n     , 42289 -- dialysis off\n     , 42388 -- DIALYSIS OUTPUT\n     , 42464 -- hemodialysis ultrafe\n     , 42524 -- HemoDialysis\n     , 42536 -- Dialysis output\n     , 42868 -- hemodialysis off\n     , 42928 -- HEMODIALYSIS.\n     , 42972 -- HEMODIALYSIS OFF\n     , 43016 -- DIALYSIS TOTAL OUT\n     , 43052 -- DIALYSIS REMOVED\n     , 43098 -- hemodialysis crystal\n     , 43115 -- dialysis net\n     , 43687 -- crystalloid/dialysis\n     , 43941 -- dialysis/intake\n     , 44027 -- dialysis fluid off\n     , 44085 -- DIALYSIS OFF\n     , 44193 -- Dialysis.\n     , 44199 -- HEMODIALYSIS O/P\n     , 44216 -- Hemodialysis out\n     , 44286 -- Dialysis indwelling\n     , 44567 -- Hemodialysis.\n     , 44843 -- peritoneal dialysis\n     , 44845 -- Dialysis fluids\n     , 44857 -- dialysis- fluid off\n     , 44901 -- Dialysis Removed\n     , 44943 -- fluid removed dialys\n     , 45479 -- Dialysis In\n     , 45828 -- Hemo dialysis out\n     , 46230 -- Dialysis 1.5% IN\n     , 46232 -- dialysis flush\n     , 46394 -- Peritoneal dialysis\n     , 46464 -- Hemodialysis OUT\n     , 46712 -- CALCIUM-DIALYSIS\n     , 46713 -- KCL-10 MEQ-DIALYSIS\n     , 46715 -- Citrate - dialysis\n     , 46741 -- dialysis removed\n )\n and value > 0 -- also ensures it's not null\n)\n, mv_ranges as\n(\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , 1 AS dialysis_active\n    , 'CRRT' as dialysis_type\n  from inputevents_mv\n  where itemid in\n  (\n      227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n    , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n  )\n  and amount > 0 -- also ensures it's not null\n  UNION DISTINCT\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , CASE WHEN itemid NOT IN (224270, 225436) THEN 1 ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid = 225441 THEN 'IHD'\n        WHEN itemid = 225802 THEN 'CRRT'  -- CVVH (Continuous venovenous hemofiltration)\n        WHEN itemid = 225803 THEN 'CVVHD' -- CVVHD (Continuous venovenous hemodialysis)\n        WHEN itemid = 225805 THEN 'Peritoneal'\n        WHEN itemid = 225809 THEN 'CVVHDF' -- CVVHDF (Continuous venovenous hemodiafiltration)\n        WHEN itemid = 225955 THEN 'SCUF' -- SCUF (Slow continuous ultra filtration)\n      ELSE NULL END as dialysis_type\n  from procedureevents_mv\n  where itemid in\n  (\n      225441 -- | Hemodialysis          | 4-Procedures              | procedureevents_mv | Process\n    , 225802 -- | Dialysis - CRRT       | Dialysis                  | procedureevents_mv | Process\n    , 225803 -- | Dialysis - CVVHD      | Dialysis                  | procedureevents_mv | Process\n    , 225805 -- | Peritoneal Dialysis   | Dialysis                  | procedureevents_mv | Process\n    , 224270 -- | Dialysis Catheter     | Access Lines - Invasive   | procedureevents_mv | Process\n    , 225809 -- | Dialysis - CVVHDF     | Dialysis                  | procedureevents_mv | Process\n    , 225955 -- | Dialysis - SCUF       | Dialysis                  | procedureevents_mv | Process\n    , 225436 -- | CRRT Filter Change    | Dialysis                  | procedureevents_mv | Process\n  )\n  AND value IS NOT NULL\n)\n-- union together the charttime tables; append times from mv_ranges to guarantee they exist\n, stg0 AS\n(\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM ce\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM cv_ie\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM oe\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, starttime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n  UNION DISTINCT\n  SELECT\n    icustay_id, endtime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n)\nSELECT\n    stg0.icustay_id\n    , charttime\n    , COALESCE(mv.dialysis_present, stg0.dialysis_present) AS dialysis_present\n    , COALESCE(mv.dialysis_active, stg0.dialysis_active) AS dialysis_active\n    , COALESCE(mv.dialysis_type, stg0.dialysis_type) AS dialysis_type\nFROM stg0\nLEFT JOIN mv_ranges mv\n  ON stg0.icustay_id = mv.icustay_id\n  AND stg0.charttime >= mv.starttime\n  AND stg0.charttime <= mv.endtime\nWHERE stg0.icustay_id IS NOT NULL\nORDER BY 1,2\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_rrt__dbt_tmp\"\n  as (\n    -- Creates a table with icustay_id / time / dialysis type (if present)\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n          -- when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          -- when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          -- when ce.itemid = 466 and value = 'Dialysis RN' then 1\n          -- when ce.itemid = 927 and value = 'Dialysis Solutions' then 1\n          -- when ce.itemid = 6250 and value = 'dialys' then 1\n          -- when ce.\n          -- when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n    , CASE\n        WHEN ce.itemid IN\n        (\n          146 -- \"Dialysate Flow ml/hr\"\n          , 147 -- \"Dialysate Infusing\";56605\n          , 148 -- \"Dialysis Access Site\";60335\n          , 149 -- \"Dialysis Access Type\";60030\n          , 150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n          , 151 -- \"Dialysis Site Appear\";37345\n          , 152 -- \"Dialysis Type\";61449\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid IN (229, 235, 241, 247, 253, 259, 265, 271) AND value = 'Dialysis Line' \n          THEN 1\n        -- WHEN ce.itemid = 917 AND value IN\n        -- (\n        --   '+ INITIATE DIALYSIS', 'BLEEDING FROM DIALYSIS CATHETER',\n        --   -- 'FAILED DIALYSIS CATH.',\n        --   'FEBRILE SYNDROME;DIALYSIS', 'HYPOTENSION WITH HEMODIALYSIS',\n        --   'HYPOTENSION.GLOGGED DIALYSIS',\n        --   'INFECTED DIALYSIS CATHETER'\n        -- )\n        -- metavision itemids\n\n        -- checkboxes\n        WHEN ce.itemid IN\n        (\n            226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n          , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n          , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n        ) THEN 1\n        -- numeric data\n        WHEN ce.itemid IN\n        (\n            226499 -- | Hemodialysis Output                               | Dialysis\n          , 224154 -- | Dialysate Rate                                    | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224149 -- | Access Pressure                  | Dialysis\n          , 224150 -- | Filter Pressure                  | Dialysis\n          , 224151 -- | Effluent Pressure                | Dialysis\n          , 224152 -- | Return Pressure                  | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 224404 -- | ART Lumen Volume                 | Dialysis\n          , 224406 -- | VEN Lumen Volume                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n\n        -- text fields\n        WHEN ce.itemid IN\n        (\n            224135 -- | Dialysis Access Site | Dialysis\n          , 224139 -- | Dialysis Site Appearance | Dialysis\n          , 224146 -- | System Integrity | Dialysis\n          , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive\n          , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive\n          , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225954 -- | Dialysis Access Type | Dialysis\n          , 225956 -- | Reason for CRRT Filter Change | Dialysis\n          , 225958 -- | Heparin Concentration (units/mL) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 225976 -- | Replacement Fluid | Dialysis\n          , 225977 -- | Dialysate Fluid | Dialysis\n          , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive\n          , 227290 -- | CRRT mode | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n          , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_present\n    , CASE\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end'\n        ) THEN 0\n        WHEN ce.itemid = 147 AND value = 'Yes' THEN 1 -- \"Dialysate Infusing\";56605\n        WHEN ce.itemid = 225965 -- Peritoneal Dialysis Catheter Status\n          AND value = 'In use' THEN 1\n        WHEN ce.itemid IN\n        (\n            146    -- Dialysate Flow ml/hr\n          , 226499 -- | Hemodialysis Output              | Dialysis\n          , 224154 -- | Dialysate Rate                   | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_active\n    , CASE\n        -- dialysis mode\n        WHEN ce.itemid in (152, 227290) THEN\n          CASE\n            WHEN value = 'CVVH' THEN 'CVVH'\n            WHEN value = 'CVVHD' THEN 'CVVHD'\n            WHEN value = 'CVVHDF' THEN 'CVVHDF'\n            WHEN value = 'SCUF' THEN 'SCUF'\n            WHEN value = 'Peritoneal' THEN 'Peritoneal'\n          END\n        -- itemids which imply a certain dialysis mode\n\n        -- peritoneal dialysis\n        WHEN ce.itemid IN \n        (\n            225810 -- | Dwell Time (Peritoneal Dialysis) | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n        )\n          THEN 'Peritoneal'\n        WHEN ce.itemid IN (226499)\n          THEN 'IHD'\n        WHEN ce.itemid = 582 THEN\n          CASE\n            WHEN value IN ('CAVH Start','CAVH D/C')\n              THEN 'CAVH'\n            WHEN value IN ('CVVHD Start','CVVHD D/C')\n              THEN 'CVVHD'\n            WHEN value IN ('Hemodialysis st', 'Hemodialysis end')\n              -- null is ambiguous\n              THEN NULL\n          ELSE NULL\n          END\n      ELSE NULL END as dialysis_type\n  from chartevents ce\n  WHERE ce.itemid in\n  (\n     152 -- \"Dialysis Type\";61449\n    ,146 -- \"Dialysate Flow ml/hr\";57445\n    ,147 -- \"Dialysate Infusing\";56605\n    ,148 -- \"Dialysis Access Site\";60335\n    ,149 -- \"Dialysis Access Type\";60030\n    ,150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n    ,151 -- \"Dialysis Site Appear\";37345\n    ,582 -- Procedures\n    -- below indicate existence of a dialysis line\n    ,229 -- INV Line#1 [Type]\n    ,235 -- INV Line#2 [Type]\n    ,241 -- INV Line#3 [Type]\n    ,247 -- INV Line#4 [Type]\n    ,253 -- INV Line#5 [Type]\n    ,259 -- INV Line#6 [Type]\n    ,265 -- INV Line#7 [Type]\n    ,271 -- INV Line#8 [Type]\n    \n    -- dialysis consults can't be 100% guaranteed to be active\n    -- ,466 -- Nursing Consultation\n    -- diagnosis has 6 or 7 dx related to dialysis, probably not worth including\n    -- as the chart time isn't going to match the start time of dialysis\n    -- , 917 -- Diagnosis/op\n    -- ,7949 -- \"Calcium for CVVH\" - only has 2 null values\n    \n    -- === MetaVision itemids === --\n  \n    -- Checkboxes\n    , 226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n    , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n    , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n\n    -- Numeric values\n    , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n    , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n    , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n    , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n    , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n    , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n    , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n    , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n    , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n    , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n    , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n    , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n    , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n    , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n    , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n    , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n    , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n    , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n    , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n    , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis | chartevents | Numeric\n    -- Text values\n    , 224135 -- | Dialysis Access Site | Dialysis | chartevents | Text\n    , 224139 -- | Dialysis Site Appearance | Dialysis | chartevents | Text\n    , 224146 -- | System Integrity | Dialysis | chartevents | Text\n    , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive | chartevents | Text\n    , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive | chartevents | Text\n    , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive | chartevents | Text\n    , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis | chartevents | Text\n    , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225954 -- | Dialysis Access Type | Dialysis | chartevents | Text\n    , 225956 -- | Reason for CRRT Filter Change | Dialysis | chartevents | Text\n    , 225958 -- | Heparin Concentration (units/mL) | Dialysis | chartevents | Text\n    , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis | chartevents | Text\n    , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis | chartevents | Text\n    , 225976 -- | Replacement Fluid | Dialysis | chartevents | Text\n    , 225977 -- | Dialysate Fluid | Dialysis | chartevents | Text\n    , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive | chartevents | Text\n    , 227290 -- | CRRT mode | Dialysis | chartevents | Text\n    , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive | chartevents | Text\n  )\n  AND ce.value IS NOT NULL\n  AND ce.icustay_id IS NOT NULL\n  -- exclude rows marked as error\n  and COALESCE(ce.error, 0) = 0\n)\n\n-- TODO:\n--   charttime + dialysis_present + dialysis_active\n--  for inputevents_cv, outputevents\n--  for procedures_mv, left join and set the dialysis_type\n, cv_ie as\n(\n  select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          44954 -- OR CVVHDF |  | inputevents_cv\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n            40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n          , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n          , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n          , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n          , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n          , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n        ) THEN 'Peritoneal'\n        WHEN itemid IN\n        (\n            45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n          , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n        ) THEN 'CVVH'\n        WHEN itemid IN\n        (\n            45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n          , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n          , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHD'\n        WHEN itemid IN\n        (\n            46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n          , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n          , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n          , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHDF'\n      ELSE NULL END AS dialysis_type\n  from inputevents_cv\n  where itemid in\n  (\n        40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n      , 40907 -- dialysate | Free Form Intake | inputevents_cv\n      , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n      , 41147 -- Dialysate instilled | Free Form Intake | inputevents_cv\n      , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n      , 41460 -- capd dialysate | Free Form Intake | inputevents_cv\n      , 41620 -- dialysate in | Free Form Intake | inputevents_cv\n      , 41711 -- CAPD dialysate dwell | Free Form Intake | inputevents_cv\n      , 41791 -- 2.5% dialysate in | Free Form Intake | inputevents_cv\n      , 41792 -- 1.5% dialysate | Free Form Intake | inputevents_cv\n      , 42562 -- pos. dialysate intak | Free Form Intake | inputevents_cv\n      , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n      , 44037 -- Dialysate Instilled | Free Form Intake | inputevents_cv\n      , 44188 -- rep.+dialysate | Free Form Intake | inputevents_cv\n      , 44526 -- dialysate 1.5% dex | Free Form Intake | inputevents_cv\n      , 44527 -- dialysate 2.5% | Free Form Intake | inputevents_cv\n      , 44584 -- Dialysate IN | Free Form Intake | inputevents_cv\n      , 44591 -- dialysate 4.25% | Free Form Intake | inputevents_cv\n      , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n      , 44927 -- CRRT HEPARIN | Free Form Intake | inputevents_cv\n      , 44954 -- OR CVVHDF |  | inputevents_cv\n      , 45157 -- ca+ gtt for cvvh | Free Form Intake | inputevents_cv\n      , 45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n      , 45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n      , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n      , 46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n      , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n      , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n      , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n      , 46250 -- EBL  CVVH |  | inputevents_cv\n      , 46262 -- dialysate 2.5% in | Free Form Intake | inputevents_cv\n      , 46292 -- CRRT Irrigation | Free Form Intake | inputevents_cv\n      , 46293 -- CRRT Citrate | Free Form Intake | inputevents_cv\n      , 46311 -- crrt irrigation | Free Form Intake | inputevents_cv\n      , 46389 -- CRRT FLUSH | Free Form Intake | inputevents_cv\n      , 46574 -- CRRT rescue line NS | Free Form Intake | inputevents_cv\n      , 46681 -- CRRT Rescue Flush | Free Form Intake | inputevents_cv\n      , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n      , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n      , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n  )\n  and amount > 0 -- also ensures it's not null\n)\n, oe as\n(\n select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          41897 -- CVVH OUTPUT FROM OR\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n          40789 -- PD dialysate out\n        , 40910 -- PERITONEAL DIALYSIS\n        , 41069 -- PD Dialysate Output\n        , 44843 -- peritoneal dialysis\n        , 46394 -- Peritoneal dialysis\n        ) THEN 'Peritoneal'\n      ELSE NULL END AS dialysis_type\n from outputevents\n where itemid in\n (\n       40386 -- hemodialysis\n     , 40425 -- dialysis output\n     , 40426 -- dialysis out\n     , 40507 -- Dialysis out\n     , 40613 -- DIALYSIS OUT\n     , 40624 -- dialysis\n     , 40690 -- DIALYSIS\n     , 40745 -- Dialysis\n     , 40789 -- PD dialysate out\n     , 40881 -- Hemodialysis\n     , 40910 -- PERITONEAL DIALYSIS\n     , 41016 -- hemodialysis out\n     , 41034 -- dialysis in\n     , 41069 -- PD Dialysate Output\n     , 41112 -- Dialysys out\n     , 41250 -- HEMODIALYSIS OUT\n     , 41374 -- Dialysis Out\n     , 41417 -- Hemodialysis Out\n     , 41500 -- hemodialysis output\n     , 41527 -- HEMODIALYSIS\n     , 41623 -- dialysate out\n     , 41635 -- Hemodialysis removal\n     , 41713 -- dialyslate out\n     , 41750 -- dialysis  out\n     , 41829 -- HEMODIALYSIS OUTPUT\n     , 41842 -- Dialysis Output.\n     , 41897 -- CVVH OUTPUT FROM OR\n     , 42289 -- dialysis off\n     , 42388 -- DIALYSIS OUTPUT\n     , 42464 -- hemodialysis ultrafe\n     , 42524 -- HemoDialysis\n     , 42536 -- Dialysis output\n     , 42868 -- hemodialysis off\n     , 42928 -- HEMODIALYSIS.\n     , 42972 -- HEMODIALYSIS OFF\n     , 43016 -- DIALYSIS TOTAL OUT\n     , 43052 -- DIALYSIS REMOVED\n     , 43098 -- hemodialysis crystal\n     , 43115 -- dialysis net\n     , 43687 -- crystalloid/dialysis\n     , 43941 -- dialysis/intake\n     , 44027 -- dialysis fluid off\n     , 44085 -- DIALYSIS OFF\n     , 44193 -- Dialysis.\n     , 44199 -- HEMODIALYSIS O/P\n     , 44216 -- Hemodialysis out\n     , 44286 -- Dialysis indwelling\n     , 44567 -- Hemodialysis.\n     , 44843 -- peritoneal dialysis\n     , 44845 -- Dialysis fluids\n     , 44857 -- dialysis- fluid off\n     , 44901 -- Dialysis Removed\n     , 44943 -- fluid removed dialys\n     , 45479 -- Dialysis In\n     , 45828 -- Hemo dialysis out\n     , 46230 -- Dialysis 1.5% IN\n     , 46232 -- dialysis flush\n     , 46394 -- Peritoneal dialysis\n     , 46464 -- Hemodialysis OUT\n     , 46712 -- CALCIUM-DIALYSIS\n     , 46713 -- KCL-10 MEQ-DIALYSIS\n     , 46715 -- Citrate - dialysis\n     , 46741 -- dialysis removed\n )\n and value > 0 -- also ensures it's not null\n)\n, mv_ranges as\n(\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , 1 AS dialysis_active\n    , 'CRRT' as dialysis_type\n  from inputevents_mv\n  where itemid in\n  (\n      227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n    , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n  )\n  and amount > 0 -- also ensures it's not null\n  UNION DISTINCT\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , CASE WHEN itemid NOT IN (224270, 225436) THEN 1 ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid = 225441 THEN 'IHD'\n        WHEN itemid = 225802 THEN 'CRRT'  -- CVVH (Continuous venovenous hemofiltration)\n        WHEN itemid = 225803 THEN 'CVVHD' -- CVVHD (Continuous venovenous hemodialysis)\n        WHEN itemid = 225805 THEN 'Peritoneal'\n        WHEN itemid = 225809 THEN 'CVVHDF' -- CVVHDF (Continuous venovenous hemodiafiltration)\n        WHEN itemid = 225955 THEN 'SCUF' -- SCUF (Slow continuous ultra filtration)\n      ELSE NULL END as dialysis_type\n  from procedureevents_mv\n  where itemid in\n  (\n      225441 -- | Hemodialysis          | 4-Procedures              | procedureevents_mv | Process\n    , 225802 -- | Dialysis - CRRT       | Dialysis                  | procedureevents_mv | Process\n    , 225803 -- | Dialysis - CVVHD      | Dialysis                  | procedureevents_mv | Process\n    , 225805 -- | Peritoneal Dialysis   | Dialysis                  | procedureevents_mv | Process\n    , 224270 -- | Dialysis Catheter     | Access Lines - Invasive   | procedureevents_mv | Process\n    , 225809 -- | Dialysis - CVVHDF     | Dialysis                  | procedureevents_mv | Process\n    , 225955 -- | Dialysis - SCUF       | Dialysis                  | procedureevents_mv | Process\n    , 225436 -- | CRRT Filter Change    | Dialysis                  | procedureevents_mv | Process\n  )\n  AND value IS NOT NULL\n)\n-- union together the charttime tables; append times from mv_ranges to guarantee they exist\n, stg0 AS\n(\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM ce\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM cv_ie\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM oe\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, starttime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n  UNION DISTINCT\n  SELECT\n    icustay_id, endtime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n)\nSELECT\n    stg0.icustay_id\n    , charttime\n    , COALESCE(mv.dialysis_present, stg0.dialysis_present) AS dialysis_present\n    , COALESCE(mv.dialysis_active, stg0.dialysis_active) AS dialysis_active\n    , COALESCE(mv.dialysis_type, stg0.dialysis_type) AS dialysis_type\nFROM stg0\nLEFT JOIN mv_ranges mv\n  ON stg0.icustay_id = mv.icustay_id\n  AND stg0.charttime >= mv.starttime\n  AND stg0.charttime <= mv.endtime\nWHERE stg0.icustay_id IS NOT NULL\nORDER BY 1,2\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:49.129495Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.13, "status": "SELECT 301513"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 301513 in 3.13 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.264246Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.268320Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\nalter table \"postgres\".\"public\".\"pivoted_rrt\" rename to \"pivoted_rrt__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\nalter table \"postgres\".\"public\".\"pivoted_rrt\" rename to \"pivoted_rrt__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.268685Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.269508Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.273014Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\nalter table \"postgres\".\"public\".\"pivoted_rrt__dbt_tmp\" rename to \"pivoted_rrt\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\nalter table \"postgres\".\"public\".\"pivoted_rrt__dbt_tmp\" rename to \"pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.273219Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.273971Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.276822Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.277048Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.277171Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.280851Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_rrt", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_rrt\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.283033Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_rrt", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_rrt__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_rrt\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_rrt__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.283271Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.285327Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.288340Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_rrt: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.288686Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_rrt", "execution_time": 3, "index": 59, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": "2022-07-18T00:10:49.109339", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "status": "SELECT 301513", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "59 of 107 OK created table model public.pivoted_rrt ............................ [\u001b[32mSELECT 301513\u001b[0m in 3.18s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.289886Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:52.290481", "node_name": "pivoted_rrt", "node_path": "pivot/pivoted_rrt.sql", "node_started_at": "2022-07-18T00:10:49.109339", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_rrt"}, "run_result": {"adapter_response": {"_message": "SELECT 301513", "code": "SELECT", "rows_affected": 301513}, "agate_table": null, "execution_time": 3.1787326335906982, "failures": null, "message": "SELECT 301513", "node": {"alias": "pivoted_rrt", "build_path": "target/run/mimic/models/pivot/pivoted_rrt.sql", "checksum": {"checksum": "df138c2a20f97319be667c06a9d40b5b4a16d04b7e56973d9f48faed2b101392", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_rrt.sql", "compiled_sql": "-- Creates a table with icustay_id / time / dialysis type (if present)\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n          -- when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          -- when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          -- when ce.itemid = 466 and value = 'Dialysis RN' then 1\n          -- when ce.itemid = 927 and value = 'Dialysis Solutions' then 1\n          -- when ce.itemid = 6250 and value = 'dialys' then 1\n          -- when ce.\n          -- when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n    , CASE\n        WHEN ce.itemid IN\n        (\n          146 -- \"Dialysate Flow ml/hr\"\n          , 147 -- \"Dialysate Infusing\";56605\n          , 148 -- \"Dialysis Access Site\";60335\n          , 149 -- \"Dialysis Access Type\";60030\n          , 150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n          , 151 -- \"Dialysis Site Appear\";37345\n          , 152 -- \"Dialysis Type\";61449\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid IN (229, 235, 241, 247, 253, 259, 265, 271) AND value = 'Dialysis Line' \n          THEN 1\n        -- WHEN ce.itemid = 917 AND value IN\n        -- (\n        --   '+ INITIATE DIALYSIS', 'BLEEDING FROM DIALYSIS CATHETER',\n        --   -- 'FAILED DIALYSIS CATH.',\n        --   'FEBRILE SYNDROME;DIALYSIS', 'HYPOTENSION WITH HEMODIALYSIS',\n        --   'HYPOTENSION.GLOGGED DIALYSIS',\n        --   'INFECTED DIALYSIS CATHETER'\n        -- )\n        -- metavision itemids\n\n        -- checkboxes\n        WHEN ce.itemid IN\n        (\n            226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n          , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n          , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n        ) THEN 1\n        -- numeric data\n        WHEN ce.itemid IN\n        (\n            226499 -- | Hemodialysis Output                               | Dialysis\n          , 224154 -- | Dialysate Rate                                    | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224149 -- | Access Pressure                  | Dialysis\n          , 224150 -- | Filter Pressure                  | Dialysis\n          , 224151 -- | Effluent Pressure                | Dialysis\n          , 224152 -- | Return Pressure                  | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 224404 -- | ART Lumen Volume                 | Dialysis\n          , 224406 -- | VEN Lumen Volume                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n\n        -- text fields\n        WHEN ce.itemid IN\n        (\n            224135 -- | Dialysis Access Site | Dialysis\n          , 224139 -- | Dialysis Site Appearance | Dialysis\n          , 224146 -- | System Integrity | Dialysis\n          , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive\n          , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive\n          , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225954 -- | Dialysis Access Type | Dialysis\n          , 225956 -- | Reason for CRRT Filter Change | Dialysis\n          , 225958 -- | Heparin Concentration (units/mL) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 225976 -- | Replacement Fluid | Dialysis\n          , 225977 -- | Dialysate Fluid | Dialysis\n          , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive\n          , 227290 -- | CRRT mode | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n          , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_present\n    , CASE\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end'\n        ) THEN 0\n        WHEN ce.itemid = 147 AND value = 'Yes' THEN 1 -- \"Dialysate Infusing\";56605\n        WHEN ce.itemid = 225965 -- Peritoneal Dialysis Catheter Status\n          AND value = 'In use' THEN 1\n        WHEN ce.itemid IN\n        (\n            146    -- Dialysate Flow ml/hr\n          , 226499 -- | Hemodialysis Output              | Dialysis\n          , 224154 -- | Dialysate Rate                   | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_active\n    , CASE\n        -- dialysis mode\n        WHEN ce.itemid in (152, 227290) THEN\n          CASE\n            WHEN value = 'CVVH' THEN 'CVVH'\n            WHEN value = 'CVVHD' THEN 'CVVHD'\n            WHEN value = 'CVVHDF' THEN 'CVVHDF'\n            WHEN value = 'SCUF' THEN 'SCUF'\n            WHEN value = 'Peritoneal' THEN 'Peritoneal'\n          END\n        -- itemids which imply a certain dialysis mode\n\n        -- peritoneal dialysis\n        WHEN ce.itemid IN \n        (\n            225810 -- | Dwell Time (Peritoneal Dialysis) | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n        )\n          THEN 'Peritoneal'\n        WHEN ce.itemid IN (226499)\n          THEN 'IHD'\n        WHEN ce.itemid = 582 THEN\n          CASE\n            WHEN value IN ('CAVH Start','CAVH D/C')\n              THEN 'CAVH'\n            WHEN value IN ('CVVHD Start','CVVHD D/C')\n              THEN 'CVVHD'\n            WHEN value IN ('Hemodialysis st', 'Hemodialysis end')\n              -- null is ambiguous\n              THEN NULL\n          ELSE NULL\n          END\n      ELSE NULL END as dialysis_type\n  from chartevents ce\n  WHERE ce.itemid in\n  (\n     152 -- \"Dialysis Type\";61449\n    ,146 -- \"Dialysate Flow ml/hr\";57445\n    ,147 -- \"Dialysate Infusing\";56605\n    ,148 -- \"Dialysis Access Site\";60335\n    ,149 -- \"Dialysis Access Type\";60030\n    ,150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n    ,151 -- \"Dialysis Site Appear\";37345\n    ,582 -- Procedures\n    -- below indicate existence of a dialysis line\n    ,229 -- INV Line#1 [Type]\n    ,235 -- INV Line#2 [Type]\n    ,241 -- INV Line#3 [Type]\n    ,247 -- INV Line#4 [Type]\n    ,253 -- INV Line#5 [Type]\n    ,259 -- INV Line#6 [Type]\n    ,265 -- INV Line#7 [Type]\n    ,271 -- INV Line#8 [Type]\n    \n    -- dialysis consults can't be 100% guaranteed to be active\n    -- ,466 -- Nursing Consultation\n    -- diagnosis has 6 or 7 dx related to dialysis, probably not worth including\n    -- as the chart time isn't going to match the start time of dialysis\n    -- , 917 -- Diagnosis/op\n    -- ,7949 -- \"Calcium for CVVH\" - only has 2 null values\n    \n    -- === MetaVision itemids === --\n  \n    -- Checkboxes\n    , 226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n    , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n    , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n\n    -- Numeric values\n    , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n    , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n    , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n    , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n    , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n    , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n    , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n    , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n    , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n    , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n    , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n    , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n    , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n    , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n    , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n    , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n    , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n    , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n    , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n    , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis | chartevents | Numeric\n    -- Text values\n    , 224135 -- | Dialysis Access Site | Dialysis | chartevents | Text\n    , 224139 -- | Dialysis Site Appearance | Dialysis | chartevents | Text\n    , 224146 -- | System Integrity | Dialysis | chartevents | Text\n    , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive | chartevents | Text\n    , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive | chartevents | Text\n    , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive | chartevents | Text\n    , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis | chartevents | Text\n    , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225954 -- | Dialysis Access Type | Dialysis | chartevents | Text\n    , 225956 -- | Reason for CRRT Filter Change | Dialysis | chartevents | Text\n    , 225958 -- | Heparin Concentration (units/mL) | Dialysis | chartevents | Text\n    , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis | chartevents | Text\n    , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis | chartevents | Text\n    , 225976 -- | Replacement Fluid | Dialysis | chartevents | Text\n    , 225977 -- | Dialysate Fluid | Dialysis | chartevents | Text\n    , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive | chartevents | Text\n    , 227290 -- | CRRT mode | Dialysis | chartevents | Text\n    , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive | chartevents | Text\n  )\n  AND ce.value IS NOT NULL\n  AND ce.icustay_id IS NOT NULL\n  -- exclude rows marked as error\n  and COALESCE(ce.error, 0) = 0\n)\n\n-- TODO:\n--   charttime + dialysis_present + dialysis_active\n--  for inputevents_cv, outputevents\n--  for procedures_mv, left join and set the dialysis_type\n, cv_ie as\n(\n  select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          44954 -- OR CVVHDF |  | inputevents_cv\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n            40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n          , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n          , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n          , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n          , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n          , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n        ) THEN 'Peritoneal'\n        WHEN itemid IN\n        (\n            45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n          , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n        ) THEN 'CVVH'\n        WHEN itemid IN\n        (\n            45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n          , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n          , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHD'\n        WHEN itemid IN\n        (\n            46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n          , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n          , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n          , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHDF'\n      ELSE NULL END AS dialysis_type\n  from inputevents_cv\n  where itemid in\n  (\n        40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n      , 40907 -- dialysate | Free Form Intake | inputevents_cv\n      , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n      , 41147 -- Dialysate instilled | Free Form Intake | inputevents_cv\n      , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n      , 41460 -- capd dialysate | Free Form Intake | inputevents_cv\n      , 41620 -- dialysate in | Free Form Intake | inputevents_cv\n      , 41711 -- CAPD dialysate dwell | Free Form Intake | inputevents_cv\n      , 41791 -- 2.5% dialysate in | Free Form Intake | inputevents_cv\n      , 41792 -- 1.5% dialysate | Free Form Intake | inputevents_cv\n      , 42562 -- pos. dialysate intak | Free Form Intake | inputevents_cv\n      , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n      , 44037 -- Dialysate Instilled | Free Form Intake | inputevents_cv\n      , 44188 -- rep.+dialysate | Free Form Intake | inputevents_cv\n      , 44526 -- dialysate 1.5% dex | Free Form Intake | inputevents_cv\n      , 44527 -- dialysate 2.5% | Free Form Intake | inputevents_cv\n      , 44584 -- Dialysate IN | Free Form Intake | inputevents_cv\n      , 44591 -- dialysate 4.25% | Free Form Intake | inputevents_cv\n      , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n      , 44927 -- CRRT HEPARIN | Free Form Intake | inputevents_cv\n      , 44954 -- OR CVVHDF |  | inputevents_cv\n      , 45157 -- ca+ gtt for cvvh | Free Form Intake | inputevents_cv\n      , 45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n      , 45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n      , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n      , 46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n      , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n      , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n      , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n      , 46250 -- EBL  CVVH |  | inputevents_cv\n      , 46262 -- dialysate 2.5% in | Free Form Intake | inputevents_cv\n      , 46292 -- CRRT Irrigation | Free Form Intake | inputevents_cv\n      , 46293 -- CRRT Citrate | Free Form Intake | inputevents_cv\n      , 46311 -- crrt irrigation | Free Form Intake | inputevents_cv\n      , 46389 -- CRRT FLUSH | Free Form Intake | inputevents_cv\n      , 46574 -- CRRT rescue line NS | Free Form Intake | inputevents_cv\n      , 46681 -- CRRT Rescue Flush | Free Form Intake | inputevents_cv\n      , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n      , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n      , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n  )\n  and amount > 0 -- also ensures it's not null\n)\n, oe as\n(\n select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          41897 -- CVVH OUTPUT FROM OR\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n          40789 -- PD dialysate out\n        , 40910 -- PERITONEAL DIALYSIS\n        , 41069 -- PD Dialysate Output\n        , 44843 -- peritoneal dialysis\n        , 46394 -- Peritoneal dialysis\n        ) THEN 'Peritoneal'\n      ELSE NULL END AS dialysis_type\n from outputevents\n where itemid in\n (\n       40386 -- hemodialysis\n     , 40425 -- dialysis output\n     , 40426 -- dialysis out\n     , 40507 -- Dialysis out\n     , 40613 -- DIALYSIS OUT\n     , 40624 -- dialysis\n     , 40690 -- DIALYSIS\n     , 40745 -- Dialysis\n     , 40789 -- PD dialysate out\n     , 40881 -- Hemodialysis\n     , 40910 -- PERITONEAL DIALYSIS\n     , 41016 -- hemodialysis out\n     , 41034 -- dialysis in\n     , 41069 -- PD Dialysate Output\n     , 41112 -- Dialysys out\n     , 41250 -- HEMODIALYSIS OUT\n     , 41374 -- Dialysis Out\n     , 41417 -- Hemodialysis Out\n     , 41500 -- hemodialysis output\n     , 41527 -- HEMODIALYSIS\n     , 41623 -- dialysate out\n     , 41635 -- Hemodialysis removal\n     , 41713 -- dialyslate out\n     , 41750 -- dialysis  out\n     , 41829 -- HEMODIALYSIS OUTPUT\n     , 41842 -- Dialysis Output.\n     , 41897 -- CVVH OUTPUT FROM OR\n     , 42289 -- dialysis off\n     , 42388 -- DIALYSIS OUTPUT\n     , 42464 -- hemodialysis ultrafe\n     , 42524 -- HemoDialysis\n     , 42536 -- Dialysis output\n     , 42868 -- hemodialysis off\n     , 42928 -- HEMODIALYSIS.\n     , 42972 -- HEMODIALYSIS OFF\n     , 43016 -- DIALYSIS TOTAL OUT\n     , 43052 -- DIALYSIS REMOVED\n     , 43098 -- hemodialysis crystal\n     , 43115 -- dialysis net\n     , 43687 -- crystalloid/dialysis\n     , 43941 -- dialysis/intake\n     , 44027 -- dialysis fluid off\n     , 44085 -- DIALYSIS OFF\n     , 44193 -- Dialysis.\n     , 44199 -- HEMODIALYSIS O/P\n     , 44216 -- Hemodialysis out\n     , 44286 -- Dialysis indwelling\n     , 44567 -- Hemodialysis.\n     , 44843 -- peritoneal dialysis\n     , 44845 -- Dialysis fluids\n     , 44857 -- dialysis- fluid off\n     , 44901 -- Dialysis Removed\n     , 44943 -- fluid removed dialys\n     , 45479 -- Dialysis In\n     , 45828 -- Hemo dialysis out\n     , 46230 -- Dialysis 1.5% IN\n     , 46232 -- dialysis flush\n     , 46394 -- Peritoneal dialysis\n     , 46464 -- Hemodialysis OUT\n     , 46712 -- CALCIUM-DIALYSIS\n     , 46713 -- KCL-10 MEQ-DIALYSIS\n     , 46715 -- Citrate - dialysis\n     , 46741 -- dialysis removed\n )\n and value > 0 -- also ensures it's not null\n)\n, mv_ranges as\n(\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , 1 AS dialysis_active\n    , 'CRRT' as dialysis_type\n  from inputevents_mv\n  where itemid in\n  (\n      227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n    , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n  )\n  and amount > 0 -- also ensures it's not null\n  UNION DISTINCT\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , CASE WHEN itemid NOT IN (224270, 225436) THEN 1 ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid = 225441 THEN 'IHD'\n        WHEN itemid = 225802 THEN 'CRRT'  -- CVVH (Continuous venovenous hemofiltration)\n        WHEN itemid = 225803 THEN 'CVVHD' -- CVVHD (Continuous venovenous hemodialysis)\n        WHEN itemid = 225805 THEN 'Peritoneal'\n        WHEN itemid = 225809 THEN 'CVVHDF' -- CVVHDF (Continuous venovenous hemodiafiltration)\n        WHEN itemid = 225955 THEN 'SCUF' -- SCUF (Slow continuous ultra filtration)\n      ELSE NULL END as dialysis_type\n  from procedureevents_mv\n  where itemid in\n  (\n      225441 -- | Hemodialysis          | 4-Procedures              | procedureevents_mv | Process\n    , 225802 -- | Dialysis - CRRT       | Dialysis                  | procedureevents_mv | Process\n    , 225803 -- | Dialysis - CVVHD      | Dialysis                  | procedureevents_mv | Process\n    , 225805 -- | Peritoneal Dialysis   | Dialysis                  | procedureevents_mv | Process\n    , 224270 -- | Dialysis Catheter     | Access Lines - Invasive   | procedureevents_mv | Process\n    , 225809 -- | Dialysis - CVVHDF     | Dialysis                  | procedureevents_mv | Process\n    , 225955 -- | Dialysis - SCUF       | Dialysis                  | procedureevents_mv | Process\n    , 225436 -- | CRRT Filter Change    | Dialysis                  | procedureevents_mv | Process\n  )\n  AND value IS NOT NULL\n)\n-- union together the charttime tables; append times from mv_ranges to guarantee they exist\n, stg0 AS\n(\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM ce\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM cv_ie\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM oe\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, starttime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n  UNION DISTINCT\n  SELECT\n    icustay_id, endtime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n)\nSELECT\n    stg0.icustay_id\n    , charttime\n    , COALESCE(mv.dialysis_present, stg0.dialysis_present) AS dialysis_present\n    , COALESCE(mv.dialysis_active, stg0.dialysis_active) AS dialysis_active\n    , COALESCE(mv.dialysis_type, stg0.dialysis_type) AS dialysis_type\nFROM stg0\nLEFT JOIN mv_ranges mv\n  ON stg0.icustay_id = mv.icustay_id\n  AND stg0.charttime >= mv.starttime\n  AND stg0.charttime <= mv.endtime\nWHERE stg0.icustay_id IS NOT NULL\nORDER BY 1,2", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5835426, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_rrt"], "meta": {}, "name": "pivoted_rrt", "original_file_path": "models/pivot/pivoted_rrt.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_rrt.sql", "raw_sql": "-- Creates a table with icustay_id / time / dialysis type (if present)\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n          -- when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          -- when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          -- when ce.itemid = 466 and value = 'Dialysis RN' then 1\n          -- when ce.itemid = 927 and value = 'Dialysis Solutions' then 1\n          -- when ce.itemid = 6250 and value = 'dialys' then 1\n          -- when ce.\n          -- when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n    , CASE\n        WHEN ce.itemid IN\n        (\n          146 -- \"Dialysate Flow ml/hr\"\n          , 147 -- \"Dialysate Infusing\";56605\n          , 148 -- \"Dialysis Access Site\";60335\n          , 149 -- \"Dialysis Access Type\";60030\n          , 150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n          , 151 -- \"Dialysis Site Appear\";37345\n          , 152 -- \"Dialysis Type\";61449\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid IN (229, 235, 241, 247, 253, 259, 265, 271) AND value = 'Dialysis Line' \n          THEN 1\n        -- WHEN ce.itemid = 917 AND value IN\n        -- (\n        --   '+ INITIATE DIALYSIS', 'BLEEDING FROM DIALYSIS CATHETER',\n        --   -- 'FAILED DIALYSIS CATH.',\n        --   'FEBRILE SYNDROME;DIALYSIS', 'HYPOTENSION WITH HEMODIALYSIS',\n        --   'HYPOTENSION.GLOGGED DIALYSIS',\n        --   'INFECTED DIALYSIS CATHETER'\n        -- )\n        -- metavision itemids\n\n        -- checkboxes\n        WHEN ce.itemid IN\n        (\n            226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n          , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n          , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n        ) THEN 1\n        -- numeric data\n        WHEN ce.itemid IN\n        (\n            226499 -- | Hemodialysis Output                               | Dialysis\n          , 224154 -- | Dialysate Rate                                    | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224149 -- | Access Pressure                  | Dialysis\n          , 224150 -- | Filter Pressure                  | Dialysis\n          , 224151 -- | Effluent Pressure                | Dialysis\n          , 224152 -- | Return Pressure                  | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 224404 -- | ART Lumen Volume                 | Dialysis\n          , 224406 -- | VEN Lumen Volume                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n\n        -- text fields\n        WHEN ce.itemid IN\n        (\n            224135 -- | Dialysis Access Site | Dialysis\n          , 224139 -- | Dialysis Site Appearance | Dialysis\n          , 224146 -- | System Integrity | Dialysis\n          , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive\n          , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive\n          , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225954 -- | Dialysis Access Type | Dialysis\n          , 225956 -- | Reason for CRRT Filter Change | Dialysis\n          , 225958 -- | Heparin Concentration (units/mL) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 225976 -- | Replacement Fluid | Dialysis\n          , 225977 -- | Dialysate Fluid | Dialysis\n          , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive\n          , 227290 -- | CRRT mode | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n          , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_present\n    , CASE\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH Start', 'CVVHD Start', 'Hemodialysis st',\n          'Peritoneal Dial'\n        ) THEN 1\n        WHEN ce.itemid = 582 AND value IN \n        (\n          'CAVH D/C', 'CVVHD D/C', 'Hemodialysis end'\n        ) THEN 0\n        WHEN ce.itemid = 147 AND value = 'Yes' THEN 1 -- \"Dialysate Infusing\";56605\n        WHEN ce.itemid = 225965 -- Peritoneal Dialysis Catheter Status\n          AND value = 'In use' THEN 1\n        WHEN ce.itemid IN\n        (\n            146    -- Dialysate Flow ml/hr\n          , 226499 -- | Hemodialysis Output              | Dialysis\n          , 224154 -- | Dialysate Rate                   | Dialysis\n          , 225183 -- | Current Goal                     | Dialysis\n          , 227438 -- | Volume not removed               | Dialysis\n          , 224191 -- | Hourly Patient Fluid Removal     | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 228004 -- | Citrate (ACD-A)                  | Dialysis\n          , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis\n          , 228006 -- | Post Filter Replacement Rate     | Dialysis\n          , 224144 -- | Blood Flow (ml/min)              | Dialysis\n          , 224145 -- | Heparin Dose (per hour)          | Dialysis\n          , 224153 -- | Replacement Rate                 | Dialysis\n          , 226457 -- | Ultrafiltrate Output             | Dialysis\n        ) THEN 1\n      ELSE 0 END\n      AS dialysis_active\n    , CASE\n        -- dialysis mode\n        WHEN ce.itemid in (152, 227290) THEN\n          CASE\n            WHEN value = 'CVVH' THEN 'CVVH'\n            WHEN value = 'CVVHD' THEN 'CVVHD'\n            WHEN value = 'CVVHDF' THEN 'CVVHDF'\n            WHEN value = 'SCUF' THEN 'SCUF'\n            WHEN value = 'Peritoneal' THEN 'Peritoneal'\n          END\n        -- itemids which imply a certain dialysis mode\n\n        -- peritoneal dialysis\n        WHEN ce.itemid IN \n        (\n            225810 -- | Dwell Time (Peritoneal Dialysis) | Dialysis\n          , 225806 -- | Volume In (PD)                   | Dialysis\n          , 225807 -- | Volume Out (PD)                  | Dialysis\n          , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis\n          , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis\n          , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis\n          , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis\n          , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis\n          , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis\n          , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis\n          , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis\n          , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis\n          , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis\n          , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis\n        )\n          THEN 'Peritoneal'\n        WHEN ce.itemid IN (226499)\n          THEN 'IHD'\n        WHEN ce.itemid = 582 THEN\n          CASE\n            WHEN value IN ('CAVH Start','CAVH D/C')\n              THEN 'CAVH'\n            WHEN value IN ('CVVHD Start','CVVHD D/C')\n              THEN 'CVVHD'\n            WHEN value IN ('Hemodialysis st', 'Hemodialysis end')\n              -- null is ambiguous\n              THEN NULL\n          ELSE NULL\n          END\n      ELSE NULL END as dialysis_type\n  from chartevents ce\n  WHERE ce.itemid in\n  (\n     152 -- \"Dialysis Type\";61449\n    ,146 -- \"Dialysate Flow ml/hr\";57445\n    ,147 -- \"Dialysate Infusing\";56605\n    ,148 -- \"Dialysis Access Site\";60335\n    ,149 -- \"Dialysis Access Type\";60030\n    ,150 -- \"Dialysis Machine\";27472 (baxter or gambro)\n    ,151 -- \"Dialysis Site Appear\";37345\n    ,582 -- Procedures\n    -- below indicate existence of a dialysis line\n    ,229 -- INV Line#1 [Type]\n    ,235 -- INV Line#2 [Type]\n    ,241 -- INV Line#3 [Type]\n    ,247 -- INV Line#4 [Type]\n    ,253 -- INV Line#5 [Type]\n    ,259 -- INV Line#6 [Type]\n    ,265 -- INV Line#7 [Type]\n    ,271 -- INV Line#8 [Type]\n    \n    -- dialysis consults can't be 100% guaranteed to be active\n    -- ,466 -- Nursing Consultation\n    -- diagnosis has 6 or 7 dx related to dialysis, probably not worth including\n    -- as the chart time isn't going to match the start time of dialysis\n    -- , 917 -- Diagnosis/op\n    -- ,7949 -- \"Calcium for CVVH\" - only has 2 null values\n    \n    -- === MetaVision itemids === --\n  \n    -- Checkboxes\n    , 226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n    , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n    , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n\n    -- Numeric values\n    , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n    , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n    , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n    , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n    , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n    , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n    , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n    , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n    , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n    , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n    , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n    , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n    , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n    , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n    , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n    , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n    , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n    , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n    , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n    , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n    , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    , 225959 -- | Medication Added Amount  #1 (Peritoneal Dialysis) | Dialysis | chartevents | Numeric\n    -- Text values\n    , 224135 -- | Dialysis Access Site | Dialysis | chartevents | Text\n    , 224139 -- | Dialysis Site Appearance | Dialysis | chartevents | Text\n    , 224146 -- | System Integrity | Dialysis | chartevents | Text\n    , 225323 -- | Dialysis Catheter Site Appear | Access Lines - Invasive | chartevents | Text\n    , 225740 -- | Dialysis Catheter Discontinued | Access Lines - Invasive | chartevents | Text\n    , 225776 -- | Dialysis Catheter Dressing Type | Access Lines - Invasive | chartevents | Text\n    , 225951 -- | Peritoneal Dialysis Fluid Appearance | Dialysis | chartevents | Text\n    , 225952 -- | Medication Added #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225953 -- | Solution (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225954 -- | Dialysis Access Type | Dialysis | chartevents | Text\n    , 225956 -- | Reason for CRRT Filter Change | Dialysis | chartevents | Text\n    , 225958 -- | Heparin Concentration (units/mL) | Dialysis | chartevents | Text\n    , 225961 -- | Medication Added Units #1 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 225963 -- | Peritoneal Dialysis Catheter Type | Dialysis | chartevents | Text\n    , 225965 -- | Peritoneal Dialysis Catheter Status | Dialysis | chartevents | Text\n    , 225976 -- | Replacement Fluid | Dialysis | chartevents | Text\n    , 225977 -- | Dialysate Fluid | Dialysis | chartevents | Text\n    , 227124 -- | Dialysis Catheter Type | Access Lines - Invasive | chartevents | Text\n    , 227290 -- | CRRT mode | Dialysis | chartevents | Text\n    , 227638 -- | Medication Added #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227640 -- | Medication Added Units #2 (Peritoneal Dialysis) | Dialysis | chartevents | Text\n    , 227753 -- | Dialysis Catheter Placement Confirmed by X-ray | Access Lines - Invasive | chartevents | Text\n  )\n  AND ce.value IS NOT NULL\n  AND ce.icustay_id IS NOT NULL\n  -- exclude rows marked as error\n  and COALESCE(ce.error, 0) = 0\n)\n\n-- TODO:\n--   charttime + dialysis_present + dialysis_active\n--  for inputevents_cv, outputevents\n--  for procedures_mv, left join and set the dialysis_type\n, cv_ie as\n(\n  select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          44954 -- OR CVVHDF |  | inputevents_cv\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n            40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n          , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n          , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n          , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n          , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n          , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n        ) THEN 'Peritoneal'\n        WHEN itemid IN\n        (\n            45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n          , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n        ) THEN 'CVVH'\n        WHEN itemid IN\n        (\n            45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n          , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n          , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHD'\n        WHEN itemid IN\n        (\n            46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n          , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n          , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n          , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n        ) THEN 'CVVHDF'\n      ELSE NULL END AS dialysis_type\n  from inputevents_cv\n  where itemid in\n  (\n        40788 -- PD dialysate in | Free Form Intake | inputevents_cv\n      , 40907 -- dialysate | Free Form Intake | inputevents_cv\n      , 41063 -- PD Dialysate Intake | Free Form Intake | inputevents_cv\n      , 41147 -- Dialysate instilled | Free Form Intake | inputevents_cv\n      , 41307 -- Peritoneal Dialysate | Free Form Intake | inputevents_cv\n      , 41460 -- capd dialysate | Free Form Intake | inputevents_cv\n      , 41620 -- dialysate in | Free Form Intake | inputevents_cv\n      , 41711 -- CAPD dialysate dwell | Free Form Intake | inputevents_cv\n      , 41791 -- 2.5% dialysate in | Free Form Intake | inputevents_cv\n      , 41792 -- 1.5% dialysate | Free Form Intake | inputevents_cv\n      , 42562 -- pos. dialysate intak | Free Form Intake | inputevents_cv\n      , 43829 -- PERITONEAL DIALYSATE | Free Form Intake | inputevents_cv\n      , 44037 -- Dialysate Instilled | Free Form Intake | inputevents_cv\n      , 44188 -- rep.+dialysate | Free Form Intake | inputevents_cv\n      , 44526 -- dialysate 1.5% dex | Free Form Intake | inputevents_cv\n      , 44527 -- dialysate 2.5% | Free Form Intake | inputevents_cv\n      , 44584 -- Dialysate IN | Free Form Intake | inputevents_cv\n      , 44591 -- dialysate 4.25% | Free Form Intake | inputevents_cv\n      , 44698 -- peritoneal dialysate | Free Form Intake | inputevents_cv\n      , 44927 -- CRRT HEPARIN | Free Form Intake | inputevents_cv\n      , 44954 -- OR CVVHDF |  | inputevents_cv\n      , 45157 -- ca+ gtt for cvvh | Free Form Intake | inputevents_cv\n      , 45268 -- CALCIUM FOR CVVHD | Free Form Intake | inputevents_cv\n      , 45352 -- CA GLUC for CVVH | Free Form Intake | inputevents_cv\n      , 45353 -- KCL for CVVH | Free Form Intake | inputevents_cv\n      , 46012 -- CA GLUC CVVHDF | Free Form Intake | inputevents_cv\n      , 46013 -- KCL CVVHDF | Free Form Intake | inputevents_cv\n      , 46172 -- CVVHDF CA GLUC | Free Form Intake | inputevents_cv\n      , 46173 -- CVVHDF KCL | Free Form Intake | inputevents_cv\n      , 46250 -- EBL  CVVH |  | inputevents_cv\n      , 46262 -- dialysate 2.5% in | Free Form Intake | inputevents_cv\n      , 46292 -- CRRT Irrigation | Free Form Intake | inputevents_cv\n      , 46293 -- CRRT Citrate | Free Form Intake | inputevents_cv\n      , 46311 -- crrt irrigation | Free Form Intake | inputevents_cv\n      , 46389 -- CRRT FLUSH | Free Form Intake | inputevents_cv\n      , 46574 -- CRRT rescue line NS | Free Form Intake | inputevents_cv\n      , 46681 -- CRRT Rescue Flush | Free Form Intake | inputevents_cv\n      , 46720 -- PD Dialysate | Free Form Intake | inputevents_cv\n      , 46769 -- cvvdh rescue line | Free Form Intake | inputevents_cv\n      , 46773 -- CVVHD NS line flush | Free Form Intake | inputevents_cv\n  )\n  and amount > 0 -- also ensures it's not null\n)\n, oe as\n(\n select icustay_id\n    , charttime\n    , 1 AS dialysis_present\n    , CASE\n        WHEN itemid NOT IN\n        (\n          41897 -- CVVH OUTPUT FROM OR\n        ) THEN 1\n      ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid IN\n        (\n          40789 -- PD dialysate out\n        , 40910 -- PERITONEAL DIALYSIS\n        , 41069 -- PD Dialysate Output\n        , 44843 -- peritoneal dialysis\n        , 46394 -- Peritoneal dialysis\n        ) THEN 'Peritoneal'\n      ELSE NULL END AS dialysis_type\n from outputevents\n where itemid in\n (\n       40386 -- hemodialysis\n     , 40425 -- dialysis output\n     , 40426 -- dialysis out\n     , 40507 -- Dialysis out\n     , 40613 -- DIALYSIS OUT\n     , 40624 -- dialysis\n     , 40690 -- DIALYSIS\n     , 40745 -- Dialysis\n     , 40789 -- PD dialysate out\n     , 40881 -- Hemodialysis\n     , 40910 -- PERITONEAL DIALYSIS\n     , 41016 -- hemodialysis out\n     , 41034 -- dialysis in\n     , 41069 -- PD Dialysate Output\n     , 41112 -- Dialysys out\n     , 41250 -- HEMODIALYSIS OUT\n     , 41374 -- Dialysis Out\n     , 41417 -- Hemodialysis Out\n     , 41500 -- hemodialysis output\n     , 41527 -- HEMODIALYSIS\n     , 41623 -- dialysate out\n     , 41635 -- Hemodialysis removal\n     , 41713 -- dialyslate out\n     , 41750 -- dialysis  out\n     , 41829 -- HEMODIALYSIS OUTPUT\n     , 41842 -- Dialysis Output.\n     , 41897 -- CVVH OUTPUT FROM OR\n     , 42289 -- dialysis off\n     , 42388 -- DIALYSIS OUTPUT\n     , 42464 -- hemodialysis ultrafe\n     , 42524 -- HemoDialysis\n     , 42536 -- Dialysis output\n     , 42868 -- hemodialysis off\n     , 42928 -- HEMODIALYSIS.\n     , 42972 -- HEMODIALYSIS OFF\n     , 43016 -- DIALYSIS TOTAL OUT\n     , 43052 -- DIALYSIS REMOVED\n     , 43098 -- hemodialysis crystal\n     , 43115 -- dialysis net\n     , 43687 -- crystalloid/dialysis\n     , 43941 -- dialysis/intake\n     , 44027 -- dialysis fluid off\n     , 44085 -- DIALYSIS OFF\n     , 44193 -- Dialysis.\n     , 44199 -- HEMODIALYSIS O/P\n     , 44216 -- Hemodialysis out\n     , 44286 -- Dialysis indwelling\n     , 44567 -- Hemodialysis.\n     , 44843 -- peritoneal dialysis\n     , 44845 -- Dialysis fluids\n     , 44857 -- dialysis- fluid off\n     , 44901 -- Dialysis Removed\n     , 44943 -- fluid removed dialys\n     , 45479 -- Dialysis In\n     , 45828 -- Hemo dialysis out\n     , 46230 -- Dialysis 1.5% IN\n     , 46232 -- dialysis flush\n     , 46394 -- Peritoneal dialysis\n     , 46464 -- Hemodialysis OUT\n     , 46712 -- CALCIUM-DIALYSIS\n     , 46713 -- KCL-10 MEQ-DIALYSIS\n     , 46715 -- Citrate - dialysis\n     , 46741 -- dialysis removed\n )\n and value > 0 -- also ensures it's not null\n)\n, mv_ranges as\n(\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , 1 AS dialysis_active\n    , 'CRRT' as dialysis_type\n  from inputevents_mv\n  where itemid in\n  (\n      227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n    , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n  )\n  and amount > 0 -- also ensures it's not null\n  UNION DISTINCT\n  select icustay_id\n    , starttime, endtime\n    , 1 AS dialysis_present\n    , CASE WHEN itemid NOT IN (224270, 225436) THEN 1 ELSE 0 END AS dialysis_active\n    , CASE\n        WHEN itemid = 225441 THEN 'IHD'\n        WHEN itemid = 225802 THEN 'CRRT'  -- CVVH (Continuous venovenous hemofiltration)\n        WHEN itemid = 225803 THEN 'CVVHD' -- CVVHD (Continuous venovenous hemodialysis)\n        WHEN itemid = 225805 THEN 'Peritoneal'\n        WHEN itemid = 225809 THEN 'CVVHDF' -- CVVHDF (Continuous venovenous hemodiafiltration)\n        WHEN itemid = 225955 THEN 'SCUF' -- SCUF (Slow continuous ultra filtration)\n      ELSE NULL END as dialysis_type\n  from procedureevents_mv\n  where itemid in\n  (\n      225441 -- | Hemodialysis          | 4-Procedures              | procedureevents_mv | Process\n    , 225802 -- | Dialysis - CRRT       | Dialysis                  | procedureevents_mv | Process\n    , 225803 -- | Dialysis - CVVHD      | Dialysis                  | procedureevents_mv | Process\n    , 225805 -- | Peritoneal Dialysis   | Dialysis                  | procedureevents_mv | Process\n    , 224270 -- | Dialysis Catheter     | Access Lines - Invasive   | procedureevents_mv | Process\n    , 225809 -- | Dialysis - CVVHDF     | Dialysis                  | procedureevents_mv | Process\n    , 225955 -- | Dialysis - SCUF       | Dialysis                  | procedureevents_mv | Process\n    , 225436 -- | CRRT Filter Change    | Dialysis                  | procedureevents_mv | Process\n  )\n  AND value IS NOT NULL\n)\n-- union together the charttime tables; append times from mv_ranges to guarantee they exist\n, stg0 AS\n(\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM ce\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM cv_ie\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM oe\n  WHERE dialysis_present = 1\n  UNION DISTINCT\n  SELECT\n    icustay_id, starttime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n  UNION DISTINCT\n  SELECT\n    icustay_id, endtime AS charttime, dialysis_present, dialysis_active, dialysis_type\n  FROM mv_ranges\n)\nSELECT\n    stg0.icustay_id\n    , charttime\n    , COALESCE(mv.dialysis_present, stg0.dialysis_present) AS dialysis_present\n    , COALESCE(mv.dialysis_active, stg0.dialysis_active) AS dialysis_active\n    , COALESCE(mv.dialysis_type, stg0.dialysis_type) AS dialysis_type\nFROM stg0\nLEFT JOIN mv_ranges mv\n  ON stg0.icustay_id = mv.icustay_id\n  AND stg0.charttime >= mv.starttime\n  AND stg0.charttime <= mv.endtime\nWHERE stg0.icustay_id IS NOT NULL\nORDER BY 1,2", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_rrt\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_rrt", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:49.113845Z", "name": "compile", "started_at": "2022-07-18T00:10:49.111599Z"}, {"completed_at": "2022-07-18T00:10:52.288311Z", "name": "execute", "started_at": "2022-07-18T00:10:49.114677Z"}]}, "unique_id": "model.mimic.pivoted_rrt"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_rrt", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.290690Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": "2022-07-18T00:10:52.291432", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.291536Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_sofa", "index": 60, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": "2022-07-18T00:10:52.291432", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "60 of 107 START table model public.pivoted_sofa ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.292371Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.293445Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": "2022-07-18T00:10:52.291432", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.293903Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.294379Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.296324Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.297494Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.298009Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_sofa\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.311044Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.311814Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_sofa", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_sofa: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.312096Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.312319Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.320646Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.320940Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_sofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_sofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_sofa__dbt_tmp\"\n  as (\n    \ufeffwith co as\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n-- get minimum blood pressure FROM chartevents\n, bp as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , min(valuenum) as meanbp_min\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.itemid in\n  (\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312  --\"ART BP mean\"\n  )\n  and valuenum > 0 and valuenum < 300\n  group by ce.icustay_id, ce.charttime\n)\n, pafi as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select ie.icustay_id\n  , bg.charttime\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , case when vd.icustay_id is null then pao2fio2ratio else null end pao2fio2ratio_novent\n  , case when vd.icustay_id is not null then pao2fio2ratio else null end pao2fio2ratio_vent\n  FROM icustays ie\n  inner join pivoted_bg_art bg\n    on ie.icustay_id = bg.icustay_id\n  left join ventilation_durations vd\n    on ie.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(bp.meanbp_min) as meanbp_min\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- labs\n  , max(labs.bilirubin) as bilirubin_max\n  , max(labs.creatinine) as creatinine_max\n  , min(labs.platelet) as platelet_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , min(case when vd.icustay_id is null then pao2fio2ratio else null end) AS pao2fio2ratio_novent\n  , min(case when vd.icustay_id is not null then pao2fio2ratio else null end) AS pao2fio2ratio_vent\n  from co\n  left join bp\n    on co.icustay_id = bp.icustay_id\n    and co.starttime < bp.charttime\n    and co.endtime >= bp.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  left join pivoted_lab labs\n    on co.hadm_id = labs.hadm_id\n    and co.starttime < labs.charttime\n    and co.endtime >= labs.charttime\n  -- bring in blood gases that occurred during this hour\n  left join pivoted_bg_art bg\n    on co.icustay_id = bg.icustay_id\n    and co.starttime < bg.charttime\n    and co.endtime >= bg.charttime\n  -- at the time of the blood gas, determine if patient was ventilated\n  left join ventilation_durations vd\n    on co.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.pao2fio2ratio_novent\n    , ma.pao2fio2ratio_vent\n    , epi.vaso_rate as rate_epinephrine\n    , nor.vaso_rate as rate_norepinephrine\n    , dop.vaso_rate as rate_dopamine\n    , dob.vaso_rate as rate_dobutamine\n    , ma.meanbp_min\n    , ma.GCS_min\n    -- uo\n    , uo.urineoutput\n    -- labs\n    , ma.bilirubin_max\n    , ma.creatinine_max\n    , ma.platelet_min\n  from co\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n  left join pafi\n    on co.icustay_id = pafi.icustay_id\n    and co.starttime < pafi.charttime\n    and co.endtime  >= pafi.charttime\n  left join epinephrine_dose epi\n    on co.icustay_id = epi.icustay_id\n    and co.endtime > epi.starttime\n    and co.endtime <= epi.endtime\n  left join norepinephrine_dose nor\n    on co.icustay_id = nor.icustay_id\n    and co.endtime > nor.starttime\n    and co.endtime <= nor.endtime\n  left join dopamine_dose dop\n    on co.icustay_id = dop.icustay_id\n    and co.endtime > dop.starttime\n    and co.endtime <= dop.endtime\n  left join dobutamine_dose dob\n    on co.icustay_id = dob.icustay_id\n    and co.endtime > dob.starttime\n    and co.endtime <= dob.endtime\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n  -- Respiration\n  , cast(case\n      when pao2fio2ratio_vent   < 100 then 4\n      when pao2fio2ratio_vent   < 200 then 3\n      when pao2fio2ratio_novent < 300 then 2\n      when pao2fio2ratio_novent < 400 then 1\n      when coalesce(pao2fio2ratio_vent, pao2fio2ratio_novent) is null then null\n      else 0\n    end as SMALLINT) as respiration\n\n  -- Coagulation\n  , cast(case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as SMALLINT) as coagulation\n\n  -- Liver\n  , cast(case\n      -- Bilirubin checks in mg/dL\n        when Bilirubin_Max >= 12.0 then 4\n        when Bilirubin_Max >= 6.0  then 3\n        when Bilirubin_Max >= 2.0  then 2\n        when Bilirubin_Max >= 1.2  then 1\n        when Bilirubin_Max is null then null\n        else 0\n      end as SMALLINT) as liver\n\n  -- Cardiovascular\n  , cast(case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as SMALLINT) as cardiovascular\n\n  -- Neurological failure (GCS)\n  , cast(case\n      when (GCS_min >= 13 and GCS_min <= 14) then 1\n      when (GCS_min >= 10 and GCS_min <= 12) then 2\n      when (GCS_min >=  6 and GCS_min <=  9) then 3\n      when  GCS_min <   6 then 4\n      when  GCS_min is null then null\n  else 0 end as SMALLINT)\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , cast(case\n    when (Creatinine_Max >= 5.0) then 4\n    when\n      SUM(urineoutput) OVER W < 200\n        then 4\n    when (Creatinine_Max >= 3.5 and Creatinine_Max < 5.0) then 3\n    when\n      SUM(urineoutput) OVER W < 500\n        then 3\n    when (Creatinine_Max >= 2.0 and Creatinine_Max < 3.5) then 2\n    when (Creatinine_Max >= 1.2 and Creatinine_Max < 2.0) then 1\n    when coalesce\n      (\n        SUM(urineoutput) OVER W\n        , Creatinine_Max\n      ) is null then null\n  else 0 end as SMALLINT)\n    as renal\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Combine all the scores to get SOFA\n    -- Impute 0 if the score is missing\n   -- the window function takes the max over the last 24 hours\n    , cast(coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as respiration_24hours\n     , cast(coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n        ,0) as SMALLINT) as coagulation_24hours\n    , cast(coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as liver_24hours\n    , cast(coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cardiovascular_24hours\n    , cast(coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cns_24hours\n    , cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as renal_24hours\n\n    -- sum together data for final SOFA\n    , coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT)\n    as sofa_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_sofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_sofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_sofa__dbt_tmp\"\n  as (\n    \ufeffwith co as\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n-- get minimum blood pressure FROM chartevents\n, bp as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , min(valuenum) as meanbp_min\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.itemid in\n  (\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312  --\"ART BP mean\"\n  )\n  and valuenum > 0 and valuenum < 300\n  group by ce.icustay_id, ce.charttime\n)\n, pafi as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select ie.icustay_id\n  , bg.charttime\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , case when vd.icustay_id is null then pao2fio2ratio else null end pao2fio2ratio_novent\n  , case when vd.icustay_id is not null then pao2fio2ratio else null end pao2fio2ratio_vent\n  FROM icustays ie\n  inner join pivoted_bg_art bg\n    on ie.icustay_id = bg.icustay_id\n  left join ventilation_durations vd\n    on ie.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(bp.meanbp_min) as meanbp_min\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- labs\n  , max(labs.bilirubin) as bilirubin_max\n  , max(labs.creatinine) as creatinine_max\n  , min(labs.platelet) as platelet_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , min(case when vd.icustay_id is null then pao2fio2ratio else null end) AS pao2fio2ratio_novent\n  , min(case when vd.icustay_id is not null then pao2fio2ratio else null end) AS pao2fio2ratio_vent\n  from co\n  left join bp\n    on co.icustay_id = bp.icustay_id\n    and co.starttime < bp.charttime\n    and co.endtime >= bp.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  left join pivoted_lab labs\n    on co.hadm_id = labs.hadm_id\n    and co.starttime < labs.charttime\n    and co.endtime >= labs.charttime\n  -- bring in blood gases that occurred during this hour\n  left join pivoted_bg_art bg\n    on co.icustay_id = bg.icustay_id\n    and co.starttime < bg.charttime\n    and co.endtime >= bg.charttime\n  -- at the time of the blood gas, determine if patient was ventilated\n  left join ventilation_durations vd\n    on co.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.pao2fio2ratio_novent\n    , ma.pao2fio2ratio_vent\n    , epi.vaso_rate as rate_epinephrine\n    , nor.vaso_rate as rate_norepinephrine\n    , dop.vaso_rate as rate_dopamine\n    , dob.vaso_rate as rate_dobutamine\n    , ma.meanbp_min\n    , ma.GCS_min\n    -- uo\n    , uo.urineoutput\n    -- labs\n    , ma.bilirubin_max\n    , ma.creatinine_max\n    , ma.platelet_min\n  from co\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n  left join pafi\n    on co.icustay_id = pafi.icustay_id\n    and co.starttime < pafi.charttime\n    and co.endtime  >= pafi.charttime\n  left join epinephrine_dose epi\n    on co.icustay_id = epi.icustay_id\n    and co.endtime > epi.starttime\n    and co.endtime <= epi.endtime\n  left join norepinephrine_dose nor\n    on co.icustay_id = nor.icustay_id\n    and co.endtime > nor.starttime\n    and co.endtime <= nor.endtime\n  left join dopamine_dose dop\n    on co.icustay_id = dop.icustay_id\n    and co.endtime > dop.starttime\n    and co.endtime <= dop.endtime\n  left join dobutamine_dose dob\n    on co.icustay_id = dob.icustay_id\n    and co.endtime > dob.starttime\n    and co.endtime <= dob.endtime\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n  -- Respiration\n  , cast(case\n      when pao2fio2ratio_vent   < 100 then 4\n      when pao2fio2ratio_vent   < 200 then 3\n      when pao2fio2ratio_novent < 300 then 2\n      when pao2fio2ratio_novent < 400 then 1\n      when coalesce(pao2fio2ratio_vent, pao2fio2ratio_novent) is null then null\n      else 0\n    end as SMALLINT) as respiration\n\n  -- Coagulation\n  , cast(case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as SMALLINT) as coagulation\n\n  -- Liver\n  , cast(case\n      -- Bilirubin checks in mg/dL\n        when Bilirubin_Max >= 12.0 then 4\n        when Bilirubin_Max >= 6.0  then 3\n        when Bilirubin_Max >= 2.0  then 2\n        when Bilirubin_Max >= 1.2  then 1\n        when Bilirubin_Max is null then null\n        else 0\n      end as SMALLINT) as liver\n\n  -- Cardiovascular\n  , cast(case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as SMALLINT) as cardiovascular\n\n  -- Neurological failure (GCS)\n  , cast(case\n      when (GCS_min >= 13 and GCS_min <= 14) then 1\n      when (GCS_min >= 10 and GCS_min <= 12) then 2\n      when (GCS_min >=  6 and GCS_min <=  9) then 3\n      when  GCS_min <   6 then 4\n      when  GCS_min is null then null\n  else 0 end as SMALLINT)\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , cast(case\n    when (Creatinine_Max >= 5.0) then 4\n    when\n      SUM(urineoutput) OVER W < 200\n        then 4\n    when (Creatinine_Max >= 3.5 and Creatinine_Max < 5.0) then 3\n    when\n      SUM(urineoutput) OVER W < 500\n        then 3\n    when (Creatinine_Max >= 2.0 and Creatinine_Max < 3.5) then 2\n    when (Creatinine_Max >= 1.2 and Creatinine_Max < 2.0) then 1\n    when coalesce\n      (\n        SUM(urineoutput) OVER W\n        , Creatinine_Max\n      ) is null then null\n  else 0 end as SMALLINT)\n    as renal\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Combine all the scores to get SOFA\n    -- Impute 0 if the score is missing\n   -- the window function takes the max over the last 24 hours\n    , cast(coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as respiration_24hours\n     , cast(coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n        ,0) as SMALLINT) as coagulation_24hours\n    , cast(coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as liver_24hours\n    , cast(coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cardiovascular_24hours\n    , cast(coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cns_24hours\n    , cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as renal_24hours\n\n    -- sum together data for final SOFA\n    , coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT)\n    as sofa_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.321068Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Postgres error: syntax error at or near \"\ufeffwith\"\nLINE 6:     \ufeffwith co as\n            ^\n", "name": "Postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Postgres error: syntax error at or near \"\ufeffwith\"\nLINE 6:     \ufeffwith co as\n            ^\n", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.321558Z", "type": "log_line"}
{"code": "E012", "data": {"conn_name": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_sofa: ROLLBACK", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.321935Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.322645Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_sofa: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.322907Z", "type": "log_line"}
{"code": "W002", "data": {"exc": "Database Error in model pivoted_sofa (models/pivot/pivoted_sofa.sql)\n  syntax error at or near \"\ufeffwith\"\n  LINE 6:     \ufeffwith co as\n              ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_sofa.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Database Error in model pivoted_sofa (models/pivot/pivoted_sofa.sql)\n  syntax error at or near \"\ufeffwith\"\n  LINE 6:     \ufeffwith co as\n              ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_sofa.sql", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.323744Z", "type": "log_line"}
{"code": "Q035", "data": {"description": "table model public.pivoted_sofa", "execution_time": 0, "index": 60, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": "2022-07-18T00:10:52.291432", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "status": "error", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "60 of 107 ERROR creating table model public.pivoted_sofa ....................... [\u001b[31mERROR\u001b[0m in 0.03s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.324970Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:52.326277", "node_name": "pivoted_sofa", "node_path": "pivot/pivoted_sofa.sql", "node_started_at": "2022-07-18T00:10:52.291432", "node_status": "error", "resource_type": "model", "unique_id": "model.mimic.pivoted_sofa"}, "run_result": {"adapter_response": {}, "agate_table": null, "execution_time": 0.03144264221191406, "failures": null, "message": "Database Error in model pivoted_sofa (models/pivot/pivoted_sofa.sql)\n  syntax error at or near \"\ufeffwith\"\n  LINE 6:     \ufeffwith co as\n              ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_sofa.sql", "node": {"alias": "pivoted_sofa", "build_path": "target/run/mimic/models/pivot/pivoted_sofa.sql", "checksum": {"checksum": "8de06c57d0a5f15242c76d4e50c30b2ad3dc551c4e9264432384dbab3deebe22", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_sofa.sql", "compiled_sql": "\ufeffwith co as\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n-- get minimum blood pressure FROM chartevents\n, bp as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , min(valuenum) as meanbp_min\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.itemid in\n  (\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312  --\"ART BP mean\"\n  )\n  and valuenum > 0 and valuenum < 300\n  group by ce.icustay_id, ce.charttime\n)\n, pafi as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select ie.icustay_id\n  , bg.charttime\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , case when vd.icustay_id is null then pao2fio2ratio else null end pao2fio2ratio_novent\n  , case when vd.icustay_id is not null then pao2fio2ratio else null end pao2fio2ratio_vent\n  FROM icustays ie\n  inner join pivoted_bg_art bg\n    on ie.icustay_id = bg.icustay_id\n  left join ventilation_durations vd\n    on ie.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(bp.meanbp_min) as meanbp_min\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- labs\n  , max(labs.bilirubin) as bilirubin_max\n  , max(labs.creatinine) as creatinine_max\n  , min(labs.platelet) as platelet_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , min(case when vd.icustay_id is null then pao2fio2ratio else null end) AS pao2fio2ratio_novent\n  , min(case when vd.icustay_id is not null then pao2fio2ratio else null end) AS pao2fio2ratio_vent\n  from co\n  left join bp\n    on co.icustay_id = bp.icustay_id\n    and co.starttime < bp.charttime\n    and co.endtime >= bp.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  left join pivoted_lab labs\n    on co.hadm_id = labs.hadm_id\n    and co.starttime < labs.charttime\n    and co.endtime >= labs.charttime\n  -- bring in blood gases that occurred during this hour\n  left join pivoted_bg_art bg\n    on co.icustay_id = bg.icustay_id\n    and co.starttime < bg.charttime\n    and co.endtime >= bg.charttime\n  -- at the time of the blood gas, determine if patient was ventilated\n  left join ventilation_durations vd\n    on co.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.pao2fio2ratio_novent\n    , ma.pao2fio2ratio_vent\n    , epi.vaso_rate as rate_epinephrine\n    , nor.vaso_rate as rate_norepinephrine\n    , dop.vaso_rate as rate_dopamine\n    , dob.vaso_rate as rate_dobutamine\n    , ma.meanbp_min\n    , ma.GCS_min\n    -- uo\n    , uo.urineoutput\n    -- labs\n    , ma.bilirubin_max\n    , ma.creatinine_max\n    , ma.platelet_min\n  from co\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n  left join pafi\n    on co.icustay_id = pafi.icustay_id\n    and co.starttime < pafi.charttime\n    and co.endtime  >= pafi.charttime\n  left join epinephrine_dose epi\n    on co.icustay_id = epi.icustay_id\n    and co.endtime > epi.starttime\n    and co.endtime <= epi.endtime\n  left join norepinephrine_dose nor\n    on co.icustay_id = nor.icustay_id\n    and co.endtime > nor.starttime\n    and co.endtime <= nor.endtime\n  left join dopamine_dose dop\n    on co.icustay_id = dop.icustay_id\n    and co.endtime > dop.starttime\n    and co.endtime <= dop.endtime\n  left join dobutamine_dose dob\n    on co.icustay_id = dob.icustay_id\n    and co.endtime > dob.starttime\n    and co.endtime <= dob.endtime\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n  -- Respiration\n  , cast(case\n      when pao2fio2ratio_vent   < 100 then 4\n      when pao2fio2ratio_vent   < 200 then 3\n      when pao2fio2ratio_novent < 300 then 2\n      when pao2fio2ratio_novent < 400 then 1\n      when coalesce(pao2fio2ratio_vent, pao2fio2ratio_novent) is null then null\n      else 0\n    end as SMALLINT) as respiration\n\n  -- Coagulation\n  , cast(case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as SMALLINT) as coagulation\n\n  -- Liver\n  , cast(case\n      -- Bilirubin checks in mg/dL\n        when Bilirubin_Max >= 12.0 then 4\n        when Bilirubin_Max >= 6.0  then 3\n        when Bilirubin_Max >= 2.0  then 2\n        when Bilirubin_Max >= 1.2  then 1\n        when Bilirubin_Max is null then null\n        else 0\n      end as SMALLINT) as liver\n\n  -- Cardiovascular\n  , cast(case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as SMALLINT) as cardiovascular\n\n  -- Neurological failure (GCS)\n  , cast(case\n      when (GCS_min >= 13 and GCS_min <= 14) then 1\n      when (GCS_min >= 10 and GCS_min <= 12) then 2\n      when (GCS_min >=  6 and GCS_min <=  9) then 3\n      when  GCS_min <   6 then 4\n      when  GCS_min is null then null\n  else 0 end as SMALLINT)\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , cast(case\n    when (Creatinine_Max >= 5.0) then 4\n    when\n      SUM(urineoutput) OVER W < 200\n        then 4\n    when (Creatinine_Max >= 3.5 and Creatinine_Max < 5.0) then 3\n    when\n      SUM(urineoutput) OVER W < 500\n        then 3\n    when (Creatinine_Max >= 2.0 and Creatinine_Max < 3.5) then 2\n    when (Creatinine_Max >= 1.2 and Creatinine_Max < 2.0) then 1\n    when coalesce\n      (\n        SUM(urineoutput) OVER W\n        , Creatinine_Max\n      ) is null then null\n  else 0 end as SMALLINT)\n    as renal\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Combine all the scores to get SOFA\n    -- Impute 0 if the score is missing\n   -- the window function takes the max over the last 24 hours\n    , cast(coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as respiration_24hours\n     , cast(coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n        ,0) as SMALLINT) as coagulation_24hours\n    , cast(coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as liver_24hours\n    , cast(coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cardiovascular_24hours\n    , cast(coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cns_24hours\n    , cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as renal_24hours\n\n    -- sum together data for final SOFA\n    , coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT)\n    as sofa_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5985844, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_sofa"], "meta": {}, "name": "pivoted_sofa", "original_file_path": "models/pivot/pivoted_sofa.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_sofa.sql", "raw_sql": "\ufeffwith co as\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n-- get minimum blood pressure FROM chartevents\n, bp as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , min(valuenum) as meanbp_min\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.itemid in\n  (\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312  --\"ART BP mean\"\n  )\n  and valuenum > 0 and valuenum < 300\n  group by ce.icustay_id, ce.charttime\n)\n, pafi as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select ie.icustay_id\n  , bg.charttime\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , case when vd.icustay_id is null then pao2fio2ratio else null end pao2fio2ratio_novent\n  , case when vd.icustay_id is not null then pao2fio2ratio else null end pao2fio2ratio_vent\n  FROM icustays ie\n  inner join pivoted_bg_art bg\n    on ie.icustay_id = bg.icustay_id\n  left join ventilation_durations vd\n    on ie.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(bp.meanbp_min) as meanbp_min\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- labs\n  , max(labs.bilirubin) as bilirubin_max\n  , max(labs.creatinine) as creatinine_max\n  , min(labs.platelet) as platelet_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , min(case when vd.icustay_id is null then pao2fio2ratio else null end) AS pao2fio2ratio_novent\n  , min(case when vd.icustay_id is not null then pao2fio2ratio else null end) AS pao2fio2ratio_vent\n  from co\n  left join bp\n    on co.icustay_id = bp.icustay_id\n    and co.starttime < bp.charttime\n    and co.endtime >= bp.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  left join pivoted_lab labs\n    on co.hadm_id = labs.hadm_id\n    and co.starttime < labs.charttime\n    and co.endtime >= labs.charttime\n  -- bring in blood gases that occurred during this hour\n  left join pivoted_bg_art bg\n    on co.icustay_id = bg.icustay_id\n    and co.starttime < bg.charttime\n    and co.endtime >= bg.charttime\n  -- at the time of the blood gas, determine if patient was ventilated\n  left join ventilation_durations vd\n    on co.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.pao2fio2ratio_novent\n    , ma.pao2fio2ratio_vent\n    , epi.vaso_rate as rate_epinephrine\n    , nor.vaso_rate as rate_norepinephrine\n    , dop.vaso_rate as rate_dopamine\n    , dob.vaso_rate as rate_dobutamine\n    , ma.meanbp_min\n    , ma.GCS_min\n    -- uo\n    , uo.urineoutput\n    -- labs\n    , ma.bilirubin_max\n    , ma.creatinine_max\n    , ma.platelet_min\n  from co\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n  left join pafi\n    on co.icustay_id = pafi.icustay_id\n    and co.starttime < pafi.charttime\n    and co.endtime  >= pafi.charttime\n  left join epinephrine_dose epi\n    on co.icustay_id = epi.icustay_id\n    and co.endtime > epi.starttime\n    and co.endtime <= epi.endtime\n  left join norepinephrine_dose nor\n    on co.icustay_id = nor.icustay_id\n    and co.endtime > nor.starttime\n    and co.endtime <= nor.endtime\n  left join dopamine_dose dop\n    on co.icustay_id = dop.icustay_id\n    and co.endtime > dop.starttime\n    and co.endtime <= dop.endtime\n  left join dobutamine_dose dob\n    on co.icustay_id = dob.icustay_id\n    and co.endtime > dob.starttime\n    and co.endtime <= dob.endtime\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n  -- Respiration\n  , cast(case\n      when pao2fio2ratio_vent   < 100 then 4\n      when pao2fio2ratio_vent   < 200 then 3\n      when pao2fio2ratio_novent < 300 then 2\n      when pao2fio2ratio_novent < 400 then 1\n      when coalesce(pao2fio2ratio_vent, pao2fio2ratio_novent) is null then null\n      else 0\n    end as SMALLINT) as respiration\n\n  -- Coagulation\n  , cast(case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as SMALLINT) as coagulation\n\n  -- Liver\n  , cast(case\n      -- Bilirubin checks in mg/dL\n        when Bilirubin_Max >= 12.0 then 4\n        when Bilirubin_Max >= 6.0  then 3\n        when Bilirubin_Max >= 2.0  then 2\n        when Bilirubin_Max >= 1.2  then 1\n        when Bilirubin_Max is null then null\n        else 0\n      end as SMALLINT) as liver\n\n  -- Cardiovascular\n  , cast(case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as SMALLINT) as cardiovascular\n\n  -- Neurological failure (GCS)\n  , cast(case\n      when (GCS_min >= 13 and GCS_min <= 14) then 1\n      when (GCS_min >= 10 and GCS_min <= 12) then 2\n      when (GCS_min >=  6 and GCS_min <=  9) then 3\n      when  GCS_min <   6 then 4\n      when  GCS_min is null then null\n  else 0 end as SMALLINT)\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , cast(case\n    when (Creatinine_Max >= 5.0) then 4\n    when\n      SUM(urineoutput) OVER W < 200\n        then 4\n    when (Creatinine_Max >= 3.5 and Creatinine_Max < 5.0) then 3\n    when\n      SUM(urineoutput) OVER W < 500\n        then 3\n    when (Creatinine_Max >= 2.0 and Creatinine_Max < 3.5) then 2\n    when (Creatinine_Max >= 1.2 and Creatinine_Max < 2.0) then 1\n    when coalesce\n      (\n        SUM(urineoutput) OVER W\n        , Creatinine_Max\n      ) is null then null\n  else 0 end as SMALLINT)\n    as renal\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Combine all the scores to get SOFA\n    -- Impute 0 if the score is missing\n   -- the window function takes the max over the last 24 hours\n    , cast(coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as respiration_24hours\n     , cast(coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n        ,0) as SMALLINT) as coagulation_24hours\n    , cast(coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as liver_24hours\n    , cast(coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cardiovascular_24hours\n    , cast(coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as cns_24hours\n    , cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT) as renal_24hours\n\n    -- sum together data for final SOFA\n    , coalesce(\n        MAX(respiration) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n         MAX(coagulation) OVER (PARTITION BY icustay_id ORDER BY HR\n         ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(liver) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cardiovascular) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + coalesce(\n        MAX(cns) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0)\n     + cast(coalesce(\n        MAX(renal) OVER (PARTITION BY icustay_id ORDER BY HR\n        ROWS BETWEEN 24 PRECEDING AND 0 FOLLOWING)\n      ,0) as SMALLINT)\n    as sofa_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_sofa\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_sofa", "unrendered_config": {"materialized": "table"}}, "status": "error", "thread_id": "Thread-1", "timing": []}, "unique_id": "model.mimic.pivoted_sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.326612Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": "2022-07-18T00:10:52.327188", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.327272Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_uo", "index": 61, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": "2022-07-18T00:10:52.327188", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "61 of 107 START table model public.pivoted_uo .................................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.327977Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.328809Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": "2022-07-18T00:10:52.327188", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.329022Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.329154Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.330933Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.332360Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.333147Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.342753Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.343609Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.343884Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.344088Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.352243Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.352599Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_uo__dbt_tmp\"\n  as (\n    select\n  icustay_id\n  , charttime\n  , sum(urineoutput) as urineoutput\nfrom\n(\n  select\n  -- patient identifiers\n    oe.icustay_id\n  , oe.charttime \n  -- volumes associated with urine output ITEMIDs\n  -- note we consider input of GU irrigant as a negative volume\n  , case\n      when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n      else oe.value\n    end as urineoutput\n  from outputevents oe\n-- exclude rows marked as error\nwhere (oe.iserror IS NULL OR oe.iserror != 1)\n  and itemid in\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in CareVue\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n  )\n) as foo\ngroup by icustay_id, charttime\norder by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_uo__dbt_tmp\"\n  as (\n    select\n  icustay_id\n  , charttime\n  , sum(urineoutput) as urineoutput\nfrom\n(\n  select\n  -- patient identifiers\n    oe.icustay_id\n  , oe.charttime \n  -- volumes associated with urine output ITEMIDs\n  -- note we consider input of GU irrigant as a negative volume\n  , case\n      when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n      else oe.value\n    end as urineoutput\n  from outputevents oe\n-- exclude rows marked as error\nwhere (oe.iserror IS NULL OR oe.iserror != 1)\n  and itemid in\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in CareVue\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n  )\n) as foo\ngroup by icustay_id, charttime\norder by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:52.353152Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.64, "status": "SELECT 3381677"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3381677 in 3.64 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:55.998637Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.004520Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\nalter table \"postgres\".\"public\".\"pivoted_uo\" rename to \"pivoted_uo__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\nalter table \"postgres\".\"public\".\"pivoted_uo\" rename to \"pivoted_uo__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.004763Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.005550Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.009103Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\nalter table \"postgres\".\"public\".\"pivoted_uo__dbt_tmp\" rename to \"pivoted_uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\nalter table \"postgres\".\"public\".\"pivoted_uo__dbt_tmp\" rename to \"pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.009336Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.010235Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.013184Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.013400Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.013901Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.023954Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.025948Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_uo__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_uo\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_uo__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.026199Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.029951Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.034143Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_uo: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.034415Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_uo", "execution_time": 3, "index": 61, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": "2022-07-18T00:10:52.327188", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "status": "SELECT 3381677", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "61 of 107 OK created table model public.pivoted_uo ............................. [\u001b[32mSELECT 3381677\u001b[0m in 3.71s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.035385Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:56.035925", "node_name": "pivoted_uo", "node_path": "pivot/pivoted_uo.sql", "node_started_at": "2022-07-18T00:10:52.327188", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_uo"}, "run_result": {"adapter_response": {"_message": "SELECT 3381677", "code": "SELECT", "rows_affected": 3381677}, "agate_table": null, "execution_time": 3.7067220211029053, "failures": null, "message": "SELECT 3381677", "node": {"alias": "pivoted_uo", "build_path": "target/run/mimic/models/pivot/pivoted_uo.sql", "checksum": {"checksum": "95fe39bc1c5287fbf99071f6083c2f4c723a76d873816f584ba26068b55c2dc5", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_uo.sql", "compiled_sql": "select\n  icustay_id\n  , charttime\n  , sum(urineoutput) as urineoutput\nfrom\n(\n  select\n  -- patient identifiers\n    oe.icustay_id\n  , oe.charttime \n  -- volumes associated with urine output ITEMIDs\n  -- note we consider input of GU irrigant as a negative volume\n  , case\n      when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n      else oe.value\n    end as urineoutput\n  from outputevents oe\n-- exclude rows marked as error\nwhere (oe.iserror IS NULL OR oe.iserror != 1)\n  and itemid in\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in CareVue\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n  )\n) as foo\ngroup by icustay_id, charttime\norder by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.591412, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_uo"], "meta": {}, "name": "pivoted_uo", "original_file_path": "models/pivot/pivoted_uo.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_uo.sql", "raw_sql": "select\n  icustay_id\n  , charttime\n  , sum(urineoutput) as urineoutput\nfrom\n(\n  select\n  -- patient identifiers\n    oe.icustay_id\n  , oe.charttime \n  -- volumes associated with urine output ITEMIDs\n  -- note we consider input of GU irrigant as a negative volume\n  , case\n      when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n      else oe.value\n    end as urineoutput\n  from outputevents oe\n-- exclude rows marked as error\nwhere (oe.iserror IS NULL OR oe.iserror != 1)\n  and itemid in\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in CareVue\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n  )\n) as foo\ngroup by icustay_id, charttime\norder by icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_uo\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_uo", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:52.332165Z", "name": "compile", "started_at": "2022-07-18T00:10:52.329136Z"}, {"completed_at": "2022-07-18T00:10:56.034111Z", "name": "execute", "started_at": "2022-07-18T00:10:52.333346Z"}]}, "unique_id": "model.mimic.pivoted_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.036103Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": "2022-07-18T00:10:56.036518", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_vital", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.036604Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_vital", "index": 62, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": "2022-07-18T00:10:56.036518", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "62 of 107 START table model public.pivoted_vital ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.037265Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.038047Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": "2022-07-18T00:10:56.036518", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_vital", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.038378Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_vital", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.038830Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.040294Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.040902Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_vital", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.041230Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_vital\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.050529Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.052397Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.053051Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.053261Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.059963Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.060451Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_vital__dbt_tmp\"\n  as (\n    -- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , (case when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then valuenum else null end) as heartrate\n    , (case when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then valuenum else null end) as sysbp\n    , (case when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then valuenum else null end) as diasbp\n    , (case when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then valuenum else null end) as meanbp\n    , (case when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then valuenum else null end) as resprate\n    , (case when itemid in (223761,678) and valuenum > 70 and valuenum < 120 then (valuenum-32)/1.8 -- converted to degC in valuenum call\n               when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then valuenum else null end) as tempc\n    , (case when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then valuenum else null end) as spo2\n    , (case when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then valuenum else null end) as glucose\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- spo2, peripheral\n  646, 220277,\n\n  -- glucose, both lab and fingerstick\n  807,--\tFingerstick glucose\n  811,--\tglucose (70-105)\n  1529,--\tglucose\n  3745,--\tBloodglucose\n  3744,--\tBlood glucose\n  225664,--\tglucose finger stick\n  220621,--\tglucose (serum)\n  226537,--\tglucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , avg(heartrate) as heartrate\n  , avg(sysbp) as sysbp\n  , avg(diasbp) as diasbp\n  , avg(meanbp) as meanbp\n  , avg(resprate) as resprate\n  , avg(tempc) as tempc\n  , avg(spo2) as spo2\n  , avg(glucose) as glucose\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_vital__dbt_tmp\"\n  as (\n    -- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , (case when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then valuenum else null end) as heartrate\n    , (case when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then valuenum else null end) as sysbp\n    , (case when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then valuenum else null end) as diasbp\n    , (case when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then valuenum else null end) as meanbp\n    , (case when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then valuenum else null end) as resprate\n    , (case when itemid in (223761,678) and valuenum > 70 and valuenum < 120 then (valuenum-32)/1.8 -- converted to degC in valuenum call\n               when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then valuenum else null end) as tempc\n    , (case when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then valuenum else null end) as spo2\n    , (case when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then valuenum else null end) as glucose\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- spo2, peripheral\n  646, 220277,\n\n  -- glucose, both lab and fingerstick\n  807,--\tFingerstick glucose\n  811,--\tglucose (70-105)\n  1529,--\tglucose\n  3745,--\tBloodglucose\n  3744,--\tBlood glucose\n  225664,--\tglucose finger stick\n  220621,--\tglucose (serum)\n  226537,--\tglucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , avg(heartrate) as heartrate\n  , avg(sysbp) as sysbp\n  , avg(diasbp) as diasbp\n  , avg(meanbp) as meanbp\n  , avg(resprate) as resprate\n  , avg(tempc) as tempc\n  , avg(spo2) as spo2\n  , avg(glucose) as glucose\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.061460Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "SELECT 1045"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1045 in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.086972Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.091015Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\nalter table \"postgres\".\"public\".\"pivoted_vital\" rename to \"pivoted_vital__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\nalter table \"postgres\".\"public\".\"pivoted_vital\" rename to \"pivoted_vital__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.091253Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.092273Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.099687Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\nalter table \"postgres\".\"public\".\"pivoted_vital__dbt_tmp\" rename to \"pivoted_vital\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\nalter table \"postgres\".\"public\".\"pivoted_vital__dbt_tmp\" rename to \"pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.099942Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.100488Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.103698Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.103949Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.104073Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.105235Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_vital", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_vital\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.107269Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_vital", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_vital__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_vital\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_vital__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.107501Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.110390Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.115693Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_vital: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.115950Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_vital", "execution_time": 0, "index": 62, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": "2022-07-18T00:10:56.036518", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "status": "SELECT 1045", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "62 of 107 OK created table model public.pivoted_vital .......................... [\u001b[32mSELECT 1045\u001b[0m in 0.08s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.116815Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:56.117259", "node_name": "pivoted_vital", "node_path": "pivot/pivoted_vital.sql", "node_started_at": "2022-07-18T00:10:56.036518", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_vital"}, "run_result": {"adapter_response": {"_message": "SELECT 1045", "code": "SELECT", "rows_affected": 1045}, "agate_table": null, "execution_time": 0.07906532287597656, "failures": null, "message": "SELECT 1045", "node": {"alias": "pivoted_vital", "build_path": "target/run/mimic/models/pivot/pivoted_vital.sql", "checksum": {"checksum": "bcde8e6ceded9caaa3ee972a28903469d0cca3e1ea9345938c0d99128df1039a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_vital.sql", "compiled_sql": "-- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , (case when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then valuenum else null end) as heartrate\n    , (case when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then valuenum else null end) as sysbp\n    , (case when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then valuenum else null end) as diasbp\n    , (case when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then valuenum else null end) as meanbp\n    , (case when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then valuenum else null end) as resprate\n    , (case when itemid in (223761,678) and valuenum > 70 and valuenum < 120 then (valuenum-32)/1.8 -- converted to degC in valuenum call\n               when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then valuenum else null end) as tempc\n    , (case when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then valuenum else null end) as spo2\n    , (case when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then valuenum else null end) as glucose\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- spo2, peripheral\n  646, 220277,\n\n  -- glucose, both lab and fingerstick\n  807,--\tFingerstick glucose\n  811,--\tglucose (70-105)\n  1529,--\tglucose\n  3745,--\tBloodglucose\n  3744,--\tBlood glucose\n  225664,--\tglucose finger stick\n  220621,--\tglucose (serum)\n  226537,--\tglucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , avg(heartrate) as heartrate\n  , avg(sysbp) as sysbp\n  , avg(diasbp) as diasbp\n  , avg(meanbp) as meanbp\n  , avg(resprate) as resprate\n  , avg(tempc) as tempc\n  , avg(spo2) as spo2\n  , avg(glucose) as glucose\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5789113, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_vital"], "meta": {}, "name": "pivoted_vital", "original_file_path": "models/pivot/pivoted_vital.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_vital.sql", "raw_sql": "-- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nwith ce as\n(\n  select ce.icustay_id\n    , ce.charttime\n    , (case when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then valuenum else null end) as heartrate\n    , (case when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then valuenum else null end) as sysbp\n    , (case when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then valuenum else null end) as diasbp\n    , (case when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then valuenum else null end) as meanbp\n    , (case when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then valuenum else null end) as resprate\n    , (case when itemid in (223761,678) and valuenum > 70 and valuenum < 120 then (valuenum-32)/1.8 -- converted to degC in valuenum call\n               when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then valuenum else null end) as tempc\n    , (case when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then valuenum else null end) as spo2\n    , (case when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then valuenum else null end) as glucose\n  FROM chartevents ce\n  -- exclude rows marked as error\n  where (ce.error IS NULL OR ce.error != 1)\n  and ce.icustay_id IS NOT NULL\n  and ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- spo2, peripheral\n  646, 220277,\n\n  -- glucose, both lab and fingerstick\n  807,--\tFingerstick glucose\n  811,--\tglucose (70-105)\n  1529,--\tglucose\n  3745,--\tBloodglucose\n  3744,--\tBlood glucose\n  225664,--\tglucose finger stick\n  220621,--\tglucose (serum)\n  226537,--\tglucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n)\nselect\n    ce.icustay_id\n  , ce.charttime\n  , avg(heartrate) as heartrate\n  , avg(sysbp) as sysbp\n  , avg(diasbp) as diasbp\n  , avg(meanbp) as meanbp\n  , avg(resprate) as resprate\n  , avg(tempc) as tempc\n  , avg(spo2) as spo2\n  , avg(glucose) as glucose\nfrom ce\ngroup by ce.icustay_id, ce.charttime\norder by ce.icustay_id, ce.charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"pivoted_vital\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_vital", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:56.040825Z", "name": "compile", "started_at": "2022-07-18T00:10:56.038799Z"}, {"completed_at": "2022-07-18T00:10:56.115661Z", "name": "execute", "started_at": "2022-07-18T00:10:56.041349Z"}]}, "unique_id": "model.mimic.pivoted_vital"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_vital", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.117410Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": "2022-07-18T00:10:56.117857", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.potassium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.117932Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.potassium", "index": 63, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": "2022-07-18T00:10:56.117857", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "63 of 107 START table model public.potassium ................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.118678Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.119796Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": "2022-07-18T00:10:56.117857", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.potassium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.119968Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.potassium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.120211Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.121368Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.122115Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.potassium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.122409Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.potassium\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.131698Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.133271Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.133509Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.133782Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.140929Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.141236Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\n\n\n  create  table \"postgres\".\"public\".\"potassium__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Creates a histogram of serum potassium for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, k as\n(\n  SELECT width_bucket(valuenum, 0, 10, 100) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50822, 50971)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as potassium_value, count(*)\nFROM k\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\n\n\n  create  table \"postgres\".\"public\".\"potassium__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Creates a histogram of serum potassium for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, k as\n(\n  SELECT width_bucket(valuenum, 0, 10, 100) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50822, 50971)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as potassium_value, count(*)\nFROM k\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.141366Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.16, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.298503Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.303653Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\nalter table \"postgres\".\"public\".\"potassium\" rename to \"potassium__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\nalter table \"postgres\".\"public\".\"potassium\" rename to \"potassium__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.304016Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.305022Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.309496Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\nalter table \"postgres\".\"public\".\"potassium__dbt_tmp\" rename to \"potassium\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\nalter table \"postgres\".\"public\".\"potassium__dbt_tmp\" rename to \"potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.309937Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.310960Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.315847Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.316067Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.316330Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.318280Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.potassium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.potassium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.320864Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.potassium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\ndrop table if exists \"postgres\".\"public\".\"potassium__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.potassium\"} */\ndrop table if exists \"postgres\".\"public\".\"potassium__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.321105Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.323842Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.327925Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.potassium: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.328839Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.potassium", "execution_time": 0, "index": 63, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": "2022-07-18T00:10:56.117857", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "63 of 107 OK created table model public.potassium .............................. [\u001b[32mSELECT 0\u001b[0m in 0.21s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.330754Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:56.331494", "node_name": "potassium", "node_path": "cookbook/potassium.sql", "node_started_at": "2022-07-18T00:10:56.117857", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.potassium"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.21065306663513184, "failures": null, "message": "SELECT 0", "node": {"alias": "potassium", "build_path": "target/run/mimic/models/cookbook/potassium.sql", "checksum": {"checksum": "aeb401f8088b02fd6cd56d5fbe36f49b79c03529de1994072cc8f32ae0527e76", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/potassium.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Creates a histogram of serum potassium for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, k as\n(\n  SELECT width_bucket(valuenum, 0, 10, 100) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50822, 50971)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as potassium_value, count(*)\nFROM k\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6525993, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "potassium"], "meta": {}, "name": "potassium", "original_file_path": "models/cookbook/potassium.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/potassium.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Creates a histogram of serum potassium for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, k as\n(\n  SELECT width_bucket(valuenum, 0, 10, 100) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50822, 50971)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as potassium_value, count(*)\nFROM k\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"potassium\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.potassium", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:56.122034Z", "name": "compile", "started_at": "2022-07-18T00:10:56.120185Z"}, {"completed_at": "2022-07-18T00:10:56.327838Z", "name": "execute", "started_at": "2022-07-18T00:10:56.122661Z"}]}, "unique_id": "model.mimic.potassium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.potassium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.331806Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": "2022-07-18T00:10:56.332154", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.rbc_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.332348Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.rbc_transfusion", "index": 64, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": "2022-07-18T00:10:56.332154", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "64 of 107 START table model public.rbc_transfusion ............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.332956Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.333556Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": "2022-07-18T00:10:56.332154", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.rbc_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.334008Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.rbc_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.334355Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.335912Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.336664Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.rbc_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.337055Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.rbc_transfusion\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.346968Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.348002Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.348301Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.348511Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.354476Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.354775Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\n\n\n  create  table \"postgres\".\"public\".\"rbc_transfusion__dbt_tmp\"\n  as (\n    -- Retrieves instances of red blood cell transfusions\nwith raw_rbc as (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 375 mL when unit is not documented\n        ELSE 375\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30179,  -- PRBC's\n    30001,  -- Packed RBC's\n    30004   -- Washed PRBC's\n  )\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    225168   -- Packed Red Blood Cells\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_rbc as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    42324,  -- er prbc\n    42588,  -- VICU PRBC\n    42239,  -- CC7 PRBC\n    46407,  -- ED PRBC\n    46612,  -- E.R. prbc\n    46124,  -- er in prbc\n    42740   -- prbc in er\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227070  -- PACU Packed RBC Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_rbc\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE CAST(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN CAST(pre.amount AS numeric) IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_rbc AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\n\n\n  create  table \"postgres\".\"public\".\"rbc_transfusion__dbt_tmp\"\n  as (\n    -- Retrieves instances of red blood cell transfusions\nwith raw_rbc as (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 375 mL when unit is not documented\n        ELSE 375\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30179,  -- PRBC's\n    30001,  -- Packed RBC's\n    30004   -- Washed PRBC's\n  )\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    225168   -- Packed Red Blood Cells\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_rbc as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    42324,  -- er prbc\n    42588,  -- VICU PRBC\n    42239,  -- CC7 PRBC\n    46407,  -- ED PRBC\n    46612,  -- E.R. prbc\n    46124,  -- er in prbc\n    42740   -- prbc in er\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227070  -- PACU Packed RBC Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_rbc\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE CAST(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN CAST(pre.amount AS numeric) IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_rbc AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:56.354983Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.91, "status": "SELECT 62851"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 62851 in 1.91 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.269415Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.279836Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\nalter table \"postgres\".\"public\".\"rbc_transfusion\" rename to \"rbc_transfusion__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\nalter table \"postgres\".\"public\".\"rbc_transfusion\" rename to \"rbc_transfusion__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.280367Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.282421Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.286850Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\nalter table \"postgres\".\"public\".\"rbc_transfusion__dbt_tmp\" rename to \"rbc_transfusion\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\nalter table \"postgres\".\"public\".\"rbc_transfusion__dbt_tmp\" rename to \"rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.287090Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.287856Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.291006Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.291289Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.291500Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.299880Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rbc_transfusion", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rbc_transfusion\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.302299Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rbc_transfusion", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\ndrop table if exists \"postgres\".\"public\".\"rbc_transfusion__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rbc_transfusion\"} */\ndrop table if exists \"postgres\".\"public\".\"rbc_transfusion__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.302534Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.304856Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.307578Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rbc_transfusion: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.307825Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.rbc_transfusion", "execution_time": 1, "index": 64, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": "2022-07-18T00:10:56.332154", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "status": "SELECT 62851", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "64 of 107 OK created table model public.rbc_transfusion ........................ [\u001b[32mSELECT 62851\u001b[0m in 1.98s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.308773Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:58.309158", "node_name": "rbc_transfusion", "node_path": "fluid_balance/rbc_transfusion.sql", "node_started_at": "2022-07-18T00:10:56.332154", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.rbc_transfusion"}, "run_result": {"adapter_response": {"_message": "SELECT 62851", "code": "SELECT", "rows_affected": 62851}, "agate_table": null, "execution_time": 1.975257158279419, "failures": null, "message": "SELECT 62851", "node": {"alias": "rbc_transfusion", "build_path": "target/run/mimic/models/fluid_balance/rbc_transfusion.sql", "checksum": {"checksum": "18e4a97b7ebc6b1116b655c455e704aab2cced6e62994225cbfdec150e0d99ce", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/fluid_balance/rbc_transfusion.sql", "compiled_sql": "-- Retrieves instances of red blood cell transfusions\nwith raw_rbc as (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 375 mL when unit is not documented\n        ELSE 375\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30179,  -- PRBC's\n    30001,  -- Packed RBC's\n    30004   -- Washed PRBC's\n  )\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    225168   -- Packed Red Blood Cells\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_rbc as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    42324,  -- er prbc\n    42588,  -- VICU PRBC\n    42239,  -- CC7 PRBC\n    46407,  -- ED PRBC\n    46612,  -- E.R. prbc\n    46124,  -- er in prbc\n    42740   -- prbc in er\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227070  -- PACU Packed RBC Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_rbc\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE CAST(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN CAST(pre.amount AS numeric) IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_rbc AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6178656, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "fluid_balance", "rbc_transfusion"], "meta": {}, "name": "rbc_transfusion", "original_file_path": "models/fluid_balance/rbc_transfusion.sql", "package_name": "mimic", "patch_path": null, "path": "fluid_balance/rbc_transfusion.sql", "raw_sql": "-- Retrieves instances of red blood cell transfusions\nwith raw_rbc as (\n  SELECT\n      CASE\n        WHEN amount IS NOT NULL THEN amount\n        WHEN stopped IS NOT NULL THEN 0\n        -- impute 375 mL when unit is not documented\n        ELSE 375\n      END AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n  FROM inputevents_cv\n  WHERE itemid IN\n  (\n    30179,  -- PRBC's\n    30001,  -- Packed RBC's\n    30004   -- Washed PRBC's\n  )\n  AND icustay_id IS NOT NULL\n  UNION ALL\n  SELECT amount\n    , amountuom\n    , icustay_id\n    , endtime AS charttime\n  FROM inputevents_mv\n  WHERE itemid in\n  (\n    225168   -- Packed Red Blood Cells\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n),\npre_icu_rbc as (\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_cv\n  WHERE itemid IN (\n    42324,  -- er prbc\n    42588,  -- VICU PRBC\n    42239,  -- CC7 PRBC\n    46407,  -- ED PRBC\n    46612,  -- E.R. prbc\n    46124,  -- er in prbc\n    42740   -- prbc in er\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n  UNION ALL\n  SELECT\n    sum(amount) as amount, icustay_id\n  FROM inputevents_mv\n  WHERE itemid IN (\n    227070  -- PACU Packed RBC Intake\n  )\n  AND amount > 0\n  AND icustay_id IS NOT NULL\n  GROUP BY icustay_id\n),\ncumulative AS (\n  SELECT\n    sum(amount) over (PARTITION BY icustay_id ORDER BY charttime DESC) AS amount\n    , amountuom\n    , icustay_id\n    , charttime\n    , DATETIME_DIFF(lag(charttime) over (PARTITION BY icustay_id ORDER BY charttime ASC), charttime, 'HOUR') AS delta\n  FROM raw_rbc\n)\n-- We consider any transfusions started within 1 hr of the last one\n-- to be part of the same event\nSELECT\n    cm.icustay_id\n  , cm.charttime\n  , ROUND(CAST(cm.amount AS numeric) - CASE\n      WHEN ROW_NUMBER() OVER w = 1 THEN CAST(0 AS numeric)\n      ELSE CAST(lag(cm.amount) OVER w AS numeric)\n    END, 2) AS amount\n  , ROUND(CAST(cm.amount AS numeric) + CASE\n      WHEN CAST(pre.amount AS numeric) IS NULL THEN CAST(0 AS numeric)\n      ELSE CAST(pre.amount AS numeric)\n    END, 2) AS totalamount\n  , cm.amountuom\nFROM cumulative AS cm\nLEFT JOIN pre_icu_rbc AS pre\n  USING (icustay_id)\nWHERE delta IS NULL OR delta < -1\nWINDOW w AS (PARTITION BY cm.icustay_id ORDER BY cm.charttime DESC)\nORDER BY icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"rbc_transfusion\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.rbc_transfusion", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:56.336591Z", "name": "compile", "started_at": "2022-07-18T00:10:56.334325Z"}, {"completed_at": "2022-07-18T00:10:58.307548Z", "name": "execute", "started_at": "2022-07-18T00:10:56.337219Z"}]}, "unique_id": "model.mimic.rbc_transfusion"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.rbc_transfusion", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.309344Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": "2022-07-18T00:10:58.309915", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rr"}, "unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.rr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.309982Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.rr", "index": 65, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": "2022-07-18T00:10:58.309915", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rr"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "65 of 107 START table model public.rr .......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.310728Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.311540Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": "2022-07-18T00:10:58.309915", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rr"}, "unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.rr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.311965Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.rr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.312412Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.313841Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.314596Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.rr"}, "unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.rr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.315051Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.rr\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.327777Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.328319Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.328454Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.328563Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.336612Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.336929Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\n\n\n  create  table \"postgres\".\"public\".\"rr__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the respiration rate of adult patients\n--        only for patients recorded with carevue\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, rr as\n(\n  SELECT valuenum, width_bucket(valuenum, 0, 130, 1400) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (219, 615, 618)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as respiration_rate, count(*)\nFROM rr\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\n\n\n  create  table \"postgres\".\"public\".\"rr__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the respiration rate of adult patients\n--        only for patients recorded with carevue\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, rr as\n(\n  SELECT valuenum, width_bucket(valuenum, 0, 130, 1400) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (219, 615, 618)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as respiration_rate, count(*)\nFROM rr\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.337058Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.16, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.499322Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.504483Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\nalter table \"postgres\".\"public\".\"rr\" rename to \"rr__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\nalter table \"postgres\".\"public\".\"rr\" rename to \"rr__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.504739Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.505616Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.512786Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\nalter table \"postgres\".\"public\".\"rr__dbt_tmp\" rename to \"rr\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\nalter table \"postgres\".\"public\".\"rr__dbt_tmp\" rename to \"rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.513160Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.514071Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.517292Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.517498Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.517917Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.520583Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.523125Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\ndrop table if exists \"postgres\".\"public\".\"rr__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rr\"} */\ndrop table if exists \"postgres\".\"public\".\"rr__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.523543Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.526498Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.531812Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rr: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.532292Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.rr", "execution_time": 0, "index": 65, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": "2022-07-18T00:10:58.309915", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rr"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "65 of 107 OK created table model public.rr ..................................... [\u001b[32mSELECT 0\u001b[0m in 0.22s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.533451Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:10:58.534466", "node_name": "rr", "node_path": "cookbook/rr.sql", "node_started_at": "2022-07-18T00:10:58.309915", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.rr"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.22198176383972168, "failures": null, "message": "SELECT 0", "node": {"alias": "rr", "build_path": "target/run/mimic/models/cookbook/rr.sql", "checksum": {"checksum": "cfade09679e421d46b7d4cb142062b2c285ce675dac68ee30b7892905d73d71f", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/rr.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the respiration rate of adult patients\n--        only for patients recorded with carevue\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, rr as\n(\n  SELECT valuenum, width_bucket(valuenum, 0, 130, 1400) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (219, 615, 618)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as respiration_rate, count(*)\nFROM rr\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6779811, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "rr"], "meta": {}, "name": "rr", "original_file_path": "models/cookbook/rr.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/rr.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the respiration rate of adult patients\n--        only for patients recorded with carevue\n-- MIMIC version: MIMIC-III v1.3\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, rr as\n(\n  SELECT valuenum, width_bucket(valuenum, 0, 130, 1400) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid in (219, 615, 618)\n)\nSELECT round(cast(bucket as numeric) / 10,2) as respiration_rate, count(*)\nFROM rr\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"rr\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.rr", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:58.314507Z", "name": "compile", "started_at": "2022-07-18T00:10:58.312381Z"}, {"completed_at": "2022-07-18T00:10:58.531761Z", "name": "execute", "started_at": "2022-07-18T00:10:58.315807Z"}]}, "unique_id": "model.mimic.rr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.rr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.534615Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": "2022-07-18T00:10:58.535019", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.rrt_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.535113Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.rrt_first_day", "index": 66, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": "2022-07-18T00:10:58.535019", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "66 of 107 START table model public.rrt_first_day ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.535856Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.536426Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": "2022-07-18T00:10:58.535019", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.rrt_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.536554Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.rrt_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.536683Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.538472Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.538959Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.rrt_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.539287Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.rrt_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.548219Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.548780Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.548905Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.549016Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.556449Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.557120Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"rrt_first_day__dbt_tmp\"\n  as (\n    -- determines if patients received any dialysis during their stay\n\n-- Some example aggregate queries which summarize the data here..\n-- This query estimates 6.7% of ICU patients received RRT.\n    -- select count(rrt.icustay_id) as numobs\n    -- , sum(rrt) as numrrt\n    -- , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from rrt\n    -- inner join icustays ie on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    -- on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    -- on rrt.hadm_id = adm.hadm_id\n\n-- This query estimates that 4.6% of first ICU stays received RRT.\n    -- select\n    --   count(rrt.icustay_id) as numobs\n    --   , sum(rrt) as numrrt\n    --   , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from\n    -- (\n    -- select ie.icustay_id, rrt.rrt\n    --   , ROW_NUMBER() over (partition by ie.subject_id order by ie.intime) rn\n    -- from rrt\n    -- inner join icustays ie\n    --   on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    --   on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    --   on rrt.hadm_id = adm.hadm_id\n    -- ) rrt\n    -- where rn = 1\n\nwith cv as\n(\n  select ie.icustay_id\n    , max(\n        case\n          when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n        else 0 end\n        ) as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.itemid in\n    (\n       152 -- \"Dialysis Type\"61449\n      ,148 -- \"Dialysis Access Site\"60335\n      ,149 -- \"Dialysis Access Type\"60030\n      ,146 -- \"Dialysate Flow ml/hr\"57445\n      ,147 -- \"Dialysate Infusing\"56605\n      ,151 -- \"Dialysis Site Appear\"37345\n      ,150 -- \"Dialysis Machine\"27472\n      ,229 -- INV Line#1 [Type]\n      ,235 -- INV Line#2 [Type]\n      ,241 -- INV Line#3 [Type]\n      ,247 -- INV Line#4 [Type]\n      ,253 -- INV Line#5 [Type]\n      ,259 -- INV Line#6 [Type]\n      ,265 -- INV Line#7 [Type]\n      ,271 -- INV Line#8 [Type]\n      ,582 -- Procedures\n    )\n    and ce.value is not null\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where ie.dbsource = 'carevue'\n  group by ie.icustay_id\n)\n, mv_ce as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- Checkboxes\n        226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n      , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n      , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n      -- Numeric values\n      , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n      , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n      , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n      , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n      , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n      , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n      , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n      , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n      , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n      , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n      , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n      , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n      , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n      , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n      , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n      , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n      , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n      , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n      , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n      , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    )\n    and valuenum > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_ie as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join inputevents_mv tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n        227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n      , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n    )\n    and amount > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_de as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join datetimeevents tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- TODO: unsure how to handle \"Last dialysis\"\n      --  225128 -- | Last dialysis                                     | Adm History/FHPA        | datetimeevents     | Date time\n        225318 -- | Dialysis Catheter Cap Change                      | Access Lines - Invasive | datetimeevents     | Date time\n      , 225319 -- | Dialysis Catheter Change over Wire Date           | Access Lines - Invasive | datetimeevents     | Date time\n      , 225321 -- | Dialysis Catheter Dressing Change                 | Access Lines - Invasive | datetimeevents     | Date time\n      , 225322 -- | Dialysis Catheter Insertion Date                  | Access Lines - Invasive | datetimeevents     | Date time\n      , 225324 -- | Dialysis CatheterTubing Change                    | Access Lines - Invasive | datetimeevents     | Date time\n    )\n  group by ie.icustay_id\n)\n, mv_pe as\n(\n    select ie.icustay_id\n      , 1 as RRT\n    FROM icustays ie\n    inner join procedureevents_mv tt\n      on ie.icustay_id = tt.icustay_id\n      and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n      and itemid in\n      (\n          225441 -- | Hemodialysis                                      | 4-Procedures            | procedureevents_mv | Process\n        , 225802 -- | Dialysis - CRRT                                   | Dialysis                | procedureevents_mv | Process\n        , 225803 -- | Dialysis - CVVHD                                  | Dialysis                | procedureevents_mv | Process\n        , 225805 -- | Peritoneal Dialysis                               | Dialysis                | procedureevents_mv | Process\n        , 224270 -- | Dialysis Catheter                                 | Access Lines - Invasive | procedureevents_mv | Process\n        , 225809 -- | Dialysis - CVVHDF                                 | Dialysis                | procedureevents_mv | Process\n        , 225955 -- | Dialysis - SCUF                                   | Dialysis                | procedureevents_mv | Process\n        , 225436 -- | CRRT Filter Change               | Dialysis | procedureevents_mv | Process\n      )\n    group by ie.icustay_id\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n      when cv.RRT = 1 then 1\n      when mv_ce.RRT = 1 then 1\n      when mv_ie.RRT = 1 then 1\n      when mv_de.RRT = 1 then 1\n      when mv_pe.RRT = 1 then 1\n      else 0\n    end as rrt\nFROM icustays ie\nleft join cv\n  on ie.icustay_id = cv.icustay_id\nleft join mv_ce\n  on ie.icustay_id = mv_ce.icustay_id\nleft join mv_ie\n  on ie.icustay_id = mv_ie.icustay_id\nleft join mv_de\n  on ie.icustay_id = mv_de.icustay_id\nleft join mv_pe\n  on ie.icustay_id = mv_pe.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"rrt_first_day__dbt_tmp\"\n  as (\n    -- determines if patients received any dialysis during their stay\n\n-- Some example aggregate queries which summarize the data here..\n-- This query estimates 6.7% of ICU patients received RRT.\n    -- select count(rrt.icustay_id) as numobs\n    -- , sum(rrt) as numrrt\n    -- , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from rrt\n    -- inner join icustays ie on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    -- on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    -- on rrt.hadm_id = adm.hadm_id\n\n-- This query estimates that 4.6% of first ICU stays received RRT.\n    -- select\n    --   count(rrt.icustay_id) as numobs\n    --   , sum(rrt) as numrrt\n    --   , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from\n    -- (\n    -- select ie.icustay_id, rrt.rrt\n    --   , ROW_NUMBER() over (partition by ie.subject_id order by ie.intime) rn\n    -- from rrt\n    -- inner join icustays ie\n    --   on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    --   on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    --   on rrt.hadm_id = adm.hadm_id\n    -- ) rrt\n    -- where rn = 1\n\nwith cv as\n(\n  select ie.icustay_id\n    , max(\n        case\n          when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n        else 0 end\n        ) as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.itemid in\n    (\n       152 -- \"Dialysis Type\"61449\n      ,148 -- \"Dialysis Access Site\"60335\n      ,149 -- \"Dialysis Access Type\"60030\n      ,146 -- \"Dialysate Flow ml/hr\"57445\n      ,147 -- \"Dialysate Infusing\"56605\n      ,151 -- \"Dialysis Site Appear\"37345\n      ,150 -- \"Dialysis Machine\"27472\n      ,229 -- INV Line#1 [Type]\n      ,235 -- INV Line#2 [Type]\n      ,241 -- INV Line#3 [Type]\n      ,247 -- INV Line#4 [Type]\n      ,253 -- INV Line#5 [Type]\n      ,259 -- INV Line#6 [Type]\n      ,265 -- INV Line#7 [Type]\n      ,271 -- INV Line#8 [Type]\n      ,582 -- Procedures\n    )\n    and ce.value is not null\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where ie.dbsource = 'carevue'\n  group by ie.icustay_id\n)\n, mv_ce as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- Checkboxes\n        226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n      , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n      , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n      -- Numeric values\n      , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n      , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n      , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n      , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n      , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n      , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n      , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n      , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n      , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n      , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n      , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n      , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n      , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n      , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n      , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n      , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n      , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n      , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n      , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n      , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    )\n    and valuenum > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_ie as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join inputevents_mv tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n        227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n      , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n    )\n    and amount > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_de as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join datetimeevents tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- TODO: unsure how to handle \"Last dialysis\"\n      --  225128 -- | Last dialysis                                     | Adm History/FHPA        | datetimeevents     | Date time\n        225318 -- | Dialysis Catheter Cap Change                      | Access Lines - Invasive | datetimeevents     | Date time\n      , 225319 -- | Dialysis Catheter Change over Wire Date           | Access Lines - Invasive | datetimeevents     | Date time\n      , 225321 -- | Dialysis Catheter Dressing Change                 | Access Lines - Invasive | datetimeevents     | Date time\n      , 225322 -- | Dialysis Catheter Insertion Date                  | Access Lines - Invasive | datetimeevents     | Date time\n      , 225324 -- | Dialysis CatheterTubing Change                    | Access Lines - Invasive | datetimeevents     | Date time\n    )\n  group by ie.icustay_id\n)\n, mv_pe as\n(\n    select ie.icustay_id\n      , 1 as RRT\n    FROM icustays ie\n    inner join procedureevents_mv tt\n      on ie.icustay_id = tt.icustay_id\n      and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n      and itemid in\n      (\n          225441 -- | Hemodialysis                                      | 4-Procedures            | procedureevents_mv | Process\n        , 225802 -- | Dialysis - CRRT                                   | Dialysis                | procedureevents_mv | Process\n        , 225803 -- | Dialysis - CVVHD                                  | Dialysis                | procedureevents_mv | Process\n        , 225805 -- | Peritoneal Dialysis                               | Dialysis                | procedureevents_mv | Process\n        , 224270 -- | Dialysis Catheter                                 | Access Lines - Invasive | procedureevents_mv | Process\n        , 225809 -- | Dialysis - CVVHDF                                 | Dialysis                | procedureevents_mv | Process\n        , 225955 -- | Dialysis - SCUF                                   | Dialysis                | procedureevents_mv | Process\n        , 225436 -- | CRRT Filter Change               | Dialysis | procedureevents_mv | Process\n      )\n    group by ie.icustay_id\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n      when cv.RRT = 1 then 1\n      when mv_ce.RRT = 1 then 1\n      when mv_ie.RRT = 1 then 1\n      when mv_de.RRT = 1 then 1\n      when mv_pe.RRT = 1 then 1\n      else 0\n    end as rrt\nFROM icustays ie\nleft join cv\n  on ie.icustay_id = cv.icustay_id\nleft join mv_ce\n  on ie.icustay_id = mv_ce.icustay_id\nleft join mv_ie\n  on ie.icustay_id = mv_ie.icustay_id\nleft join mv_de\n  on ie.icustay_id = mv_de.icustay_id\nleft join mv_pe\n  on ie.icustay_id = mv_pe.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:10:58.557344Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.92, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 1.92 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.477501Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.485496Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\nalter table \"postgres\".\"public\".\"rrt_first_day\" rename to \"rrt_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\nalter table \"postgres\".\"public\".\"rrt_first_day\" rename to \"rrt_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.486065Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.487561Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.491515Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\nalter table \"postgres\".\"public\".\"rrt_first_day__dbt_tmp\" rename to \"rrt_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\nalter table \"postgres\".\"public\".\"rrt_first_day__dbt_tmp\" rename to \"rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.491743Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.492537Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.496130Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.496467Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.496732Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.503602Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.rrt_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.rrt_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.505979Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.rrt_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"rrt_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.rrt_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"rrt_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.506232Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.508311Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.511118Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.rrt_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.511369Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.rrt_first_day", "execution_time": 1, "index": 66, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": "2022-07-18T00:10:58.535019", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "66 of 107 OK created table model public.rrt_first_day .......................... [\u001b[32mSELECT 61532\u001b[0m in 1.98s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.512259Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:00.512742", "node_name": "rrt_first_day", "node_path": "firstday/rrt_first_day.sql", "node_started_at": "2022-07-18T00:10:58.535019", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.rrt_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 1.9758672714233398, "failures": null, "message": "SELECT 61532", "node": {"alias": "rrt_first_day", "build_path": "target/run/mimic/models/firstday/rrt_first_day.sql", "checksum": {"checksum": "eb95d96b90481ab076a4ad8351847c6b61200e3a23d2ee5931231172dfc25634", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/rrt_first_day.sql", "compiled_sql": "-- determines if patients received any dialysis during their stay\n\n-- Some example aggregate queries which summarize the data here..\n-- This query estimates 6.7% of ICU patients received RRT.\n    -- select count(rrt.icustay_id) as numobs\n    -- , sum(rrt) as numrrt\n    -- , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from rrt\n    -- inner join icustays ie on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    -- on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    -- on rrt.hadm_id = adm.hadm_id\n\n-- This query estimates that 4.6% of first ICU stays received RRT.\n    -- select\n    --   count(rrt.icustay_id) as numobs\n    --   , sum(rrt) as numrrt\n    --   , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from\n    -- (\n    -- select ie.icustay_id, rrt.rrt\n    --   , ROW_NUMBER() over (partition by ie.subject_id order by ie.intime) rn\n    -- from rrt\n    -- inner join icustays ie\n    --   on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    --   on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    --   on rrt.hadm_id = adm.hadm_id\n    -- ) rrt\n    -- where rn = 1\n\nwith cv as\n(\n  select ie.icustay_id\n    , max(\n        case\n          when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n        else 0 end\n        ) as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.itemid in\n    (\n       152 -- \"Dialysis Type\"61449\n      ,148 -- \"Dialysis Access Site\"60335\n      ,149 -- \"Dialysis Access Type\"60030\n      ,146 -- \"Dialysate Flow ml/hr\"57445\n      ,147 -- \"Dialysate Infusing\"56605\n      ,151 -- \"Dialysis Site Appear\"37345\n      ,150 -- \"Dialysis Machine\"27472\n      ,229 -- INV Line#1 [Type]\n      ,235 -- INV Line#2 [Type]\n      ,241 -- INV Line#3 [Type]\n      ,247 -- INV Line#4 [Type]\n      ,253 -- INV Line#5 [Type]\n      ,259 -- INV Line#6 [Type]\n      ,265 -- INV Line#7 [Type]\n      ,271 -- INV Line#8 [Type]\n      ,582 -- Procedures\n    )\n    and ce.value is not null\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where ie.dbsource = 'carevue'\n  group by ie.icustay_id\n)\n, mv_ce as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- Checkboxes\n        226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n      , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n      , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n      -- Numeric values\n      , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n      , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n      , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n      , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n      , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n      , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n      , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n      , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n      , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n      , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n      , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n      , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n      , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n      , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n      , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n      , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n      , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n      , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n      , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n      , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    )\n    and valuenum > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_ie as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join inputevents_mv tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n        227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n      , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n    )\n    and amount > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_de as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join datetimeevents tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- TODO: unsure how to handle \"Last dialysis\"\n      --  225128 -- | Last dialysis                                     | Adm History/FHPA        | datetimeevents     | Date time\n        225318 -- | Dialysis Catheter Cap Change                      | Access Lines - Invasive | datetimeevents     | Date time\n      , 225319 -- | Dialysis Catheter Change over Wire Date           | Access Lines - Invasive | datetimeevents     | Date time\n      , 225321 -- | Dialysis Catheter Dressing Change                 | Access Lines - Invasive | datetimeevents     | Date time\n      , 225322 -- | Dialysis Catheter Insertion Date                  | Access Lines - Invasive | datetimeevents     | Date time\n      , 225324 -- | Dialysis CatheterTubing Change                    | Access Lines - Invasive | datetimeevents     | Date time\n    )\n  group by ie.icustay_id\n)\n, mv_pe as\n(\n    select ie.icustay_id\n      , 1 as RRT\n    FROM icustays ie\n    inner join procedureevents_mv tt\n      on ie.icustay_id = tt.icustay_id\n      and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n      and itemid in\n      (\n          225441 -- | Hemodialysis                                      | 4-Procedures            | procedureevents_mv | Process\n        , 225802 -- | Dialysis - CRRT                                   | Dialysis                | procedureevents_mv | Process\n        , 225803 -- | Dialysis - CVVHD                                  | Dialysis                | procedureevents_mv | Process\n        , 225805 -- | Peritoneal Dialysis                               | Dialysis                | procedureevents_mv | Process\n        , 224270 -- | Dialysis Catheter                                 | Access Lines - Invasive | procedureevents_mv | Process\n        , 225809 -- | Dialysis - CVVHDF                                 | Dialysis                | procedureevents_mv | Process\n        , 225955 -- | Dialysis - SCUF                                   | Dialysis                | procedureevents_mv | Process\n        , 225436 -- | CRRT Filter Change               | Dialysis | procedureevents_mv | Process\n      )\n    group by ie.icustay_id\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n      when cv.RRT = 1 then 1\n      when mv_ce.RRT = 1 then 1\n      when mv_ie.RRT = 1 then 1\n      when mv_de.RRT = 1 then 1\n      when mv_pe.RRT = 1 then 1\n      else 0\n    end as rrt\nFROM icustays ie\nleft join cv\n  on ie.icustay_id = cv.icustay_id\nleft join mv_ce\n  on ie.icustay_id = mv_ce.icustay_id\nleft join mv_ie\n  on ie.icustay_id = mv_ie.icustay_id\nleft join mv_de\n  on ie.icustay_id = mv_de.icustay_id\nleft join mv_pe\n  on ie.icustay_id = mv_pe.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5400367, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "rrt_first_day"], "meta": {}, "name": "rrt_first_day", "original_file_path": "models/firstday/rrt_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/rrt_first_day.sql", "raw_sql": "-- determines if patients received any dialysis during their stay\n\n-- Some example aggregate queries which summarize the data here..\n-- This query estimates 6.7% of ICU patients received RRT.\n    -- select count(rrt.icustay_id) as numobs\n    -- , sum(rrt) as numrrt\n    -- , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from rrt\n    -- inner join icustays ie on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    -- on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    -- on rrt.hadm_id = adm.hadm_id\n\n-- This query estimates that 4.6% of first ICU stays received RRT.\n    -- select\n    --   count(rrt.icustay_id) as numobs\n    --   , sum(rrt) as numrrt\n    --   , sum(case when rrt=1 then 1 else 0 end)*100.0 / count(rrt.icustay_id)\n    -- as percent_rrt\n    -- from\n    -- (\n    -- select ie.icustay_id, rrt.rrt\n    --   , ROW_NUMBER() over (partition by ie.subject_id order by ie.intime) rn\n    -- from rrt\n    -- inner join icustays ie\n    --   on rrt.icustay_id = ie.icustay_id\n    -- inner join patients p\n    --   on rrt.subject_id = p.subject_id\n    -- and p.dob < ie.intime - interval '1' year\n    -- inner join admissions adm\n    --   on rrt.hadm_id = adm.hadm_id\n    -- ) rrt\n    -- where rn = 1\n\nwith cv as\n(\n  select ie.icustay_id\n    , max(\n        case\n          when ce.itemid in (152,148,149,146,147,151,150) and value is not null then 1\n          when ce.itemid in (229,235,241,247,253,259,265,271) and value = 'Dialysis Line' then 1\n          when ce.itemid = 582 and value in ('CAVH Start','CAVH D/C','CVVHD Start','CVVHD D/C','Hemodialysis st','Hemodialysis end') then 1\n        else 0 end\n        ) as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.itemid in\n    (\n       152 -- \"Dialysis Type\"61449\n      ,148 -- \"Dialysis Access Site\"60335\n      ,149 -- \"Dialysis Access Type\"60030\n      ,146 -- \"Dialysate Flow ml/hr\"57445\n      ,147 -- \"Dialysate Infusing\"56605\n      ,151 -- \"Dialysis Site Appear\"37345\n      ,150 -- \"Dialysis Machine\"27472\n      ,229 -- INV Line#1 [Type]\n      ,235 -- INV Line#2 [Type]\n      ,241 -- INV Line#3 [Type]\n      ,247 -- INV Line#4 [Type]\n      ,253 -- INV Line#5 [Type]\n      ,259 -- INV Line#6 [Type]\n      ,265 -- INV Line#7 [Type]\n      ,271 -- INV Line#8 [Type]\n      ,582 -- Procedures\n    )\n    and ce.value is not null\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where ie.dbsource = 'carevue'\n  group by ie.icustay_id\n)\n, mv_ce as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- Checkboxes\n        226118 -- | Dialysis Catheter placed in outside facility      | Access Lines - Invasive | chartevents        | Checkbox\n      , 227357 -- | Dialysis Catheter Dressing Occlusive              | Access Lines - Invasive | chartevents        | Checkbox\n      , 225725 -- | Dialysis Catheter Tip Cultured                    | Access Lines - Invasive | chartevents        | Checkbox\n      -- Numeric values\n      , 226499 -- | Hemodialysis Output                               | Dialysis                | chartevents        | Numeric\n      , 224154 -- | Dialysate Rate                                    | Dialysis                | chartevents        | Numeric\n      , 225810 -- | Dwell Time (Peritoneal Dialysis)                  | Dialysis                | chartevents        | Numeric\n      , 227639 -- | Medication Added Amount  #2 (Peritoneal Dialysis) | Dialysis                | chartevents        | Numeric\n      , 225183 -- | Current Goal                     | Dialysis | chartevents        | Numeric\n      , 227438 -- | Volume not removed               | Dialysis | chartevents        | Numeric\n      , 224191 -- | Hourly Patient Fluid Removal     | Dialysis | chartevents        | Numeric\n      , 225806 -- | Volume In (PD)                   | Dialysis | chartevents        | Numeric\n      , 225807 -- | Volume Out (PD)                  | Dialysis | chartevents        | Numeric\n      , 228004 -- | Citrate (ACD-A)                  | Dialysis | chartevents        | Numeric\n      , 228005 -- | PBP (Prefilter) Replacement Rate | Dialysis | chartevents        | Numeric\n      , 228006 -- | Post Filter Replacement Rate     | Dialysis | chartevents        | Numeric\n      , 224144 -- | Blood Flow (ml/min)              | Dialysis | chartevents        | Numeric\n      , 224145 -- | Heparin Dose (per hour)          | Dialysis | chartevents        | Numeric\n      , 224149 -- | Access Pressure                  | Dialysis | chartevents        | Numeric\n      , 224150 -- | Filter Pressure                  | Dialysis | chartevents        | Numeric\n      , 224151 -- | Effluent Pressure                | Dialysis | chartevents        | Numeric\n      , 224152 -- | Return Pressure                  | Dialysis | chartevents        | Numeric\n      , 224153 -- | Replacement Rate                 | Dialysis | chartevents        | Numeric\n      , 224404 -- | ART Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 224406 -- | VEN Lumen Volume                 | Dialysis | chartevents        | Numeric\n      , 226457 -- | Ultrafiltrate Output             | Dialysis | chartevents        | Numeric\n    )\n    and valuenum > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_ie as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join inputevents_mv tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n        227536 --\tKCl (CRRT)\tMedications\tinputevents_mv\tSolution\n      , 227525 --\tCalcium Gluconate (CRRT)\tMedications\tinputevents_mv\tSolution\n    )\n    and amount > 0 -- also ensures it's not null\n  group by ie.icustay_id\n)\n, mv_de as\n(\n  select ie.icustay_id\n    , 1 as RRT\n  FROM icustays ie\n  inner join datetimeevents tt\n    on ie.icustay_id = tt.icustay_id\n    and tt.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    and itemid in\n    (\n      -- TODO: unsure how to handle \"Last dialysis\"\n      --  225128 -- | Last dialysis                                     | Adm History/FHPA        | datetimeevents     | Date time\n        225318 -- | Dialysis Catheter Cap Change                      | Access Lines - Invasive | datetimeevents     | Date time\n      , 225319 -- | Dialysis Catheter Change over Wire Date           | Access Lines - Invasive | datetimeevents     | Date time\n      , 225321 -- | Dialysis Catheter Dressing Change                 | Access Lines - Invasive | datetimeevents     | Date time\n      , 225322 -- | Dialysis Catheter Insertion Date                  | Access Lines - Invasive | datetimeevents     | Date time\n      , 225324 -- | Dialysis CatheterTubing Change                    | Access Lines - Invasive | datetimeevents     | Date time\n    )\n  group by ie.icustay_id\n)\n, mv_pe as\n(\n    select ie.icustay_id\n      , 1 as RRT\n    FROM icustays ie\n    inner join procedureevents_mv tt\n      on ie.icustay_id = tt.icustay_id\n      and tt.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n      and itemid in\n      (\n          225441 -- | Hemodialysis                                      | 4-Procedures            | procedureevents_mv | Process\n        , 225802 -- | Dialysis - CRRT                                   | Dialysis                | procedureevents_mv | Process\n        , 225803 -- | Dialysis - CVVHD                                  | Dialysis                | procedureevents_mv | Process\n        , 225805 -- | Peritoneal Dialysis                               | Dialysis                | procedureevents_mv | Process\n        , 224270 -- | Dialysis Catheter                                 | Access Lines - Invasive | procedureevents_mv | Process\n        , 225809 -- | Dialysis - CVVHDF                                 | Dialysis                | procedureevents_mv | Process\n        , 225955 -- | Dialysis - SCUF                                   | Dialysis                | procedureevents_mv | Process\n        , 225436 -- | CRRT Filter Change               | Dialysis | procedureevents_mv | Process\n      )\n    group by ie.icustay_id\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n      when cv.RRT = 1 then 1\n      when mv_ce.RRT = 1 then 1\n      when mv_ie.RRT = 1 then 1\n      when mv_de.RRT = 1 then 1\n      when mv_pe.RRT = 1 then 1\n      else 0\n    end as rrt\nFROM icustays ie\nleft join cv\n  on ie.icustay_id = cv.icustay_id\nleft join mv_ce\n  on ie.icustay_id = mv_ce.icustay_id\nleft join mv_ie\n  on ie.icustay_id = mv_ie.icustay_id\nleft join mv_de\n  on ie.icustay_id = mv_de.icustay_id\nleft join mv_pe\n  on ie.icustay_id = mv_pe.icustay_id\norder by ie.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"rrt_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.rrt_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:10:58.538912Z", "name": "compile", "started_at": "2022-07-18T00:10:58.536668Z"}, {"completed_at": "2022-07-18T00:11:00.511089Z", "name": "execute", "started_at": "2022-07-18T00:10:58.539413Z"}]}, "unique_id": "model.mimic.rrt_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.rrt_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.512917Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": "2022-07-18T00:11:00.513263", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.sbp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.513286Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.sbp", "index": 67, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": "2022-07-18T00:11:00.513263", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "67 of 107 START table model public.sbp ......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.514087Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.514871Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": "2022-07-18T00:11:00.513263", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.sbp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.515201Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.sbp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.515675Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.516912Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.517349Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.sbp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.517875Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.sbp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.526647Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.527673Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.528338Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.529144Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.536882Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.537194Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\n\n\n  create  table \"postgres\".\"public\".\"sbp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sysbp as\n(\n  SELECT width_bucket(valuenum, 0, 300, 300) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      6 -- ABP [Systolic]\n    , 51 -- Arterial BP [Systolic]\n    , 455 -- NBP [Systolic]\n    , 6701 -- Arterial BP #2 [Systolic]\n    , 220050 -- Arterial Blood Pressure systolic\n    , 220179 -- Non Invasive Blood Pressure systolic\n  )\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM sysbp\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\n\n\n  create  table \"postgres\".\"public\".\"sbp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sysbp as\n(\n  SELECT width_bucket(valuenum, 0, 300, 300) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      6 -- ABP [Systolic]\n    , 51 -- Arterial BP [Systolic]\n    , 455 -- NBP [Systolic]\n    , 6701 -- Arterial BP #2 [Systolic]\n    , 220050 -- Arterial Blood Pressure systolic\n    , 220179 -- Non Invasive Blood Pressure systolic\n  )\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM sysbp\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.537335Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.17, "status": "SELECT 155"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 155 in 0.17 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.705441Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.715441Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\nalter table \"postgres\".\"public\".\"sbp\" rename to \"sbp__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\nalter table \"postgres\".\"public\".\"sbp\" rename to \"sbp__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.715684Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.716453Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.720492Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\nalter table \"postgres\".\"public\".\"sbp__dbt_tmp\" rename to \"sbp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\nalter table \"postgres\".\"public\".\"sbp__dbt_tmp\" rename to \"sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.720731Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.721467Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.727593Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.728051Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.728382Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.730079Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sbp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sbp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.733715Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sbp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\ndrop table if exists \"postgres\".\"public\".\"sbp__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sbp\"} */\ndrop table if exists \"postgres\".\"public\".\"sbp__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.734106Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.736426Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.739630Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sbp: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.739892Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.sbp", "execution_time": 0, "index": 67, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": "2022-07-18T00:11:00.513263", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "status": "SELECT 155", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "67 of 107 OK created table model public.sbp .................................... [\u001b[32mSELECT 155\u001b[0m in 0.23s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.740965Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:00.742837", "node_name": "sbp", "node_path": "cookbook/sbp.sql", "node_started_at": "2022-07-18T00:11:00.513263", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.sbp"}, "run_result": {"adapter_response": {"_message": "SELECT 155", "code": "SELECT", "rows_affected": 155}, "agate_table": null, "execution_time": 0.2259521484375, "failures": null, "message": "SELECT 155", "node": {"alias": "sbp", "build_path": "target/run/mimic/models/cookbook/sbp.sql", "checksum": {"checksum": "f95c9e5cc1aef9ccbbfedfd646df4e6b6a7f9430a460cde82370e7f0d7ed1a33", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/sbp.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sysbp as\n(\n  SELECT width_bucket(valuenum, 0, 300, 300) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      6 -- ABP [Systolic]\n    , 51 -- Arterial BP [Systolic]\n    , 455 -- NBP [Systolic]\n    , 6701 -- Arterial BP #2 [Systolic]\n    , 220050 -- Arterial Blood Pressure systolic\n    , 220179 -- Non Invasive Blood Pressure systolic\n  )\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM sysbp\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6755219, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "sbp"], "meta": {}, "name": "sbp", "original_file_path": "models/cookbook/sbp.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/sbp.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the systolic blood pressure for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sysbp as\n(\n  SELECT width_bucket(valuenum, 0, 300, 300) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      6 -- ABP [Systolic]\n    , 51 -- Arterial BP [Systolic]\n    , 455 -- NBP [Systolic]\n    , 6701 -- Arterial BP #2 [Systolic]\n    , 220050 -- Arterial Blood Pressure systolic\n    , 220179 -- Non Invasive Blood Pressure systolic\n  )\n)\nSELECT bucket as systolic_blood_pressure, count(*)\nFROM sysbp\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"sbp\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.sbp", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:00.517310Z", "name": "compile", "started_at": "2022-07-18T00:11:00.515635Z"}, {"completed_at": "2022-07-18T00:11:00.739601Z", "name": "execute", "started_at": "2022-07-18T00:11:00.518158Z"}]}, "unique_id": "model.mimic.sbp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.sbp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.743271Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": "2022-07-18T00:11:00.744167", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.sodium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.744255Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.sodium", "index": 68, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": "2022-07-18T00:11:00.744167", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "68 of 107 START table model public.sodium ...................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.745226Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.746034Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": "2022-07-18T00:11:00.744167", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.sodium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.746274Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.sodium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.746541Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.747576Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.747896Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.sodium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.748040Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.sodium\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.755333Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.755784Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.756057Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.756326Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.763954Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.764402Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\n\n\n  create  table \"postgres\".\"public\".\"sodium__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the blood serum sodium levels for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sodium as\n(\n  SELECT width_bucket(valuenum, 0, 180, 180) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50824, 50983)\n)\nSELECT bucket as sodium, count(*)\nFROM sodium\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\n\n\n  create  table \"postgres\".\"public\".\"sodium__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the blood serum sodium levels for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sodium as\n(\n  SELECT width_bucket(valuenum, 0, 180, 180) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50824, 50983)\n)\nSELECT bucket as sodium, count(*)\nFROM sodium\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.764778Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.16, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.922843Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.930471Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\nalter table \"postgres\".\"public\".\"sodium\" rename to \"sodium__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\nalter table \"postgres\".\"public\".\"sodium\" rename to \"sodium__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.930933Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.931708Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.935583Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\nalter table \"postgres\".\"public\".\"sodium__dbt_tmp\" rename to \"sodium\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\nalter table \"postgres\".\"public\".\"sodium__dbt_tmp\" rename to \"sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.935809Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.936578Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.940008Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.940250Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.940466Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.942270Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sodium", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sodium\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.944555Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sodium", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\ndrop table if exists \"postgres\".\"public\".\"sodium__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sodium\"} */\ndrop table if exists \"postgres\".\"public\".\"sodium__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.944794Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.946781Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.949513Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sodium: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.949900Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.sodium", "execution_time": 0, "index": 68, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": "2022-07-18T00:11:00.744167", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "68 of 107 OK created table model public.sodium ................................. [\u001b[32mSELECT 0\u001b[0m in 0.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.950799Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:00.951247", "node_name": "sodium", "node_path": "cookbook/sodium.sql", "node_started_at": "2022-07-18T00:11:00.744167", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.sodium"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.20488548278808594, "failures": null, "message": "SELECT 0", "node": {"alias": "sodium", "build_path": "target/run/mimic/models/cookbook/sodium.sql", "checksum": {"checksum": "6a0787568d18f7962c03a433e4b38ad69c347842025aab17c863a149552115d2", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/sodium.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the blood serum sodium levels for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sodium as\n(\n  SELECT width_bucket(valuenum, 0, 180, 180) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50824, 50983)\n)\nSELECT bucket as sodium, count(*)\nFROM sodium\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6390533, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "sodium"], "meta": {}, "name": "sodium", "original_file_path": "models/cookbook/sodium.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/sodium.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the blood serum sodium levels for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, sodium as\n(\n  SELECT width_bucket(valuenum, 0, 180, 180) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid IN (50824, 50983)\n)\nSELECT bucket as sodium, count(*)\nFROM sodium\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"sodium\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.sodium", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:00.747854Z", "name": "compile", "started_at": "2022-07-18T00:11:00.746513Z"}, {"completed_at": "2022-07-18T00:11:00.949482Z", "name": "execute", "started_at": "2022-07-18T00:11:00.748153Z"}]}, "unique_id": "model.mimic.sodium"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.sodium", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.951415Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": "2022-07-18T00:11:00.951819", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.temp"}, "unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.temp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.951910Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.temp", "index": 69, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": "2022-07-18T00:11:00.951819", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.temp"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "69 of 107 START table model public.temp ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.952630Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.953274Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": "2022-07-18T00:11:00.951819", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.temp"}, "unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.temp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.953559Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.temp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.953919Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.955189Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.955817Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.temp"}, "unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.temp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.956511Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.temp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.967027Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.967742Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.968040Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.968352Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.973934Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.974818Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\n\n\n  create  table \"postgres\".\"public\".\"temp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the temperature of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, temp as\n(\n  SELECT width_bucket(\n      CASE\n        WHEN itemid IN (223762, 676, 677) THEN valuenum -- celsius\n        WHEN itemid IN (223761, 678, 679) THEN (valuenum - 32) * 5 / 9 --fahrenheit\n      END\n    , 30, 45, 160) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      676 -- Temperature C\n    , 677 -- Temperature C (calc)\n    , 678 -- Temperature F\n    , 679 -- Temperature F (calc)\n    , 223761 -- Temperature Fahrenheit\n    , 223762 -- Temperature Celsius\n  )\n)\nSELECT round((cast(bucket as numeric)/10) + 30,2) as temperature, count(*)\nFROM temp\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\n\n\n  create  table \"postgres\".\"public\".\"temp__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the temperature of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, temp as\n(\n  SELECT width_bucket(\n      CASE\n        WHEN itemid IN (223762, 676, 677) THEN valuenum -- celsius\n        WHEN itemid IN (223761, 678, 679) THEN (valuenum - 32) * 5 / 9 --fahrenheit\n      END\n    , 30, 45, 160) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      676 -- Temperature C\n    , 677 -- Temperature C (calc)\n    , 678 -- Temperature F\n    , 679 -- Temperature F (calc)\n    , 223761 -- Temperature Fahrenheit\n    , 223762 -- Temperature Celsius\n  )\n)\nSELECT round((cast(bucket as numeric)/10) + 30,2) as temperature, count(*)\nFROM temp\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:00.975199Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.17, "status": "SELECT 30"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 30 in 0.17 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.143135Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.150175Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\nalter table \"postgres\".\"public\".\"temp\" rename to \"temp__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\nalter table \"postgres\".\"public\".\"temp\" rename to \"temp__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.150443Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.151222Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.154981Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\nalter table \"postgres\".\"public\".\"temp__dbt_tmp\" rename to \"temp\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\nalter table \"postgres\".\"public\".\"temp__dbt_tmp\" rename to \"temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.155215Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.155965Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.159637Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.159865Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.160091Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.163276Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.temp", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.temp\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.166165Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.temp", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\ndrop table if exists \"postgres\".\"public\".\"temp__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.temp\"} */\ndrop table if exists \"postgres\".\"public\".\"temp__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.166432Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.168696Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.171616Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.temp: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.171871Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.temp", "execution_time": 0, "index": 69, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": "2022-07-18T00:11:00.951819", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.temp"}, "status": "SELECT 30", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "69 of 107 OK created table model public.temp ................................... [\u001b[32mSELECT 30\u001b[0m in 0.22s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.172796Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:01.173263", "node_name": "temp", "node_path": "cookbook/temp.sql", "node_started_at": "2022-07-18T00:11:00.951819", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.temp"}, "run_result": {"adapter_response": {"_message": "SELECT 30", "code": "SELECT", "rows_affected": 30}, "agate_table": null, "execution_time": 0.21956849098205566, "failures": null, "message": "SELECT 30", "node": {"alias": "temp", "build_path": "target/run/mimic/models/cookbook/temp.sql", "checksum": {"checksum": "ebd519173be180835f661900e1ab98abfcbf1dda903480348595132469216343", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/temp.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the temperature of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, temp as\n(\n  SELECT width_bucket(\n      CASE\n        WHEN itemid IN (223762, 676, 677) THEN valuenum -- celsius\n        WHEN itemid IN (223761, 678, 679) THEN (valuenum - 32) * 5 / 9 --fahrenheit\n      END\n    , 30, 45, 160) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      676 -- Temperature C\n    , 677 -- Temperature C (calc)\n    , 678 -- Temperature F\n    , 679 -- Temperature F (calc)\n    , 223761 -- Temperature Fahrenheit\n    , 223762 -- Temperature Celsius\n  )\n)\nSELECT round((cast(bucket as numeric)/10) + 30,2) as temperature, count(*)\nFROM temp\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6472404, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "temp"], "meta": {}, "name": "temp", "original_file_path": "models/cookbook/temp.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/temp.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the temperature of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, temp as\n(\n  SELECT width_bucket(\n      CASE\n        WHEN itemid IN (223762, 676, 677) THEN valuenum -- celsius\n        WHEN itemid IN (223761, 678, 679) THEN (valuenum - 32) * 5 / 9 --fahrenheit\n      END\n    , 30, 45, 160) AS bucket\n  FROM chartevents ce\n  INNER JOIN agetbl\n  ON ce.subject_id = agetbl.subject_id\n  WHERE itemid IN\n  (\n      676 -- Temperature C\n    , 677 -- Temperature C (calc)\n    , 678 -- Temperature F\n    , 679 -- Temperature F (calc)\n    , 223761 -- Temperature Fahrenheit\n    , 223762 -- Temperature Celsius\n  )\n)\nSELECT round((cast(bucket as numeric)/10) + 30,2) as temperature, count(*)\nFROM temp\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"temp\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.temp", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:00.955705Z", "name": "compile", "started_at": "2022-07-18T00:11:00.953869Z"}, {"completed_at": "2022-07-18T00:11:01.171587Z", "name": "execute", "started_at": "2022-07-18T00:11:00.956996Z"}]}, "unique_id": "model.mimic.temp"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.temp", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.173393Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": "2022-07-18T00:11:01.173619", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.uo"}, "unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.173730Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.uo", "index": 70, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": "2022-07-18T00:11:01.173619", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.uo"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "70 of 107 START table model public.uo .......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.174430Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.175286Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": "2022-07-18T00:11:01.173619", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.uo"}, "unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.175579Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.175905Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.177189Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.177753Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.uo"}, "unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.178120Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.186629Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.187422Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.187766Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.187974Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.195022Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.195328Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"uo__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the urine output of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ie.icustay_id, ie.intime\n  FROM icustays ie\n  INNER JOIN patients p\n  ON ie.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ie.intime, p.dob, 'YEAR') > 15\n)\n-- Urine output is measured hourly, but the individual values are not of interest\n-- Usually, you want an overall picture of patient output\n-- This query sums the data over the first 24 hours\n, uo_sum as\n(\n  select oe.icustay_id, sum(oe.VALUE) as urineoutput\n  FROM outputevents oe\n  INNER JOIN agetbl\n  ON oe.icustay_id = agetbl.icustay_id\n  -- and ensure the data occurs during the first day\n  and oe.charttime between agetbl.intime and (DATETIME_ADD(agetbl.intime, INTERVAL '1' DAY)) -- first ICU day\n  WHERE itemid IN\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in Metavision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  227510, -- \"TF Residual\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- \"R Ureteral Stent\"\n  226558  -- \"L Ureteral Stent\"\n  )\n  group by oe.icustay_id\n)\n, uo as\n(\n  SELECT width_bucket(urineoutput, 0, 5000, 50) AS bucket\n  FROM uo_sum\n)\nSELECT bucket*100 as UrineOutput, COUNT(*)\nFROM uo\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"uo__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the urine output of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ie.icustay_id, ie.intime\n  FROM icustays ie\n  INNER JOIN patients p\n  ON ie.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ie.intime, p.dob, 'YEAR') > 15\n)\n-- Urine output is measured hourly, but the individual values are not of interest\n-- Usually, you want an overall picture of patient output\n-- This query sums the data over the first 24 hours\n, uo_sum as\n(\n  select oe.icustay_id, sum(oe.VALUE) as urineoutput\n  FROM outputevents oe\n  INNER JOIN agetbl\n  ON oe.icustay_id = agetbl.icustay_id\n  -- and ensure the data occurs during the first day\n  and oe.charttime between agetbl.intime and (DATETIME_ADD(agetbl.intime, INTERVAL '1' DAY)) -- first ICU day\n  WHERE itemid IN\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in Metavision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  227510, -- \"TF Residual\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- \"R Ureteral Stent\"\n  226558  -- \"L Ureteral Stent\"\n  )\n  group by oe.icustay_id\n)\n, uo as\n(\n  SELECT width_bucket(urineoutput, 0, 5000, 50) AS bucket\n  FROM uo_sum\n)\nSELECT bucket*100 as UrineOutput, COUNT(*)\nFROM uo\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:01.195618Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.21, "status": "SELECT 53"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 53 in 3.21 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.408266Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.414700Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\nalter table \"postgres\".\"public\".\"uo\" rename to \"uo__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\nalter table \"postgres\".\"public\".\"uo\" rename to \"uo__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.414940Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.415774Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.419605Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\nalter table \"postgres\".\"public\".\"uo__dbt_tmp\" rename to \"uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\nalter table \"postgres\".\"public\".\"uo__dbt_tmp\" rename to \"uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.419828Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.420576Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.423911Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.424137Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.424386Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.433859Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.436937Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\ndrop table if exists \"postgres\".\"public\".\"uo__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.uo\"} */\ndrop table if exists \"postgres\".\"public\".\"uo__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.437195Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.438955Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.441531Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.uo: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.442012Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.uo", "execution_time": 3, "index": 70, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": "2022-07-18T00:11:01.173619", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.uo"}, "status": "SELECT 53", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "70 of 107 OK created table model public.uo ..................................... [\u001b[32mSELECT 53\u001b[0m in 3.27s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.443091Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:04.443682", "node_name": "uo", "node_path": "cookbook/uo.sql", "node_started_at": "2022-07-18T00:11:01.173619", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.uo"}, "run_result": {"adapter_response": {"_message": "SELECT 53", "code": "SELECT", "rows_affected": 53}, "agate_table": null, "execution_time": 3.267932176589966, "failures": null, "message": "SELECT 53", "node": {"alias": "uo", "build_path": "target/run/mimic/models/cookbook/uo.sql", "checksum": {"checksum": "1a739859ec2984803384cda293af95de2427be67762228122d81306b4f597b34", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/uo.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the urine output of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ie.icustay_id, ie.intime\n  FROM icustays ie\n  INNER JOIN patients p\n  ON ie.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ie.intime, p.dob, 'YEAR') > 15\n)\n-- Urine output is measured hourly, but the individual values are not of interest\n-- Usually, you want an overall picture of patient output\n-- This query sums the data over the first 24 hours\n, uo_sum as\n(\n  select oe.icustay_id, sum(oe.VALUE) as urineoutput\n  FROM outputevents oe\n  INNER JOIN agetbl\n  ON oe.icustay_id = agetbl.icustay_id\n  -- and ensure the data occurs during the first day\n  and oe.charttime between agetbl.intime and (DATETIME_ADD(agetbl.intime, INTERVAL '1' DAY)) -- first ICU day\n  WHERE itemid IN\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in Metavision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  227510, -- \"TF Residual\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- \"R Ureteral Stent\"\n  226558  -- \"L Ureteral Stent\"\n  )\n  group by oe.icustay_id\n)\n, uo as\n(\n  SELECT width_bucket(urineoutput, 0, 5000, 50) AS bucket\n  FROM uo_sum\n)\nSELECT bucket*100 as UrineOutput, COUNT(*)\nFROM uo\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6862035, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "uo"], "meta": {}, "name": "uo", "original_file_path": "models/cookbook/uo.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/uo.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the urine output of adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ie.icustay_id, ie.intime\n  FROM icustays ie\n  INNER JOIN patients p\n  ON ie.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ie.intime, p.dob, 'YEAR') > 15\n)\n-- Urine output is measured hourly, but the individual values are not of interest\n-- Usually, you want an overall picture of patient output\n-- This query sums the data over the first 24 hours\n, uo_sum as\n(\n  select oe.icustay_id, sum(oe.VALUE) as urineoutput\n  FROM outputevents oe\n  INNER JOIN agetbl\n  ON oe.icustay_id = agetbl.icustay_id\n  -- and ensure the data occurs during the first day\n  and oe.charttime between agetbl.intime and (DATETIME_ADD(agetbl.intime, INTERVAL '1' DAY)) -- first ICU day\n  WHERE itemid IN\n  (\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in Metavision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  227510, -- \"TF Residual\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- \"R Ureteral Stent\"\n  226558  -- \"L Ureteral Stent\"\n  )\n  group by oe.icustay_id\n)\n, uo as\n(\n  SELECT width_bucket(urineoutput, 0, 5000, 50) AS bucket\n  FROM uo_sum\n)\nSELECT bucket*100 as UrineOutput, COUNT(*)\nFROM uo\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"uo\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.uo", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:01.177676Z", "name": "compile", "started_at": "2022-07-18T00:11:01.175867Z"}, {"completed_at": "2022-07-18T00:11:04.441502Z", "name": "execute", "started_at": "2022-07-18T00:11:01.178406Z"}]}, "unique_id": "model.mimic.uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.443891Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": "2022-07-18T00:11:04.444410", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.urine_output", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.444511Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.urine_output", "index": 71, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": "2022-07-18T00:11:04.444410", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "71 of 107 START table model public.urine_output ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.445212Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.446238Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": "2022-07-18T00:11:04.444410", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.urine_output", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.446861Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.urine_output", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.447299Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.448891Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.449543Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.urine_output", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.450543Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.urine_output\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.463683Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.464323Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.464569Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.464769Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.471789Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.472106Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\n\n\n  create  table \"postgres\".\"public\".\"urine_output__dbt_tmp\"\n  as (\n    -- First we drop the table if it exists\nselect oe.icustay_id, oe.charttime\n, SUM(\n    -- we consider input of GU irrigant as a negative volume\n    case when oe.itemid = 227488 then -1*value\n    else value end\n  ) as value\nfrom outputevents oe\nwhere oe.itemid in\n(\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in MetaVision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n)\nand oe.value < 5000 -- sanity check on urine value\nand oe.icustay_id is not null\ngroup by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\n\n\n  create  table \"postgres\".\"public\".\"urine_output__dbt_tmp\"\n  as (\n    -- First we drop the table if it exists\nselect oe.icustay_id, oe.charttime\n, SUM(\n    -- we consider input of GU irrigant as a negative volume\n    case when oe.itemid = 227488 then -1*value\n    else value end\n  ) as value\nfrom outputevents oe\nwhere oe.itemid in\n(\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in MetaVision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n)\nand oe.value < 5000 -- sanity check on urine value\nand oe.icustay_id is not null\ngroup by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:04.472568Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.12, "status": "SELECT 3361794"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3361794 in 3.12 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.592871Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.597238Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\nalter table \"postgres\".\"public\".\"urine_output\" rename to \"urine_output__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\nalter table \"postgres\".\"public\".\"urine_output\" rename to \"urine_output__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.597495Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.600959Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.604963Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\nalter table \"postgres\".\"public\".\"urine_output__dbt_tmp\" rename to \"urine_output\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\nalter table \"postgres\".\"public\".\"urine_output__dbt_tmp\" rename to \"urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.605203Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.606094Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.609206Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.609429Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.609539Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.03, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.03 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.635322Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.638456Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\ndrop table if exists \"postgres\".\"public\".\"urine_output__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output\"} */\ndrop table if exists \"postgres\".\"public\".\"urine_output__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.638923Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.643535Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.646718Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.647150Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.urine_output", "execution_time": 3, "index": 71, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": "2022-07-18T00:11:04.444410", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "status": "SELECT 3361794", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "71 of 107 OK created table model public.urine_output ........................... [\u001b[32mSELECT 3361794\u001b[0m in 3.20s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.648084Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:07.648559", "node_name": "urine_output", "node_path": "fluid_balance/urine_output.sql", "node_started_at": "2022-07-18T00:11:04.444410", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.urine_output"}, "run_result": {"adapter_response": {"_message": "SELECT 3361794", "code": "SELECT", "rows_affected": 3361794}, "agate_table": null, "execution_time": 3.202108383178711, "failures": null, "message": "SELECT 3361794", "node": {"alias": "urine_output", "build_path": "target/run/mimic/models/fluid_balance/urine_output.sql", "checksum": {"checksum": "131fcf423d5140607084d87006e446965b9ce7255f9bf447c3bec4b7a9f1e518", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/fluid_balance/urine_output.sql", "compiled_sql": "-- First we drop the table if it exists\nselect oe.icustay_id, oe.charttime\n, SUM(\n    -- we consider input of GU irrigant as a negative volume\n    case when oe.itemid = 227488 then -1*value\n    else value end\n  ) as value\nfrom outputevents oe\nwhere oe.itemid in\n(\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in MetaVision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n)\nand oe.value < 5000 -- sanity check on urine value\nand oe.icustay_id is not null\ngroup by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6200068, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "fluid_balance", "urine_output"], "meta": {}, "name": "urine_output", "original_file_path": "models/fluid_balance/urine_output.sql", "package_name": "mimic", "patch_path": null, "path": "fluid_balance/urine_output.sql", "raw_sql": "-- First we drop the table if it exists\nselect oe.icustay_id, oe.charttime\n, SUM(\n    -- we consider input of GU irrigant as a negative volume\n    case when oe.itemid = 227488 then -1*value\n    else value end\n  ) as value\nfrom outputevents oe\nwhere oe.itemid in\n(\n  -- these are the most frequently occurring urine output observations in CareVue\n  40055, -- \"Urine Out Foley\"\n  43175, -- \"Urine .\"\n  40069, -- \"Urine Out Void\"\n  40094, -- \"Urine Out Condom Cath\"\n  40715, -- \"Urine Out Suprapubic\"\n  40473, -- \"Urine Out IleoConduit\"\n  40085, -- \"Urine Out Incontinent\"\n  40057, -- \"Urine Out Rt Nephrostomy\"\n  40056, -- \"Urine Out Lt Nephrostomy\"\n  40405, -- \"Urine Out Other\"\n  40428, -- \"Urine Out Straight Cath\"\n  40086,--\tUrine Out Incontinent\n  40096, -- \"Urine Out Ureteral Stent #1\"\n  40651, -- \"Urine Out Ureteral Stent #2\"\n\n  -- these are the most frequently occurring urine output observations in MetaVision\n  226559, -- \"Foley\"\n  226560, -- \"Void\"\n  226561, -- \"Condom Cath\"\n  226584, -- \"Ileoconduit\"\n  226563, -- \"Suprapubic\"\n  226564, -- \"R Nephrostomy\"\n  226565, -- \"L Nephrostomy\"\n  226567, --\tStraight Cath\n  226557, -- R Ureteral Stent\n  226558, -- L Ureteral Stent\n  227488, -- GU Irrigant Volume In\n  227489  -- GU Irrigant/Urine Volume Out\n)\nand oe.value < 5000 -- sanity check on urine value\nand oe.icustay_id is not null\ngroup by icustay_id, charttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"urine_output\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.urine_output", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:04.449465Z", "name": "compile", "started_at": "2022-07-18T00:11:04.447258Z"}, {"completed_at": "2022-07-18T00:11:07.646686Z", "name": "execute", "started_at": "2022-07-18T00:11:04.451213Z"}]}, "unique_id": "model.mimic.urine_output"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.urine_output", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.648737Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": "2022-07-18T00:11:07.649144", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.urine_output_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.649197Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.urine_output_first_day", "index": 72, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": "2022-07-18T00:11:07.649144", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "72 of 107 START table model public.urine_output_first_day ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.649633Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.650835Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": "2022-07-18T00:11:07.649144", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.urine_output_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.651243Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.urine_output_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.651587Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.652834Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.653544Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.urine_output_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.653999Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.urine_output_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.663992Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.664631Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.664977Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.665196Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.672438Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.672894Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"urine_output_first_day__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Purpose: Create a view of the urine output for each ICUSTAY_ID over the first 24 hours.\n-- ------------------------------------------------------------------\n\nselect\n  -- patient identifiers\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n\n  -- volumes associated with urine output ITEMIDs\n  , sum(\n      -- we consider input of GU irrigant as a negative volume\n      case\n        when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n        else oe.value\n    end) as urineoutput\nFROM icustays ie\n-- Join to the outputevents table to get urine output\nleft join outputevents oe\n-- join on all patient identifiers\non ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id\n-- and ensure the data occurs during the first day\nand oe.charttime between ie.intime and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY)) -- first ICU day\nwhere itemid in\n(\n-- these are the most frequently occurring urine output observations in CareVue\n40055, -- \"Urine Out Foley\"\n43175, -- \"Urine .\"\n40069, -- \"Urine Out Void\"\n40094, -- \"Urine Out Condom Cath\"\n40715, -- \"Urine Out Suprapubic\"\n40473, -- \"Urine Out IleoConduit\"\n40085, -- \"Urine Out Incontinent\"\n40057, -- \"Urine Out Rt Nephrostomy\"\n40056, -- \"Urine Out Lt Nephrostomy\"\n40405, -- \"Urine Out Other\"\n40428, -- \"Urine Out Straight Cath\"\n40086,--\tUrine Out Incontinent\n40096, -- \"Urine Out Ureteral Stent #1\"\n40651, -- \"Urine Out Ureteral Stent #2\"\n\n-- these are the most frequently occurring urine output observations in MetaVision\n226559, -- \"Foley\"\n226560, -- \"Void\"\n226561, -- \"Condom Cath\"\n226584, -- \"Ileoconduit\"\n226563, -- \"Suprapubic\"\n226564, -- \"R Nephrostomy\"\n226565, -- \"L Nephrostomy\"\n226567, --\tStraight Cath\n226557, -- R Ureteral Stent\n226558, -- L Ureteral Stent\n227488, -- GU Irrigant Volume In\n227489  -- GU Irrigant/Urine Volume Out\n)\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"urine_output_first_day__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Purpose: Create a view of the urine output for each ICUSTAY_ID over the first 24 hours.\n-- ------------------------------------------------------------------\n\nselect\n  -- patient identifiers\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n\n  -- volumes associated with urine output ITEMIDs\n  , sum(\n      -- we consider input of GU irrigant as a negative volume\n      case\n        when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n        else oe.value\n    end) as urineoutput\nFROM icustays ie\n-- Join to the outputevents table to get urine output\nleft join outputevents oe\n-- join on all patient identifiers\non ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id\n-- and ensure the data occurs during the first day\nand oe.charttime between ie.intime and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY)) -- first ICU day\nwhere itemid in\n(\n-- these are the most frequently occurring urine output observations in CareVue\n40055, -- \"Urine Out Foley\"\n43175, -- \"Urine .\"\n40069, -- \"Urine Out Void\"\n40094, -- \"Urine Out Condom Cath\"\n40715, -- \"Urine Out Suprapubic\"\n40473, -- \"Urine Out IleoConduit\"\n40085, -- \"Urine Out Incontinent\"\n40057, -- \"Urine Out Rt Nephrostomy\"\n40056, -- \"Urine Out Lt Nephrostomy\"\n40405, -- \"Urine Out Other\"\n40428, -- \"Urine Out Straight Cath\"\n40086,--\tUrine Out Incontinent\n40096, -- \"Urine Out Ureteral Stent #1\"\n40651, -- \"Urine Out Ureteral Stent #2\"\n\n-- these are the most frequently occurring urine output observations in MetaVision\n226559, -- \"Foley\"\n226560, -- \"Void\"\n226561, -- \"Condom Cath\"\n226584, -- \"Ileoconduit\"\n226563, -- \"Suprapubic\"\n226564, -- \"R Nephrostomy\"\n226565, -- \"L Nephrostomy\"\n226567, --\tStraight Cath\n226557, -- R Ureteral Stent\n226558, -- L Ureteral Stent\n227488, -- GU Irrigant Volume In\n227489  -- GU Irrigant/Urine Volume Out\n)\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:07.673155Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 3.21, "status": "SELECT 53359"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 53359 in 3.21 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.886854Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.893528Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\nalter table \"postgres\".\"public\".\"urine_output_first_day\" rename to \"urine_output_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\nalter table \"postgres\".\"public\".\"urine_output_first_day\" rename to \"urine_output_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.894107Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.895470Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.900479Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\nalter table \"postgres\".\"public\".\"urine_output_first_day__dbt_tmp\" rename to \"urine_output_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\nalter table \"postgres\".\"public\".\"urine_output_first_day__dbt_tmp\" rename to \"urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.900697Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.901455Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.904327Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.904534Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.904790Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.911441Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.urine_output_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.urine_output_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.914412Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.urine_output_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"urine_output_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.urine_output_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"urine_output_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.914723Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.916769Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.919804Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.urine_output_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.920059Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.urine_output_first_day", "execution_time": 3, "index": 72, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": "2022-07-18T00:11:07.649144", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "status": "SELECT 53359", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "72 of 107 OK created table model public.urine_output_first_day ................. [\u001b[32mSELECT 53359\u001b[0m in 3.27s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.920963Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:10.921445", "node_name": "urine_output_first_day", "node_path": "firstday/urine_output_first_day.sql", "node_started_at": "2022-07-18T00:11:07.649144", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.urine_output_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 53359", "code": "SELECT", "rows_affected": 53359}, "agate_table": null, "execution_time": 3.2703359127044678, "failures": null, "message": "SELECT 53359", "node": {"alias": "urine_output_first_day", "build_path": "target/run/mimic/models/firstday/urine_output_first_day.sql", "checksum": {"checksum": "c834c3f4b5d0bdc0800cf687289d0a8b2b9e81a9b52f634cb5a7b093289b8f01", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/urine_output_first_day.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Purpose: Create a view of the urine output for each ICUSTAY_ID over the first 24 hours.\n-- ------------------------------------------------------------------\n\nselect\n  -- patient identifiers\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n\n  -- volumes associated with urine output ITEMIDs\n  , sum(\n      -- we consider input of GU irrigant as a negative volume\n      case\n        when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n        else oe.value\n    end) as urineoutput\nFROM icustays ie\n-- Join to the outputevents table to get urine output\nleft join outputevents oe\n-- join on all patient identifiers\non ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id\n-- and ensure the data occurs during the first day\nand oe.charttime between ie.intime and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY)) -- first ICU day\nwhere itemid in\n(\n-- these are the most frequently occurring urine output observations in CareVue\n40055, -- \"Urine Out Foley\"\n43175, -- \"Urine .\"\n40069, -- \"Urine Out Void\"\n40094, -- \"Urine Out Condom Cath\"\n40715, -- \"Urine Out Suprapubic\"\n40473, -- \"Urine Out IleoConduit\"\n40085, -- \"Urine Out Incontinent\"\n40057, -- \"Urine Out Rt Nephrostomy\"\n40056, -- \"Urine Out Lt Nephrostomy\"\n40405, -- \"Urine Out Other\"\n40428, -- \"Urine Out Straight Cath\"\n40086,--\tUrine Out Incontinent\n40096, -- \"Urine Out Ureteral Stent #1\"\n40651, -- \"Urine Out Ureteral Stent #2\"\n\n-- these are the most frequently occurring urine output observations in MetaVision\n226559, -- \"Foley\"\n226560, -- \"Void\"\n226561, -- \"Condom Cath\"\n226584, -- \"Ileoconduit\"\n226563, -- \"Suprapubic\"\n226564, -- \"R Nephrostomy\"\n226565, -- \"L Nephrostomy\"\n226567, --\tStraight Cath\n226557, -- R Ureteral Stent\n226558, -- L Ureteral Stent\n227488, -- GU Irrigant Volume In\n227489  -- GU Irrigant/Urine Volume Out\n)\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5500684, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "urine_output_first_day"], "meta": {}, "name": "urine_output_first_day", "original_file_path": "models/firstday/urine_output_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/urine_output_first_day.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Purpose: Create a view of the urine output for each ICUSTAY_ID over the first 24 hours.\n-- ------------------------------------------------------------------\n\nselect\n  -- patient identifiers\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n\n  -- volumes associated with urine output ITEMIDs\n  , sum(\n      -- we consider input of GU irrigant as a negative volume\n      case\n        when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n        else oe.value\n    end) as urineoutput\nFROM icustays ie\n-- Join to the outputevents table to get urine output\nleft join outputevents oe\n-- join on all patient identifiers\non ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id\n-- and ensure the data occurs during the first day\nand oe.charttime between ie.intime and (DATETIME_ADD(ie.intime, INTERVAL '1' DAY)) -- first ICU day\nwhere itemid in\n(\n-- these are the most frequently occurring urine output observations in CareVue\n40055, -- \"Urine Out Foley\"\n43175, -- \"Urine .\"\n40069, -- \"Urine Out Void\"\n40094, -- \"Urine Out Condom Cath\"\n40715, -- \"Urine Out Suprapubic\"\n40473, -- \"Urine Out IleoConduit\"\n40085, -- \"Urine Out Incontinent\"\n40057, -- \"Urine Out Rt Nephrostomy\"\n40056, -- \"Urine Out Lt Nephrostomy\"\n40405, -- \"Urine Out Other\"\n40428, -- \"Urine Out Straight Cath\"\n40086,--\tUrine Out Incontinent\n40096, -- \"Urine Out Ureteral Stent #1\"\n40651, -- \"Urine Out Ureteral Stent #2\"\n\n-- these are the most frequently occurring urine output observations in MetaVision\n226559, -- \"Foley\"\n226560, -- \"Void\"\n226561, -- \"Condom Cath\"\n226584, -- \"Ileoconduit\"\n226563, -- \"Suprapubic\"\n226564, -- \"R Nephrostomy\"\n226565, -- \"L Nephrostomy\"\n226567, --\tStraight Cath\n226557, -- R Ureteral Stent\n226558, -- L Ureteral Stent\n227488, -- GU Irrigant Volume In\n227489  -- GU Irrigant/Urine Volume Out\n)\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"urine_output_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.urine_output_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:07.653472Z", "name": "compile", "started_at": "2022-07-18T00:11:07.651560Z"}, {"completed_at": "2022-07-18T00:11:10.919773Z", "name": "execute", "started_at": "2022-07-18T00:11:07.654300Z"}]}, "unique_id": "model.mimic.urine_output_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.urine_output_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.921664Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": "2022-07-18T00:11:10.922085", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.vasopressin_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.922180Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.vasopressin_dose", "index": 73, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": "2022-07-18T00:11:10.922085", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "73 of 107 START table model public.vasopressin_dose ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.922937Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.923986Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": "2022-07-18T00:11:10.922085", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.vasopressin_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.924247Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.vasopressin_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.924655Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.926980Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.927937Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.vasopressin_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.928353Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.vasopressin_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.941256Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.941974Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.942239Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.942442Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.948794Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.949475Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressin_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of vasopressin administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    -- , CASE WHEN valueuom = 'units/min' THEN rate*60.0 ELSE rate END as vaso_rate\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressin_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of vasopressin administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    -- , CASE WHEN valueuom = 'units/min' THEN rate*60.0 ELSE rate END as vaso_rate\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:10.949910Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 2.06, "status": "SELECT 10537"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 10537 in 2.06 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.007914Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.018076Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\nalter table \"postgres\".\"public\".\"vasopressin_dose\" rename to \"vasopressin_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\nalter table \"postgres\".\"public\".\"vasopressin_dose\" rename to \"vasopressin_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.018334Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.019185Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.023182Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\nalter table \"postgres\".\"public\".\"vasopressin_dose__dbt_tmp\" rename to \"vasopressin_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\nalter table \"postgres\".\"public\".\"vasopressin_dose__dbt_tmp\" rename to \"vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.023430Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.024147Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.027523Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.027753Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.027993Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.030238Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.032710Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressin_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressin_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.032939Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.035415Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.038823Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.039079Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.vasopressin_dose", "execution_time": 2, "index": 73, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": "2022-07-18T00:11:10.922085", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "status": "SELECT 10537", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "73 of 107 OK created table model public.vasopressin_dose ....................... [\u001b[32mSELECT 10537\u001b[0m in 2.12s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.039986Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:13.040458", "node_name": "vasopressin_dose", "node_path": "durations/vasopressin_dose.sql", "node_started_at": "2022-07-18T00:11:10.922085", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.vasopressin_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 10537", "code": "SELECT", "rows_affected": 10537}, "agate_table": null, "execution_time": 2.1162631511688232, "failures": null, "message": "SELECT 10537", "node": {"alias": "vasopressin_dose", "build_path": "target/run/mimic/models/durations/vasopressin_dose.sql", "checksum": {"checksum": "09499d5baad6259a5b4bf2726b86ffb55555cef454c13e95d444c699a70a2668", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/vasopressin_dose.sql", "compiled_sql": "-- This query extracts dose+durations of vasopressin administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    -- , CASE WHEN valueuom = 'units/min' THEN rate*60.0 ELSE rate END as vaso_rate\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5029504, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "vasopressin_dose"], "meta": {}, "name": "vasopressin_dose", "original_file_path": "models/durations/vasopressin_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/vasopressin_dose.sql", "raw_sql": "-- This query extracts dose+durations of vasopressin administration\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n    select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    -- , CASE WHEN valueuom = 'units/min' THEN rate*60.0 ELSE rate END as vaso_rate\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [], "relation_name": "\"postgres\".\"public\".\"vasopressin_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.vasopressin_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:10.927860Z", "name": "compile", "started_at": "2022-07-18T00:11:10.924616Z"}, {"completed_at": "2022-07-18T00:11:13.038792Z", "name": "execute", "started_at": "2022-07-18T00:11:10.928797Z"}]}, "unique_id": "model.mimic.vasopressin_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.vasopressin_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.040628Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": "2022-07-18T00:11:13.041071", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.vasopressin_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.041132Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.vasopressin_durations", "index": 74, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": "2022-07-18T00:11:13.041071", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "74 of 107 START table model public.vasopressin_durations ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.041837Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.042614Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": "2022-07-18T00:11:13.041071", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.vasopressin_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.043148Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.vasopressin_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.043503Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.044923Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.045733Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.vasopressin_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.046117Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.vasopressin_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.057982Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.058947Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.059226Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.059563Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.064870Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.065529Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressin_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of vasopressin administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressin_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of vasopressin administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:13.065730Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.96, "status": "SELECT 4190"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 4190 in 1.96 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.021224Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.029197Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressin_durations\" rename to \"vasopressin_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressin_durations\" rename to \"vasopressin_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.029897Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.031202Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.035133Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressin_durations__dbt_tmp\" rename to \"vasopressin_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressin_durations__dbt_tmp\" rename to \"vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.035369Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.036358Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.039748Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.039982Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.040301Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.050077Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressin_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressin_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.052633Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressin_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressin_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressin_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressin_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.052874Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.055052Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.058023Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressin_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.058308Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.vasopressin_durations", "execution_time": 2, "index": 74, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": "2022-07-18T00:11:13.041071", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "status": "SELECT 4190", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "74 of 107 OK created table model public.vasopressin_durations .................. [\u001b[32mSELECT 4190\u001b[0m in 2.02s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.059319Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:15.059898", "node_name": "vasopressin_durations", "node_path": "durations/vasopressin_durations.sql", "node_started_at": "2022-07-18T00:11:13.041071", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.vasopressin_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 4190", "code": "SELECT", "rows_affected": 4190}, "agate_table": null, "execution_time": 2.0168135166168213, "failures": null, "message": "SELECT 4190", "node": {"alias": "vasopressin_durations", "build_path": "target/run/mimic/models/durations/vasopressin_durations.sql", "checksum": {"checksum": "721587ffba3ec3e5a202a318688b0b00b0adaaa3494c693f30d695d426015e35", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/vasopressin_durations.sql", "compiled_sql": "-- This query extracts durations of vasopressin administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5004666, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "vasopressin_durations"], "meta": {}, "name": "vasopressin_durations", "original_file_path": "models/durations/vasopressin_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/vasopressin_durations.sql", "raw_sql": "-- This query extracts durations of vasopressin administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30051 then 1 else 0 end) as vaso -- vasopressin\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30051 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30051 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30051 then rate else null end) as vaso_rate\n    , max(case when itemid = 30051 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30051 -- vasopressin\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 222315 -- vasopressin\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"vasopressin_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.vasopressin_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:13.045651Z", "name": "compile", "started_at": "2022-07-18T00:11:13.043473Z"}, {"completed_at": "2022-07-18T00:11:15.057990Z", "name": "execute", "started_at": "2022-07-18T00:11:13.046496Z"}]}, "unique_id": "model.mimic.vasopressin_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.vasopressin_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.060078Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": "2022-07-18T00:11:15.060612", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.vasopressor_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.060682Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.vasopressor_durations", "index": 75, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": "2022-07-18T00:11:15.060612", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "75 of 107 START table model public.vasopressor_durations ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.061597Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.062587Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": "2022-07-18T00:11:15.060612", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.vasopressor_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.062962Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.vasopressor_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.063471Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.064900Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.066048Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.vasopressor_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.066533Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.vasopressor_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.080428Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.081275Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.081448Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.081804Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.088477Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.088767Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressor_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of vasopressor administration\n-- It groups together any administration of the below list of drugs:\n--  norepinephrine - 30047,30120,221906\n--  epinephrine - 30044,30119,30309,221289\n--  phenylephrine - 30127,30128,221749\n--  vasopressin - 30051,222315 (42273, 42802 also for 2 patients)\n--  dopamine - 30043,30307,221662\n--  dobutamine - 30042,30306,221653\n--  milrinone - 30125,221986\n\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table\n-- by grouping using ICUSTAY_ID\n\n-- select only the ITEMIDs from the inputevents_cv table related to vasopressors\nwith io_cv as\n(\n  select\n    icustay_id, charttime, itemid, stopped\n    -- ITEMIDs (42273, 42802) accidentally store rate in amount column\n    , case\n        when itemid in (42273, 42802)\n          then amount\n        else rate\n      end as rate\n    , case\n        when itemid in (42273, 42802)\n          then rate\n        else amount\n      end as amount\n  FROM inputevents_cv\n  where itemid in\n  (\n    30047,30120,30044,30119,30309,30127\n  , 30128,30051,30043,30307,30042,30306,30125\n  , 42273, 42802\n  )\n)\n-- select only the ITEMIDs from the inputevents_mv table related to vasopressors\n, io_mv as\n(\n  select\n    icustay_id, linkorderid, starttime, endtime\n  FROM inputevents_mv io\n  -- Subselect the vasopressor ITEMIDs\n  where itemid in\n  (\n  221906,221289,221749,222315,221662,221653,221986\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n, vasocv1 as\n(\n  select\n    icustay_id, charttime, itemid\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , 1 as vaso\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when rate is not null then 1 else 0 end) as vaso_null\n    , max(rate) as vaso_rate\n    , max(amount) as vaso_amount\n\n  from io_cv\n  group by icustay_id, charttime, itemid\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id, itemid order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, itemid, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    , itemid\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, itemid, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  , itemid\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, itemid, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n-- we do not group by ITEMID in below query\n-- this is because we want to collapse all vasopressors together\n, vasocv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasocv s1\nINNER JOIN vasocv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasocv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasocv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\n-- now we extract the associated data for metavision patients\n-- do not need to group by itemid because we group by linkorderid\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  from io_mv\n  group by icustay_id, linkorderid\n)\n, vasomv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasomv s1\nINNER JOIN vasomv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasomv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasomv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv_grp\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv_grp\n\norder by icustay_id, vasonum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"vasopressor_durations__dbt_tmp\"\n  as (\n    -- This query extracts durations of vasopressor administration\n-- It groups together any administration of the below list of drugs:\n--  norepinephrine - 30047,30120,221906\n--  epinephrine - 30044,30119,30309,221289\n--  phenylephrine - 30127,30128,221749\n--  vasopressin - 30051,222315 (42273, 42802 also for 2 patients)\n--  dopamine - 30043,30307,221662\n--  dobutamine - 30042,30306,221653\n--  milrinone - 30125,221986\n\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table\n-- by grouping using ICUSTAY_ID\n\n-- select only the ITEMIDs from the inputevents_cv table related to vasopressors\nwith io_cv as\n(\n  select\n    icustay_id, charttime, itemid, stopped\n    -- ITEMIDs (42273, 42802) accidentally store rate in amount column\n    , case\n        when itemid in (42273, 42802)\n          then amount\n        else rate\n      end as rate\n    , case\n        when itemid in (42273, 42802)\n          then rate\n        else amount\n      end as amount\n  FROM inputevents_cv\n  where itemid in\n  (\n    30047,30120,30044,30119,30309,30127\n  , 30128,30051,30043,30307,30042,30306,30125\n  , 42273, 42802\n  )\n)\n-- select only the ITEMIDs from the inputevents_mv table related to vasopressors\n, io_mv as\n(\n  select\n    icustay_id, linkorderid, starttime, endtime\n  FROM inputevents_mv io\n  -- Subselect the vasopressor ITEMIDs\n  where itemid in\n  (\n  221906,221289,221749,222315,221662,221653,221986\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n, vasocv1 as\n(\n  select\n    icustay_id, charttime, itemid\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , 1 as vaso\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when rate is not null then 1 else 0 end) as vaso_null\n    , max(rate) as vaso_rate\n    , max(amount) as vaso_amount\n\n  from io_cv\n  group by icustay_id, charttime, itemid\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id, itemid order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, itemid, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    , itemid\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, itemid, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  , itemid\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, itemid, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n-- we do not group by ITEMID in below query\n-- this is because we want to collapse all vasopressors together\n, vasocv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasocv s1\nINNER JOIN vasocv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasocv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasocv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\n-- now we extract the associated data for metavision patients\n-- do not need to group by itemid because we group by linkorderid\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  from io_mv\n  group by icustay_id, linkorderid\n)\n, vasomv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasomv s1\nINNER JOIN vasomv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasomv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasomv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv_grp\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv_grp\n\norder by icustay_id, vasonum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:15.089034Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 8.91, "status": "SELECT 38832"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 38832 in 8.91 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:23.998455Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.004215Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressor_durations\" rename to \"vasopressor_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressor_durations\" rename to \"vasopressor_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.004482Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.005691Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.009070Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressor_durations__dbt_tmp\" rename to \"vasopressor_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\nalter table \"postgres\".\"public\".\"vasopressor_durations__dbt_tmp\" rename to \"vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.009274Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.010075Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.012906Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.013113Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.013233Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.014412Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vasopressor_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vasopressor_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.016312Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vasopressor_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressor_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vasopressor_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"vasopressor_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.016521Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.020518Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.023822Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vasopressor_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.024079Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.vasopressor_durations", "execution_time": 8, "index": 75, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": "2022-07-18T00:11:15.060612", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "status": "SELECT 38832", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "75 of 107 OK created table model public.vasopressor_durations .................. [\u001b[32mSELECT 38832\u001b[0m in 8.96s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.024999Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:24.025485", "node_name": "vasopressor_durations", "node_path": "durations/vasopressor_durations.sql", "node_started_at": "2022-07-18T00:11:15.060612", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.vasopressor_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 38832", "code": "SELECT", "rows_affected": 38832}, "agate_table": null, "execution_time": 8.962647914886475, "failures": null, "message": "SELECT 38832", "node": {"alias": "vasopressor_durations", "build_path": "target/run/mimic/models/durations/vasopressor_durations.sql", "checksum": {"checksum": "75e60d1f0141a78aae3197ab5d675b6c66a9fa82d2efe911604782d08795cd9c", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/vasopressor_durations.sql", "compiled_sql": "-- This query extracts durations of vasopressor administration\n-- It groups together any administration of the below list of drugs:\n--  norepinephrine - 30047,30120,221906\n--  epinephrine - 30044,30119,30309,221289\n--  phenylephrine - 30127,30128,221749\n--  vasopressin - 30051,222315 (42273, 42802 also for 2 patients)\n--  dopamine - 30043,30307,221662\n--  dobutamine - 30042,30306,221653\n--  milrinone - 30125,221986\n\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table\n-- by grouping using ICUSTAY_ID\n\n-- select only the ITEMIDs from the inputevents_cv table related to vasopressors\nwith io_cv as\n(\n  select\n    icustay_id, charttime, itemid, stopped\n    -- ITEMIDs (42273, 42802) accidentally store rate in amount column\n    , case\n        when itemid in (42273, 42802)\n          then amount\n        else rate\n      end as rate\n    , case\n        when itemid in (42273, 42802)\n          then rate\n        else amount\n      end as amount\n  FROM inputevents_cv\n  where itemid in\n  (\n    30047,30120,30044,30119,30309,30127\n  , 30128,30051,30043,30307,30042,30306,30125\n  , 42273, 42802\n  )\n)\n-- select only the ITEMIDs from the inputevents_mv table related to vasopressors\n, io_mv as\n(\n  select\n    icustay_id, linkorderid, starttime, endtime\n  FROM inputevents_mv io\n  -- Subselect the vasopressor ITEMIDs\n  where itemid in\n  (\n  221906,221289,221749,222315,221662,221653,221986\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n, vasocv1 as\n(\n  select\n    icustay_id, charttime, itemid\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , 1 as vaso\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when rate is not null then 1 else 0 end) as vaso_null\n    , max(rate) as vaso_rate\n    , max(amount) as vaso_amount\n\n  from io_cv\n  group by icustay_id, charttime, itemid\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id, itemid order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, itemid, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    , itemid\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, itemid, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  , itemid\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, itemid, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n-- we do not group by ITEMID in below query\n-- this is because we want to collapse all vasopressors together\n, vasocv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasocv s1\nINNER JOIN vasocv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasocv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasocv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\n-- now we extract the associated data for metavision patients\n-- do not need to group by itemid because we group by linkorderid\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  from io_mv\n  group by icustay_id, linkorderid\n)\n, vasomv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasomv s1\nINNER JOIN vasomv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasomv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasomv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv_grp\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv_grp\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4747522, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "vasopressor_durations"], "meta": {}, "name": "vasopressor_durations", "original_file_path": "models/durations/vasopressor_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/vasopressor_durations.sql", "raw_sql": "-- This query extracts durations of vasopressor administration\n-- It groups together any administration of the below list of drugs:\n--  norepinephrine - 30047,30120,221906\n--  epinephrine - 30044,30119,30309,221289\n--  phenylephrine - 30127,30128,221749\n--  vasopressin - 30051,222315 (42273, 42802 also for 2 patients)\n--  dopamine - 30043,30307,221662\n--  dobutamine - 30042,30306,221653\n--  milrinone - 30125,221986\n\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table\n-- by grouping using ICUSTAY_ID\n\n-- select only the ITEMIDs from the inputevents_cv table related to vasopressors\nwith io_cv as\n(\n  select\n    icustay_id, charttime, itemid, stopped\n    -- ITEMIDs (42273, 42802) accidentally store rate in amount column\n    , case\n        when itemid in (42273, 42802)\n          then amount\n        else rate\n      end as rate\n    , case\n        when itemid in (42273, 42802)\n          then rate\n        else amount\n      end as amount\n  FROM inputevents_cv\n  where itemid in\n  (\n    30047,30120,30044,30119,30309,30127\n  , 30128,30051,30043,30307,30042,30306,30125\n  , 42273, 42802\n  )\n)\n-- select only the ITEMIDs from the inputevents_mv table related to vasopressors\n, io_mv as\n(\n  select\n    icustay_id, linkorderid, starttime, endtime\n  FROM inputevents_mv io\n  -- Subselect the vasopressor ITEMIDs\n  where itemid in\n  (\n  221906,221289,221749,222315,221662,221653,221986\n  )\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n, vasocv1 as\n(\n  select\n    icustay_id, charttime, itemid\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , 1 as vaso\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when rate is not null then 1 else 0 end) as vaso_null\n    , max(rate) as vaso_rate\n    , max(amount) as vaso_amount\n\n  from io_cv\n  group by icustay_id, charttime, itemid\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id, itemid order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, itemid, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    , itemid\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, itemid, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, itemid, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  , itemid\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, itemid, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n-- we do not group by ITEMID in below query\n-- this is because we want to collapse all vasopressors together\n, vasocv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasocv s1\nINNER JOIN vasocv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasocv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasocv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\n-- now we extract the associated data for metavision patients\n-- do not need to group by itemid because we group by linkorderid\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  from io_mv\n  group by icustay_id, linkorderid\n)\n, vasomv_grp as\n(\nSELECT\n  s1.icustay_id,\n  s1.starttime,\n  MIN(t1.endtime) AS endtime\nFROM vasomv s1\nINNER JOIN vasomv t1\n  ON  s1.icustay_id = t1.icustay_id\n  AND s1.starttime <= t1.endtime\n  AND NOT EXISTS(SELECT * FROM vasomv t2\n                 WHERE t1.icustay_id = t2.icustay_id\n                 AND t1.endtime >= t2.starttime\n                 AND t1.endtime < t2.endtime)\nWHERE NOT EXISTS(SELECT * FROM vasomv s2\n                 WHERE s1.icustay_id = s2.icustay_id\n                 AND s1.starttime > s2.starttime\n                 AND s1.starttime <= s2.endtime)\nGROUP BY s1.icustay_id, s1.starttime\nORDER BY s1.icustay_id, s1.starttime\n)\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv_grp\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv_grp\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"postgres\".\"public\".\"vasopressor_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.vasopressor_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:15.065924Z", "name": "compile", "started_at": "2022-07-18T00:11:15.063409Z"}, {"completed_at": "2022-07-18T00:11:24.023791Z", "name": "execute", "started_at": "2022-07-18T00:11:15.066807Z"}]}, "unique_id": "model.mimic.vasopressor_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.vasopressor_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.025755Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": "2022-07-18T00:11:24.026190", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.ventilation_classification", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.026282Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.ventilation_classification", "index": 76, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": "2022-07-18T00:11:24.026190", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "76 of 107 START table model public.ventilation_classification .................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.027078Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.027879Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": "2022-07-18T00:11:24.026190", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.ventilation_classification", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.028326Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.ventilation_classification", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.028746Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.030194Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.030902Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.ventilation_classification", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.031190Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.ventilation_classification\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.040497Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.041930Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.042316Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.042977Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.049126Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.049390Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_classification__dbt_tmp\"\n  as (\n    -- Identify The presence of a mechanical ventilation using settings\nselect\n  icustay_id, charttime\n  -- case statement determining whether it is an instance of mech vent\n  , max(\n    case\n      when itemid is null or value is null then 0 -- can't have null values\n      when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded\n      when itemid = 223848 and value != 'Other' THEN 1\n      when itemid = 223849 then 1 -- ventilator mode\n      when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator\n      when itemid in\n        (\n        445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n        , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n        , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n        , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n        , 543 -- PlateauPressure\n        , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n        , 60,437,505,506,686,220339,224700 -- PEEP\n        , 3459 -- high pressure relief\n        , 501,502,503,224702 -- PCV\n        , 223,667,668,669,670,671,672 -- TCPCV\n        , 224701 -- PSVlevel\n        )\n        THEN 1\n      else 0\n    end\n    ) as MechVent\n    , max(\n      case\n        -- initiation of oxygen therapy indicates the ventilation has ended\n        when itemid = 226732 and value in\n        (\n          'Nasal cannula', -- 153714 observations\n          'Face tent', -- 24601 observations\n          'Aerosol-cool', -- 24560 observations\n          'Trach mask ', -- 16435 observations\n          'High flow neb', -- 10785 observations\n          'Non-rebreather', -- 5182 observations\n          'Venti mask ', -- 1947 observations\n          'Medium conc mask ', -- 1888 observations\n          'T-piece', -- 1135 observations\n          'High flow nasal cannula', -- 925 observations\n          'Ultrasonic neb', -- 9 observations\n          'Vapomist' -- 3 observations\n        ) then 1\n        when itemid = 467 and value in\n        (\n          'Cannula', -- 278252 observations\n          'Nasal Cannula', -- 248299 observations\n          -- 'None', -- 95498 observations\n          'Face Tent', -- 35766 observations\n          'Aerosol-Cool', -- 33919 observations\n          'Trach Mask', -- 32655 observations\n          'Hi Flow Neb', -- 14070 observations\n          'Non-Rebreather', -- 10856 observations\n          'Venti Mask', -- 4279 observations\n          'Medium Conc Mask', -- 2114 observations\n          'Vapotherm', -- 1655 observations\n          'T-Piece', -- 779 observations\n          'Hood', -- 670 observations\n          'Hut', -- 150 observations\n          'TranstrachealCat', -- 78 observations\n          'Heated Neb', -- 37 observations\n          'Ultrasonic Neb' -- 2 observations\n        ) then 1\n      else 0\n      end\n    ) as OxygenTherapy\n    , max(\n      case when itemid is null or value is null then 0\n        -- extubated indicates ventilation event has ended\n        when itemid = 640 and value = 'Extubated' then 1\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as Extubated\n    , max(\n      case when itemid is null or value is null then 0\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as SelfExtubated\nfrom chartevents ce\nwhere ce.value is not null\n-- exclude rows marked as error\nand (ce.error != 1 or ce.error IS NULL)\nand itemid in\n(\n    -- the below are settings used to indicate ventilation\n      720, 223849 -- vent mode\n    , 223848 -- vent type\n    , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n    , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n    , 218,436,535,444,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean (\"RespPressure\")\n    , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n    , 543 -- PlateauPressure\n    , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n    , 60,437,505,506,686,220339,224700 -- PEEP\n    , 3459 -- high pressure relief\n    , 501,502,503,224702 -- PCV\n    , 223,667,668,669,670,671,672 -- TCPCV\n    , 224701 -- PSVlevel\n\n    -- the below are settings used to indicate extubation\n    , 640 -- extubated\n\n    -- the below indicate oxygen/NIV, i.e. the end of a mechanical vent event\n    , 468 -- O2 Delivery Device#2\n    , 469 -- O2 Delivery Mode\n    , 470 -- O2 Flow (lpm)\n    , 471 -- O2 Flow (lpm) #2\n    , 227287 -- O2 Flow (additional cannula)\n    , 226732 -- O2 Delivery Device(s)\n    , 223834 -- O2 Flow\n\n    -- used in both oxygen + vent calculation\n    , 467 -- O2 Delivery Device\n)\ngroup by icustay_id, charttime\nUNION DISTINCT\n-- add in the extubation flags from procedureevents_mv\n-- note that we only need the start time for the extubation\n-- (extubation is always charted as ending 1 minute after it started)\nselect\n  icustay_id, starttime as charttime\n  , 0 as MechVent\n  , 0 as OxygenTherapy\n  , 1 as Extubated\n  , case when itemid = 225468 then 1 else 0 end as SelfExtubated\nfrom procedureevents_mv\nwhere itemid in\n(\n  227194 -- \"Extubation\"\n, 225468 -- \"Unplanned Extubation (patient-initiated)\"\n, 225477 -- \"Unplanned Extubation (non-patient initiated)\"\n)\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_classification__dbt_tmp\"\n  as (\n    -- Identify The presence of a mechanical ventilation using settings\nselect\n  icustay_id, charttime\n  -- case statement determining whether it is an instance of mech vent\n  , max(\n    case\n      when itemid is null or value is null then 0 -- can't have null values\n      when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded\n      when itemid = 223848 and value != 'Other' THEN 1\n      when itemid = 223849 then 1 -- ventilator mode\n      when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator\n      when itemid in\n        (\n        445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n        , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n        , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n        , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n        , 543 -- PlateauPressure\n        , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n        , 60,437,505,506,686,220339,224700 -- PEEP\n        , 3459 -- high pressure relief\n        , 501,502,503,224702 -- PCV\n        , 223,667,668,669,670,671,672 -- TCPCV\n        , 224701 -- PSVlevel\n        )\n        THEN 1\n      else 0\n    end\n    ) as MechVent\n    , max(\n      case\n        -- initiation of oxygen therapy indicates the ventilation has ended\n        when itemid = 226732 and value in\n        (\n          'Nasal cannula', -- 153714 observations\n          'Face tent', -- 24601 observations\n          'Aerosol-cool', -- 24560 observations\n          'Trach mask ', -- 16435 observations\n          'High flow neb', -- 10785 observations\n          'Non-rebreather', -- 5182 observations\n          'Venti mask ', -- 1947 observations\n          'Medium conc mask ', -- 1888 observations\n          'T-piece', -- 1135 observations\n          'High flow nasal cannula', -- 925 observations\n          'Ultrasonic neb', -- 9 observations\n          'Vapomist' -- 3 observations\n        ) then 1\n        when itemid = 467 and value in\n        (\n          'Cannula', -- 278252 observations\n          'Nasal Cannula', -- 248299 observations\n          -- 'None', -- 95498 observations\n          'Face Tent', -- 35766 observations\n          'Aerosol-Cool', -- 33919 observations\n          'Trach Mask', -- 32655 observations\n          'Hi Flow Neb', -- 14070 observations\n          'Non-Rebreather', -- 10856 observations\n          'Venti Mask', -- 4279 observations\n          'Medium Conc Mask', -- 2114 observations\n          'Vapotherm', -- 1655 observations\n          'T-Piece', -- 779 observations\n          'Hood', -- 670 observations\n          'Hut', -- 150 observations\n          'TranstrachealCat', -- 78 observations\n          'Heated Neb', -- 37 observations\n          'Ultrasonic Neb' -- 2 observations\n        ) then 1\n      else 0\n      end\n    ) as OxygenTherapy\n    , max(\n      case when itemid is null or value is null then 0\n        -- extubated indicates ventilation event has ended\n        when itemid = 640 and value = 'Extubated' then 1\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as Extubated\n    , max(\n      case when itemid is null or value is null then 0\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as SelfExtubated\nfrom chartevents ce\nwhere ce.value is not null\n-- exclude rows marked as error\nand (ce.error != 1 or ce.error IS NULL)\nand itemid in\n(\n    -- the below are settings used to indicate ventilation\n      720, 223849 -- vent mode\n    , 223848 -- vent type\n    , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n    , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n    , 218,436,535,444,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean (\"RespPressure\")\n    , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n    , 543 -- PlateauPressure\n    , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n    , 60,437,505,506,686,220339,224700 -- PEEP\n    , 3459 -- high pressure relief\n    , 501,502,503,224702 -- PCV\n    , 223,667,668,669,670,671,672 -- TCPCV\n    , 224701 -- PSVlevel\n\n    -- the below are settings used to indicate extubation\n    , 640 -- extubated\n\n    -- the below indicate oxygen/NIV, i.e. the end of a mechanical vent event\n    , 468 -- O2 Delivery Device#2\n    , 469 -- O2 Delivery Mode\n    , 470 -- O2 Flow (lpm)\n    , 471 -- O2 Flow (lpm) #2\n    , 227287 -- O2 Flow (additional cannula)\n    , 226732 -- O2 Delivery Device(s)\n    , 223834 -- O2 Flow\n\n    -- used in both oxygen + vent calculation\n    , 467 -- O2 Delivery Device\n)\ngroup by icustay_id, charttime\nUNION DISTINCT\n-- add in the extubation flags from procedureevents_mv\n-- note that we only need the start time for the extubation\n-- (extubation is always charted as ending 1 minute after it started)\nselect\n  icustay_id, starttime as charttime\n  , 0 as MechVent\n  , 0 as OxygenTherapy\n  , 1 as Extubated\n  , case when itemid = 225468 then 1 else 0 end as SelfExtubated\nfrom procedureevents_mv\nwhere itemid in\n(\n  227194 -- \"Extubation\"\n, 225468 -- \"Unplanned Extubation (patient-initiated)\"\n, 225477 -- \"Unplanned Extubation (non-patient initiated)\"\n)\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.049532Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.05, "status": "SELECT 8642"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 8642 in 0.05 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.100426Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.109904Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\nalter table \"postgres\".\"public\".\"ventilation_classification\" rename to \"ventilation_classification__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\nalter table \"postgres\".\"public\".\"ventilation_classification\" rename to \"ventilation_classification__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.110266Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.111160Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.116363Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\nalter table \"postgres\".\"public\".\"ventilation_classification__dbt_tmp\" rename to \"ventilation_classification\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\nalter table \"postgres\".\"public\".\"ventilation_classification__dbt_tmp\" rename to \"ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.116726Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.117421Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.120518Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.120743Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.121073Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.123324Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_classification", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_classification\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.125962Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_classification", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_classification__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_classification\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_classification__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.126210Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.128839Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.133176Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_classification: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.133599Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.ventilation_classification", "execution_time": 0, "index": 76, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": "2022-07-18T00:11:24.026190", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "status": "SELECT 8642", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "76 of 107 OK created table model public.ventilation_classification ............. [\u001b[32mSELECT 8642\u001b[0m in 0.11s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.134495Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:24.134922", "node_name": "ventilation_classification", "node_path": "durations/ventilation_classification.sql", "node_started_at": "2022-07-18T00:11:24.026190", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.ventilation_classification"}, "run_result": {"adapter_response": {"_message": "SELECT 8642", "code": "SELECT", "rows_affected": 8642}, "agate_table": null, "execution_time": 0.10669636726379395, "failures": null, "message": "SELECT 8642", "node": {"alias": "ventilation_classification", "build_path": "target/run/mimic/models/durations/ventilation_classification.sql", "checksum": {"checksum": "749520b14015322a39cdc1783b036dab3eaca418bc87d59686ab03754d1a53b7", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/ventilation_classification.sql", "compiled_sql": "-- Identify The presence of a mechanical ventilation using settings\nselect\n  icustay_id, charttime\n  -- case statement determining whether it is an instance of mech vent\n  , max(\n    case\n      when itemid is null or value is null then 0 -- can't have null values\n      when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded\n      when itemid = 223848 and value != 'Other' THEN 1\n      when itemid = 223849 then 1 -- ventilator mode\n      when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator\n      when itemid in\n        (\n        445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n        , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n        , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n        , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n        , 543 -- PlateauPressure\n        , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n        , 60,437,505,506,686,220339,224700 -- PEEP\n        , 3459 -- high pressure relief\n        , 501,502,503,224702 -- PCV\n        , 223,667,668,669,670,671,672 -- TCPCV\n        , 224701 -- PSVlevel\n        )\n        THEN 1\n      else 0\n    end\n    ) as MechVent\n    , max(\n      case\n        -- initiation of oxygen therapy indicates the ventilation has ended\n        when itemid = 226732 and value in\n        (\n          'Nasal cannula', -- 153714 observations\n          'Face tent', -- 24601 observations\n          'Aerosol-cool', -- 24560 observations\n          'Trach mask ', -- 16435 observations\n          'High flow neb', -- 10785 observations\n          'Non-rebreather', -- 5182 observations\n          'Venti mask ', -- 1947 observations\n          'Medium conc mask ', -- 1888 observations\n          'T-piece', -- 1135 observations\n          'High flow nasal cannula', -- 925 observations\n          'Ultrasonic neb', -- 9 observations\n          'Vapomist' -- 3 observations\n        ) then 1\n        when itemid = 467 and value in\n        (\n          'Cannula', -- 278252 observations\n          'Nasal Cannula', -- 248299 observations\n          -- 'None', -- 95498 observations\n          'Face Tent', -- 35766 observations\n          'Aerosol-Cool', -- 33919 observations\n          'Trach Mask', -- 32655 observations\n          'Hi Flow Neb', -- 14070 observations\n          'Non-Rebreather', -- 10856 observations\n          'Venti Mask', -- 4279 observations\n          'Medium Conc Mask', -- 2114 observations\n          'Vapotherm', -- 1655 observations\n          'T-Piece', -- 779 observations\n          'Hood', -- 670 observations\n          'Hut', -- 150 observations\n          'TranstrachealCat', -- 78 observations\n          'Heated Neb', -- 37 observations\n          'Ultrasonic Neb' -- 2 observations\n        ) then 1\n      else 0\n      end\n    ) as OxygenTherapy\n    , max(\n      case when itemid is null or value is null then 0\n        -- extubated indicates ventilation event has ended\n        when itemid = 640 and value = 'Extubated' then 1\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as Extubated\n    , max(\n      case when itemid is null or value is null then 0\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as SelfExtubated\nfrom chartevents ce\nwhere ce.value is not null\n-- exclude rows marked as error\nand (ce.error != 1 or ce.error IS NULL)\nand itemid in\n(\n    -- the below are settings used to indicate ventilation\n      720, 223849 -- vent mode\n    , 223848 -- vent type\n    , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n    , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n    , 218,436,535,444,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean (\"RespPressure\")\n    , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n    , 543 -- PlateauPressure\n    , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n    , 60,437,505,506,686,220339,224700 -- PEEP\n    , 3459 -- high pressure relief\n    , 501,502,503,224702 -- PCV\n    , 223,667,668,669,670,671,672 -- TCPCV\n    , 224701 -- PSVlevel\n\n    -- the below are settings used to indicate extubation\n    , 640 -- extubated\n\n    -- the below indicate oxygen/NIV, i.e. the end of a mechanical vent event\n    , 468 -- O2 Delivery Device#2\n    , 469 -- O2 Delivery Mode\n    , 470 -- O2 Flow (lpm)\n    , 471 -- O2 Flow (lpm) #2\n    , 227287 -- O2 Flow (additional cannula)\n    , 226732 -- O2 Delivery Device(s)\n    , 223834 -- O2 Flow\n\n    -- used in both oxygen + vent calculation\n    , 467 -- O2 Delivery Device\n)\ngroup by icustay_id, charttime\nUNION DISTINCT\n-- add in the extubation flags from procedureevents_mv\n-- note that we only need the start time for the extubation\n-- (extubation is always charted as ending 1 minute after it started)\nselect\n  icustay_id, starttime as charttime\n  , 0 as MechVent\n  , 0 as OxygenTherapy\n  , 1 as Extubated\n  , case when itemid = 225468 then 1 else 0 end as SelfExtubated\nfrom procedureevents_mv\nwhere itemid in\n(\n  227194 -- \"Extubation\"\n, 225468 -- \"Unplanned Extubation (patient-initiated)\"\n, 225477 -- \"Unplanned Extubation (non-patient initiated)\"\n)", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5158021, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "ventilation_classification"], "meta": {}, "name": "ventilation_classification", "original_file_path": "models/durations/ventilation_classification.sql", "package_name": "mimic", "patch_path": null, "path": "durations/ventilation_classification.sql", "raw_sql": "-- Identify The presence of a mechanical ventilation using settings\nselect\n  icustay_id, charttime\n  -- case statement determining whether it is an instance of mech vent\n  , max(\n    case\n      when itemid is null or value is null then 0 -- can't have null values\n      when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded\n      when itemid = 223848 and value != 'Other' THEN 1\n      when itemid = 223849 then 1 -- ventilator mode\n      when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator\n      when itemid in\n        (\n        445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n        , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n        , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n        , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n        , 543 -- PlateauPressure\n        , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n        , 60,437,505,506,686,220339,224700 -- PEEP\n        , 3459 -- high pressure relief\n        , 501,502,503,224702 -- PCV\n        , 223,667,668,669,670,671,672 -- TCPCV\n        , 224701 -- PSVlevel\n        )\n        THEN 1\n      else 0\n    end\n    ) as MechVent\n    , max(\n      case\n        -- initiation of oxygen therapy indicates the ventilation has ended\n        when itemid = 226732 and value in\n        (\n          'Nasal cannula', -- 153714 observations\n          'Face tent', -- 24601 observations\n          'Aerosol-cool', -- 24560 observations\n          'Trach mask ', -- 16435 observations\n          'High flow neb', -- 10785 observations\n          'Non-rebreather', -- 5182 observations\n          'Venti mask ', -- 1947 observations\n          'Medium conc mask ', -- 1888 observations\n          'T-piece', -- 1135 observations\n          'High flow nasal cannula', -- 925 observations\n          'Ultrasonic neb', -- 9 observations\n          'Vapomist' -- 3 observations\n        ) then 1\n        when itemid = 467 and value in\n        (\n          'Cannula', -- 278252 observations\n          'Nasal Cannula', -- 248299 observations\n          -- 'None', -- 95498 observations\n          'Face Tent', -- 35766 observations\n          'Aerosol-Cool', -- 33919 observations\n          'Trach Mask', -- 32655 observations\n          'Hi Flow Neb', -- 14070 observations\n          'Non-Rebreather', -- 10856 observations\n          'Venti Mask', -- 4279 observations\n          'Medium Conc Mask', -- 2114 observations\n          'Vapotherm', -- 1655 observations\n          'T-Piece', -- 779 observations\n          'Hood', -- 670 observations\n          'Hut', -- 150 observations\n          'TranstrachealCat', -- 78 observations\n          'Heated Neb', -- 37 observations\n          'Ultrasonic Neb' -- 2 observations\n        ) then 1\n      else 0\n      end\n    ) as OxygenTherapy\n    , max(\n      case when itemid is null or value is null then 0\n        -- extubated indicates ventilation event has ended\n        when itemid = 640 and value = 'Extubated' then 1\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as Extubated\n    , max(\n      case when itemid is null or value is null then 0\n        when itemid = 640 and value = 'Self Extubation' then 1\n      else 0\n      end\n      )\n      as SelfExtubated\nfrom chartevents ce\nwhere ce.value is not null\n-- exclude rows marked as error\nand (ce.error != 1 or ce.error IS NULL)\nand itemid in\n(\n    -- the below are settings used to indicate ventilation\n      720, 223849 -- vent mode\n    , 223848 -- vent type\n    , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n    , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n    , 218,436,535,444,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean (\"RespPressure\")\n    , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n    , 543 -- PlateauPressure\n    , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n    , 60,437,505,506,686,220339,224700 -- PEEP\n    , 3459 -- high pressure relief\n    , 501,502,503,224702 -- PCV\n    , 223,667,668,669,670,671,672 -- TCPCV\n    , 224701 -- PSVlevel\n\n    -- the below are settings used to indicate extubation\n    , 640 -- extubated\n\n    -- the below indicate oxygen/NIV, i.e. the end of a mechanical vent event\n    , 468 -- O2 Delivery Device#2\n    , 469 -- O2 Delivery Mode\n    , 470 -- O2 Flow (lpm)\n    , 471 -- O2 Flow (lpm) #2\n    , 227287 -- O2 Flow (additional cannula)\n    , 226732 -- O2 Delivery Device(s)\n    , 223834 -- O2 Flow\n\n    -- used in both oxygen + vent calculation\n    , 467 -- O2 Delivery Device\n)\ngroup by icustay_id, charttime\nUNION DISTINCT\n-- add in the extubation flags from procedureevents_mv\n-- note that we only need the start time for the extubation\n-- (extubation is always charted as ending 1 minute after it started)\nselect\n  icustay_id, starttime as charttime\n  , 0 as MechVent\n  , 0 as OxygenTherapy\n  , 1 as Extubated\n  , case when itemid = 225468 then 1 else 0 end as SelfExtubated\nfrom procedureevents_mv\nwhere itemid in\n(\n  227194 -- \"Extubation\"\n, 225468 -- \"Unplanned Extubation (patient-initiated)\"\n, 225477 -- \"Unplanned Extubation (non-patient initiated)\"\n)", "refs": [], "relation_name": "\"postgres\".\"public\".\"ventilation_classification\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.ventilation_classification", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:24.030815Z", "name": "compile", "started_at": "2022-07-18T00:11:24.028674Z"}, {"completed_at": "2022-07-18T00:11:24.133131Z", "name": "execute", "started_at": "2022-07-18T00:11:24.031484Z"}]}, "unique_id": "model.mimic.ventilation_classification"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.ventilation_classification", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.135077Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": "2022-07-18T00:11:24.135430", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.vitals_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.135459Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.vitals_first_day", "index": 77, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": "2022-07-18T00:11:24.135430", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "77 of 107 START table model public.vitals_first_day ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.136417Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.137624Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": "2022-07-18T00:11:24.135430", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.vitals_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.137870Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.vitals_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.138069Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.140725Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.141462Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.vitals_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.142031Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.vitals_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.150631Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.151345Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.151594Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.151797Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.159166Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.159472Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"vitals_first_day__dbt_tmp\"\n  as (\n    -- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nSELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n-- Easier names\n, min(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_min\n, max(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_max\n, avg(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_mean\n, min(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_min\n, max(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_max\n, avg(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_mean\n, min(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_min\n, max(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_max\n, avg(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_mean\n, min(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_min\n, max(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_max\n, avg(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_mean\n, min(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_min\n, max(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_max\n, avg(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_mean\n, min(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_min\n, max(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_max\n, avg(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_mean\n, min(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_min\n, max(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_max\n, avg(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_mean\n, min(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_min\n, max(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_max\n, avg(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_mean\n\nFROM  (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate\n    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP\n    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP\n    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP\n    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate\n    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call\n    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC\n    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2\n    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose\n\n    else null end as vitalid\n      -- convert F to C\n  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n  from icustays ie\n  left join chartevents ce\n  on ie.icustay_id = ce.icustay_id\n  and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1 DAY')\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'SECOND') > 0\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'HOUR') <= 24\n  -- exclude rows marked as error\n  and (ce.error IS NULL or ce.error = 0)\n  where ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- SPO2, peripheral\n  646, 220277,\n\n  -- GLUCOSE, both lab and fingerstick\n  807,--\tFingerstick Glucose\n  811,--\tGlucose (70-105)\n  1529,--\tGlucose\n  3745,--\tBloodGlucose\n  3744,--\tBlood Glucose\n  225664,--\tGlucose finger stick\n  220621,--\tGlucose (serum)\n  226537,--\tGlucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n) pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"vitals_first_day__dbt_tmp\"\n  as (\n    -- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nSELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n-- Easier names\n, min(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_min\n, max(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_max\n, avg(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_mean\n, min(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_min\n, max(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_max\n, avg(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_mean\n, min(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_min\n, max(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_max\n, avg(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_mean\n, min(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_min\n, max(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_max\n, avg(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_mean\n, min(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_min\n, max(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_max\n, avg(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_mean\n, min(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_min\n, max(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_max\n, avg(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_mean\n, min(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_min\n, max(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_max\n, avg(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_mean\n, min(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_min\n, max(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_max\n, avg(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_mean\n\nFROM  (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate\n    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP\n    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP\n    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP\n    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate\n    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call\n    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC\n    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2\n    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose\n\n    else null end as vitalid\n      -- convert F to C\n  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n  from icustays ie\n  left join chartevents ce\n  on ie.icustay_id = ce.icustay_id\n  and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1 DAY')\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'SECOND') > 0\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'HOUR') <= 24\n  -- exclude rows marked as error\n  and (ce.error IS NULL or ce.error = 0)\n  where ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- SPO2, peripheral\n  646, 220277,\n\n  -- GLUCOSE, both lab and fingerstick\n  807,--\tFingerstick Glucose\n  811,--\tGlucose (70-105)\n  1529,--\tGlucose\n  3745,--\tBloodGlucose\n  3744,--\tBlood Glucose\n  225664,--\tGlucose finger stick\n  220621,--\tGlucose (serum)\n  226537,--\tGlucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n) pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.159728Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.05, "status": "SELECT 13"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 13 in 0.05 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.212729Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.218905Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\nalter table \"postgres\".\"public\".\"vitals_first_day\" rename to \"vitals_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\nalter table \"postgres\".\"public\".\"vitals_first_day\" rename to \"vitals_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.219258Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.220318Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.227331Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\nalter table \"postgres\".\"public\".\"vitals_first_day__dbt_tmp\" rename to \"vitals_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\nalter table \"postgres\".\"public\".\"vitals_first_day__dbt_tmp\" rename to \"vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.227757Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.228786Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.232419Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.232657Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.233091Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.234371Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.vitals_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.vitals_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.236963Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.vitals_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"vitals_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.vitals_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"vitals_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.237214Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.240491Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.244492Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.vitals_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.244775Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.vitals_first_day", "execution_time": 0, "index": 77, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": "2022-07-18T00:11:24.135430", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "status": "SELECT 13", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "77 of 107 OK created table model public.vitals_first_day ....................... [\u001b[32mSELECT 13\u001b[0m in 0.11s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.245706Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:24.246240", "node_name": "vitals_first_day", "node_path": "firstday/vitals_first_day.sql", "node_started_at": "2022-07-18T00:11:24.135430", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.vitals_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 13", "code": "SELECT", "rows_affected": 13}, "agate_table": null, "execution_time": 0.10820698738098145, "failures": null, "message": "SELECT 13", "node": {"alias": "vitals_first_day", "build_path": "target/run/mimic/models/firstday/vitals_first_day.sql", "checksum": {"checksum": "cac09fce3915d79c1814d25b91a41fa78f64bf2678dcf8910fb1d8a1118b1ccd", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/vitals_first_day.sql", "compiled_sql": "-- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nSELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n-- Easier names\n, min(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_min\n, max(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_max\n, avg(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_mean\n, min(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_min\n, max(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_max\n, avg(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_mean\n, min(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_min\n, max(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_max\n, avg(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_mean\n, min(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_min\n, max(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_max\n, avg(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_mean\n, min(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_min\n, max(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_max\n, avg(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_mean\n, min(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_min\n, max(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_max\n, avg(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_mean\n, min(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_min\n, max(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_max\n, avg(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_mean\n, min(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_min\n, max(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_max\n, avg(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_mean\n\nFROM  (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate\n    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP\n    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP\n    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP\n    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate\n    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call\n    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC\n    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2\n    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose\n\n    else null end as vitalid\n      -- convert F to C\n  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n  from icustays ie\n  left join chartevents ce\n  on ie.icustay_id = ce.icustay_id\n  and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1 DAY')\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'SECOND') > 0\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'HOUR') <= 24\n  -- exclude rows marked as error\n  and (ce.error IS NULL or ce.error = 0)\n  where ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- SPO2, peripheral\n  646, 220277,\n\n  -- GLUCOSE, both lab and fingerstick\n  807,--\tFingerstick Glucose\n  811,--\tGlucose (70-105)\n  1529,--\tGlucose\n  3745,--\tBloodGlucose\n  3744,--\tBlood Glucose\n  225664,--\tGlucose finger stick\n  220621,--\tGlucose (serum)\n  226537,--\tGlucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n) pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5454662, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "vitals_first_day"], "meta": {}, "name": "vitals_first_day", "original_file_path": "models/firstday/vitals_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/vitals_first_day.sql", "raw_sql": "-- This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n\nSELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n-- Easier names\n, min(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_min\n, max(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_max\n, avg(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_mean\n, min(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_min\n, max(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_max\n, avg(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_mean\n, min(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_min\n, max(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_max\n, avg(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_mean\n, min(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_min\n, max(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_max\n, avg(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_mean\n, min(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_min\n, max(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_max\n, avg(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_mean\n, min(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_min\n, max(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_max\n, avg(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_mean\n, min(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_min\n, max(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_max\n, avg(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_mean\n, min(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_min\n, max(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_max\n, avg(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_mean\n\nFROM  (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate\n    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP\n    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP\n    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP\n    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate\n    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call\n    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC\n    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2\n    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose\n\n    else null end as vitalid\n      -- convert F to C\n  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n  from icustays ie\n  left join chartevents ce\n  on ie.icustay_id = ce.icustay_id\n  and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1 DAY')\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'SECOND') > 0\n  and DATETIME_DIFF(ce.charttime, ie.intime, 'HOUR') <= 24\n  -- exclude rows marked as error\n  and (ce.error IS NULL or ce.error = 0)\n  where ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- SPO2, peripheral\n  646, 220277,\n\n  -- GLUCOSE, both lab and fingerstick\n  807,--\tFingerstick Glucose\n  811,--\tGlucose (70-105)\n  1529,--\tGlucose\n  3745,--\tBloodGlucose\n  3744,--\tBlood Glucose\n  225664,--\tGlucose finger stick\n  220621,--\tGlucose (serum)\n  226537,--\tGlucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n) pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id", "refs": [], "relation_name": "\"postgres\".\"public\".\"vitals_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.vitals_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:24.141404Z", "name": "compile", "started_at": "2022-07-18T00:11:24.138045Z"}, {"completed_at": "2022-07-18T00:11:24.244459Z", "name": "execute", "started_at": "2022-07-18T00:11:24.142423Z"}]}, "unique_id": "model.mimic.vitals_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.vitals_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.246426Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": "2022-07-18T00:11:24.246886", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.wbc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.246998Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.wbc", "index": 78, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": "2022-07-18T00:11:24.246886", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "78 of 107 START table model public.wbc ......................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.247877Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.249505Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": "2022-07-18T00:11:24.246886", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.wbc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.250195Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.wbc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.250872Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.252785Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.253234Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.wbc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.254000Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.wbc\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.267133Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.268341Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.268714Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.269059Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.275720Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.276073Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\n\n\n  create  table \"postgres\".\"public\".\"wbc__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the white blood cell count for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, wbc as\n(\n  SELECT width_bucket(valuenum, 0, 100, 1001) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid in (51300, 51301)\n  AND valuenum IS NOT NULL\n)\nSELECT round((cast(bucket as numeric)/10),2) as white_blood_cell_count, count(*)\nFROM wbc\nGROUP BY bucket\nORDER BY bucket\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\n\n\n  create  table \"postgres\".\"public\".\"wbc__dbt_tmp\"\n  as (\n    -- --------------------------------------------------------\n-- Title: Retrieves the white blood cell count for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, wbc as\n(\n  SELECT width_bucket(valuenum, 0, 100, 1001) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid in (51300, 51301)\n  AND valuenum IS NOT NULL\n)\nSELECT round((cast(bucket as numeric)/10),2) as white_blood_cell_count, count(*)\nFROM wbc\nGROUP BY bucket\nORDER BY bucket\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.276338Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.18, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.18 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.453180Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.459108Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\nalter table \"postgres\".\"public\".\"wbc\" rename to \"wbc__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\nalter table \"postgres\".\"public\".\"wbc\" rename to \"wbc__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.459403Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.460321Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.465836Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\nalter table \"postgres\".\"public\".\"wbc__dbt_tmp\" rename to \"wbc\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\nalter table \"postgres\".\"public\".\"wbc__dbt_tmp\" rename to \"wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.466189Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.466949Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.470746Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.471219Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.471506Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.473860Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.wbc", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.wbc\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.475961Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.wbc", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\ndrop table if exists \"postgres\".\"public\".\"wbc__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.wbc\"} */\ndrop table if exists \"postgres\".\"public\".\"wbc__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.476182Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.478386Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.481084Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.wbc: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.481342Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.wbc", "execution_time": 0, "index": 78, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": "2022-07-18T00:11:24.246886", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "78 of 107 OK created table model public.wbc .................................... [\u001b[32mSELECT 0\u001b[0m in 0.23s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.482325Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:24.482828", "node_name": "wbc", "node_path": "cookbook/wbc.sql", "node_started_at": "2022-07-18T00:11:24.246886", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.wbc"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.23314332962036133, "failures": null, "message": "SELECT 0", "node": {"alias": "wbc", "build_path": "target/run/mimic/models/cookbook/wbc.sql", "checksum": {"checksum": "d73bc448c5d1bd30315e1dcaea97d06caf502c08b8114c61ad2fe6a5f68d1da8", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/cookbook/wbc.sql", "compiled_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the white blood cell count for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, wbc as\n(\n  SELECT width_bucket(valuenum, 0, 100, 1001) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid in (51300, 51301)\n  AND valuenum IS NOT NULL\n)\nSELECT round((cast(bucket as numeric)/10),2) as white_blood_cell_count, count(*)\nFROM wbc\nGROUP BY bucket\nORDER BY bucket", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6909175, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "cookbook", "wbc"], "meta": {}, "name": "wbc", "original_file_path": "models/cookbook/wbc.sql", "package_name": "mimic", "patch_path": null, "path": "cookbook/wbc.sql", "raw_sql": "-- --------------------------------------------------------\n-- Title: Retrieves the white blood cell count for adult patients\n-- Notes: this query does not specify a schema. To run it on your local\n-- MIMIC schema, run the following command:\n--  SET SEARCH_PATH TO mimiciii\n-- Where \"mimiciii\" is the name of your schema, and may be different.\n-- --------------------------------------------------------\n\nWITH agetbl AS\n(\n  SELECT ad.subject_id\n  FROM admissions ad\n  INNER JOIN patients p\n  ON ad.subject_id = p.subject_id\n  WHERE\n  -- filter to only adults\n  DATETIME_DIFF(ad.admittime, p.dob, 'YEAR') > 15\n  -- group by subject_id to ensure there is only 1 subject_id per row\n  group by ad.subject_id\n)\n, wbc as\n(\n  SELECT width_bucket(valuenum, 0, 100, 1001) AS bucket\n  FROM labevents le\n  INNER JOIN agetbl\n  ON le.subject_id = agetbl.subject_id\n  WHERE itemid in (51300, 51301)\n  AND valuenum IS NOT NULL\n)\nSELECT round((cast(bucket as numeric)/10),2) as white_blood_cell_count, count(*)\nFROM wbc\nGROUP BY bucket\nORDER BY bucket", "refs": [], "relation_name": "\"postgres\".\"public\".\"wbc\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.wbc", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:24.253196Z", "name": "compile", "started_at": "2022-07-18T00:11:24.250727Z"}, {"completed_at": "2022-07-18T00:11:24.481055Z", "name": "execute", "started_at": "2022-07-18T00:11:24.254442Z"}]}, "unique_id": "model.mimic.wbc"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.wbc", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.482990Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": "2022-07-18T00:11:24.483460", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.suspicion_of_infection", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.483559Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.suspicion_of_infection", "index": 79, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": "2022-07-18T00:11:24.483460", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "79 of 107 START table model public.suspicion_of_infection ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.484366Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.485250Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": "2022-07-18T00:11:24.483460", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.suspicion_of_infection", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.485707Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.suspicion_of_infection", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.486012Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.489472Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.490201Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.suspicion_of_infection", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.490505Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.suspicion_of_infection\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.500478Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.501112Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.501343Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.501460Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.508399Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.508709Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\n\n\n  create  table \"postgres\".\"public\".\"suspicion_of_infection__dbt_tmp\"\n  as (\n     \n\n-- defines suspicion of infection using prescriptions + microbiologyevents\nwith abx as\n(\n  select pr.hadm_id\n  , pr.drug as antibiotic_name\n  , pr.startdate as antibiotic_time\n  , pr.enddate as antibiotic_endtime\n  from prescriptions pr\n  -- inner join to subselect to only antibiotic prescriptions\n  inner join \"postgres\".\"public\".\"abx_prescriptions_list\" ab\n      on pr.drug = ab.drug\n)\n-- get cultures for each icustay\n-- note this duplicates prescriptions\n-- each ICU stay in the same hospitalization will get a copy of all prescriptions for that hospitalization\n, ab_tbl as\n(\n  select\n        ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime, ie.outtime\n      , abx.antibiotic_name\n      , abx.antibiotic_time\n      , abx.antibiotic_endtime\n  from icustays ie\n  left join abx\n      on ie.hadm_id = abx.hadm_id\n)\n, me as\n(\n  select hadm_id\n    , chartdate, charttime\n    , spec_type_desc\n    , max(case when org_name is not null and org_name != '' then 1 else 0 end) as PositiveCulture\n  from microbiologyevents\n  group by hadm_id, chartdate, charttime, spec_type_desc\n)\n, ab_fnl as\n(\n  select\n      ab_tbl.icustay_id, ab_tbl.intime, ab_tbl.outtime\n    , ab_tbl.antibiotic_name\n    , ab_tbl.antibiotic_time\n    , coalesce(me72.charttime,me72.chartdate) as last72_charttime\n    , coalesce(me24.charttime,me24.chartdate) as next24_charttime\n    , me72.positiveculture as last72_positiveculture\n    , me72.spec_type_desc as last72_specimen\n    , me24.positiveculture as next24_positiveculture\n    , me24.spec_type_desc as next24_specimen\n  from ab_tbl\n  -- blood culture in last 72 hours\n  left join me me72\n    on ab_tbl.hadm_id = me72.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time >= me72.charttime\n      and ab_tbl.antibiotic_time <= datetime_add(me72.charttime, INTERVAL '72 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me72.charttime is null\n      and ab_tbl.antibiotic_time >= me72.chartdate\n      and ab_tbl.antibiotic_time <= datetime_add(me72.chartdate, INTERVAL '96 HOUR')\n      )\n    )\n  -- blood culture in subsequent 24 hours\n  left join me me24\n    on ab_tbl.hadm_id = me24.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time <= me24.charttime\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.charttime, INTERVAL '24 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me24.charttime is null\n      and ab_tbl.antibiotic_time <= me24.chartdate\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.chartdate, INTERVAL '24 HOUR')\n      )\n    )\n)\n, ab_laststg as\n(\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n\n  -- time of suspected infection: either the culture time (if before antibiotic), or the antibiotic time\n  , case\n      when coalesce(last72_charttime,next24_charttime) is null\n        then 0\n      else 1 end as suspected_infection\n\n  , coalesce(last72_charttime,next24_charttime) as suspected_infection_time\n\n  -- the specimen that was cultured\n  , case\n      when last72_charttime is not null\n        then last72_specimen\n      when next24_charttime is not null\n        then next24_specimen\n    else null\n  end as specimen\n\n  -- whether the cultured specimen ended up being positive or not\n  , case\n      when last72_charttime is not null\n        then last72_positiveculture\n      when next24_charttime is not null\n        then next24_positiveculture\n    else null\n  end as positiveculture\nfrom ab_fnl\n)\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n  , suspected_infection_time\n  -- -- the below two fields are used to extract data - modifying them facilitates sensitivity analyses\n  -- , suspected_infection_time - interval '48' hour as si_starttime\n  -- , suspected_infection_time + interval '24' hour as si_endtime\n  , specimen, positiveculture\nfrom ab_laststg\norder by icustay_id, antibiotic_time\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\n\n\n  create  table \"postgres\".\"public\".\"suspicion_of_infection__dbt_tmp\"\n  as (\n     \n\n-- defines suspicion of infection using prescriptions + microbiologyevents\nwith abx as\n(\n  select pr.hadm_id\n  , pr.drug as antibiotic_name\n  , pr.startdate as antibiotic_time\n  , pr.enddate as antibiotic_endtime\n  from prescriptions pr\n  -- inner join to subselect to only antibiotic prescriptions\n  inner join \"postgres\".\"public\".\"abx_prescriptions_list\" ab\n      on pr.drug = ab.drug\n)\n-- get cultures for each icustay\n-- note this duplicates prescriptions\n-- each ICU stay in the same hospitalization will get a copy of all prescriptions for that hospitalization\n, ab_tbl as\n(\n  select\n        ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime, ie.outtime\n      , abx.antibiotic_name\n      , abx.antibiotic_time\n      , abx.antibiotic_endtime\n  from icustays ie\n  left join abx\n      on ie.hadm_id = abx.hadm_id\n)\n, me as\n(\n  select hadm_id\n    , chartdate, charttime\n    , spec_type_desc\n    , max(case when org_name is not null and org_name != '' then 1 else 0 end) as PositiveCulture\n  from microbiologyevents\n  group by hadm_id, chartdate, charttime, spec_type_desc\n)\n, ab_fnl as\n(\n  select\n      ab_tbl.icustay_id, ab_tbl.intime, ab_tbl.outtime\n    , ab_tbl.antibiotic_name\n    , ab_tbl.antibiotic_time\n    , coalesce(me72.charttime,me72.chartdate) as last72_charttime\n    , coalesce(me24.charttime,me24.chartdate) as next24_charttime\n    , me72.positiveculture as last72_positiveculture\n    , me72.spec_type_desc as last72_specimen\n    , me24.positiveculture as next24_positiveculture\n    , me24.spec_type_desc as next24_specimen\n  from ab_tbl\n  -- blood culture in last 72 hours\n  left join me me72\n    on ab_tbl.hadm_id = me72.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time >= me72.charttime\n      and ab_tbl.antibiotic_time <= datetime_add(me72.charttime, INTERVAL '72 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me72.charttime is null\n      and ab_tbl.antibiotic_time >= me72.chartdate\n      and ab_tbl.antibiotic_time <= datetime_add(me72.chartdate, INTERVAL '96 HOUR')\n      )\n    )\n  -- blood culture in subsequent 24 hours\n  left join me me24\n    on ab_tbl.hadm_id = me24.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time <= me24.charttime\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.charttime, INTERVAL '24 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me24.charttime is null\n      and ab_tbl.antibiotic_time <= me24.chartdate\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.chartdate, INTERVAL '24 HOUR')\n      )\n    )\n)\n, ab_laststg as\n(\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n\n  -- time of suspected infection: either the culture time (if before antibiotic), or the antibiotic time\n  , case\n      when coalesce(last72_charttime,next24_charttime) is null\n        then 0\n      else 1 end as suspected_infection\n\n  , coalesce(last72_charttime,next24_charttime) as suspected_infection_time\n\n  -- the specimen that was cultured\n  , case\n      when last72_charttime is not null\n        then last72_specimen\n      when next24_charttime is not null\n        then next24_specimen\n    else null\n  end as specimen\n\n  -- whether the cultured specimen ended up being positive or not\n  , case\n      when last72_charttime is not null\n        then last72_positiveculture\n      when next24_charttime is not null\n        then next24_positiveculture\n    else null\n  end as positiveculture\nfrom ab_fnl\n)\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n  , suspected_infection_time\n  -- -- the below two fields are used to extract data - modifying them facilitates sensitivity analyses\n  -- , suspected_infection_time - interval '48' hour as si_starttime\n  -- , suspected_infection_time + interval '24' hour as si_endtime\n  , specimen, positiveculture\nfrom ab_laststg\norder by icustay_id, antibiotic_time\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:24.508953Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 9.94, "status": "SELECT 1374912"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 1374912 in 9.94 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.449539Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.456320Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\nalter table \"postgres\".\"public\".\"suspicion_of_infection\" rename to \"suspicion_of_infection__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\nalter table \"postgres\".\"public\".\"suspicion_of_infection\" rename to \"suspicion_of_infection__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.456766Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.458881Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.462748Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\nalter table \"postgres\".\"public\".\"suspicion_of_infection__dbt_tmp\" rename to \"suspicion_of_infection\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\nalter table \"postgres\".\"public\".\"suspicion_of_infection__dbt_tmp\" rename to \"suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.462985Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.463745Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.466860Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.467086Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.467309Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.471121Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.suspicion_of_infection", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.suspicion_of_infection\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.473493Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.suspicion_of_infection", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\ndrop table if exists \"postgres\".\"public\".\"suspicion_of_infection__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.suspicion_of_infection\"} */\ndrop table if exists \"postgres\".\"public\".\"suspicion_of_infection__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.473970Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.478122Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.481042Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.suspicion_of_infection: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.481308Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.suspicion_of_infection", "execution_time": 9, "index": 79, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": "2022-07-18T00:11:24.483460", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "status": "SELECT 1374912", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "79 of 107 OK created table model public.suspicion_of_infection ................. [\u001b[32mSELECT 1374912\u001b[0m in 10.00s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.482234Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:34.482723", "node_name": "suspicion_of_infection", "node_path": "treatment/suspicion_of_infection.sql", "node_started_at": "2022-07-18T00:11:24.483460", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.suspicion_of_infection"}, "run_result": {"adapter_response": {"_message": "SELECT 1374912", "code": "SELECT", "rows_affected": 1374912}, "agate_table": null, "execution_time": 9.997190713882446, "failures": null, "message": "SELECT 1374912", "node": {"alias": "suspicion_of_infection", "build_path": "target/run/mimic/models/treatment/suspicion_of_infection.sql", "checksum": {"checksum": "f9dc76a010ab636389c7a27160ce251711d75e20edc2446fe1a980f664356542", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/treatment/suspicion_of_infection.sql", "compiled_sql": " \n\n-- defines suspicion of infection using prescriptions + microbiologyevents\nwith abx as\n(\n  select pr.hadm_id\n  , pr.drug as antibiotic_name\n  , pr.startdate as antibiotic_time\n  , pr.enddate as antibiotic_endtime\n  from prescriptions pr\n  -- inner join to subselect to only antibiotic prescriptions\n  inner join \"postgres\".\"public\".\"abx_prescriptions_list\" ab\n      on pr.drug = ab.drug\n)\n-- get cultures for each icustay\n-- note this duplicates prescriptions\n-- each ICU stay in the same hospitalization will get a copy of all prescriptions for that hospitalization\n, ab_tbl as\n(\n  select\n        ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime, ie.outtime\n      , abx.antibiotic_name\n      , abx.antibiotic_time\n      , abx.antibiotic_endtime\n  from icustays ie\n  left join abx\n      on ie.hadm_id = abx.hadm_id\n)\n, me as\n(\n  select hadm_id\n    , chartdate, charttime\n    , spec_type_desc\n    , max(case when org_name is not null and org_name != '' then 1 else 0 end) as PositiveCulture\n  from microbiologyevents\n  group by hadm_id, chartdate, charttime, spec_type_desc\n)\n, ab_fnl as\n(\n  select\n      ab_tbl.icustay_id, ab_tbl.intime, ab_tbl.outtime\n    , ab_tbl.antibiotic_name\n    , ab_tbl.antibiotic_time\n    , coalesce(me72.charttime,me72.chartdate) as last72_charttime\n    , coalesce(me24.charttime,me24.chartdate) as next24_charttime\n    , me72.positiveculture as last72_positiveculture\n    , me72.spec_type_desc as last72_specimen\n    , me24.positiveculture as next24_positiveculture\n    , me24.spec_type_desc as next24_specimen\n  from ab_tbl\n  -- blood culture in last 72 hours\n  left join me me72\n    on ab_tbl.hadm_id = me72.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time >= me72.charttime\n      and ab_tbl.antibiotic_time <= datetime_add(me72.charttime, INTERVAL '72 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me72.charttime is null\n      and ab_tbl.antibiotic_time >= me72.chartdate\n      and ab_tbl.antibiotic_time <= datetime_add(me72.chartdate, INTERVAL '96 HOUR')\n      )\n    )\n  -- blood culture in subsequent 24 hours\n  left join me me24\n    on ab_tbl.hadm_id = me24.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time <= me24.charttime\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.charttime, INTERVAL '24 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me24.charttime is null\n      and ab_tbl.antibiotic_time <= me24.chartdate\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.chartdate, INTERVAL '24 HOUR')\n      )\n    )\n)\n, ab_laststg as\n(\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n\n  -- time of suspected infection: either the culture time (if before antibiotic), or the antibiotic time\n  , case\n      when coalesce(last72_charttime,next24_charttime) is null\n        then 0\n      else 1 end as suspected_infection\n\n  , coalesce(last72_charttime,next24_charttime) as suspected_infection_time\n\n  -- the specimen that was cultured\n  , case\n      when last72_charttime is not null\n        then last72_specimen\n      when next24_charttime is not null\n        then next24_specimen\n    else null\n  end as specimen\n\n  -- whether the cultured specimen ended up being positive or not\n  , case\n      when last72_charttime is not null\n        then last72_positiveculture\n      when next24_charttime is not null\n        then next24_positiveculture\n    else null\n  end as positiveculture\nfrom ab_fnl\n)\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n  , suspected_infection_time\n  -- -- the below two fields are used to extract data - modifying them facilitates sensitivity analyses\n  -- , suspected_infection_time - interval '48' hour as si_starttime\n  -- , suspected_infection_time + interval '24' hour as si_endtime\n  , specimen, positiveculture\nfrom ab_laststg\norder by icustay_id, antibiotic_time", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.732627, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.abx_prescriptions_list"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "treatment", "suspicion_of_infection"], "meta": {}, "name": "suspicion_of_infection", "original_file_path": "models/treatment/suspicion_of_infection.sql", "package_name": "mimic", "patch_path": null, "path": "treatment/suspicion_of_infection.sql", "raw_sql": "{{ config(materialized = 'table') }} \n\n-- defines suspicion of infection using prescriptions + microbiologyevents\nwith abx as\n(\n  select pr.hadm_id\n  , pr.drug as antibiotic_name\n  , pr.startdate as antibiotic_time\n  , pr.enddate as antibiotic_endtime\n  from prescriptions pr\n  -- inner join to subselect to only antibiotic prescriptions\n  inner join {{ref('abx_prescriptions_list')}} ab\n      on pr.drug = ab.drug\n)\n-- get cultures for each icustay\n-- note this duplicates prescriptions\n-- each ICU stay in the same hospitalization will get a copy of all prescriptions for that hospitalization\n, ab_tbl as\n(\n  select\n        ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime, ie.outtime\n      , abx.antibiotic_name\n      , abx.antibiotic_time\n      , abx.antibiotic_endtime\n  from icustays ie\n  left join abx\n      on ie.hadm_id = abx.hadm_id\n)\n, me as\n(\n  select hadm_id\n    , chartdate, charttime\n    , spec_type_desc\n    , max(case when org_name is not null and org_name != '' then 1 else 0 end) as PositiveCulture\n  from microbiologyevents\n  group by hadm_id, chartdate, charttime, spec_type_desc\n)\n, ab_fnl as\n(\n  select\n      ab_tbl.icustay_id, ab_tbl.intime, ab_tbl.outtime\n    , ab_tbl.antibiotic_name\n    , ab_tbl.antibiotic_time\n    , coalesce(me72.charttime,me72.chartdate) as last72_charttime\n    , coalesce(me24.charttime,me24.chartdate) as next24_charttime\n    , me72.positiveculture as last72_positiveculture\n    , me72.spec_type_desc as last72_specimen\n    , me24.positiveculture as next24_positiveculture\n    , me24.spec_type_desc as next24_specimen\n  from ab_tbl\n  -- blood culture in last 72 hours\n  left join me me72\n    on ab_tbl.hadm_id = me72.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time >= me72.charttime\n      and ab_tbl.antibiotic_time <= datetime_add(me72.charttime, INTERVAL '72 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me72.charttime is null\n      and ab_tbl.antibiotic_time >= me72.chartdate\n      and ab_tbl.antibiotic_time <= datetime_add(me72.chartdate, INTERVAL '96 HOUR')\n      )\n    )\n  -- blood culture in subsequent 24 hours\n  left join me me24\n    on ab_tbl.hadm_id = me24.hadm_id\n    and ab_tbl.antibiotic_time is not null\n    and\n    (\n      -- if charttime is available, use it\n      (\n          ab_tbl.antibiotic_time <= me24.charttime\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.charttime, INTERVAL '24 HOUR')\n      )\n      OR\n      (\n      -- if charttime is not available, use chartdate\n          me24.charttime is null\n      and ab_tbl.antibiotic_time <= me24.chartdate\n      and ab_tbl.antibiotic_time >= datetime_sub(me24.chartdate, INTERVAL '24 HOUR')\n      )\n    )\n)\n, ab_laststg as\n(\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n\n  -- time of suspected infection: either the culture time (if before antibiotic), or the antibiotic time\n  , case\n      when coalesce(last72_charttime,next24_charttime) is null\n        then 0\n      else 1 end as suspected_infection\n\n  , coalesce(last72_charttime,next24_charttime) as suspected_infection_time\n\n  -- the specimen that was cultured\n  , case\n      when last72_charttime is not null\n        then last72_specimen\n      when next24_charttime is not null\n        then next24_specimen\n    else null\n  end as specimen\n\n  -- whether the cultured specimen ended up being positive or not\n  , case\n      when last72_charttime is not null\n        then last72_positiveculture\n      when next24_charttime is not null\n        then next24_positiveculture\n    else null\n  end as positiveculture\nfrom ab_fnl\n)\nselect\n  icustay_id\n  , antibiotic_name\n  , antibiotic_time\n  , last72_charttime\n  , next24_charttime\n  , suspected_infection_time\n  -- -- the below two fields are used to extract data - modifying them facilitates sensitivity analyses\n  -- , suspected_infection_time - interval '48' hour as si_starttime\n  -- , suspected_infection_time + interval '24' hour as si_endtime\n  , specimen, positiveculture\nfrom ab_laststg\norder by icustay_id, antibiotic_time", "refs": [["abx_prescriptions_list"]], "relation_name": "\"postgres\".\"public\".\"suspicion_of_infection\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.suspicion_of_infection", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:24.490103Z", "name": "compile", "started_at": "2022-07-18T00:11:24.485992Z"}, {"completed_at": "2022-07-18T00:11:34.481008Z", "name": "execute", "started_at": "2022-07-18T00:11:24.490725Z"}]}, "unique_id": "model.mimic.suspicion_of_infection"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.suspicion_of_infection", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.482896Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": "2022-07-18T00:11:34.483339", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.blood_gas_first_day_arterial", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.483437Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.blood_gas_first_day_arterial", "index": 80, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": "2022-07-18T00:11:34.483339", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "80 of 107 START table model public.blood_gas_first_day_arterial ................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.484179Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.484995Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": "2022-07-18T00:11:34.483339", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.blood_gas_first_day_arterial", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.485341Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.blood_gas_first_day_arterial", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.485815Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.488878Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.489980Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.blood_gas_first_day_arterial", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.490391Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.blood_gas_first_day_arterial\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.500555Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.501280Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.501723Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.502104Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.508301Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.508585Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\n\n\n  create  table \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_tmp\"\n  as (\n    with stg_spo2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- max here is just used to group SpO2 by charttime\n    , max(case when valuenum <= 0 or valuenum > 100 then null else valuenum end) as SpO2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg_fio2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s1.charttime DESC) as lastRowSpO2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"blood_gas_first_day\" bg\nleft join stg_spo2 s1\n  -- same patient\n  on  bg.icustay_id = s1.icustay_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime >= DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR)\n  and s1.charttime <= bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s2.charttime DESC) as lastRowFiO2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as SPECIMEN_PROB\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.icustay_id = s2.icustay_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\n\nselect subject_id, hadm_id,\nicustay_id, charttime\n, specimen -- raw data indicating sample type, only present 80% of the time\n\n-- prediction of specimen for missing data\n, case\n      when SPECIMEN is not null then SPECIMEN\n      when SPECIMEN_PROB > 0.75 then 'ART'\n    else null end as SPECIMEN_PRED\n, specimen_prob\n-- oxygen related parameters\n, so2, spo2 -- note spo2 is FROM chartevents\n, po2, pco2\n, fio2_chartevents, fio2\n, aado2\n-- also calculate AADO2\n, case\n    when  PO2 is not null\n      and pco2 is not null\n      and coalesce(fio2, fio2_chartevents) is not null\n     -- multiple by 100 because FiO2 is in a % but should be a fraction\n      then (coalesce(fio2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n    else null\n  end as AADO2_calc\n, case\n    when PO2 is not null and coalesce(fio2, fio2_chartevents) is not null\n     -- multiply by 100 because FiO2 is in a % but should be a fraction\n      then 100*PO2/(coalesce(fio2, fio2_chartevents))\n    else null\n  end as PaO2FiO2\n-- acid-base parameters\n, ph, baseexcess\n, bicarbonate, totalco2\n\n-- blood count parameters\n, hematocrit\n, hemoglobin\n, carboxyhemoglobin\n, methemoglobin\n\n-- chemistry\n, chloride, calcium\n, temperature\n, potassium, sodium\n, lactate\n, glucose\n\n-- ventilation stuff that's sometimes input\n, intubated, tidalvolume, ventilationrate, ventilator\n, peep, o2flow\n, requiredo2\n\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\n\n\n  create  table \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_tmp\"\n  as (\n    with stg_spo2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- max here is just used to group SpO2 by charttime\n    , max(case when valuenum <= 0 or valuenum > 100 then null else valuenum end) as SpO2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg_fio2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s1.charttime DESC) as lastRowSpO2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"blood_gas_first_day\" bg\nleft join stg_spo2 s1\n  -- same patient\n  on  bg.icustay_id = s1.icustay_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime >= DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR)\n  and s1.charttime <= bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s2.charttime DESC) as lastRowFiO2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as SPECIMEN_PROB\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.icustay_id = s2.icustay_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\n\nselect subject_id, hadm_id,\nicustay_id, charttime\n, specimen -- raw data indicating sample type, only present 80% of the time\n\n-- prediction of specimen for missing data\n, case\n      when SPECIMEN is not null then SPECIMEN\n      when SPECIMEN_PROB > 0.75 then 'ART'\n    else null end as SPECIMEN_PRED\n, specimen_prob\n-- oxygen related parameters\n, so2, spo2 -- note spo2 is FROM chartevents\n, po2, pco2\n, fio2_chartevents, fio2\n, aado2\n-- also calculate AADO2\n, case\n    when  PO2 is not null\n      and pco2 is not null\n      and coalesce(fio2, fio2_chartevents) is not null\n     -- multiple by 100 because FiO2 is in a % but should be a fraction\n      then (coalesce(fio2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n    else null\n  end as AADO2_calc\n, case\n    when PO2 is not null and coalesce(fio2, fio2_chartevents) is not null\n     -- multiply by 100 because FiO2 is in a % but should be a fraction\n      then 100*PO2/(coalesce(fio2, fio2_chartevents))\n    else null\n  end as PaO2FiO2\n-- acid-base parameters\n, ph, baseexcess\n, bicarbonate, totalco2\n\n-- blood count parameters\n, hematocrit\n, hemoglobin\n, carboxyhemoglobin\n, methemoglobin\n\n-- chemistry\n, chloride, calcium\n, temperature\n, potassium, sodium\n, lactate\n, glucose\n\n-- ventilation stuff that's sometimes input\n, intubated, tidalvolume, ventilationrate, ventilator\n, peep, o2flow\n, requiredo2\n\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.508798Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.526729Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.533947Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day_arterial\" rename to \"blood_gas_first_day_arterial__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day_arterial\" rename to \"blood_gas_first_day_arterial__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.534301Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.535403Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.539073Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_tmp\" rename to \"blood_gas_first_day_arterial\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\nalter table \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_tmp\" rename to \"blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.539308Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.540030Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.543243Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.543472Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.543708Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.544998Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.blood_gas_first_day_arterial\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.550391Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\ndrop table if exists \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.blood_gas_first_day_arterial\"} */\ndrop table if exists \"postgres\".\"public\".\"blood_gas_first_day_arterial__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.550693Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.553205Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.556505Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.blood_gas_first_day_arterial: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.556760Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.blood_gas_first_day_arterial", "execution_time": 0, "index": 80, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": "2022-07-18T00:11:34.483339", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "80 of 107 OK created table model public.blood_gas_first_day_arterial ........... [\u001b[32mSELECT 0\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.557300Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:34.557568", "node_name": "blood_gas_first_day_arterial", "node_path": "firstday/blood_gas_first_day_arterial.sql", "node_started_at": "2022-07-18T00:11:34.483339", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.07248759269714355, "failures": null, "message": "SELECT 0", "node": {"alias": "blood_gas_first_day_arterial", "build_path": "target/run/mimic/models/firstday/blood_gas_first_day_arterial.sql", "checksum": {"checksum": "c2e8d35acd151ff031845b14f52bb8ed7954367b6241a32242674dd2931ba17d", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/blood_gas_first_day_arterial.sql", "compiled_sql": "with stg_spo2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- max here is just used to group SpO2 by charttime\n    , max(case when valuenum <= 0 or valuenum > 100 then null else valuenum end) as SpO2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg_fio2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s1.charttime DESC) as lastRowSpO2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"blood_gas_first_day\" bg\nleft join stg_spo2 s1\n  -- same patient\n  on  bg.icustay_id = s1.icustay_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime >= DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR)\n  and s1.charttime <= bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s2.charttime DESC) as lastRowFiO2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as SPECIMEN_PROB\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.icustay_id = s2.icustay_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\n\nselect subject_id, hadm_id,\nicustay_id, charttime\n, specimen -- raw data indicating sample type, only present 80% of the time\n\n-- prediction of specimen for missing data\n, case\n      when SPECIMEN is not null then SPECIMEN\n      when SPECIMEN_PROB > 0.75 then 'ART'\n    else null end as SPECIMEN_PRED\n, specimen_prob\n-- oxygen related parameters\n, so2, spo2 -- note spo2 is FROM chartevents\n, po2, pco2\n, fio2_chartevents, fio2\n, aado2\n-- also calculate AADO2\n, case\n    when  PO2 is not null\n      and pco2 is not null\n      and coalesce(fio2, fio2_chartevents) is not null\n     -- multiple by 100 because FiO2 is in a % but should be a fraction\n      then (coalesce(fio2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n    else null\n  end as AADO2_calc\n, case\n    when PO2 is not null and coalesce(fio2, fio2_chartevents) is not null\n     -- multiply by 100 because FiO2 is in a % but should be a fraction\n      then 100*PO2/(coalesce(fio2, fio2_chartevents))\n    else null\n  end as PaO2FiO2\n-- acid-base parameters\n, ph, baseexcess\n, bicarbonate, totalco2\n\n-- blood count parameters\n, hematocrit\n, hemoglobin\n, carboxyhemoglobin\n, methemoglobin\n\n-- chemistry\n, chloride, calcium\n, temperature\n, potassium, sodium\n, lactate\n, glucose\n\n-- ventilation stuff that's sometimes input\n, intubated, tidalvolume, ventilationrate, ventilator\n, peep, o2flow\n, requiredo2\n\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5283754, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "blood_gas_first_day_arterial"], "meta": {}, "name": "blood_gas_first_day_arterial", "original_file_path": "models/firstday/blood_gas_first_day_arterial.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/blood_gas_first_day_arterial.sql", "raw_sql": "with stg_spo2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- max here is just used to group SpO2 by charttime\n    , max(case when valuenum <= 0 or valuenum > 100 then null else valuenum end) as SpO2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg_fio2 as\n(\n  select subject_id, hadm_id, icustay_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  -- exclude rows marked as error\n  AND (error IS NULL OR error = 0)\n  group by subject_id, hadm_id, icustay_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s1.charttime DESC) as lastRowSpO2\n  , s1.spo2\nfrom {{ref('blood_gas_first_day')}} bg\nleft join stg_spo2 s1\n  -- same patient\n  on  bg.icustay_id = s1.icustay_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime >= DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR)\n  and s1.charttime <= bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s2.charttime DESC) as lastRowFiO2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as SPECIMEN_PROB\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.icustay_id = s2.icustay_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\n\nselect subject_id, hadm_id,\nicustay_id, charttime\n, specimen -- raw data indicating sample type, only present 80% of the time\n\n-- prediction of specimen for missing data\n, case\n      when SPECIMEN is not null then SPECIMEN\n      when SPECIMEN_PROB > 0.75 then 'ART'\n    else null end as SPECIMEN_PRED\n, specimen_prob\n-- oxygen related parameters\n, so2, spo2 -- note spo2 is FROM chartevents\n, po2, pco2\n, fio2_chartevents, fio2\n, aado2\n-- also calculate AADO2\n, case\n    when  PO2 is not null\n      and pco2 is not null\n      and coalesce(fio2, fio2_chartevents) is not null\n     -- multiple by 100 because FiO2 is in a % but should be a fraction\n      then (coalesce(fio2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n    else null\n  end as AADO2_calc\n, case\n    when PO2 is not null and coalesce(fio2, fio2_chartevents) is not null\n     -- multiply by 100 because FiO2 is in a % but should be a fraction\n      then 100*PO2/(coalesce(fio2, fio2_chartevents))\n    else null\n  end as PaO2FiO2\n-- acid-base parameters\n, ph, baseexcess\n, bicarbonate, totalco2\n\n-- blood count parameters\n, hematocrit\n, hemoglobin\n, carboxyhemoglobin\n, methemoglobin\n\n-- chemistry\n, chloride, calcium\n, temperature\n, potassium, sodium\n, lactate\n, glucose\n\n-- ventilation stuff that's sometimes input\n, intubated, tidalvolume, ventilationrate, ventilator\n, peep, o2flow\n, requiredo2\n\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by icustay_id, charttime", "refs": [["blood_gas_first_day"]], "relation_name": "\"postgres\".\"public\".\"blood_gas_first_day_arterial\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.blood_gas_first_day_arterial", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:34.489902Z", "name": "compile", "started_at": "2022-07-18T00:11:34.485780Z"}, {"completed_at": "2022-07-18T00:11:34.556476Z", "name": "execute", "started_at": "2022-07-18T00:11:34.490643Z"}]}, "unique_id": "model.mimic.blood_gas_first_day_arterial"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.blood_gas_first_day_arterial", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.557924Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": "2022-07-18T00:11:34.558461", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.height_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.558519Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.height_first_day", "index": 81, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": "2022-07-18T00:11:34.558461", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "81 of 107 START table model public.height_first_day ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.559239Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.560485Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": "2022-07-18T00:11:34.558461", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.height_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.560787Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.height_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.561174Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.565283Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.566236Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.height_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.566572Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.height_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.578110Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.578912Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.579201Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.579358Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.586305Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.586634Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"height_first_day__dbt_tmp\"\n  as (\n    -- This query extracts heights for adult ICU patients.\n-- It uses all information from the patient's first ICU day.\n-- This is done for consistency with other queries - it's not necessarily needed.\n-- Height is unlikely to change throughout a patient's stay.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\n-- staging table to ensure all heights are in centimeters\nwith ce0 as\n(\n    SELECT\n      c.icustay_id\n      , case\n        -- convert inches to centimetres\n          when itemid in (920, 1394, 4187, 3486)\n              then valuenum * 2.54\n            else valuenum\n        end as Height\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (226730,920, 1394, 4187, 3486,3485,4188) -- height\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n)\n, ce as\n(\n    SELECT\n        icustay_id\n        -- extract the median height from the chart to add robustness against outliers\n        , AVG(height) as Height_chart\n    from ce0\n    where height > 100\n    group by icustay_id\n)\n-- requires the echo-data.sql query to run\n-- this adds heights from the free-text echo notes\n, echo as\n(\n    select\n        ec.subject_id\n        -- all echo heights are in inches\n        , 2.54*AVG(height) as Height_Echo\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.subject_id = ie.subject_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where height is not null\n    and height*2.54 > 100\n    group by ec.subject_id\n)\nselect\n    ie.icustay_id\n    , coalesce(ce.Height_chart, ec.Height_Echo) as height\n\n    -- components\n    , ce.height_chart\n    , ec.height_echo\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\nleft join echo ec\n    on ie.subject_id = ec.subject_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"height_first_day__dbt_tmp\"\n  as (\n    -- This query extracts heights for adult ICU patients.\n-- It uses all information from the patient's first ICU day.\n-- This is done for consistency with other queries - it's not necessarily needed.\n-- Height is unlikely to change throughout a patient's stay.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\n-- staging table to ensure all heights are in centimeters\nwith ce0 as\n(\n    SELECT\n      c.icustay_id\n      , case\n        -- convert inches to centimetres\n          when itemid in (920, 1394, 4187, 3486)\n              then valuenum * 2.54\n            else valuenum\n        end as Height\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (226730,920, 1394, 4187, 3486,3485,4188) -- height\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n)\n, ce as\n(\n    SELECT\n        icustay_id\n        -- extract the median height from the chart to add robustness against outliers\n        , AVG(height) as Height_chart\n    from ce0\n    where height > 100\n    group by icustay_id\n)\n-- requires the echo-data.sql query to run\n-- this adds heights from the free-text echo notes\n, echo as\n(\n    select\n        ec.subject_id\n        -- all echo heights are in inches\n        , 2.54*AVG(height) as Height_Echo\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.subject_id = ie.subject_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where height is not null\n    and height*2.54 > 100\n    group by ec.subject_id\n)\nselect\n    ie.icustay_id\n    , coalesce(ce.Height_chart, ec.Height_Echo) as height\n\n    -- components\n    , ce.height_chart\n    , ec.height_echo\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\nleft join echo ec\n    on ie.subject_id = ec.subject_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.586953Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.1, "status": "SELECT 53432"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 53432 in 0.1 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.685791Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.693040Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\nalter table \"postgres\".\"public\".\"height_first_day\" rename to \"height_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\nalter table \"postgres\".\"public\".\"height_first_day\" rename to \"height_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.693312Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.694548Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.700705Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\nalter table \"postgres\".\"public\".\"height_first_day__dbt_tmp\" rename to \"height_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\nalter table \"postgres\".\"public\".\"height_first_day__dbt_tmp\" rename to \"height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.700933Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.701990Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.707525Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.707803Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.708108Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.714824Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.height_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.height_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.717687Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.height_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"height_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.height_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"height_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.718088Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.721098Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.724610Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.height_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.724874Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.height_first_day", "execution_time": 0, "index": 81, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": "2022-07-18T00:11:34.558461", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "status": "SELECT 53432", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "81 of 107 OK created table model public.height_first_day ....................... [\u001b[32mSELECT 53432\u001b[0m in 0.17s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.725470Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:34.726343", "node_name": "height_first_day", "node_path": "firstday/height_first_day.sql", "node_started_at": "2022-07-18T00:11:34.558461", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.height_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 53432", "code": "SELECT", "rows_affected": 53432}, "agate_table": null, "execution_time": 0.16524863243103027, "failures": null, "message": "SELECT 53432", "node": {"alias": "height_first_day", "build_path": "target/run/mimic/models/firstday/height_first_day.sql", "checksum": {"checksum": "15c2b5cb36dbb96f73459fe0311b97e612dc665b2be04131b44cf09b1c5523bf", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/height_first_day.sql", "compiled_sql": "-- This query extracts heights for adult ICU patients.\n-- It uses all information from the patient's first ICU day.\n-- This is done for consistency with other queries - it's not necessarily needed.\n-- Height is unlikely to change throughout a patient's stay.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\n-- staging table to ensure all heights are in centimeters\nwith ce0 as\n(\n    SELECT\n      c.icustay_id\n      , case\n        -- convert inches to centimetres\n          when itemid in (920, 1394, 4187, 3486)\n              then valuenum * 2.54\n            else valuenum\n        end as Height\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (226730,920, 1394, 4187, 3486,3485,4188) -- height\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n)\n, ce as\n(\n    SELECT\n        icustay_id\n        -- extract the median height from the chart to add robustness against outliers\n        , AVG(height) as Height_chart\n    from ce0\n    where height > 100\n    group by icustay_id\n)\n-- requires the echo-data.sql query to run\n-- this adds heights from the free-text echo notes\n, echo as\n(\n    select\n        ec.subject_id\n        -- all echo heights are in inches\n        , 2.54*AVG(height) as Height_Echo\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.subject_id = ie.subject_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where height is not null\n    and height*2.54 > 100\n    group by ec.subject_id\n)\nselect\n    ie.icustay_id\n    , coalesce(ce.Height_chart, ec.Height_Echo) as height\n\n    -- components\n    , ce.height_chart\n    , ec.height_echo\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\nleft join echo ec\n    on ie.subject_id = ec.subject_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.532625, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.echo_data"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "height_first_day"], "meta": {}, "name": "height_first_day", "original_file_path": "models/firstday/height_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/height_first_day.sql", "raw_sql": "-- This query extracts heights for adult ICU patients.\n-- It uses all information from the patient's first ICU day.\n-- This is done for consistency with other queries - it's not necessarily needed.\n-- Height is unlikely to change throughout a patient's stay.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\n-- staging table to ensure all heights are in centimeters\nwith ce0 as\n(\n    SELECT\n      c.icustay_id\n      , case\n        -- convert inches to centimetres\n          when itemid in (920, 1394, 4187, 3486)\n              then valuenum * 2.54\n            else valuenum\n        end as Height\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (226730,920, 1394, 4187, 3486,3485,4188) -- height\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n)\n, ce as\n(\n    SELECT\n        icustay_id\n        -- extract the median height from the chart to add robustness against outliers\n        , AVG(height) as Height_chart\n    from ce0\n    where height > 100\n    group by icustay_id\n)\n-- requires the echo-data.sql query to run\n-- this adds heights from the free-text echo notes\n, echo as\n(\n    select\n        ec.subject_id\n        -- all echo heights are in inches\n        , 2.54*AVG(height) as Height_Echo\n    from {{ref('echo_data')}} ec\n    inner join icustays ie\n        on ec.subject_id = ie.subject_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where height is not null\n    and height*2.54 > 100\n    group by ec.subject_id\n)\nselect\n    ie.icustay_id\n    , coalesce(ce.Height_chart, ec.Height_Echo) as height\n\n    -- components\n    , ce.height_chart\n    , ec.height_echo\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\nleft join echo ec\n    on ie.subject_id = ec.subject_id", "refs": [["echo_data"]], "relation_name": "\"postgres\".\"public\".\"height_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.height_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:34.566132Z", "name": "compile", "started_at": "2022-07-18T00:11:34.561142Z"}, {"completed_at": "2022-07-18T00:11:34.724579Z", "name": "execute", "started_at": "2022-07-18T00:11:34.566937Z"}]}, "unique_id": "model.mimic.height_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.height_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.726563Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": "2022-07-18T00:11:34.727264", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.weight_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.727355Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.weight_durations", "index": 82, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": "2022-07-18T00:11:34.727264", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "82 of 107 START table model public.weight_durations ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.727884Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.729085Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": "2022-07-18T00:11:34.727264", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.weight_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.729398Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.weight_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.729889Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.733988Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.734854Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.weight_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.735179Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.weight_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.745207Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.746371Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.746818Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.747134Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.753232Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.753545Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"weight_durations__dbt_tmp\"\n  as (\n    -- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\n\n-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\nWITH wt_neonate AS\n( \n    SELECT c.icustay_id, c.charttime\n    , MAX(CASE WHEN c.itemid = 3580 THEN c.valuenum END) as wt_kg\n    , MAX(CASE WHEN c.itemid = 3581 THEN c.valuenum END) as wt_lb\n    , MAX(CASE WHEN c.itemid = 3582 THEN c.valuenum END) as wt_oz\n    FROM chartevents c\n    WHERE c.itemid in (3580, 3581, 3582)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n    -- wt_oz/wt_lb/wt_kg are only 0 erroneously, so drop these rows\n    AND c.valuenum > 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, birth_wt AS\n(\n    SELECT c.icustay_id, c.charttime\n    , MAX(\n      CASE\n      WHEN c.itemid = 4183 THEN\n        -- clean free-text birth weight data\n        CASE\n          -- ignore value if there are any non-numeric characters\n          WHEN REGEXP_CONTAINS(c.value, '[^0-9\\\\.]') THEN NULL \n          -- convert grams to kd\n          WHEN CAST(c.value AS NUMERIC) > 100 THEN CAST(c.value AS NUMERIC)/1000\n          -- keep kg as is, filtering bad values (largest baby ever born was conveniently 9.98kg)\n          WHEN CAST(c.value AS NUMERIC) < 10 THEN CAST(c.value AS NUMERIC)\n          -- ignore other values (those between 10-100) - junk data\n        ELSE NULL END\n      -- itemid 3723 happily has all numeric data - also doesn't store any grams data\n      WHEN c.itemid = 3723 AND c.valuenum < 10 THEN c.valuenum\n      ELSE NULL END) as wt_kg\n    FROM chartevents c\n    WHERE c.itemid in (3723, 4183)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, wt_stg as\n(\n    SELECT\n        c.icustay_id\n      , c.charttime\n      , case when c.itemid in (762,226512) then 'admit'\n          else 'daily' end as weight_type\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      , c.valuenum as weight\n    FROM chartevents c\n    WHERE c.valuenum IS NOT NULL\n      AND c.itemid in\n      (\n          762,226512 -- Admit Wt\n        , 763,224639 -- Daily Weight\n      )\n      AND c.icustay_id IS NOT NULL\n      AND c.valuenum > 0\n      -- exclude rows marked as error\n      AND COALESCE(c.error, 0) = 0\n    UNION ALL\n    SELECT\n        n.icustay_id\n      , n.charttime\n      , 'daily' AS weight_type\n      , CASE\n          WHEN wt_kg IS NOT NULL THEN wt_kg\n          WHEN wt_lb IS NOT NULL THEN wt_lb*0.45359237 + wt_oz*0.0283495231\n        ELSE NULL END AS weight\n    FROM wt_neonate n\n    UNION ALL\n    SELECT\n        b.icustay_id\n      , b.charttime\n      -- birth weight of neonates is treated as admission weight\n      , 'admit' AS weight_type\n      , wt_kg as weight\n    FROM birth_wt b\n)\n-- get more weights from echo - completes data for ~2500 patients\n-- we only use echo data if there is *no* charted data\n-- we impute the median echo weight for their entire ICU stay\n, echo as\n(\n  select\n    ie.icustay_id\n    , ec.charttime\n    , 'echo' AS weight_type\n    , 0.453592*ec.weight as weight\n  from icustays ie\n  inner join \"postgres\".\"public\".\"echo_data\" ec\n    on ie.hadm_id = ec.hadm_id\n  where ec.weight is not null\n  and ie.icustay_id not in (select distinct icustay_id from wt_stg)\n)\n, wt_stg0 AS\n(\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM wt_stg\n  UNION ALL\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM echo\n)\n-- assign ascending row number\n, wt_stg1 as\n(\n  select\n      icustay_id\n    , charttime\n    , weight_type\n    , weight\n    , ROW_NUMBER() OVER (partition by icustay_id, weight_type order by charttime) as rn\n  from wt_stg0\n  WHERE weight IS NOT NULL\n)\n-- change charttime to intime for the first admission weight recorded\n, wt_stg2 AS\n(\n  SELECT \n      wt_stg1.icustay_id\n    , ie.intime, ie.outtime\n    , case when wt_stg1.weight_type = 'admit' and wt_stg1.rn = 1\n        then DATETIME_SUB(ie.intime, INTERVAL '2' HOUR)\n      else wt_stg1.charttime end as starttime\n    , wt_stg1.weight\n  from wt_stg1\n  INNER JOIN icustays ie\n    on ie.icustay_id = wt_stg1.icustay_id\n)\n, wt_stg3 as\n(\n  select\n    icustay_id\n    , intime, outtime\n    , starttime\n    , coalesce(\n        LEAD(starttime) OVER (PARTITION BY icustay_id ORDER BY starttime),\n        DATETIME_ADD(GREATEST(outtime, starttime), INTERVAL '2' HOUR)\n      ) as endtime\n    , weight\n  from wt_stg2\n)\n-- this table is the start/stop times from admit/daily weight in charted data\n, wt1 as\n(\n  select\n      icustay_id\n    , starttime\n    , coalesce(endtime,\n      LEAD(starttime) OVER (partition by icustay_id order by starttime),\n      -- impute ICU discharge as the end of the final weight measurement\n      -- plus a 2 hour \"fuzziness\" window\n      DATETIME_ADD(outtime, INTERVAL '2' HOUR)\n    ) as endtime\n    , weight\n  from wt_stg3\n)\n-- if the intime for the patient is < the first charted daily weight\n-- then we will have a \"gap\" at the start of their stay\n-- to prevent this, we look for these gaps and backfill the first weight\n-- this adds (153255-149657)=3598 rows, meaning this fix helps for up to 3598 icustay_id\n, wt_fix as\n(\n  select ie.icustay_id\n    -- we add a 2 hour \"fuzziness\" window\n    , DATETIME_SUB(ie.intime, INTERVAL '2' HOUR) as starttime\n    , wt.starttime as endtime\n    , wt.weight\n  from icustays ie\n  inner join\n  -- the below subquery returns one row for each unique icustay_id\n  -- the row contains: the first starttime and the corresponding weight\n  (\n    SELECT wt1.icustay_id, wt1.starttime, wt1.weight\n    , ROW_NUMBER() OVER (PARTITION BY wt1.icustay_id ORDER BY wt1.starttime) as rn\n    FROM wt1\n  ) wt\n    ON  ie.icustay_id = wt.icustay_id\n    AND wt.rn = 1\n    and ie.intime < wt.starttime\n)\n-- add the backfill rows to the main weight table\nselect\n    wt1.icustay_id\n  , wt1.starttime\n  , wt1.endtime\n  , wt1.weight\nfrom wt1\nUNION ALL\nSELECT\n    wt_fix.icustay_id\n  , wt_fix.starttime\n  , wt_fix.endtime\n  , wt_fix.weight\nfrom wt_fix\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"weight_durations__dbt_tmp\"\n  as (\n    -- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\n\n-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\nWITH wt_neonate AS\n( \n    SELECT c.icustay_id, c.charttime\n    , MAX(CASE WHEN c.itemid = 3580 THEN c.valuenum END) as wt_kg\n    , MAX(CASE WHEN c.itemid = 3581 THEN c.valuenum END) as wt_lb\n    , MAX(CASE WHEN c.itemid = 3582 THEN c.valuenum END) as wt_oz\n    FROM chartevents c\n    WHERE c.itemid in (3580, 3581, 3582)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n    -- wt_oz/wt_lb/wt_kg are only 0 erroneously, so drop these rows\n    AND c.valuenum > 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, birth_wt AS\n(\n    SELECT c.icustay_id, c.charttime\n    , MAX(\n      CASE\n      WHEN c.itemid = 4183 THEN\n        -- clean free-text birth weight data\n        CASE\n          -- ignore value if there are any non-numeric characters\n          WHEN REGEXP_CONTAINS(c.value, '[^0-9\\\\.]') THEN NULL \n          -- convert grams to kd\n          WHEN CAST(c.value AS NUMERIC) > 100 THEN CAST(c.value AS NUMERIC)/1000\n          -- keep kg as is, filtering bad values (largest baby ever born was conveniently 9.98kg)\n          WHEN CAST(c.value AS NUMERIC) < 10 THEN CAST(c.value AS NUMERIC)\n          -- ignore other values (those between 10-100) - junk data\n        ELSE NULL END\n      -- itemid 3723 happily has all numeric data - also doesn't store any grams data\n      WHEN c.itemid = 3723 AND c.valuenum < 10 THEN c.valuenum\n      ELSE NULL END) as wt_kg\n    FROM chartevents c\n    WHERE c.itemid in (3723, 4183)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, wt_stg as\n(\n    SELECT\n        c.icustay_id\n      , c.charttime\n      , case when c.itemid in (762,226512) then 'admit'\n          else 'daily' end as weight_type\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      , c.valuenum as weight\n    FROM chartevents c\n    WHERE c.valuenum IS NOT NULL\n      AND c.itemid in\n      (\n          762,226512 -- Admit Wt\n        , 763,224639 -- Daily Weight\n      )\n      AND c.icustay_id IS NOT NULL\n      AND c.valuenum > 0\n      -- exclude rows marked as error\n      AND COALESCE(c.error, 0) = 0\n    UNION ALL\n    SELECT\n        n.icustay_id\n      , n.charttime\n      , 'daily' AS weight_type\n      , CASE\n          WHEN wt_kg IS NOT NULL THEN wt_kg\n          WHEN wt_lb IS NOT NULL THEN wt_lb*0.45359237 + wt_oz*0.0283495231\n        ELSE NULL END AS weight\n    FROM wt_neonate n\n    UNION ALL\n    SELECT\n        b.icustay_id\n      , b.charttime\n      -- birth weight of neonates is treated as admission weight\n      , 'admit' AS weight_type\n      , wt_kg as weight\n    FROM birth_wt b\n)\n-- get more weights from echo - completes data for ~2500 patients\n-- we only use echo data if there is *no* charted data\n-- we impute the median echo weight for their entire ICU stay\n, echo as\n(\n  select\n    ie.icustay_id\n    , ec.charttime\n    , 'echo' AS weight_type\n    , 0.453592*ec.weight as weight\n  from icustays ie\n  inner join \"postgres\".\"public\".\"echo_data\" ec\n    on ie.hadm_id = ec.hadm_id\n  where ec.weight is not null\n  and ie.icustay_id not in (select distinct icustay_id from wt_stg)\n)\n, wt_stg0 AS\n(\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM wt_stg\n  UNION ALL\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM echo\n)\n-- assign ascending row number\n, wt_stg1 as\n(\n  select\n      icustay_id\n    , charttime\n    , weight_type\n    , weight\n    , ROW_NUMBER() OVER (partition by icustay_id, weight_type order by charttime) as rn\n  from wt_stg0\n  WHERE weight IS NOT NULL\n)\n-- change charttime to intime for the first admission weight recorded\n, wt_stg2 AS\n(\n  SELECT \n      wt_stg1.icustay_id\n    , ie.intime, ie.outtime\n    , case when wt_stg1.weight_type = 'admit' and wt_stg1.rn = 1\n        then DATETIME_SUB(ie.intime, INTERVAL '2' HOUR)\n      else wt_stg1.charttime end as starttime\n    , wt_stg1.weight\n  from wt_stg1\n  INNER JOIN icustays ie\n    on ie.icustay_id = wt_stg1.icustay_id\n)\n, wt_stg3 as\n(\n  select\n    icustay_id\n    , intime, outtime\n    , starttime\n    , coalesce(\n        LEAD(starttime) OVER (PARTITION BY icustay_id ORDER BY starttime),\n        DATETIME_ADD(GREATEST(outtime, starttime), INTERVAL '2' HOUR)\n      ) as endtime\n    , weight\n  from wt_stg2\n)\n-- this table is the start/stop times from admit/daily weight in charted data\n, wt1 as\n(\n  select\n      icustay_id\n    , starttime\n    , coalesce(endtime,\n      LEAD(starttime) OVER (partition by icustay_id order by starttime),\n      -- impute ICU discharge as the end of the final weight measurement\n      -- plus a 2 hour \"fuzziness\" window\n      DATETIME_ADD(outtime, INTERVAL '2' HOUR)\n    ) as endtime\n    , weight\n  from wt_stg3\n)\n-- if the intime for the patient is < the first charted daily weight\n-- then we will have a \"gap\" at the start of their stay\n-- to prevent this, we look for these gaps and backfill the first weight\n-- this adds (153255-149657)=3598 rows, meaning this fix helps for up to 3598 icustay_id\n, wt_fix as\n(\n  select ie.icustay_id\n    -- we add a 2 hour \"fuzziness\" window\n    , DATETIME_SUB(ie.intime, INTERVAL '2' HOUR) as starttime\n    , wt.starttime as endtime\n    , wt.weight\n  from icustays ie\n  inner join\n  -- the below subquery returns one row for each unique icustay_id\n  -- the row contains: the first starttime and the corresponding weight\n  (\n    SELECT wt1.icustay_id, wt1.starttime, wt1.weight\n    , ROW_NUMBER() OVER (PARTITION BY wt1.icustay_id ORDER BY wt1.starttime) as rn\n    FROM wt1\n  ) wt\n    ON  ie.icustay_id = wt.icustay_id\n    AND wt.rn = 1\n    and ie.intime < wt.starttime\n)\n-- add the backfill rows to the main weight table\nselect\n    wt1.icustay_id\n  , wt1.starttime\n  , wt1.endtime\n  , wt1.weight\nfrom wt1\nUNION ALL\nSELECT\n    wt_fix.icustay_id\n  , wt_fix.starttime\n  , wt_fix.endtime\n  , wt_fix.weight\nfrom wt_fix\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.753884Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 15"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 15 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.761216Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.767431Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\nalter table \"postgres\".\"public\".\"weight_durations\" rename to \"weight_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\nalter table \"postgres\".\"public\".\"weight_durations\" rename to \"weight_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.767754Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.768932Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.774547Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\nalter table \"postgres\".\"public\".\"weight_durations__dbt_tmp\" rename to \"weight_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\nalter table \"postgres\".\"public\".\"weight_durations__dbt_tmp\" rename to \"weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.775039Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.776425Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.780814Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.781256Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.781798Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.783554Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.787066Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"weight_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"weight_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.787485Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.790292Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.793523Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.793981Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.weight_durations", "execution_time": 0, "index": 82, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": "2022-07-18T00:11:34.727264", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "status": "SELECT 15", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "82 of 107 OK created table model public.weight_durations ....................... [\u001b[32mSELECT 15\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.794917Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:34.795463", "node_name": "weight_durations", "node_path": "durations/weight_durations.sql", "node_started_at": "2022-07-18T00:11:34.727264", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.weight_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 15", "code": "SELECT", "rows_affected": 15}, "agate_table": null, "execution_time": 0.06604170799255371, "failures": null, "message": "SELECT 15", "node": {"alias": "weight_durations", "build_path": "target/run/mimic/models/durations/weight_durations.sql", "checksum": {"checksum": "b93bb441e7e243abdaa3c36b4b577d88c94501c84267cc5e501def400ad7da0d", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/weight_durations.sql", "compiled_sql": "-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\n\n-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\nWITH wt_neonate AS\n( \n    SELECT c.icustay_id, c.charttime\n    , MAX(CASE WHEN c.itemid = 3580 THEN c.valuenum END) as wt_kg\n    , MAX(CASE WHEN c.itemid = 3581 THEN c.valuenum END) as wt_lb\n    , MAX(CASE WHEN c.itemid = 3582 THEN c.valuenum END) as wt_oz\n    FROM chartevents c\n    WHERE c.itemid in (3580, 3581, 3582)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n    -- wt_oz/wt_lb/wt_kg are only 0 erroneously, so drop these rows\n    AND c.valuenum > 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, birth_wt AS\n(\n    SELECT c.icustay_id, c.charttime\n    , MAX(\n      CASE\n      WHEN c.itemid = 4183 THEN\n        -- clean free-text birth weight data\n        CASE\n          -- ignore value if there are any non-numeric characters\n          WHEN REGEXP_CONTAINS(c.value, '[^0-9\\\\.]') THEN NULL \n          -- convert grams to kd\n          WHEN CAST(c.value AS NUMERIC) > 100 THEN CAST(c.value AS NUMERIC)/1000\n          -- keep kg as is, filtering bad values (largest baby ever born was conveniently 9.98kg)\n          WHEN CAST(c.value AS NUMERIC) < 10 THEN CAST(c.value AS NUMERIC)\n          -- ignore other values (those between 10-100) - junk data\n        ELSE NULL END\n      -- itemid 3723 happily has all numeric data - also doesn't store any grams data\n      WHEN c.itemid = 3723 AND c.valuenum < 10 THEN c.valuenum\n      ELSE NULL END) as wt_kg\n    FROM chartevents c\n    WHERE c.itemid in (3723, 4183)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, wt_stg as\n(\n    SELECT\n        c.icustay_id\n      , c.charttime\n      , case when c.itemid in (762,226512) then 'admit'\n          else 'daily' end as weight_type\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      , c.valuenum as weight\n    FROM chartevents c\n    WHERE c.valuenum IS NOT NULL\n      AND c.itemid in\n      (\n          762,226512 -- Admit Wt\n        , 763,224639 -- Daily Weight\n      )\n      AND c.icustay_id IS NOT NULL\n      AND c.valuenum > 0\n      -- exclude rows marked as error\n      AND COALESCE(c.error, 0) = 0\n    UNION ALL\n    SELECT\n        n.icustay_id\n      , n.charttime\n      , 'daily' AS weight_type\n      , CASE\n          WHEN wt_kg IS NOT NULL THEN wt_kg\n          WHEN wt_lb IS NOT NULL THEN wt_lb*0.45359237 + wt_oz*0.0283495231\n        ELSE NULL END AS weight\n    FROM wt_neonate n\n    UNION ALL\n    SELECT\n        b.icustay_id\n      , b.charttime\n      -- birth weight of neonates is treated as admission weight\n      , 'admit' AS weight_type\n      , wt_kg as weight\n    FROM birth_wt b\n)\n-- get more weights from echo - completes data for ~2500 patients\n-- we only use echo data if there is *no* charted data\n-- we impute the median echo weight for their entire ICU stay\n, echo as\n(\n  select\n    ie.icustay_id\n    , ec.charttime\n    , 'echo' AS weight_type\n    , 0.453592*ec.weight as weight\n  from icustays ie\n  inner join \"postgres\".\"public\".\"echo_data\" ec\n    on ie.hadm_id = ec.hadm_id\n  where ec.weight is not null\n  and ie.icustay_id not in (select distinct icustay_id from wt_stg)\n)\n, wt_stg0 AS\n(\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM wt_stg\n  UNION ALL\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM echo\n)\n-- assign ascending row number\n, wt_stg1 as\n(\n  select\n      icustay_id\n    , charttime\n    , weight_type\n    , weight\n    , ROW_NUMBER() OVER (partition by icustay_id, weight_type order by charttime) as rn\n  from wt_stg0\n  WHERE weight IS NOT NULL\n)\n-- change charttime to intime for the first admission weight recorded\n, wt_stg2 AS\n(\n  SELECT \n      wt_stg1.icustay_id\n    , ie.intime, ie.outtime\n    , case when wt_stg1.weight_type = 'admit' and wt_stg1.rn = 1\n        then DATETIME_SUB(ie.intime, INTERVAL '2' HOUR)\n      else wt_stg1.charttime end as starttime\n    , wt_stg1.weight\n  from wt_stg1\n  INNER JOIN icustays ie\n    on ie.icustay_id = wt_stg1.icustay_id\n)\n, wt_stg3 as\n(\n  select\n    icustay_id\n    , intime, outtime\n    , starttime\n    , coalesce(\n        LEAD(starttime) OVER (PARTITION BY icustay_id ORDER BY starttime),\n        DATETIME_ADD(GREATEST(outtime, starttime), INTERVAL '2' HOUR)\n      ) as endtime\n    , weight\n  from wt_stg2\n)\n-- this table is the start/stop times from admit/daily weight in charted data\n, wt1 as\n(\n  select\n      icustay_id\n    , starttime\n    , coalesce(endtime,\n      LEAD(starttime) OVER (partition by icustay_id order by starttime),\n      -- impute ICU discharge as the end of the final weight measurement\n      -- plus a 2 hour \"fuzziness\" window\n      DATETIME_ADD(outtime, INTERVAL '2' HOUR)\n    ) as endtime\n    , weight\n  from wt_stg3\n)\n-- if the intime for the patient is < the first charted daily weight\n-- then we will have a \"gap\" at the start of their stay\n-- to prevent this, we look for these gaps and backfill the first weight\n-- this adds (153255-149657)=3598 rows, meaning this fix helps for up to 3598 icustay_id\n, wt_fix as\n(\n  select ie.icustay_id\n    -- we add a 2 hour \"fuzziness\" window\n    , DATETIME_SUB(ie.intime, INTERVAL '2' HOUR) as starttime\n    , wt.starttime as endtime\n    , wt.weight\n  from icustays ie\n  inner join\n  -- the below subquery returns one row for each unique icustay_id\n  -- the row contains: the first starttime and the corresponding weight\n  (\n    SELECT wt1.icustay_id, wt1.starttime, wt1.weight\n    , ROW_NUMBER() OVER (PARTITION BY wt1.icustay_id ORDER BY wt1.starttime) as rn\n    FROM wt1\n  ) wt\n    ON  ie.icustay_id = wt.icustay_id\n    AND wt.rn = 1\n    and ie.intime < wt.starttime\n)\n-- add the backfill rows to the main weight table\nselect\n    wt1.icustay_id\n  , wt1.starttime\n  , wt1.endtime\n  , wt1.weight\nfrom wt1\nUNION ALL\nSELECT\n    wt_fix.icustay_id\n  , wt_fix.starttime\n  , wt_fix.endtime\n  , wt_fix.weight\nfrom wt_fix", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4877667, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.echo_data"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "weight_durations"], "meta": {}, "name": "weight_durations", "original_file_path": "models/durations/weight_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/weight_durations.sql", "raw_sql": "-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\n\n-- This query extracts weights for adult ICU patients with start/stop times\n-- if an admission weight is given, then this is assigned from intime to outtime\nWITH wt_neonate AS\n( \n    SELECT c.icustay_id, c.charttime\n    , MAX(CASE WHEN c.itemid = 3580 THEN c.valuenum END) as wt_kg\n    , MAX(CASE WHEN c.itemid = 3581 THEN c.valuenum END) as wt_lb\n    , MAX(CASE WHEN c.itemid = 3582 THEN c.valuenum END) as wt_oz\n    FROM chartevents c\n    WHERE c.itemid in (3580, 3581, 3582)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n    -- wt_oz/wt_lb/wt_kg are only 0 erroneously, so drop these rows\n    AND c.valuenum > 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, birth_wt AS\n(\n    SELECT c.icustay_id, c.charttime\n    , MAX(\n      CASE\n      WHEN c.itemid = 4183 THEN\n        -- clean free-text birth weight data\n        CASE\n          -- ignore value if there are any non-numeric characters\n          WHEN REGEXP_CONTAINS(c.value, '[^0-9\\\\.]') THEN NULL \n          -- convert grams to kd\n          WHEN CAST(c.value AS NUMERIC) > 100 THEN CAST(c.value AS NUMERIC)/1000\n          -- keep kg as is, filtering bad values (largest baby ever born was conveniently 9.98kg)\n          WHEN CAST(c.value AS NUMERIC) < 10 THEN CAST(c.value AS NUMERIC)\n          -- ignore other values (those between 10-100) - junk data\n        ELSE NULL END\n      -- itemid 3723 happily has all numeric data - also doesn't store any grams data\n      WHEN c.itemid = 3723 AND c.valuenum < 10 THEN c.valuenum\n      ELSE NULL END) as wt_kg\n    FROM chartevents c\n    WHERE c.itemid in (3723, 4183)\n    AND c.icustay_id IS NOT NULL\n    AND COALESCE(c.error, 0) = 0\n  -- a separate query was run to manually verify only 1 value exists per\n  -- icustay_id/charttime/itemid grouping\n  -- therefore, we can use max() across itemid to collapse these values to 1 row per group\n    GROUP BY c.icustay_id, c.charttime\n)\n, wt_stg as\n(\n    SELECT\n        c.icustay_id\n      , c.charttime\n      , case when c.itemid in (762,226512) then 'admit'\n          else 'daily' end as weight_type\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      , c.valuenum as weight\n    FROM chartevents c\n    WHERE c.valuenum IS NOT NULL\n      AND c.itemid in\n      (\n          762,226512 -- Admit Wt\n        , 763,224639 -- Daily Weight\n      )\n      AND c.icustay_id IS NOT NULL\n      AND c.valuenum > 0\n      -- exclude rows marked as error\n      AND COALESCE(c.error, 0) = 0\n    UNION ALL\n    SELECT\n        n.icustay_id\n      , n.charttime\n      , 'daily' AS weight_type\n      , CASE\n          WHEN wt_kg IS NOT NULL THEN wt_kg\n          WHEN wt_lb IS NOT NULL THEN wt_lb*0.45359237 + wt_oz*0.0283495231\n        ELSE NULL END AS weight\n    FROM wt_neonate n\n    UNION ALL\n    SELECT\n        b.icustay_id\n      , b.charttime\n      -- birth weight of neonates is treated as admission weight\n      , 'admit' AS weight_type\n      , wt_kg as weight\n    FROM birth_wt b\n)\n-- get more weights from echo - completes data for ~2500 patients\n-- we only use echo data if there is *no* charted data\n-- we impute the median echo weight for their entire ICU stay\n, echo as\n(\n  select\n    ie.icustay_id\n    , ec.charttime\n    , 'echo' AS weight_type\n    , 0.453592*ec.weight as weight\n  from icustays ie\n  inner join {{ref('echo_data')}} ec\n    on ie.hadm_id = ec.hadm_id\n  where ec.weight is not null\n  and ie.icustay_id not in (select distinct icustay_id from wt_stg)\n)\n, wt_stg0 AS\n(\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM wt_stg\n  UNION ALL\n  SELECT icustay_id, charttime, weight_type, weight\n  FROM echo\n)\n-- assign ascending row number\n, wt_stg1 as\n(\n  select\n      icustay_id\n    , charttime\n    , weight_type\n    , weight\n    , ROW_NUMBER() OVER (partition by icustay_id, weight_type order by charttime) as rn\n  from wt_stg0\n  WHERE weight IS NOT NULL\n)\n-- change charttime to intime for the first admission weight recorded\n, wt_stg2 AS\n(\n  SELECT \n      wt_stg1.icustay_id\n    , ie.intime, ie.outtime\n    , case when wt_stg1.weight_type = 'admit' and wt_stg1.rn = 1\n        then DATETIME_SUB(ie.intime, INTERVAL '2' HOUR)\n      else wt_stg1.charttime end as starttime\n    , wt_stg1.weight\n  from wt_stg1\n  INNER JOIN icustays ie\n    on ie.icustay_id = wt_stg1.icustay_id\n)\n, wt_stg3 as\n(\n  select\n    icustay_id\n    , intime, outtime\n    , starttime\n    , coalesce(\n        LEAD(starttime) OVER (PARTITION BY icustay_id ORDER BY starttime),\n        DATETIME_ADD(GREATEST(outtime, starttime), INTERVAL '2' HOUR)\n      ) as endtime\n    , weight\n  from wt_stg2\n)\n-- this table is the start/stop times from admit/daily weight in charted data\n, wt1 as\n(\n  select\n      icustay_id\n    , starttime\n    , coalesce(endtime,\n      LEAD(starttime) OVER (partition by icustay_id order by starttime),\n      -- impute ICU discharge as the end of the final weight measurement\n      -- plus a 2 hour \"fuzziness\" window\n      DATETIME_ADD(outtime, INTERVAL '2' HOUR)\n    ) as endtime\n    , weight\n  from wt_stg3\n)\n-- if the intime for the patient is < the first charted daily weight\n-- then we will have a \"gap\" at the start of their stay\n-- to prevent this, we look for these gaps and backfill the first weight\n-- this adds (153255-149657)=3598 rows, meaning this fix helps for up to 3598 icustay_id\n, wt_fix as\n(\n  select ie.icustay_id\n    -- we add a 2 hour \"fuzziness\" window\n    , DATETIME_SUB(ie.intime, INTERVAL '2' HOUR) as starttime\n    , wt.starttime as endtime\n    , wt.weight\n  from icustays ie\n  inner join\n  -- the below subquery returns one row for each unique icustay_id\n  -- the row contains: the first starttime and the corresponding weight\n  (\n    SELECT wt1.icustay_id, wt1.starttime, wt1.weight\n    , ROW_NUMBER() OVER (PARTITION BY wt1.icustay_id ORDER BY wt1.starttime) as rn\n    FROM wt1\n  ) wt\n    ON  ie.icustay_id = wt.icustay_id\n    AND wt.rn = 1\n    and ie.intime < wt.starttime\n)\n-- add the backfill rows to the main weight table\nselect\n    wt1.icustay_id\n  , wt1.starttime\n  , wt1.endtime\n  , wt1.weight\nfrom wt1\nUNION ALL\nSELECT\n    wt_fix.icustay_id\n  , wt_fix.starttime\n  , wt_fix.endtime\n  , wt_fix.weight\nfrom wt_fix", "refs": [["echo_data"]], "relation_name": "\"postgres\".\"public\".\"weight_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.weight_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:34.734781Z", "name": "compile", "started_at": "2022-07-18T00:11:34.729796Z"}, {"completed_at": "2022-07-18T00:11:34.793493Z", "name": "execute", "started_at": "2022-07-18T00:11:34.735392Z"}]}, "unique_id": "model.mimic.weight_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.weight_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.795666Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": "2022-07-18T00:11:34.796502", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.weight_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.796590Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.weight_first_day", "index": 83, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": "2022-07-18T00:11:34.796502", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "83 of 107 START table model public.weight_first_day ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.798005Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.800111Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": "2022-07-18T00:11:34.796502", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.weight_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.800442Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.weight_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.800777Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.803819Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.804400Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.weight_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.804696Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.weight_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.813958Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.814904Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.815267Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.815571Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.823846Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.824402Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"weight_first_day__dbt_tmp\"\n  as (\n    -- This query extracts weights for adult ICU patients on their first ICU day.\n-- It does *not* use any information after the first ICU day, as weight is\n-- sometimes used to monitor fluid balance.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\nwith ce as\n(\n    SELECT\n      c.icustay_id\n      -- we take the avg value from roughly first day\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      -- (e.g. weight of 180kg and 90kg would remove 180kg instead of taking the median)\n      , AVG(VALUENUM) as Weight_Admit\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (762,226512) -- Admit Wt\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n, dwt as\n(\n    SELECT\n      c.icustay_id\n      , AVG(VALUENUM) as Weight_Daily\n    FROM chartevents c\n    INNER JOIN icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (763,224639) -- Daily Weight\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n-- we split in-hospital/out of hospital echoes as we would like to prioritize in-hospital data\n, echo_hadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoInHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.hadm_id = ie.hadm_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where\n            ec.HADM_ID is not null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\n, echo_nohadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoPreHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ie.subject_id = ec.subject_id\n        and ie.intime < DATETIME_ADD(ec.charttime, INTERVAL '1' MONTH)\n        and ie.intime > ec.charttime\n    where\n            ec.HADM_ID is null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\nselect\n    ie.icustay_id\n    , round(cast(\n    case\n        when ce.icustay_id is not null\n            then ce.Weight_Admit\n        when dwt.icustay_id is not null\n            then dwt.Weight_Daily\n        when eh.icustay_id is not null\n            then eh.Weight_EchoInHosp\n        when enh.icustay_id is not null\n            then enh.Weight_EchoPreHosp\n        else null end\n        as numeric), 2)\n    as weight\n\n    -- components\n    , ce.weight_admit\n    , dwt.weight_daily\n    , eh.weight_echoinhosp\n    , enh.weight_echoprehosp\n\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\n-- admission weight\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\n-- daily weights\nleft join dwt\n    on ie.icustay_id = dwt.icustay_id\n\n-- in-hospital echo weight\nleft join echo_hadm eh\n    on ie.icustay_id = eh.icustay_id\n\n-- pre-hospitalization echo weights\nleft join echo_nohadm enh\n    on ie.icustay_id = enh.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"weight_first_day__dbt_tmp\"\n  as (\n    -- This query extracts weights for adult ICU patients on their first ICU day.\n-- It does *not* use any information after the first ICU day, as weight is\n-- sometimes used to monitor fluid balance.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\nwith ce as\n(\n    SELECT\n      c.icustay_id\n      -- we take the avg value from roughly first day\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      -- (e.g. weight of 180kg and 90kg would remove 180kg instead of taking the median)\n      , AVG(VALUENUM) as Weight_Admit\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (762,226512) -- Admit Wt\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n, dwt as\n(\n    SELECT\n      c.icustay_id\n      , AVG(VALUENUM) as Weight_Daily\n    FROM chartevents c\n    INNER JOIN icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (763,224639) -- Daily Weight\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n-- we split in-hospital/out of hospital echoes as we would like to prioritize in-hospital data\n, echo_hadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoInHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.hadm_id = ie.hadm_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where\n            ec.HADM_ID is not null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\n, echo_nohadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoPreHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ie.subject_id = ec.subject_id\n        and ie.intime < DATETIME_ADD(ec.charttime, INTERVAL '1' MONTH)\n        and ie.intime > ec.charttime\n    where\n            ec.HADM_ID is null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\nselect\n    ie.icustay_id\n    , round(cast(\n    case\n        when ce.icustay_id is not null\n            then ce.Weight_Admit\n        when dwt.icustay_id is not null\n            then dwt.Weight_Daily\n        when eh.icustay_id is not null\n            then eh.Weight_EchoInHosp\n        when enh.icustay_id is not null\n            then enh.Weight_EchoPreHosp\n        else null end\n        as numeric), 2)\n    as weight\n\n    -- components\n    , ce.weight_admit\n    , dwt.weight_daily\n    , eh.weight_echoinhosp\n    , enh.weight_echoprehosp\n\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\n-- admission weight\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\n-- daily weights\nleft join dwt\n    on ie.icustay_id = dwt.icustay_id\n\n-- in-hospital echo weight\nleft join echo_hadm eh\n    on ie.icustay_id = eh.icustay_id\n\n-- pre-hospitalization echo weights\nleft join echo_nohadm enh\n    on ie.icustay_id = enh.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.824991Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.13, "status": "SELECT 53432"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 53432 in 0.13 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.954883Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.959984Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\nalter table \"postgres\".\"public\".\"weight_first_day\" rename to \"weight_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\nalter table \"postgres\".\"public\".\"weight_first_day\" rename to \"weight_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.960260Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.961015Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.967165Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\nalter table \"postgres\".\"public\".\"weight_first_day__dbt_tmp\" rename to \"weight_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\nalter table \"postgres\".\"public\".\"weight_first_day__dbt_tmp\" rename to \"weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.967432Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.968258Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.972600Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.972959Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.973121Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.979351Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.weight_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.weight_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.982392Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.weight_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"weight_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.weight_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"weight_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.982686Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.985491Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.988967Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.weight_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.989347Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.weight_first_day", "execution_time": 0, "index": 83, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": "2022-07-18T00:11:34.796502", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "status": "SELECT 53432", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "83 of 107 OK created table model public.weight_first_day ....................... [\u001b[32mSELECT 53432\u001b[0m in 0.19s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.990263Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:34.990783", "node_name": "weight_first_day", "node_path": "firstday/weight_first_day.sql", "node_started_at": "2022-07-18T00:11:34.796502", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.weight_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 53432", "code": "SELECT", "rows_affected": 53432}, "agate_table": null, "execution_time": 0.19040918350219727, "failures": null, "message": "SELECT 53432", "node": {"alias": "weight_first_day", "build_path": "target/run/mimic/models/firstday/weight_first_day.sql", "checksum": {"checksum": "61809e0534880d7740cd7d590d3bb52bf1405f76c11092a6a8d3ca26ea8993cf", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/weight_first_day.sql", "compiled_sql": "-- This query extracts weights for adult ICU patients on their first ICU day.\n-- It does *not* use any information after the first ICU day, as weight is\n-- sometimes used to monitor fluid balance.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\nwith ce as\n(\n    SELECT\n      c.icustay_id\n      -- we take the avg value from roughly first day\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      -- (e.g. weight of 180kg and 90kg would remove 180kg instead of taking the median)\n      , AVG(VALUENUM) as Weight_Admit\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (762,226512) -- Admit Wt\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n, dwt as\n(\n    SELECT\n      c.icustay_id\n      , AVG(VALUENUM) as Weight_Daily\n    FROM chartevents c\n    INNER JOIN icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (763,224639) -- Daily Weight\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n-- we split in-hospital/out of hospital echoes as we would like to prioritize in-hospital data\n, echo_hadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoInHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ec.hadm_id = ie.hadm_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where\n            ec.HADM_ID is not null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\n, echo_nohadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoPreHosp\n    from \"postgres\".\"public\".\"echo_data\" ec\n    inner join icustays ie\n        on ie.subject_id = ec.subject_id\n        and ie.intime < DATETIME_ADD(ec.charttime, INTERVAL '1' MONTH)\n        and ie.intime > ec.charttime\n    where\n            ec.HADM_ID is null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\nselect\n    ie.icustay_id\n    , round(cast(\n    case\n        when ce.icustay_id is not null\n            then ce.Weight_Admit\n        when dwt.icustay_id is not null\n            then dwt.Weight_Daily\n        when eh.icustay_id is not null\n            then eh.Weight_EchoInHosp\n        when enh.icustay_id is not null\n            then enh.Weight_EchoPreHosp\n        else null end\n        as numeric), 2)\n    as weight\n\n    -- components\n    , ce.weight_admit\n    , dwt.weight_daily\n    , eh.weight_echoinhosp\n    , enh.weight_echoprehosp\n\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\n-- admission weight\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\n-- daily weights\nleft join dwt\n    on ie.icustay_id = dwt.icustay_id\n\n-- in-hospital echo weight\nleft join echo_hadm eh\n    on ie.icustay_id = eh.icustay_id\n\n-- pre-hospitalization echo weights\nleft join echo_nohadm enh\n    on ie.icustay_id = enh.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5422626, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.echo_data", "model.mimic.echo_data"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "weight_first_day"], "meta": {}, "name": "weight_first_day", "original_file_path": "models/firstday/weight_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/weight_first_day.sql", "raw_sql": "-- This query extracts weights for adult ICU patients on their first ICU day.\n-- It does *not* use any information after the first ICU day, as weight is\n-- sometimes used to monitor fluid balance.\n\n-- ** Requires the echodata view, generated by concepts/echo-data.sql\n\nwith ce as\n(\n    SELECT\n      c.icustay_id\n      -- we take the avg value from roughly first day\n      -- TODO: eliminate obvious outliers if there is a reasonable weight\n      -- (e.g. weight of 180kg and 90kg would remove 180kg instead of taking the median)\n      , AVG(VALUENUM) as Weight_Admit\n    FROM chartevents c\n    inner join icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (762,226512) -- Admit Wt\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n, dwt as\n(\n    SELECT\n      c.icustay_id\n      , AVG(VALUENUM) as Weight_Daily\n    FROM chartevents c\n    INNER JOIN icustays ie\n        on c.icustay_id = ie.icustay_id\n        and c.charttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n        and c.charttime > DATETIME_SUB(ie.intime, INTERVAL '1' DAY) -- some fuzziness for admit time\n    WHERE c.valuenum IS NOT NULL\n    AND c.itemid in (763,224639) -- Daily Weight\n    AND c.valuenum != 0\n    -- exclude rows marked as error\n    AND (c.error IS NULL OR c.error = 0)\n    group by c.icustay_id\n)\n-- we split in-hospital/out of hospital echoes as we would like to prioritize in-hospital data\n, echo_hadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoInHosp\n    from {{ref('echo_data')}} ec\n    inner join icustays ie\n        on ec.hadm_id = ie.hadm_id\n        and ec.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n    where\n            ec.HADM_ID is not null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\n, echo_nohadm as\n(\n    select\n        ie.icustay_id\n        , 0.453592*AVG(weight) as Weight_EchoPreHosp\n    from {{ref('echo_data')}} ec\n    inner join icustays ie\n        on ie.subject_id = ec.subject_id\n        and ie.intime < DATETIME_ADD(ec.charttime, INTERVAL '1' MONTH)\n        and ie.intime > ec.charttime\n    where\n            ec.HADM_ID is null\n        and ec.weight is not null\n    group by ie.icustay_id\n)\nselect\n    ie.icustay_id\n    , round(cast(\n    case\n        when ce.icustay_id is not null\n            then ce.Weight_Admit\n        when dwt.icustay_id is not null\n            then dwt.Weight_Daily\n        when eh.icustay_id is not null\n            then eh.Weight_EchoInHosp\n        when enh.icustay_id is not null\n            then enh.Weight_EchoPreHosp\n        else null end\n        as numeric), 2)\n    as weight\n\n    -- components\n    , ce.weight_admit\n    , dwt.weight_daily\n    , eh.weight_echoinhosp\n    , enh.weight_echoprehosp\n\nFROM icustays ie\n\n-- filter to only adults\ninner join patients pat\n    on ie.subject_id = pat.subject_id\n    and ie.intime > DATETIME_ADD(pat.dob, INTERVAL '1' YEAR)\n\n-- admission weight\nleft join ce\n    on ie.icustay_id = ce.icustay_id\n\n-- daily weights\nleft join dwt\n    on ie.icustay_id = dwt.icustay_id\n\n-- in-hospital echo weight\nleft join echo_hadm eh\n    on ie.icustay_id = eh.icustay_id\n\n-- pre-hospitalization echo weights\nleft join echo_nohadm enh\n    on ie.icustay_id = enh.icustay_id\norder by ie.icustay_id", "refs": [["echo_data"], ["echo_data"]], "relation_name": "\"postgres\".\"public\".\"weight_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.weight_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:34.804348Z", "name": "compile", "started_at": "2022-07-18T00:11:34.800737Z"}, {"completed_at": "2022-07-18T00:11:34.988854Z", "name": "execute", "started_at": "2022-07-18T00:11:34.804938Z"}]}, "unique_id": "model.mimic.weight_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.weight_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.990969Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": "2022-07-18T00:11:34.991413", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.elixhauser_score_ahrq", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.991519Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.elixhauser_score_ahrq", "index": 84, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": "2022-07-18T00:11:34.991413", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "84 of 107 START table model public.elixhauser_score_ahrq ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.992250Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.993118Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": "2022-07-18T00:11:34.991413", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.elixhauser_score_ahrq", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.993339Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.elixhauser_score_ahrq", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.993597Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.996531Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.997159Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.elixhauser_score_ahrq", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:34.997340Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.elixhauser_score_ahrq\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.005470Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.006201Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.006474Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.006694Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.012568Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.012906Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_tmp\"\n  as (\n    -- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\nselect subject_id, hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom \"postgres\".\"public\".\"elixhauser_ahrq_v37\"\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_tmp\"\n  as (\n    -- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\nselect subject_id, hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom \"postgres\".\"public\".\"elixhauser_ahrq_v37\"\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.013157Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.06, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 0.06 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.073037Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.080344Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_ahrq\" rename to \"elixhauser_score_ahrq__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_ahrq\" rename to \"elixhauser_score_ahrq__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.080625Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.081830Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.089593Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_tmp\" rename to \"elixhauser_score_ahrq\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_tmp\" rename to \"elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.090063Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.090989Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.095797Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.096270Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.096606Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.100257Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_ahrq\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.103259Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_ahrq\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_score_ahrq__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.103544Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.106273Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.109197Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_ahrq: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.109477Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.elixhauser_score_ahrq", "execution_time": 0, "index": 84, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": "2022-07-18T00:11:34.991413", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "84 of 107 OK created table model public.elixhauser_score_ahrq .................. [\u001b[32mSELECT 58976\u001b[0m in 0.12s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.110939Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:35.111519", "node_name": "elixhauser_score_ahrq", "node_path": "comorbidity/elixhauser_score_ahrq.sql", "node_started_at": "2022-07-18T00:11:34.991413", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_ahrq"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 0.11785721778869629, "failures": null, "message": "SELECT 58976", "node": {"alias": "elixhauser_score_ahrq", "build_path": "target/run/mimic/models/comorbidity/elixhauser_score_ahrq.sql", "checksum": {"checksum": "67746002c89498e17950824c9f3ee5e554d9239195240c483ff199ba59b05f79", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/comorbidity/elixhauser_score_ahrq.sql", "compiled_sql": "-- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\nselect subject_id, hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom \"postgres\".\"public\".\"elixhauser_ahrq_v37\"", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6032345, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.elixhauser_ahrq_v37"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "comorbidity", "elixhauser_score_ahrq"], "meta": {}, "name": "elixhauser_score_ahrq", "original_file_path": "models/comorbidity/elixhauser_score_ahrq.sql", "package_name": "mimic", "patch_path": null, "path": "comorbidity/elixhauser_score_ahrq.sql", "raw_sql": "-- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\nselect subject_id, hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom {{ ref('elixhauser_ahrq_v37') }}", "refs": [["elixhauser_ahrq_v37"]], "relation_name": "\"postgres\".\"public\".\"elixhauser_score_ahrq\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.elixhauser_score_ahrq", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:34.997096Z", "name": "compile", "started_at": "2022-07-18T00:11:34.993492Z"}, {"completed_at": "2022-07-18T00:11:35.109167Z", "name": "execute", "started_at": "2022-07-18T00:11:34.997495Z"}]}, "unique_id": "model.mimic.elixhauser_score_ahrq"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.elixhauser_score_ahrq", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.112206Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": "2022-07-18T00:11:35.113175", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.elixhauser_score_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.113299Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.elixhauser_score_quan", "index": 85, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": "2022-07-18T00:11:35.113175", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "85 of 107 START table model public.elixhauser_score_quan ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.114211Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.116329Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": "2022-07-18T00:11:35.113175", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.elixhauser_score_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.116743Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.elixhauser_score_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.116967Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.124492Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.125222Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.elixhauser_score_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.125475Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.elixhauser_score_quan\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.137441Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.138548Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.138833Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.138989Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.145974Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.146427Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_score_quan__dbt_tmp\"\n  as (\n    -- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\n\nselect hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom  \"postgres\".\"public\".\"elixhauser_quan\"\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\n\n\n  create  table \"postgres\".\"public\".\"elixhauser_score_quan__dbt_tmp\"\n  as (\n    -- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\n\nselect hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom  \"postgres\".\"public\".\"elixhauser_quan\"\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.146880Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.07, "status": "SELECT 58976"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 58976 in 0.07 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.213426Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.218747Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_quan\" rename to \"elixhauser_score_quan__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_quan\" rename to \"elixhauser_score_quan__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.219051Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.219878Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.224459Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_quan__dbt_tmp\" rename to \"elixhauser_score_quan\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\nalter table \"postgres\".\"public\".\"elixhauser_score_quan__dbt_tmp\" rename to \"elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.224725Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.225410Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.229342Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.229671Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.229971Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.237268Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.elixhauser_score_quan\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.239456Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.elixhauser_score_quan", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_score_quan__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.elixhauser_score_quan\"} */\ndrop table if exists \"postgres\".\"public\".\"elixhauser_score_quan__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.239681Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.241751Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.246962Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.elixhauser_score_quan: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.247661Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.elixhauser_score_quan", "execution_time": 0, "index": 85, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": "2022-07-18T00:11:35.113175", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "status": "SELECT 58976", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "85 of 107 OK created table model public.elixhauser_score_quan .................. [\u001b[32mSELECT 58976\u001b[0m in 0.13s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.248815Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:35.249429", "node_name": "elixhauser_score_quan", "node_path": "comorbidity/elixhauser_score_quan.sql", "node_started_at": "2022-07-18T00:11:35.113175", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.elixhauser_score_quan"}, "run_result": {"adapter_response": {"_message": "SELECT 58976", "code": "SELECT", "rows_affected": 58976}, "agate_table": null, "execution_time": 0.13298630714416504, "failures": null, "message": "SELECT 58976", "node": {"alias": "elixhauser_score_quan", "build_path": "target/run/mimic/models/comorbidity/elixhauser_score_quan.sql", "checksum": {"checksum": "1a9b73eda2408f88a8acf3d18491cc29053f2bcf7d8b38347d95a68be1a2165b", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/comorbidity/elixhauser_score_quan.sql", "compiled_sql": "-- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\n\nselect hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom  \"postgres\".\"public\".\"elixhauser_quan\"", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6132405, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.elixhauser_quan"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "comorbidity", "elixhauser_score_quan"], "meta": {}, "name": "elixhauser_score_quan", "original_file_path": "models/comorbidity/elixhauser_score_quan.sql", "package_name": "mimic", "patch_path": null, "path": "comorbidity/elixhauser_score_quan.sql", "raw_sql": "-- This query provides various methods of combining the Elixhauser components into a single score\n-- The methods are called \"vanWalRaven\" and \"SID30\", and \"SID29\"\n\nselect hadm_id\n,  -- Below is the van Walraven score\n   0 * aids +\n   0 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   7 * congestive_heart_failure +\n   -- Cardiac arrhythmias are not included in van Walraven based on Quan 2007\n   3 * chronic_pulmonary +\n   3 * coagulopathy +\n  -2 * deficiency_anemias +\n  -3 * depression +\n   0 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n  -7 * drug_abuse +\n   5 * fluid_electrolyte +\n   0 * hypertension +\n   0 * hypothyroidism +\n   11 * liver_disease +\n   9 * lymphoma +\n   12 * metastatic_cancer +\n   6 * other_neurological +\n  -4 * obesity +\n   7 * paralysis +\n   2 * peripheral_vascular +\n   0 * peptic_ulcer +\n   0 * psychoses +\n   4 * pulmonary_circulation +\n   0 * rheumatoid_arthritis +\n   5 * renal_failure +\n   4 * solid_tumor +\n  -1 * valvular_disease +\n   6 * weight_loss\nas elixhauser_vanwalraven\n\n\n\n,  -- Below is the 29 component SID score\n   0 * aids +\n  -2 * alcohol_abuse +\n  -2 * blood_loss_anemia +\n   -- Cardiac arrhythmias are not included in SID-29\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n   9 * coagulopathy +\n   0 * deficiency_anemias +\n  -4 * depression +\n   0 * diabetes_complicated +\n  -1 * diabetes_uncomplicated +\n  -8 * drug_abuse +\n   9 * fluid_electrolyte +\n  -1 * hypertension +\n   0 * hypothyroidism +\n   5 * liver_disease +\n   6 * lymphoma +\n   13 * metastatic_cancer +\n   4 * other_neurological +\n  -4 * obesity +\n   3 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -4 * psychoses +\n   5 * pulmonary_circulation +\n   6 * renal_failure +\n   0 * rheumatoid_arthritis +\n   8 * solid_tumor +\n   0 * valvular_disease +\n   8 * weight_loss\nas elixhauser_SID29\n\n\n,  -- Below is the 30 component SID score\n   0 * aids +\n   0 * alcohol_abuse +\n  -3 * blood_loss_anemia +\n   8 * cardiac_arrhythmias +\n   9 * congestive_heart_failure +\n   3 * chronic_pulmonary +\n  12 * coagulopathy +\n   0 * deficiency_anemias +\n  -5 * depression +\n   1 * diabetes_complicated +\n   0 * diabetes_uncomplicated +\n -11 * drug_abuse +\n  11 * fluid_electrolyte +\n  -2 * hypertension +\n   0 * hypothyroidism +\n   7 * liver_disease +\n   8 * lymphoma +\n  17 * metastatic_cancer +\n   5 * other_neurological +\n  -5 * obesity +\n   4 * paralysis +\n   0 * peptic_ulcer +\n   4 * peripheral_vascular +\n  -6 * psychoses +\n   5 * pulmonary_circulation +\n   7 * renal_failure +\n   0 * rheumatoid_arthritis +\n  10 * solid_tumor +\n   0 * valvular_disease +\n  10 * weight_loss\nas elixhauser_SID30\n\nfrom  {{ ref('elixhauser_quan') }}", "refs": [["elixhauser_quan"]], "relation_name": "\"postgres\".\"public\".\"elixhauser_score_quan\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.elixhauser_score_quan", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:35.125160Z", "name": "compile", "started_at": "2022-07-18T00:11:35.116946Z"}, {"completed_at": "2022-07-18T00:11:35.246917Z", "name": "execute", "started_at": "2022-07-18T00:11:35.125705Z"}]}, "unique_id": "model.mimic.elixhauser_score_quan"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.elixhauser_score_quan", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.249900Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": "2022-07-18T00:11:35.250644", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.icustay_hours", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.250736Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.icustay_hours", "index": 86, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": "2022-07-18T00:11:35.250644", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "86 of 107 START table model public.icustay_hours ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.251546Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.253339Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": "2022-07-18T00:11:35.250644", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.icustay_hours", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.253906Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.icustay_hours", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.254371Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.260217Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.260900Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.icustay_hours", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.261106Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.icustay_hours\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.271851Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.272920Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.273249Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.273398Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.280274Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.280625Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_hours__dbt_tmp\"\n  as (\n    -- This query generates a row for every hour the patient is in the ICU.\n-- The hours are based on clock-hours (i.e. 02:00, 03:00).\n-- The hour clock starts 24 hours before the first heart rate measurement.\n-- Note that the time of the first heart rate measurement is ceilinged to the hour.\n\n-- this query extracts the cohort and every possible hour they were in the ICU\n-- this table can be to other tables on ICUSTAY_ID and (ENDTIME - 1 hour,ENDTIME]\n\n-- get first/last measurement time\nwith all_hours as\n(\nselect\n  it.icustay_id\n\n  -- ceiling the intime to the nearest hour by adding 59 minutes then truncating\n  -- note thart we truncate by parsing as string, rather than using DATETIME_TRUNC\n  -- this is done to enable compatibility with psql\n  , PARSE_DATETIME(\n      '%Y-%m-%d %H:00:00',\n      FORMAT_DATETIME(\n        '%Y-%m-%d %H:00:00',\n          DATETIME_ADD(it.intime_hr, '59 MINUTE'::INTERVAL)\n  )) AS endtime\n\n  -- create integers for each charttime in hours from admission\n  -- so 0 is admission time, 1 is one hour after admission, etc, up to ICU disch\n  --  we allow 24 hours before ICU admission (to grab labs before admit)\n  , GENERATE_ARRAY(-24, CEIL(DATETIME_DIFF(it.outtime_hr, it.intime_hr, 'HOUR'))::integer) as hrs\n\n  from \"postgres\".\"public\".\"icustay_times\" it\n)\nSELECT icustay_id\n, CAST(hr AS integer) as hr\n, DATETIME_ADD(endtime,  (CAST(hr AS integer) || 'HOUR')::INTERVAL) as endtime\nFROM all_hours\nCROSS JOIN UNNEST(ARRAY[all_hours.hrs]) AS hr\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\n\n\n  create  table \"postgres\".\"public\".\"icustay_hours__dbt_tmp\"\n  as (\n    -- This query generates a row for every hour the patient is in the ICU.\n-- The hours are based on clock-hours (i.e. 02:00, 03:00).\n-- The hour clock starts 24 hours before the first heart rate measurement.\n-- Note that the time of the first heart rate measurement is ceilinged to the hour.\n\n-- this query extracts the cohort and every possible hour they were in the ICU\n-- this table can be to other tables on ICUSTAY_ID and (ENDTIME - 1 hour,ENDTIME]\n\n-- get first/last measurement time\nwith all_hours as\n(\nselect\n  it.icustay_id\n\n  -- ceiling the intime to the nearest hour by adding 59 minutes then truncating\n  -- note thart we truncate by parsing as string, rather than using DATETIME_TRUNC\n  -- this is done to enable compatibility with psql\n  , PARSE_DATETIME(\n      '%Y-%m-%d %H:00:00',\n      FORMAT_DATETIME(\n        '%Y-%m-%d %H:00:00',\n          DATETIME_ADD(it.intime_hr, '59 MINUTE'::INTERVAL)\n  )) AS endtime\n\n  -- create integers for each charttime in hours from admission\n  -- so 0 is admission time, 1 is one hour after admission, etc, up to ICU disch\n  --  we allow 24 hours before ICU admission (to grab labs before admit)\n  , GENERATE_ARRAY(-24, CEIL(DATETIME_DIFF(it.outtime_hr, it.intime_hr, 'HOUR'))::integer) as hrs\n\n  from \"postgres\".\"public\".\"icustay_times\" it\n)\nSELECT icustay_id\n, CAST(hr AS integer) as hr\n, DATETIME_ADD(endtime,  (CAST(hr AS integer) || 'HOUR')::INTERVAL) as endtime\nFROM all_hours\nCROSS JOIN UNNEST(ARRAY[all_hours.hrs]) AS hr\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.280855Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.49, "status": "SELECT 963"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 963 in 0.49 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.773257Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.780790Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\nalter table \"postgres\".\"public\".\"icustay_hours\" rename to \"icustay_hours__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\nalter table \"postgres\".\"public\".\"icustay_hours\" rename to \"icustay_hours__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.781248Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.782442Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.786265Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\nalter table \"postgres\".\"public\".\"icustay_hours__dbt_tmp\" rename to \"icustay_hours\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\nalter table \"postgres\".\"public\".\"icustay_hours__dbt_tmp\" rename to \"icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.786507Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.787258Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.790584Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.790824Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.791060Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.792583Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.icustay_hours", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.icustay_hours\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.795426Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.icustay_hours", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_hours__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.icustay_hours\"} */\ndrop table if exists \"postgres\".\"public\".\"icustay_hours__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.795667Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.797669Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.800517Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.icustay_hours: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.800770Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.icustay_hours", "execution_time": 0, "index": 86, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": "2022-07-18T00:11:35.250644", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "status": "SELECT 963", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "86 of 107 OK created table model public.icustay_hours .......................... [\u001b[32mSELECT 963\u001b[0m in 0.55s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.801794Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:35.802294", "node_name": "icustay_hours", "node_path": "demographics/icustay_hours.sql", "node_started_at": "2022-07-18T00:11:35.250644", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.icustay_hours"}, "run_result": {"adapter_response": {"_message": "SELECT 963", "code": "SELECT", "rows_affected": 963}, "agate_table": null, "execution_time": 0.5487685203552246, "failures": null, "message": "SELECT 963", "node": {"alias": "icustay_hours", "build_path": "target/run/mimic/models/demographics/icustay_hours.sql", "checksum": {"checksum": "d4538d9e375523127085c8d8bcb0618e4faa99362ff167043ad4d52dfd6a0274", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/demographics/icustay_hours.sql", "compiled_sql": "-- This query generates a row for every hour the patient is in the ICU.\n-- The hours are based on clock-hours (i.e. 02:00, 03:00).\n-- The hour clock starts 24 hours before the first heart rate measurement.\n-- Note that the time of the first heart rate measurement is ceilinged to the hour.\n\n-- this query extracts the cohort and every possible hour they were in the ICU\n-- this table can be to other tables on ICUSTAY_ID and (ENDTIME - 1 hour,ENDTIME]\n\n-- get first/last measurement time\nwith all_hours as\n(\nselect\n  it.icustay_id\n\n  -- ceiling the intime to the nearest hour by adding 59 minutes then truncating\n  -- note thart we truncate by parsing as string, rather than using DATETIME_TRUNC\n  -- this is done to enable compatibility with psql\n  , PARSE_DATETIME(\n      '%Y-%m-%d %H:00:00',\n      FORMAT_DATETIME(\n        '%Y-%m-%d %H:00:00',\n          DATETIME_ADD(it.intime_hr, '59 MINUTE'::INTERVAL)\n  )) AS endtime\n\n  -- create integers for each charttime in hours from admission\n  -- so 0 is admission time, 1 is one hour after admission, etc, up to ICU disch\n  --  we allow 24 hours before ICU admission (to grab labs before admit)\n  , GENERATE_ARRAY(-24, CEIL(DATETIME_DIFF(it.outtime_hr, it.intime_hr, 'HOUR'))::integer) as hrs\n\n  from \"postgres\".\"public\".\"icustay_times\" it\n)\nSELECT icustay_id\n, CAST(hr AS integer) as hr\n, DATETIME_ADD(endtime,  (CAST(hr AS integer) || 'HOUR')::INTERVAL) as endtime\nFROM all_hours\nCROSS JOIN UNNEST(ARRAY[all_hours.hrs]) AS hr", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.6276865, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.icustay_times"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "demographics", "icustay_hours"], "meta": {}, "name": "icustay_hours", "original_file_path": "models/demographics/icustay_hours.sql", "package_name": "mimic", "patch_path": null, "path": "demographics/icustay_hours.sql", "raw_sql": "-- This query generates a row for every hour the patient is in the ICU.\n-- The hours are based on clock-hours (i.e. 02:00, 03:00).\n-- The hour clock starts 24 hours before the first heart rate measurement.\n-- Note that the time of the first heart rate measurement is ceilinged to the hour.\n\n-- this query extracts the cohort and every possible hour they were in the ICU\n-- this table can be to other tables on ICUSTAY_ID and (ENDTIME - 1 hour,ENDTIME]\n\n-- get first/last measurement time\nwith all_hours as\n(\nselect\n  it.icustay_id\n\n  -- ceiling the intime to the nearest hour by adding 59 minutes then truncating\n  -- note thart we truncate by parsing as string, rather than using DATETIME_TRUNC\n  -- this is done to enable compatibility with psql\n  , PARSE_DATETIME(\n      '%Y-%m-%d %H:00:00',\n      FORMAT_DATETIME(\n        '%Y-%m-%d %H:00:00',\n          DATETIME_ADD(it.intime_hr, '59 MINUTE'::INTERVAL)\n  )) AS endtime\n\n  -- create integers for each charttime in hours from admission\n  -- so 0 is admission time, 1 is one hour after admission, etc, up to ICU disch\n  --  we allow 24 hours before ICU admission (to grab labs before admit)\n  , GENERATE_ARRAY(-24, CEIL(DATETIME_DIFF(it.outtime_hr, it.intime_hr, 'HOUR'))::integer) as hrs\n\n  from {{ ref ('icustay_times')}} it\n)\nSELECT icustay_id\n, CAST(hr AS integer) as hr\n, DATETIME_ADD(endtime,  (CAST(hr AS integer) || 'HOUR')::INTERVAL) as endtime\nFROM all_hours\nCROSS JOIN UNNEST(ARRAY[all_hours.hrs]) AS hr", "refs": [["icustay_times"]], "relation_name": "\"postgres\".\"public\".\"icustay_hours\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.icustay_hours", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:35.260829Z", "name": "compile", "started_at": "2022-07-18T00:11:35.254339Z"}, {"completed_at": "2022-07-18T00:11:35.800488Z", "name": "execute", "started_at": "2022-07-18T00:11:35.261332Z"}]}, "unique_id": "model.mimic.icustay_hours"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.icustay_hours", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.802466Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": "2022-07-18T00:11:35.802892", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.meld"}, "unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.meld", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.802990Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.meld", "index": 87, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": "2022-07-18T00:11:35.802892", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.meld"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "87 of 107 START table model public.meld ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.803785Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.804585Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": "2022-07-18T00:11:35.802892", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.meld"}, "unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.meld", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.804874Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.meld", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.805067Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.808301Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.809075Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.meld"}, "unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.meld", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.809368Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.meld\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.819276Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.820050Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.820336Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.820642Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.826942Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.827221Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\n\n\n  create  table \"postgres\".\"public\".\"meld__dbt_tmp\"\n  as (\n    -- Model for end-stage liver disease (MELD)\n-- This model is used to determine prognosis and receipt of liver transplantation.\n\n-- Reference:\n--  Kamath PS, Wiesner RH, Malinchoc M, Kremers W, Therneau TM,\n--  Kosberg CL, D'Amico G, Dickson ER, Kim WR.\n--  A model to predict survival in patients with end-stage liver disease.\n--  Hepatology. 2001 Feb33(2):464-70.\n\n\n-- Updated January 2016 to include serum sodium, see:\n--  https://optn.transplant.hrsa.gov/news/meld-serum-sodium-policy-changes/\n\n-- Here is the relevant portion of the policy note:\n--    9.1.D MELD Score\n--    Candidates who are at least 12 years old receive an initial MELD(i) score equal to:\n--    0.957 x ln(creatinine mg/dL) + 0.378 x ln(bilirubin mg/dL) + 1.120 x ln(INR) + 0.643\n\n--    Laboratory values less than 1.0 will be set to 1.0 when calculating a candidate\u2019s MELD\n--    score.\n\n--    The following candidates will receive a creatinine value of 4.0 mg/dL:\n--    - Candidates with a creatinine value greater than 4.0 mg/dL\n--    - Candidates who received two or more dialysis treatments within the prior week\n--    - Candidates who received 24 hours of continuous veno-venous hemodialysis (CVVHD) within the prior week\n\n--    The maximum MELD score is 40. The MELD score derived from this calculation will be rounded to the tenth decimal place and then multiplied by 10.\n\n--    For candidates with an initial MELD score greater than 11, The MELD score is then recalculated as follows:\n--    MELD = MELD(i) + 1.32*(137-Na) \u2013 [0.033*MELD(i)*(137-Na)]\n--    Sodium values less than 125 mmol/L will be set to 125, and values greater than 137 mmol/L will be set to 137.\n\n\n\n-- TODO needed in this code:\n--  1. identify 2x dialysis in the past week, or 24 hours of CVVH\n--      at the moment it just checks for any dialysis on the day\n--  2. adjust the serum sodium using the corresponding glucose measurement\n--      Measured sodium + 0.024 * (Serum glucose - 100)   (Hiller, 1999)\n\nwith cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , labs.creatinine_max\n      , labs.bilirubin_max\n      , labs.inr_max\n      , labs.sodium_min\n\n      , r.rrt\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\nleft join rrt_first_day r\n  on ie.icustay_id = r.icustay_id\n)\n, score as\n(\n  select subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    -- TODO: Corrected Sodium\n    , case\n        when sodium_min is null\n          then 0.0\n        when sodium_min > 137\n          then 0.0\n        when sodium_min < 125\n          then 12.0 -- 137 - 125 = 12\n        else 137.0-sodium_min\n      end as sodium_score\n\n    -- if hemodialysis, value for Creatinine is automatically set to 4.0\n    , case\n        when rrt = 1 or creatinine_max > 4.0\n          then (0.957 * ln(4))\n        -- if creatinine < 1, score is 1\n        when creatinine_max < 1\n          then (0.957 * ln(1))\n        else 0.957 * coalesce(ln(creatinine_max),ln(1))\n      end as creatinine_score\n\n    , case\n        -- if value < 1, score is 1\n        when bilirubin_max < 1\n          then 0.378 * ln(1)\n        else 0.378 * coalesce(ln(bilirubin_max),ln(1))\n      end as bilirubin_score\n\n    , case\n        when inr_max < 1\n          then ( 1.120 * ln(1) + 0.643 )\n        else ( 1.120 * coalesce(ln(inr_max),ln(1)) + 0.643 )\n      end as inr_score\n\n  from cohort\n)\n, score2 as\n(\n  select\n    subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    , creatinine_score\n    , sodium_score\n    , bilirubin_score\n    , inr_score\n\n    , case\n        when (creatinine_score + bilirubin_score + inr_score) > 40\n          then 40.0\n        else\n          round(cast(creatinine_score + bilirubin_score + inr_score as numeric),1)*10\n        end as meld_initial\n  from score\n)\nselect\n  subject_id, hadm_id, icustay_id\n\n  -- MELD Score without sodium change\n  , meld_initial\n\n  -- MELD Score (2016) = MELD*10 + 1.32*(137-Na) \u2013 [0.033*MELD*10*(137-Na)]\n  , case\n      when meld_initial > 11\n        then meld_initial + 1.32*sodium_score - 0.033*meld_initial*sodium_score\n      else\n        meld_initial\n      end as meld\n\n  -- original variables\n  , rrt\n  , creatinine_max\n  , bilirubin_max\n  , inr_max\n  , sodium_min\n\nfrom score2\norder by icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\n\n\n  create  table \"postgres\".\"public\".\"meld__dbt_tmp\"\n  as (\n    -- Model for end-stage liver disease (MELD)\n-- This model is used to determine prognosis and receipt of liver transplantation.\n\n-- Reference:\n--  Kamath PS, Wiesner RH, Malinchoc M, Kremers W, Therneau TM,\n--  Kosberg CL, D'Amico G, Dickson ER, Kim WR.\n--  A model to predict survival in patients with end-stage liver disease.\n--  Hepatology. 2001 Feb33(2):464-70.\n\n\n-- Updated January 2016 to include serum sodium, see:\n--  https://optn.transplant.hrsa.gov/news/meld-serum-sodium-policy-changes/\n\n-- Here is the relevant portion of the policy note:\n--    9.1.D MELD Score\n--    Candidates who are at least 12 years old receive an initial MELD(i) score equal to:\n--    0.957 x ln(creatinine mg/dL) + 0.378 x ln(bilirubin mg/dL) + 1.120 x ln(INR) + 0.643\n\n--    Laboratory values less than 1.0 will be set to 1.0 when calculating a candidate\u2019s MELD\n--    score.\n\n--    The following candidates will receive a creatinine value of 4.0 mg/dL:\n--    - Candidates with a creatinine value greater than 4.0 mg/dL\n--    - Candidates who received two or more dialysis treatments within the prior week\n--    - Candidates who received 24 hours of continuous veno-venous hemodialysis (CVVHD) within the prior week\n\n--    The maximum MELD score is 40. The MELD score derived from this calculation will be rounded to the tenth decimal place and then multiplied by 10.\n\n--    For candidates with an initial MELD score greater than 11, The MELD score is then recalculated as follows:\n--    MELD = MELD(i) + 1.32*(137-Na) \u2013 [0.033*MELD(i)*(137-Na)]\n--    Sodium values less than 125 mmol/L will be set to 125, and values greater than 137 mmol/L will be set to 137.\n\n\n\n-- TODO needed in this code:\n--  1. identify 2x dialysis in the past week, or 24 hours of CVVH\n--      at the moment it just checks for any dialysis on the day\n--  2. adjust the serum sodium using the corresponding glucose measurement\n--      Measured sodium + 0.024 * (Serum glucose - 100)   (Hiller, 1999)\n\nwith cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , labs.creatinine_max\n      , labs.bilirubin_max\n      , labs.inr_max\n      , labs.sodium_min\n\n      , r.rrt\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\nleft join rrt_first_day r\n  on ie.icustay_id = r.icustay_id\n)\n, score as\n(\n  select subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    -- TODO: Corrected Sodium\n    , case\n        when sodium_min is null\n          then 0.0\n        when sodium_min > 137\n          then 0.0\n        when sodium_min < 125\n          then 12.0 -- 137 - 125 = 12\n        else 137.0-sodium_min\n      end as sodium_score\n\n    -- if hemodialysis, value for Creatinine is automatically set to 4.0\n    , case\n        when rrt = 1 or creatinine_max > 4.0\n          then (0.957 * ln(4))\n        -- if creatinine < 1, score is 1\n        when creatinine_max < 1\n          then (0.957 * ln(1))\n        else 0.957 * coalesce(ln(creatinine_max),ln(1))\n      end as creatinine_score\n\n    , case\n        -- if value < 1, score is 1\n        when bilirubin_max < 1\n          then 0.378 * ln(1)\n        else 0.378 * coalesce(ln(bilirubin_max),ln(1))\n      end as bilirubin_score\n\n    , case\n        when inr_max < 1\n          then ( 1.120 * ln(1) + 0.643 )\n        else ( 1.120 * coalesce(ln(inr_max),ln(1)) + 0.643 )\n      end as inr_score\n\n  from cohort\n)\n, score2 as\n(\n  select\n    subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    , creatinine_score\n    , sodium_score\n    , bilirubin_score\n    , inr_score\n\n    , case\n        when (creatinine_score + bilirubin_score + inr_score) > 40\n          then 40.0\n        else\n          round(cast(creatinine_score + bilirubin_score + inr_score as numeric),1)*10\n        end as meld_initial\n  from score\n)\nselect\n  subject_id, hadm_id, icustay_id\n\n  -- MELD Score without sodium change\n  , meld_initial\n\n  -- MELD Score (2016) = MELD*10 + 1.32*(137-Na) \u2013 [0.033*MELD*10*(137-Na)]\n  , case\n      when meld_initial > 11\n        then meld_initial + 1.32*sodium_score - 0.033*meld_initial*sodium_score\n      else\n        meld_initial\n      end as meld\n\n  -- original variables\n  , rrt\n  , creatinine_max\n  , bilirubin_max\n  , inr_max\n  , sodium_min\n\nfrom score2\norder by icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:35.827425Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.28, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.28 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.109250Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.116212Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\nalter table \"postgres\".\"public\".\"meld\" rename to \"meld__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\nalter table \"postgres\".\"public\".\"meld\" rename to \"meld__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.116669Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.118248Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.122068Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\nalter table \"postgres\".\"public\".\"meld__dbt_tmp\" rename to \"meld\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\nalter table \"postgres\".\"public\".\"meld__dbt_tmp\" rename to \"meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.122361Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.123099Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.126279Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.126546Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.126754Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.135427Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.meld", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.meld\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.137496Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.meld", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\ndrop table if exists \"postgres\".\"public\".\"meld__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.meld\"} */\ndrop table if exists \"postgres\".\"public\".\"meld__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.137863Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.140270Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.143202Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.meld: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.143448Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.meld", "execution_time": 0, "index": 87, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": "2022-07-18T00:11:35.802892", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.meld"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "87 of 107 OK created table model public.meld ................................... [\u001b[32mSELECT 61532\u001b[0m in 0.34s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.144386Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.144865", "node_name": "meld", "node_path": "organfailure/meld.sql", "node_started_at": "2022-07-18T00:11:35.802892", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.meld"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.33988070487976074, "failures": null, "message": "SELECT 61532", "node": {"alias": "meld", "build_path": "target/run/mimic/models/organfailure/meld.sql", "checksum": {"checksum": "2c2c38b5a4d9f10190839c970879076a11bacd076895f88351588c2039a70da7", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/meld.sql", "compiled_sql": "-- Model for end-stage liver disease (MELD)\n-- This model is used to determine prognosis and receipt of liver transplantation.\n\n-- Reference:\n--  Kamath PS, Wiesner RH, Malinchoc M, Kremers W, Therneau TM,\n--  Kosberg CL, D'Amico G, Dickson ER, Kim WR.\n--  A model to predict survival in patients with end-stage liver disease.\n--  Hepatology. 2001 Feb33(2):464-70.\n\n\n-- Updated January 2016 to include serum sodium, see:\n--  https://optn.transplant.hrsa.gov/news/meld-serum-sodium-policy-changes/\n\n-- Here is the relevant portion of the policy note:\n--    9.1.D MELD Score\n--    Candidates who are at least 12 years old receive an initial MELD(i) score equal to:\n--    0.957 x ln(creatinine mg/dL) + 0.378 x ln(bilirubin mg/dL) + 1.120 x ln(INR) + 0.643\n\n--    Laboratory values less than 1.0 will be set to 1.0 when calculating a candidate\u2019s MELD\n--    score.\n\n--    The following candidates will receive a creatinine value of 4.0 mg/dL:\n--    - Candidates with a creatinine value greater than 4.0 mg/dL\n--    - Candidates who received two or more dialysis treatments within the prior week\n--    - Candidates who received 24 hours of continuous veno-venous hemodialysis (CVVHD) within the prior week\n\n--    The maximum MELD score is 40. The MELD score derived from this calculation will be rounded to the tenth decimal place and then multiplied by 10.\n\n--    For candidates with an initial MELD score greater than 11, The MELD score is then recalculated as follows:\n--    MELD = MELD(i) + 1.32*(137-Na) \u2013 [0.033*MELD(i)*(137-Na)]\n--    Sodium values less than 125 mmol/L will be set to 125, and values greater than 137 mmol/L will be set to 137.\n\n\n\n-- TODO needed in this code:\n--  1. identify 2x dialysis in the past week, or 24 hours of CVVH\n--      at the moment it just checks for any dialysis on the day\n--  2. adjust the serum sodium using the corresponding glucose measurement\n--      Measured sodium + 0.024 * (Serum glucose - 100)   (Hiller, 1999)\n\nwith cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , labs.creatinine_max\n      , labs.bilirubin_max\n      , labs.inr_max\n      , labs.sodium_min\n\n      , r.rrt\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\nleft join rrt_first_day r\n  on ie.icustay_id = r.icustay_id\n)\n, score as\n(\n  select subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    -- TODO: Corrected Sodium\n    , case\n        when sodium_min is null\n          then 0.0\n        when sodium_min > 137\n          then 0.0\n        when sodium_min < 125\n          then 12.0 -- 137 - 125 = 12\n        else 137.0-sodium_min\n      end as sodium_score\n\n    -- if hemodialysis, value for Creatinine is automatically set to 4.0\n    , case\n        when rrt = 1 or creatinine_max > 4.0\n          then (0.957 * ln(4))\n        -- if creatinine < 1, score is 1\n        when creatinine_max < 1\n          then (0.957 * ln(1))\n        else 0.957 * coalesce(ln(creatinine_max),ln(1))\n      end as creatinine_score\n\n    , case\n        -- if value < 1, score is 1\n        when bilirubin_max < 1\n          then 0.378 * ln(1)\n        else 0.378 * coalesce(ln(bilirubin_max),ln(1))\n      end as bilirubin_score\n\n    , case\n        when inr_max < 1\n          then ( 1.120 * ln(1) + 0.643 )\n        else ( 1.120 * coalesce(ln(inr_max),ln(1)) + 0.643 )\n      end as inr_score\n\n  from cohort\n)\n, score2 as\n(\n  select\n    subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    , creatinine_score\n    , sodium_score\n    , bilirubin_score\n    , inr_score\n\n    , case\n        when (creatinine_score + bilirubin_score + inr_score) > 40\n          then 40.0\n        else\n          round(cast(creatinine_score + bilirubin_score + inr_score as numeric),1)*10\n        end as meld_initial\n  from score\n)\nselect\n  subject_id, hadm_id, icustay_id\n\n  -- MELD Score without sodium change\n  , meld_initial\n\n  -- MELD Score (2016) = MELD*10 + 1.32*(137-Na) \u2013 [0.033*MELD*10*(137-Na)]\n  , case\n      when meld_initial > 11\n        then meld_initial + 1.32*sodium_score - 0.033*meld_initial*sodium_score\n      else\n        meld_initial\n      end as meld\n\n  -- original variables\n  , rrt\n  , creatinine_max\n  , bilirubin_max\n  , inr_max\n  , sodium_min\n\nfrom score2\norder by icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5607245, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "meld"], "meta": {}, "name": "meld", "original_file_path": "models/organfailure/meld.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/meld.sql", "raw_sql": "-- Model for end-stage liver disease (MELD)\n-- This model is used to determine prognosis and receipt of liver transplantation.\n\n-- Reference:\n--  Kamath PS, Wiesner RH, Malinchoc M, Kremers W, Therneau TM,\n--  Kosberg CL, D'Amico G, Dickson ER, Kim WR.\n--  A model to predict survival in patients with end-stage liver disease.\n--  Hepatology. 2001 Feb33(2):464-70.\n\n\n-- Updated January 2016 to include serum sodium, see:\n--  https://optn.transplant.hrsa.gov/news/meld-serum-sodium-policy-changes/\n\n-- Here is the relevant portion of the policy note:\n--    9.1.D MELD Score\n--    Candidates who are at least 12 years old receive an initial MELD(i) score equal to:\n--    0.957 x ln(creatinine mg/dL) + 0.378 x ln(bilirubin mg/dL) + 1.120 x ln(INR) + 0.643\n\n--    Laboratory values less than 1.0 will be set to 1.0 when calculating a candidate\u2019s MELD\n--    score.\n\n--    The following candidates will receive a creatinine value of 4.0 mg/dL:\n--    - Candidates with a creatinine value greater than 4.0 mg/dL\n--    - Candidates who received two or more dialysis treatments within the prior week\n--    - Candidates who received 24 hours of continuous veno-venous hemodialysis (CVVHD) within the prior week\n\n--    The maximum MELD score is 40. The MELD score derived from this calculation will be rounded to the tenth decimal place and then multiplied by 10.\n\n--    For candidates with an initial MELD score greater than 11, The MELD score is then recalculated as follows:\n--    MELD = MELD(i) + 1.32*(137-Na) \u2013 [0.033*MELD(i)*(137-Na)]\n--    Sodium values less than 125 mmol/L will be set to 125, and values greater than 137 mmol/L will be set to 137.\n\n\n\n-- TODO needed in this code:\n--  1. identify 2x dialysis in the past week, or 24 hours of CVVH\n--      at the moment it just checks for any dialysis on the day\n--  2. adjust the serum sodium using the corresponding glucose measurement\n--      Measured sodium + 0.024 * (Serum glucose - 100)   (Hiller, 1999)\n\nwith cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , labs.creatinine_max\n      , labs.bilirubin_max\n      , labs.inr_max\n      , labs.sodium_min\n\n      , r.rrt\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to custom tables to get more data....\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\nleft join rrt_first_day r\n  on ie.icustay_id = r.icustay_id\n)\n, score as\n(\n  select subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    -- TODO: Corrected Sodium\n    , case\n        when sodium_min is null\n          then 0.0\n        when sodium_min > 137\n          then 0.0\n        when sodium_min < 125\n          then 12.0 -- 137 - 125 = 12\n        else 137.0-sodium_min\n      end as sodium_score\n\n    -- if hemodialysis, value for Creatinine is automatically set to 4.0\n    , case\n        when rrt = 1 or creatinine_max > 4.0\n          then (0.957 * ln(4))\n        -- if creatinine < 1, score is 1\n        when creatinine_max < 1\n          then (0.957 * ln(1))\n        else 0.957 * coalesce(ln(creatinine_max),ln(1))\n      end as creatinine_score\n\n    , case\n        -- if value < 1, score is 1\n        when bilirubin_max < 1\n          then 0.378 * ln(1)\n        else 0.378 * coalesce(ln(bilirubin_max),ln(1))\n      end as bilirubin_score\n\n    , case\n        when inr_max < 1\n          then ( 1.120 * ln(1) + 0.643 )\n        else ( 1.120 * coalesce(ln(inr_max),ln(1)) + 0.643 )\n      end as inr_score\n\n  from cohort\n)\n, score2 as\n(\n  select\n    subject_id, hadm_id, icustay_id\n    , rrt\n    , creatinine_max\n    , bilirubin_max\n    , inr_max\n    , sodium_min\n\n    , creatinine_score\n    , sodium_score\n    , bilirubin_score\n    , inr_score\n\n    , case\n        when (creatinine_score + bilirubin_score + inr_score) > 40\n          then 40.0\n        else\n          round(cast(creatinine_score + bilirubin_score + inr_score as numeric),1)*10\n        end as meld_initial\n  from score\n)\nselect\n  subject_id, hadm_id, icustay_id\n\n  -- MELD Score without sodium change\n  , meld_initial\n\n  -- MELD Score (2016) = MELD*10 + 1.32*(137-Na) \u2013 [0.033*MELD*10*(137-Na)]\n  , case\n      when meld_initial > 11\n        then meld_initial + 1.32*sodium_score - 0.033*meld_initial*sodium_score\n      else\n        meld_initial\n      end as meld\n\n  -- original variables\n  , rrt\n  , creatinine_max\n  , bilirubin_max\n  , inr_max\n  , sodium_min\n\nfrom score2\norder by icustay_id", "refs": [["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"meld\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.meld", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:35.809013Z", "name": "compile", "started_at": "2022-07-18T00:11:35.805045Z"}, {"completed_at": "2022-07-18T00:11:36.143173Z", "name": "execute", "started_at": "2022-07-18T00:11:35.809763Z"}]}, "unique_id": "model.mimic.meld"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.meld", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.145020Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": "2022-07-18T00:11:36.145397", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_bg_art", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.145494Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_bg_art", "index": 88, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": "2022-07-18T00:11:36.145397", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "88 of 107 START table model public.pivoted_bg_art .............................. [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.146247Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.147062Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": "2022-07-18T00:11:36.145397", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_bg_art", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.147469Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_bg_art", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.147939Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.154567Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.155467Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_bg_art", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.155808Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_bg_art\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.165365Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.166618Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.167066Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.167327Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.173368Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.173786Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_bg_art__dbt_tmp\"\n  as (\n    -- This query requires the pivoted_bg table to be generated.\n-- It extracts only arterial blood gas samples - either explicitly stated or \n-- inferred by a hard-coded logistic regression model.\nwith stg_spo2 as\n(\n  select hadm_id, charttime\n    -- avg here is just used to group SpO2 by charttime\n    , avg(valuenum) as spo2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  and valuenum > 0 and valuenum <= 100\n  group by hadm_id, charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s1.charttime DESC) as lastrowspo2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"pivoted_bg\" bg\nleft join stg_spo2 s1\n  -- same hospitalization\n  on  bg.hadm_id = s1.hadm_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime between DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR) and bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s2.charttime DESC) as lastrowfio2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as specimen_prob\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.hadm_id = s2.hadm_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\n  and s2.fio2_chartevents > 0\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\nselect\n    stg3.hadm_id\n  , stg3.icustay_id\n  , stg3.charttime\n  , specimen -- raw data indicating sample type, only present 80% of the time\n  -- prediction of specimen for missing data\n  , case\n        when SPECIMEN is not null then SPECIMEN\n        when SPECIMEN_PROB > 0.75 then 'ART'\n      else null end as specimen_pred\n  , specimen_prob\n\n  -- oxygen related parameters\n  , so2, spo2 -- note spo2 is FROM chartevents\n  , po2, pco2\n  , fio2_chartevents, fio2\n  , aado2\n  -- also calculate AADO2\n  , case\n      when  PO2 is not null\n        and pco2 is not null\n        and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiple by 100 because FiO2 is in a % but should be a fraction\n        then (coalesce(FIO2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n      else null\n    end as aado2_calc\n  , case\n      when PO2 is not null and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiply by 100 because FiO2 is in a % but should be a fraction\n        then 100*PO2/(coalesce(FIO2, fio2_chartevents))\n      else null\n    end as pao2fio2ratio\n  -- acid-base parameters\n  , ph, baseexcess\n  , bicarbonate, totalco2\n\n  -- blood count parameters\n  , hematocrit\n  , hemoglobin\n  , carboxyhemoglobin\n  , methemoglobin\n\n  -- chemistry\n  , chloride, calcium\n  , temperature\n  , potassium, sodium\n  , lactate\n  , glucose\n\n  -- ventilation stuff that's sometimes input\n  , intubated, tidalvolume, ventilationrate, ventilator\n  , peep, o2flow\n  , requiredo2\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by hadm_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_bg_art__dbt_tmp\"\n  as (\n    -- This query requires the pivoted_bg table to be generated.\n-- It extracts only arterial blood gas samples - either explicitly stated or \n-- inferred by a hard-coded logistic regression model.\nwith stg_spo2 as\n(\n  select hadm_id, charttime\n    -- avg here is just used to group SpO2 by charttime\n    , avg(valuenum) as spo2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  and valuenum > 0 and valuenum <= 100\n  group by hadm_id, charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s1.charttime DESC) as lastrowspo2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"pivoted_bg\" bg\nleft join stg_spo2 s1\n  -- same hospitalization\n  on  bg.hadm_id = s1.hadm_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime between DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR) and bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s2.charttime DESC) as lastrowfio2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as specimen_prob\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.hadm_id = s2.hadm_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\n  and s2.fio2_chartevents > 0\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\nselect\n    stg3.hadm_id\n  , stg3.icustay_id\n  , stg3.charttime\n  , specimen -- raw data indicating sample type, only present 80% of the time\n  -- prediction of specimen for missing data\n  , case\n        when SPECIMEN is not null then SPECIMEN\n        when SPECIMEN_PROB > 0.75 then 'ART'\n      else null end as specimen_pred\n  , specimen_prob\n\n  -- oxygen related parameters\n  , so2, spo2 -- note spo2 is FROM chartevents\n  , po2, pco2\n  , fio2_chartevents, fio2\n  , aado2\n  -- also calculate AADO2\n  , case\n      when  PO2 is not null\n        and pco2 is not null\n        and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiple by 100 because FiO2 is in a % but should be a fraction\n        then (coalesce(FIO2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n      else null\n    end as aado2_calc\n  , case\n      when PO2 is not null and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiply by 100 because FiO2 is in a % but should be a fraction\n        then 100*PO2/(coalesce(FIO2, fio2_chartevents))\n      else null\n    end as pao2fio2ratio\n  -- acid-base parameters\n  , ph, baseexcess\n  , bicarbonate, totalco2\n\n  -- blood count parameters\n  , hematocrit\n  , hemoglobin\n  , carboxyhemoglobin\n  , methemoglobin\n\n  -- chemistry\n  , chloride, calcium\n  , temperature\n  , potassium, sodium\n  , lactate\n  , glucose\n\n  -- ventilation stuff that's sometimes input\n  , intubated, tidalvolume, ventilationrate, ventilator\n  , peep, o2flow\n  , requiredo2\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by hadm_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.174086Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "SELECT 0"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 0 in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.185655Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.191196Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg_art\" rename to \"pivoted_bg_art__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg_art\" rename to \"pivoted_bg_art__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.191515Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.192724Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.199878Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg_art__dbt_tmp\" rename to \"pivoted_bg_art\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\nalter table \"postgres\".\"public\".\"pivoted_bg_art__dbt_tmp\" rename to \"pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.200106Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.200800Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.203893Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.204120Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.204241Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.205402Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_bg_art", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_bg_art\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.207655Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_bg_art", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_bg_art__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_bg_art\"} */\ndrop table if exists \"postgres\".\"public\".\"pivoted_bg_art__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.207884Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.210428Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.214695Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_bg_art: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.215164Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.pivoted_bg_art", "execution_time": 0, "index": 88, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": "2022-07-18T00:11:36.145397", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "status": "SELECT 0", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "88 of 107 OK created table model public.pivoted_bg_art ......................... [\u001b[32mSELECT 0\u001b[0m in 0.07s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.216076Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.216557", "node_name": "pivoted_bg_art", "node_path": "pivot/pivoted_bg_art.sql", "node_started_at": "2022-07-18T00:11:36.145397", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.pivoted_bg_art"}, "run_result": {"adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "agate_table": null, "execution_time": 0.0691378116607666, "failures": null, "message": "SELECT 0", "node": {"alias": "pivoted_bg_art", "build_path": "target/run/mimic/models/pivot/pivoted_bg_art.sql", "checksum": {"checksum": "29283db2edd56ef4c84e50df0edb6cf48bf234ad8919601a7592ae7a41769563", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_bg_art.sql", "compiled_sql": "-- This query requires the pivoted_bg table to be generated.\n-- It extracts only arterial blood gas samples - either explicitly stated or \n-- inferred by a hard-coded logistic regression model.\nwith stg_spo2 as\n(\n  select hadm_id, charttime\n    -- avg here is just used to group SpO2 by charttime\n    , avg(valuenum) as spo2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  and valuenum > 0 and valuenum <= 100\n  group by hadm_id, charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s1.charttime DESC) as lastrowspo2\n  , s1.spo2\nfrom \"postgres\".\"public\".\"pivoted_bg\" bg\nleft join stg_spo2 s1\n  -- same hospitalization\n  on  bg.hadm_id = s1.hadm_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime between DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR) and bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s2.charttime DESC) as lastrowfio2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as specimen_prob\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.hadm_id = s2.hadm_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\n  and s2.fio2_chartevents > 0\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\nselect\n    stg3.hadm_id\n  , stg3.icustay_id\n  , stg3.charttime\n  , specimen -- raw data indicating sample type, only present 80% of the time\n  -- prediction of specimen for missing data\n  , case\n        when SPECIMEN is not null then SPECIMEN\n        when SPECIMEN_PROB > 0.75 then 'ART'\n      else null end as specimen_pred\n  , specimen_prob\n\n  -- oxygen related parameters\n  , so2, spo2 -- note spo2 is FROM chartevents\n  , po2, pco2\n  , fio2_chartevents, fio2\n  , aado2\n  -- also calculate AADO2\n  , case\n      when  PO2 is not null\n        and pco2 is not null\n        and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiple by 100 because FiO2 is in a % but should be a fraction\n        then (coalesce(FIO2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n      else null\n    end as aado2_calc\n  , case\n      when PO2 is not null and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiply by 100 because FiO2 is in a % but should be a fraction\n        then 100*PO2/(coalesce(FIO2, fio2_chartevents))\n      else null\n    end as pao2fio2ratio\n  -- acid-base parameters\n  , ph, baseexcess\n  , bicarbonate, totalco2\n\n  -- blood count parameters\n  , hematocrit\n  , hemoglobin\n  , carboxyhemoglobin\n  , methemoglobin\n\n  -- chemistry\n  , chloride, calcium\n  , temperature\n  , potassium, sodium\n  , lactate\n  , glucose\n\n  -- ventilation stuff that's sometimes input\n  , intubated, tidalvolume, ventilationrate, ventilator\n  , peep, o2flow\n  , requiredo2\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by hadm_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5713847, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.pivoted_bg"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_bg_art"], "meta": {}, "name": "pivoted_bg_art", "original_file_path": "models/pivot/pivoted_bg_art.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_bg_art.sql", "raw_sql": "-- This query requires the pivoted_bg table to be generated.\n-- It extracts only arterial blood gas samples - either explicitly stated or \n-- inferred by a hard-coded logistic regression model.\nwith stg_spo2 as\n(\n  select hadm_id, charttime\n    -- avg here is just used to group SpO2 by charttime\n    , avg(valuenum) as spo2\n  FROM chartevents\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  and valuenum > 0 and valuenum <= 100\n  group by hadm_id, charttime\n)\n, stg_fio2 as\n(\n  select hadm_id, charttime\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  FROM chartevents\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  and valuenum > 0 and valuenum < 100\n  -- exclude rows marked as error\n  AND (error IS NULL OR error != 1)\n  group by hadm_id, charttime\n)\n, stg2 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s1.charttime DESC) as lastrowspo2\n  , s1.spo2\nfrom {{ref('pivoted_bg')}} bg\nleft join stg_spo2 s1\n  -- same hospitalization\n  on  bg.hadm_id = s1.hadm_id\n  -- spo2 occurred at most 2 hours before this blood gas\n  and s1.charttime between DATETIME_SUB(bg.charttime, INTERVAL '2' HOUR) and bg.charttime\nwhere bg.po2 is not null\n)\n, stg3 as\n(\nselect bg.*\n  , row_number() OVER (partition by bg.hadm_id, bg.charttime order by s2.charttime DESC) as lastrowfio2\n  , s2.fio2_chartevents\n\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as specimen_prob\nfrom stg2 bg\nleft join stg_fio2 s2\n  -- same patient\n  on  bg.hadm_id = s2.hadm_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between DATETIME_SUB(bg.charttime, INTERVAL '4' HOUR) and bg.charttime\n  and s2.fio2_chartevents > 0\nwhere bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\nselect\n    stg3.hadm_id\n  , stg3.icustay_id\n  , stg3.charttime\n  , specimen -- raw data indicating sample type, only present 80% of the time\n  -- prediction of specimen for missing data\n  , case\n        when SPECIMEN is not null then SPECIMEN\n        when SPECIMEN_PROB > 0.75 then 'ART'\n      else null end as specimen_pred\n  , specimen_prob\n\n  -- oxygen related parameters\n  , so2, spo2 -- note spo2 is FROM chartevents\n  , po2, pco2\n  , fio2_chartevents, fio2\n  , aado2\n  -- also calculate AADO2\n  , case\n      when  PO2 is not null\n        and pco2 is not null\n        and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiple by 100 because FiO2 is in a % but should be a fraction\n        then (coalesce(FIO2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n      else null\n    end as aado2_calc\n  , case\n      when PO2 is not null and coalesce(FIO2, fio2_chartevents) is not null\n       -- multiply by 100 because FiO2 is in a % but should be a fraction\n        then 100*PO2/(coalesce(FIO2, fio2_chartevents))\n      else null\n    end as pao2fio2ratio\n  -- acid-base parameters\n  , ph, baseexcess\n  , bicarbonate, totalco2\n\n  -- blood count parameters\n  , hematocrit\n  , hemoglobin\n  , carboxyhemoglobin\n  , methemoglobin\n\n  -- chemistry\n  , chloride, calcium\n  , temperature\n  , potassium, sodium\n  , lactate\n  , glucose\n\n  -- ventilation stuff that's sometimes input\n  , intubated, tidalvolume, ventilationrate, ventilator\n  , peep, o2flow\n  , requiredo2\nfrom stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (specimen = 'ART' or specimen_prob > 0.75)\norder by hadm_id, charttime", "refs": [["pivoted_bg"]], "relation_name": "\"postgres\".\"public\".\"pivoted_bg_art\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_bg_art", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:36.155406Z", "name": "compile", "started_at": "2022-07-18T00:11:36.147904Z"}, {"completed_at": "2022-07-18T00:11:36.214660Z", "name": "execute", "started_at": "2022-07-18T00:11:36.156185Z"}]}, "unique_id": "model.mimic.pivoted_bg_art"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_bg_art", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.216724Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": "2022-07-18T00:11:36.217165", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.pivoted_oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.217214Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.pivoted_oasis", "index": 89, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": "2022-07-18T00:11:36.217165", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "89 of 107 START table model public.pivoted_oasis ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.217917Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.pivoted_oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.pivoted_oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.218896Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": "2022-07-18T00:11:36.217165", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.pivoted_oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.219321Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.pivoted_oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.219668Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.pivoted_oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.223138Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.223744Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.pivoted_oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.224069Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.pivoted_oasis\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.pivoted_oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.232448Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.233302Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_oasis", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_oasis: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.233553Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.233967Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.240373Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.pivoted_oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.pivoted_oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.240659Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.pivoted_oasis", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_oasis\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_oasis__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (OASIS)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated for every hour of the patient's ICU stay.\n-- However, as the calculation window is 24 hours, care should be taken when\n-- using the score before the end of the first day.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced from CHARTEVENTS)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced from ADMISSIONS and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced from ADMISSIONS and ICUSTAYS)\n--  Age (sourced from PATIENTS)\n\n-- The following views are required to run this query:\n--  1) uofirstday - generated by urine-output-first-day.sql\n--  2) ventfirstday - generated by ventilated-first-day.sql\n--  3) vitalsfirstday - generated by vitals-first-day.sql\n--  4) gcsfirstday - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption \n--  that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to\n--  actually use the score values for these patients.\n\n-- The following views required to run this query:\n--  1) pivoted_uo - generated by pivoted-uo.sql\n--  2) pivoted_lab - generated by pivoted-lab.sql\n--  3) pivoted_gcs - generated by pivoted-gcs.sql\n--  4) pivoted_vital - generated by pivoted-vital.sql\n--  5) ventilation_durations - generated by ../durations/ventilation_durations.sql\n\n-- generate a row for every hour the patient was in the ICU\nWITH co_hours AS\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(v.HeartRate) as HeartRate_min\n  , max(v.HeartRate) as HeartRate_max\n  , min(v.TempC) as TempC_min\n  , max(v.TempC) as TempC_max\n  , min(v.MeanBP) as MeanBP_min\n  , max(v.MeanBP) as MeanBP_max\n  , min(v.RespRate) as RespRate_min\n  , max(v.RespRate) as RespRate_max\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , MAX(case\n        when vd1.icustay_id is not null then 1 \n        when vd2.icustay_id is not null then 1\n    else 0 end) AS mechvent\n  from co_hours co\n  left join \"postgres\".\"public\".\"pivoted_vital\" v\n    on co.icustay_id = v.icustay_id\n    and co.starttime < v.charttime\n    and co.endtime >= v.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  -- at the time of this row, was the patient ventilated\n  left join ventilation_durations vd1\n    on co.icustay_id = vd1.icustay_id\n    and co.starttime >= vd1.starttime\n    and co.starttime <= vd1.endtime\n  left join ventilation_durations vd2\n    on co.icustay_id = vd2.icustay_id\n    and co.endtime >= vd2.starttime\n    and co.endtime <= vd2.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co_hours co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.meanbp_min\n    , ma.meanbp_max\n    , ma.heartrate_min\n    , ma.heartrate_max\n    , ma.tempc_min\n    , ma.tempc_max\n    , ma.resprate_min\n    , ma.resprate_max\n    , ma.gcs_min\n    -- uo\n    , uo.urineoutput\n    -- static variables that do not change over the ICU stay\n    , cast(co.intime as timestamp) - cast(adm.admittime as timestamp) as preiculos\n    , case\n        when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n        then 1\n        when adm.ADMISSION_TYPE is null or sf.surgical is null\n        then null\n        else 0\n    end as electivesurgery\n  from co_hours co\n  inner join admissions adm\n    on co.hadm_id = adm.hadm_id\n  left join surgflag sf\n    on co.icustay_id = sf.icustay_id\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n    -- Below code calculates the component scores needed for OASIS\n    , case when preiculos is null then null\n        when preiculos < '0 0:10:12' then 5\n        when preiculos < '0 4:57:00' then 3\n        when preiculos < '1 0:00:00' then 0\n        when preiculos < '12 23:48:00' then 1\n        else 2 end as preiculos_score\n    ,  case when age is null then null\n        when age < 24 then 0\n        when age <= 53 then 3\n        when age <= 77 then 6\n        when age <= 89 then 9\n        when age >= 90 then 7\n        else 0 end as age_score\n    ,  case when mingcs is null then null\n        when mingcs <= 7 then 10\n        when mingcs < 14 then 4\n        when mingcs = 14 then 3\n        else 0 end as gcs_score\n    ,  case when heartrate_max is null then null\n        when heartrate_max > 125 then 6\n        when heartrate_min < 33 then 4\n        when heartrate_max >= 107 and heartrate_max <= 125 then 3\n        when heartrate_max >= 89 and heartrate_max <= 106 then 1\n        else 0 end as heartrate_score\n    ,  case when meanbp_min is null then null\n        when meanbp_min < 20.65 then 4\n        when meanbp_min < 51 then 3\n        when meanbp_max > 143.44 then 3\n        when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n        else 0 end as meanbp_score\n    ,  case when resprate_min is null then null\n        when resprate_min <   6 then 10\n        when resprate_max >  44 then  9\n        when resprate_max >  30 then  6\n        when resprate_max >  22 then  1\n        when resprate_min <  13 then 1 else 0\n        end as resprate_score\n    ,  case when tempc_max is null then null\n        when tempc_max > 39.88 then 6\n        when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n        when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n        when tempc_min < 33.22 then 3\n        when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n        when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n        else 0 end as temp_score\n    ,  case \n        when SUM(urineoutput) OVER W is null then null\n        when SUM(urineoutput) OVER W < 671.09 then 10\n        when SUM(urineoutput) OVER W > 6896.80 then 8\n        when SUM(urineoutput) OVER W >= 671.09\n        and SUM(urineoutput) OVER W <= 1426.99 then 5\n        when SUM(urineoutput) OVER W >= 1427.00\n        and SUM(urineoutput) OVER W <= 2544.14 then 1\n        else 0 end as urineoutput_score\n    ,  case when mechvent is null then null\n        when mechvent = 1 then 9\n        else 0 end as mechvent_score\n    ,  case when electivesurgery is null then null\n        when electivesurgery = 1 then 0\n        else 6 end as electivesurgery_score\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Look for the worst instantaneous score over the last 24 hours\n    -- Impute 0 if the score is missing\n    , preiculos_score AS preiculos_score_24hours\n    , electivesurgery_score as electivesurgery_score_24hours\n    , coalesce(MAX(age_score) OVER W, 0)::SMALLINT as age_score_24hours\n    , coalesce(MAX(gcs_score) OVER W, 0)::SMALLINT as gcs_score_24hours\n    , coalesce(MAX(heartrate_score) OVER W, 0)::SMALLINT as heartrate_score_24hours\n    , coalesce(MAX(meanbp_score) OVER W,0)::SMALLINT as meanbp_score_24hours\n    , coalesce(MAX(resprate_score) OVER W,0)::SMALLINT as resprate_score_24hours\n    , coalesce(MAX(temp_score) OVER W,0)::SMALLINT as temp_score_24hours\n    , coalesce(MAX(urineoutput_score) OVER W,0)::SMALLINT as urineoutput_score_24hours\n    , coalesce(MAX(mechvent_score) OVER W,0)::SMALLINT as mechvent_score_24hours\n\n    -- sum together data for final OASIS\n    , (preiculos_score\n    + electivesurgery_score\n    + coalesce(MAX(age_score) OVER W, 0)\n    + coalesce(MAX(gcs_score) OVER W, 0)\n    + coalesce(MAX(heartrate_score) OVER W, 0)\n    + coalesce(MAX(meanbp_score) OVER W,0)\n    + coalesce(MAX(resprate_score) OVER W,0)\n    + coalesce(MAX(temp_score) OVER W,0)\n    + coalesce(MAX(urineoutput_score) OVER W,0)\n    + coalesce(MAX(mechvent_score) OVER W,0)\n    )::SMALLINT\n    as OASIS_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_oasis: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.pivoted_oasis\"} */\n\n\n  create  table \"postgres\".\"public\".\"pivoted_oasis__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (OASIS)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated for every hour of the patient's ICU stay.\n-- However, as the calculation window is 24 hours, care should be taken when\n-- using the score before the end of the first day.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced from CHARTEVENTS)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced from ADMISSIONS and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced from ADMISSIONS and ICUSTAYS)\n--  Age (sourced from PATIENTS)\n\n-- The following views are required to run this query:\n--  1) uofirstday - generated by urine-output-first-day.sql\n--  2) ventfirstday - generated by ventilated-first-day.sql\n--  3) vitalsfirstday - generated by vitals-first-day.sql\n--  4) gcsfirstday - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption \n--  that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to\n--  actually use the score values for these patients.\n\n-- The following views required to run this query:\n--  1) pivoted_uo - generated by pivoted-uo.sql\n--  2) pivoted_lab - generated by pivoted-lab.sql\n--  3) pivoted_gcs - generated by pivoted-gcs.sql\n--  4) pivoted_vital - generated by pivoted-vital.sql\n--  5) ventilation_durations - generated by ../durations/ventilation_durations.sql\n\n-- generate a row for every hour the patient was in the ICU\nWITH co_hours AS\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(v.HeartRate) as HeartRate_min\n  , max(v.HeartRate) as HeartRate_max\n  , min(v.TempC) as TempC_min\n  , max(v.TempC) as TempC_max\n  , min(v.MeanBP) as MeanBP_min\n  , max(v.MeanBP) as MeanBP_max\n  , min(v.RespRate) as RespRate_min\n  , max(v.RespRate) as RespRate_max\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , MAX(case\n        when vd1.icustay_id is not null then 1 \n        when vd2.icustay_id is not null then 1\n    else 0 end) AS mechvent\n  from co_hours co\n  left join \"postgres\".\"public\".\"pivoted_vital\" v\n    on co.icustay_id = v.icustay_id\n    and co.starttime < v.charttime\n    and co.endtime >= v.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  -- at the time of this row, was the patient ventilated\n  left join ventilation_durations vd1\n    on co.icustay_id = vd1.icustay_id\n    and co.starttime >= vd1.starttime\n    and co.starttime <= vd1.endtime\n  left join ventilation_durations vd2\n    on co.icustay_id = vd2.icustay_id\n    and co.endtime >= vd2.starttime\n    and co.endtime <= vd2.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co_hours co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.meanbp_min\n    , ma.meanbp_max\n    , ma.heartrate_min\n    , ma.heartrate_max\n    , ma.tempc_min\n    , ma.tempc_max\n    , ma.resprate_min\n    , ma.resprate_max\n    , ma.gcs_min\n    -- uo\n    , uo.urineoutput\n    -- static variables that do not change over the ICU stay\n    , cast(co.intime as timestamp) - cast(adm.admittime as timestamp) as preiculos\n    , case\n        when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n        then 1\n        when adm.ADMISSION_TYPE is null or sf.surgical is null\n        then null\n        else 0\n    end as electivesurgery\n  from co_hours co\n  inner join admissions adm\n    on co.hadm_id = adm.hadm_id\n  left join surgflag sf\n    on co.icustay_id = sf.icustay_id\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n    -- Below code calculates the component scores needed for OASIS\n    , case when preiculos is null then null\n        when preiculos < '0 0:10:12' then 5\n        when preiculos < '0 4:57:00' then 3\n        when preiculos < '1 0:00:00' then 0\n        when preiculos < '12 23:48:00' then 1\n        else 2 end as preiculos_score\n    ,  case when age is null then null\n        when age < 24 then 0\n        when age <= 53 then 3\n        when age <= 77 then 6\n        when age <= 89 then 9\n        when age >= 90 then 7\n        else 0 end as age_score\n    ,  case when mingcs is null then null\n        when mingcs <= 7 then 10\n        when mingcs < 14 then 4\n        when mingcs = 14 then 3\n        else 0 end as gcs_score\n    ,  case when heartrate_max is null then null\n        when heartrate_max > 125 then 6\n        when heartrate_min < 33 then 4\n        when heartrate_max >= 107 and heartrate_max <= 125 then 3\n        when heartrate_max >= 89 and heartrate_max <= 106 then 1\n        else 0 end as heartrate_score\n    ,  case when meanbp_min is null then null\n        when meanbp_min < 20.65 then 4\n        when meanbp_min < 51 then 3\n        when meanbp_max > 143.44 then 3\n        when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n        else 0 end as meanbp_score\n    ,  case when resprate_min is null then null\n        when resprate_min <   6 then 10\n        when resprate_max >  44 then  9\n        when resprate_max >  30 then  6\n        when resprate_max >  22 then  1\n        when resprate_min <  13 then 1 else 0\n        end as resprate_score\n    ,  case when tempc_max is null then null\n        when tempc_max > 39.88 then 6\n        when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n        when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n        when tempc_min < 33.22 then 3\n        when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n        when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n        else 0 end as temp_score\n    ,  case \n        when SUM(urineoutput) OVER W is null then null\n        when SUM(urineoutput) OVER W < 671.09 then 10\n        when SUM(urineoutput) OVER W > 6896.80 then 8\n        when SUM(urineoutput) OVER W >= 671.09\n        and SUM(urineoutput) OVER W <= 1426.99 then 5\n        when SUM(urineoutput) OVER W >= 1427.00\n        and SUM(urineoutput) OVER W <= 2544.14 then 1\n        else 0 end as urineoutput_score\n    ,  case when mechvent is null then null\n        when mechvent = 1 then 9\n        else 0 end as mechvent_score\n    ,  case when electivesurgery is null then null\n        when electivesurgery = 1 then 0\n        else 6 end as electivesurgery_score\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Look for the worst instantaneous score over the last 24 hours\n    -- Impute 0 if the score is missing\n    , preiculos_score AS preiculos_score_24hours\n    , electivesurgery_score as electivesurgery_score_24hours\n    , coalesce(MAX(age_score) OVER W, 0)::SMALLINT as age_score_24hours\n    , coalesce(MAX(gcs_score) OVER W, 0)::SMALLINT as gcs_score_24hours\n    , coalesce(MAX(heartrate_score) OVER W, 0)::SMALLINT as heartrate_score_24hours\n    , coalesce(MAX(meanbp_score) OVER W,0)::SMALLINT as meanbp_score_24hours\n    , coalesce(MAX(resprate_score) OVER W,0)::SMALLINT as resprate_score_24hours\n    , coalesce(MAX(temp_score) OVER W,0)::SMALLINT as temp_score_24hours\n    , coalesce(MAX(urineoutput_score) OVER W,0)::SMALLINT as urineoutput_score_24hours\n    , coalesce(MAX(mechvent_score) OVER W,0)::SMALLINT as mechvent_score_24hours\n\n    -- sum together data for final OASIS\n    , (preiculos_score\n    + electivesurgery_score\n    + coalesce(MAX(age_score) OVER W, 0)\n    + coalesce(MAX(gcs_score) OVER W, 0)\n    + coalesce(MAX(heartrate_score) OVER W, 0)\n    + coalesce(MAX(meanbp_score) OVER W,0)\n    + coalesce(MAX(resprate_score) OVER W,0)\n    + coalesce(MAX(temp_score) OVER W,0)\n    + coalesce(MAX(urineoutput_score) OVER W,0)\n    + coalesce(MAX(mechvent_score) OVER W,0)\n    )::SMALLINT\n    as OASIS_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.240871Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Postgres error: relation \"surgflag\" does not exist\nLINE 145:   left join surgflag sf\n                      ^\n", "name": "Postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Postgres error: relation \"surgflag\" does not exist\nLINE 145:   left join surgflag sf\n                      ^\n", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.242979Z", "type": "log_line"}
{"code": "E012", "data": {"conn_name": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_oasis: ROLLBACK", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.243274Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.243897Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.pivoted_oasis: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.244232Z", "type": "log_line"}
{"code": "W002", "data": {"exc": "Database Error in model pivoted_oasis (models/pivot/pivoted_oasis.sql)\n  relation \"surgflag\" does not exist\n  LINE 145:   left join surgflag sf\n                        ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_oasis.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Database Error in model pivoted_oasis (models/pivot/pivoted_oasis.sql)\n  relation \"surgflag\" does not exist\n  LINE 145:   left join surgflag sf\n                        ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_oasis.sql", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.245740Z", "type": "log_line"}
{"code": "Q035", "data": {"description": "table model public.pivoted_oasis", "execution_time": 0, "index": 89, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": "2022-07-18T00:11:36.217165", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "status": "error", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "89 of 107 ERROR creating table model public.pivoted_oasis ...................... [\u001b[31mERROR\u001b[0m in 0.03s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.246356Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.247632", "node_name": "pivoted_oasis", "node_path": "pivot/pivoted_oasis.sql", "node_started_at": "2022-07-18T00:11:36.217165", "node_status": "error", "resource_type": "model", "unique_id": "model.mimic.pivoted_oasis"}, "run_result": {"adapter_response": {}, "agate_table": null, "execution_time": 0.02748584747314453, "failures": null, "message": "Database Error in model pivoted_oasis (models/pivot/pivoted_oasis.sql)\n  relation \"surgflag\" does not exist\n  LINE 145:   left join surgflag sf\n                        ^\n  compiled SQL at target/run/mimic/models/pivot/pivoted_oasis.sql", "node": {"alias": "pivoted_oasis", "build_path": "target/run/mimic/models/pivot/pivoted_oasis.sql", "checksum": {"checksum": "848f539eed14cb94322e4fc6fb54b6d9ffc1111ca41fd1c69c79658af99779dd", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/pivot/pivoted_oasis.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (OASIS)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated for every hour of the patient's ICU stay.\n-- However, as the calculation window is 24 hours, care should be taken when\n-- using the score before the end of the first day.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced from CHARTEVENTS)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced from ADMISSIONS and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced from ADMISSIONS and ICUSTAYS)\n--  Age (sourced from PATIENTS)\n\n-- The following views are required to run this query:\n--  1) uofirstday - generated by urine-output-first-day.sql\n--  2) ventfirstday - generated by ventilated-first-day.sql\n--  3) vitalsfirstday - generated by vitals-first-day.sql\n--  4) gcsfirstday - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption \n--  that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to\n--  actually use the score values for these patients.\n\n-- The following views required to run this query:\n--  1) pivoted_uo - generated by pivoted-uo.sql\n--  2) pivoted_lab - generated by pivoted-lab.sql\n--  3) pivoted_gcs - generated by pivoted-gcs.sql\n--  4) pivoted_vital - generated by pivoted-vital.sql\n--  5) ventilation_durations - generated by ../durations/ventilation_durations.sql\n\n-- generate a row for every hour the patient was in the ICU\nWITH co_hours AS\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(v.HeartRate) as HeartRate_min\n  , max(v.HeartRate) as HeartRate_max\n  , min(v.TempC) as TempC_min\n  , max(v.TempC) as TempC_max\n  , min(v.MeanBP) as MeanBP_min\n  , max(v.MeanBP) as MeanBP_max\n  , min(v.RespRate) as RespRate_min\n  , max(v.RespRate) as RespRate_max\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , MAX(case\n        when vd1.icustay_id is not null then 1 \n        when vd2.icustay_id is not null then 1\n    else 0 end) AS mechvent\n  from co_hours co\n  left join \"postgres\".\"public\".\"pivoted_vital\" v\n    on co.icustay_id = v.icustay_id\n    and co.starttime < v.charttime\n    and co.endtime >= v.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  -- at the time of this row, was the patient ventilated\n  left join ventilation_durations vd1\n    on co.icustay_id = vd1.icustay_id\n    and co.starttime >= vd1.starttime\n    and co.starttime <= vd1.endtime\n  left join ventilation_durations vd2\n    on co.icustay_id = vd2.icustay_id\n    and co.endtime >= vd2.starttime\n    and co.endtime <= vd2.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co_hours co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.meanbp_min\n    , ma.meanbp_max\n    , ma.heartrate_min\n    , ma.heartrate_max\n    , ma.tempc_min\n    , ma.tempc_max\n    , ma.resprate_min\n    , ma.resprate_max\n    , ma.gcs_min\n    -- uo\n    , uo.urineoutput\n    -- static variables that do not change over the ICU stay\n    , cast(co.intime as timestamp) - cast(adm.admittime as timestamp) as preiculos\n    , case\n        when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n        then 1\n        when adm.ADMISSION_TYPE is null or sf.surgical is null\n        then null\n        else 0\n    end as electivesurgery\n  from co_hours co\n  inner join admissions adm\n    on co.hadm_id = adm.hadm_id\n  left join surgflag sf\n    on co.icustay_id = sf.icustay_id\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n    -- Below code calculates the component scores needed for OASIS\n    , case when preiculos is null then null\n        when preiculos < '0 0:10:12' then 5\n        when preiculos < '0 4:57:00' then 3\n        when preiculos < '1 0:00:00' then 0\n        when preiculos < '12 23:48:00' then 1\n        else 2 end as preiculos_score\n    ,  case when age is null then null\n        when age < 24 then 0\n        when age <= 53 then 3\n        when age <= 77 then 6\n        when age <= 89 then 9\n        when age >= 90 then 7\n        else 0 end as age_score\n    ,  case when mingcs is null then null\n        when mingcs <= 7 then 10\n        when mingcs < 14 then 4\n        when mingcs = 14 then 3\n        else 0 end as gcs_score\n    ,  case when heartrate_max is null then null\n        when heartrate_max > 125 then 6\n        when heartrate_min < 33 then 4\n        when heartrate_max >= 107 and heartrate_max <= 125 then 3\n        when heartrate_max >= 89 and heartrate_max <= 106 then 1\n        else 0 end as heartrate_score\n    ,  case when meanbp_min is null then null\n        when meanbp_min < 20.65 then 4\n        when meanbp_min < 51 then 3\n        when meanbp_max > 143.44 then 3\n        when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n        else 0 end as meanbp_score\n    ,  case when resprate_min is null then null\n        when resprate_min <   6 then 10\n        when resprate_max >  44 then  9\n        when resprate_max >  30 then  6\n        when resprate_max >  22 then  1\n        when resprate_min <  13 then 1 else 0\n        end as resprate_score\n    ,  case when tempc_max is null then null\n        when tempc_max > 39.88 then 6\n        when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n        when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n        when tempc_min < 33.22 then 3\n        when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n        when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n        else 0 end as temp_score\n    ,  case \n        when SUM(urineoutput) OVER W is null then null\n        when SUM(urineoutput) OVER W < 671.09 then 10\n        when SUM(urineoutput) OVER W > 6896.80 then 8\n        when SUM(urineoutput) OVER W >= 671.09\n        and SUM(urineoutput) OVER W <= 1426.99 then 5\n        when SUM(urineoutput) OVER W >= 1427.00\n        and SUM(urineoutput) OVER W <= 2544.14 then 1\n        else 0 end as urineoutput_score\n    ,  case when mechvent is null then null\n        when mechvent = 1 then 9\n        else 0 end as mechvent_score\n    ,  case when electivesurgery is null then null\n        when electivesurgery = 1 then 0\n        else 6 end as electivesurgery_score\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Look for the worst instantaneous score over the last 24 hours\n    -- Impute 0 if the score is missing\n    , preiculos_score AS preiculos_score_24hours\n    , electivesurgery_score as electivesurgery_score_24hours\n    , coalesce(MAX(age_score) OVER W, 0)::SMALLINT as age_score_24hours\n    , coalesce(MAX(gcs_score) OVER W, 0)::SMALLINT as gcs_score_24hours\n    , coalesce(MAX(heartrate_score) OVER W, 0)::SMALLINT as heartrate_score_24hours\n    , coalesce(MAX(meanbp_score) OVER W,0)::SMALLINT as meanbp_score_24hours\n    , coalesce(MAX(resprate_score) OVER W,0)::SMALLINT as resprate_score_24hours\n    , coalesce(MAX(temp_score) OVER W,0)::SMALLINT as temp_score_24hours\n    , coalesce(MAX(urineoutput_score) OVER W,0)::SMALLINT as urineoutput_score_24hours\n    , coalesce(MAX(mechvent_score) OVER W,0)::SMALLINT as mechvent_score_24hours\n\n    -- sum together data for final OASIS\n    , (preiculos_score\n    + electivesurgery_score\n    + coalesce(MAX(age_score) OVER W, 0)\n    + coalesce(MAX(gcs_score) OVER W, 0)\n    + coalesce(MAX(heartrate_score) OVER W, 0)\n    + coalesce(MAX(meanbp_score) OVER W,0)\n    + coalesce(MAX(resprate_score) OVER W,0)\n    + coalesce(MAX(temp_score) OVER W,0)\n    + coalesce(MAX(urineoutput_score) OVER W,0)\n    + coalesce(MAX(mechvent_score) OVER W,0)\n    )::SMALLINT\n    as OASIS_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5889444, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["model.mimic.pivoted_vital"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "pivot", "pivoted_oasis"], "meta": {}, "name": "pivoted_oasis", "original_file_path": "models/pivot/pivoted_oasis.sql", "package_name": "mimic", "patch_path": null, "path": "pivot/pivoted_oasis.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (OASIS)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated for every hour of the patient's ICU stay.\n-- However, as the calculation window is 24 hours, care should be taken when\n-- using the score before the end of the first day.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced from CHARTEVENTS)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced from ADMISSIONS and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced from ADMISSIONS and ICUSTAYS)\n--  Age (sourced from PATIENTS)\n\n-- The following views are required to run this query:\n--  1) uofirstday - generated by urine-output-first-day.sql\n--  2) ventfirstday - generated by ventilated-first-day.sql\n--  3) vitalsfirstday - generated by vitals-first-day.sql\n--  4) gcsfirstday - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption \n--  that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to\n--  actually use the score values for these patients.\n\n-- The following views required to run this query:\n--  1) pivoted_uo - generated by pivoted-uo.sql\n--  2) pivoted_lab - generated by pivoted-lab.sql\n--  3) pivoted_gcs - generated by pivoted-gcs.sql\n--  4) pivoted_vital - generated by pivoted-vital.sql\n--  5) ventilation_durations - generated by ../durations/ventilation_durations.sql\n\n-- generate a row for every hour the patient was in the ICU\nWITH co_hours AS\n(\n  select ih.icustay_id, ie.hadm_id\n  , hr\n  -- start/endtime can be used to filter to values within this hour\n  , DATETIME_SUB(ih.endtime, INTERVAL '1' HOUR) AS starttime\n  , ih.endtime\n  from icustay_hours ih\n  INNER JOIN icustays ie\n    ON ih.icustay_id = ie.icustay_id\n)\n, mini_agg as\n(\n  select co.icustay_id, co.hr\n  -- vitals\n  , min(v.HeartRate) as HeartRate_min\n  , max(v.HeartRate) as HeartRate_max\n  , min(v.TempC) as TempC_min\n  , max(v.TempC) as TempC_max\n  , min(v.MeanBP) as MeanBP_min\n  , max(v.MeanBP) as MeanBP_max\n  , min(v.RespRate) as RespRate_min\n  , max(v.RespRate) as RespRate_max\n  -- gcs\n  , min(gcs.GCS) as GCS_min\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  , MAX(case\n        when vd1.icustay_id is not null then 1 \n        when vd2.icustay_id is not null then 1\n    else 0 end) AS mechvent\n  from co_hours co\n  left join {{ ref('pivoted_vital') }} v\n    on co.icustay_id = v.icustay_id\n    and co.starttime < v.charttime\n    and co.endtime >= v.charttime\n  left join pivoted_gcs gcs\n    on co.icustay_id = gcs.icustay_id\n    and co.starttime < gcs.charttime\n    and co.endtime >= gcs.charttime\n  -- at the time of this row, was the patient ventilated\n  left join ventilation_durations vd1\n    on co.icustay_id = vd1.icustay_id\n    and co.starttime >= vd1.starttime\n    and co.starttime <= vd1.endtime\n  left join ventilation_durations vd2\n    on co.icustay_id = vd2.icustay_id\n    and co.endtime >= vd2.starttime\n    and co.endtime <= vd2.endtime\n  group by co.icustay_id, co.hr\n)\n-- sum uo separately to prevent duplicating values\n, uo as\n(\n  select co.icustay_id, co.hr\n  -- uo\n  , sum(uo.urineoutput) as urineoutput\n  from co_hours co\n  left join pivoted_uo uo\n    on co.icustay_id = uo.icustay_id\n    and co.starttime < uo.charttime\n    and co.endtime >= uo.charttime\n  group by co.icustay_id, co.hr\n)\n, scorecomp as\n(\n  select\n      co.icustay_id\n    , co.hr\n    , co.starttime, co.endtime\n    , ma.meanbp_min\n    , ma.meanbp_max\n    , ma.heartrate_min\n    , ma.heartrate_max\n    , ma.tempc_min\n    , ma.tempc_max\n    , ma.resprate_min\n    , ma.resprate_max\n    , ma.gcs_min\n    -- uo\n    , uo.urineoutput\n    -- static variables that do not change over the ICU stay\n    , cast(co.intime as timestamp) - cast(adm.admittime as timestamp) as preiculos\n    , case\n        when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n        then 1\n        when adm.ADMISSION_TYPE is null or sf.surgical is null\n        then null\n        else 0\n    end as electivesurgery\n  from co_hours co\n  inner join admissions adm\n    on co.hadm_id = adm.hadm_id\n  left join surgflag sf\n    on co.icustay_id = sf.icustay_id\n  left join mini_agg ma\n    on co.icustay_id = ma.icustay_id\n    and co.hr = ma.hr\n  left join uo\n    on co.icustay_id = uo.icustay_id\n    and co.hr = uo.hr\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select scorecomp.*\n    -- Below code calculates the component scores needed for OASIS\n    , case when preiculos is null then null\n        when preiculos < '0 0:10:12' then 5\n        when preiculos < '0 4:57:00' then 3\n        when preiculos < '1 0:00:00' then 0\n        when preiculos < '12 23:48:00' then 1\n        else 2 end as preiculos_score\n    ,  case when age is null then null\n        when age < 24 then 0\n        when age <= 53 then 3\n        when age <= 77 then 6\n        when age <= 89 then 9\n        when age >= 90 then 7\n        else 0 end as age_score\n    ,  case when mingcs is null then null\n        when mingcs <= 7 then 10\n        when mingcs < 14 then 4\n        when mingcs = 14 then 3\n        else 0 end as gcs_score\n    ,  case when heartrate_max is null then null\n        when heartrate_max > 125 then 6\n        when heartrate_min < 33 then 4\n        when heartrate_max >= 107 and heartrate_max <= 125 then 3\n        when heartrate_max >= 89 and heartrate_max <= 106 then 1\n        else 0 end as heartrate_score\n    ,  case when meanbp_min is null then null\n        when meanbp_min < 20.65 then 4\n        when meanbp_min < 51 then 3\n        when meanbp_max > 143.44 then 3\n        when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n        else 0 end as meanbp_score\n    ,  case when resprate_min is null then null\n        when resprate_min <   6 then 10\n        when resprate_max >  44 then  9\n        when resprate_max >  30 then  6\n        when resprate_max >  22 then  1\n        when resprate_min <  13 then 1 else 0\n        end as resprate_score\n    ,  case when tempc_max is null then null\n        when tempc_max > 39.88 then 6\n        when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n        when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n        when tempc_min < 33.22 then 3\n        when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n        when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n        else 0 end as temp_score\n    ,  case \n        when SUM(urineoutput) OVER W is null then null\n        when SUM(urineoutput) OVER W < 671.09 then 10\n        when SUM(urineoutput) OVER W > 6896.80 then 8\n        when SUM(urineoutput) OVER W >= 671.09\n        and SUM(urineoutput) OVER W <= 1426.99 then 5\n        when SUM(urineoutput) OVER W >= 1427.00\n        and SUM(urineoutput) OVER W <= 2544.14 then 1\n        else 0 end as urineoutput_score\n    ,  case when mechvent is null then null\n        when mechvent = 1 then 9\n        else 0 end as mechvent_score\n    ,  case when electivesurgery is null then null\n        when electivesurgery = 1 then 0\n        else 6 end as electivesurgery_score\n  from scorecomp\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\n, score_final as\n(\n  select s.*\n    -- Look for the worst instantaneous score over the last 24 hours\n    -- Impute 0 if the score is missing\n    , preiculos_score AS preiculos_score_24hours\n    , electivesurgery_score as electivesurgery_score_24hours\n    , coalesce(MAX(age_score) OVER W, 0)::SMALLINT as age_score_24hours\n    , coalesce(MAX(gcs_score) OVER W, 0)::SMALLINT as gcs_score_24hours\n    , coalesce(MAX(heartrate_score) OVER W, 0)::SMALLINT as heartrate_score_24hours\n    , coalesce(MAX(meanbp_score) OVER W,0)::SMALLINT as meanbp_score_24hours\n    , coalesce(MAX(resprate_score) OVER W,0)::SMALLINT as resprate_score_24hours\n    , coalesce(MAX(temp_score) OVER W,0)::SMALLINT as temp_score_24hours\n    , coalesce(MAX(urineoutput_score) OVER W,0)::SMALLINT as urineoutput_score_24hours\n    , coalesce(MAX(mechvent_score) OVER W,0)::SMALLINT as mechvent_score_24hours\n\n    -- sum together data for final OASIS\n    , (preiculos_score\n    + electivesurgery_score\n    + coalesce(MAX(age_score) OVER W, 0)\n    + coalesce(MAX(gcs_score) OVER W, 0)\n    + coalesce(MAX(heartrate_score) OVER W, 0)\n    + coalesce(MAX(meanbp_score) OVER W,0)\n    + coalesce(MAX(resprate_score) OVER W,0)\n    + coalesce(MAX(temp_score) OVER W,0)\n    + coalesce(MAX(urineoutput_score) OVER W,0)\n    + coalesce(MAX(mechvent_score) OVER W,0)\n    )::SMALLINT\n    as OASIS_24hours\n  from scorecalc s\n  WINDOW W as\n  (\n    PARTITION BY icustay_id\n    ORDER BY hr\n    ROWS BETWEEN 23 PRECEDING AND 0 FOLLOWING\n  )\n)\nselect * from score_final\nwhere hr >= 0\norder by icustay_id, hr", "refs": [["pivoted_vital"]], "relation_name": "\"postgres\".\"public\".\"pivoted_oasis\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.pivoted_oasis", "unrendered_config": {"materialized": "table"}}, "status": "error", "thread_id": "Thread-1", "timing": []}, "unique_id": "model.mimic.pivoted_oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.pivoted_oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.247874Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": "2022-07-18T00:11:36.248707", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.ventilation_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.248792Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.ventilation_durations", "index": 90, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": "2022-07-18T00:11:36.248707", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "90 of 107 START table model public.ventilation_durations ....................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.249341Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.250236Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": "2022-07-18T00:11:36.248707", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.ventilation_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.250617Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.ventilation_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.250957Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.253883Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.254553Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.ventilation_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.254902Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.ventilation_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.264089Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.265273Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.266044Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.266965Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.273212Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.273523Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_durations__dbt_tmp\"\n  as (\n    -- This query extracts the duration of mechanical ventilation\n-- The main goal of the query is to aggregate sequential ventilator settings\n-- into single mechanical ventilation \"events\". The start and end time of these\n-- events can then be used for various purposes: calculating the total duration\n-- of mechanical ventilation, cross-checking values (e.g. PaO2:FiO2 on vent), etc\n\n-- The query's logic is roughly:\n--    1) The presence of a mechanical ventilation setting starts a new ventilation event\n--    2) Any instance of a setting in the next 8 hours continues the event\n--    3) Certain elements end the current ventilation event\n--        a) documented extubation ends the current ventilation\n--        b) initiation of non-invasive vent and/or oxygen ends the current vent\n\n-- See the ventilation_classification.sql query for step 1 of the above.\n-- This query has the logic for converting events into durations.\nwith vd0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime which had a mechanical ventilation event\n    , case\n        when MechVent=1 then\n          LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)\n        else null\n      end as charttime_lag\n    , charttime\n    , MechVent\n    , OxygenTherapy\n    , Extubated\n    , SelfExtubated\n  from \"postgres\".\"public\".\"ventilation_classification\"\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime_lag\n      , charttime\n      , MechVent\n      , OxygenTherapy\n      , Extubated\n      , SelfExtubated\n\n      -- if this is a mechanical ventilation event, we calculate the time since the last event\n      , case\n          -- if the current observation indicates mechanical ventilation is present\n          -- calculate the time since the last vent event\n          when MechVent=1 then\n            DATETIME_DIFF(CHARTTIME, charttime_lag, 'MINUTE')/60\n          else null\n        end as ventduration\n\n      , LAG(Extubated,1)\n      OVER\n      (\n      partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n      order by charttime\n      ) as ExtubatedLag\n\n      -- now we determine if the current mech vent event is a \"new\", i.e. they've just been intubated\n      , case\n        -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n          --when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n          when\n            LAG(Extubated,1)\n            OVER\n            (\n            partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n            order by charttime\n            )\n            = 1 then 1\n          -- if patient has initiated oxygen therapy, and is not currently vented, start a newvent\n          when MechVent = 0 and OxygenTherapy = 1 then 1\n            -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n          when CHARTTIME > DATETIME_ADD(charttime_lag, INTERVAL '8' HOUR)\n            then 1\n        else 0\n        end as newvent\n  -- use the staging table with only vent settings from chart events\n  FROM vd0 ventsettings\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new ventilation\n  -- this results in a monotonic integer assigned to each instance of ventilation\n  , case when MechVent=1 or Extubated = 1 then\n      SUM( newvent )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as ventnum\n  --- now we convert CHARTTIME of ventilator settings into durations\n  from vd1\n)\n-- create the durations for each mechanical ventilation instance\nselect icustay_id\n  -- regenerate ventnum so it's sequential\n  , ROW_NUMBER() over (partition by icustay_id order by ventnum) as ventnum\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n  , DATETIME_DIFF(max(charttime), min(charttime), 'MINUTE')/60 AS duration_hours\nfrom vd2\ngroup by icustay_id, vd2.ventnum\nhaving min(charttime) != max(charttime)\n-- patient had to be mechanically ventilated at least once\n-- i.e. max(mechvent) should be 1\n-- this excludes a frequent situation of NIV/oxygen before intub\n-- in these cases, ventnum=0 and max(mechvent)=0, so they are ignored\nand max(mechvent) = 1\norder by icustay_id, ventnum\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_durations__dbt_tmp\"\n  as (\n    -- This query extracts the duration of mechanical ventilation\n-- The main goal of the query is to aggregate sequential ventilator settings\n-- into single mechanical ventilation \"events\". The start and end time of these\n-- events can then be used for various purposes: calculating the total duration\n-- of mechanical ventilation, cross-checking values (e.g. PaO2:FiO2 on vent), etc\n\n-- The query's logic is roughly:\n--    1) The presence of a mechanical ventilation setting starts a new ventilation event\n--    2) Any instance of a setting in the next 8 hours continues the event\n--    3) Certain elements end the current ventilation event\n--        a) documented extubation ends the current ventilation\n--        b) initiation of non-invasive vent and/or oxygen ends the current vent\n\n-- See the ventilation_classification.sql query for step 1 of the above.\n-- This query has the logic for converting events into durations.\nwith vd0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime which had a mechanical ventilation event\n    , case\n        when MechVent=1 then\n          LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)\n        else null\n      end as charttime_lag\n    , charttime\n    , MechVent\n    , OxygenTherapy\n    , Extubated\n    , SelfExtubated\n  from \"postgres\".\"public\".\"ventilation_classification\"\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime_lag\n      , charttime\n      , MechVent\n      , OxygenTherapy\n      , Extubated\n      , SelfExtubated\n\n      -- if this is a mechanical ventilation event, we calculate the time since the last event\n      , case\n          -- if the current observation indicates mechanical ventilation is present\n          -- calculate the time since the last vent event\n          when MechVent=1 then\n            DATETIME_DIFF(CHARTTIME, charttime_lag, 'MINUTE')/60\n          else null\n        end as ventduration\n\n      , LAG(Extubated,1)\n      OVER\n      (\n      partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n      order by charttime\n      ) as ExtubatedLag\n\n      -- now we determine if the current mech vent event is a \"new\", i.e. they've just been intubated\n      , case\n        -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n          --when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n          when\n            LAG(Extubated,1)\n            OVER\n            (\n            partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n            order by charttime\n            )\n            = 1 then 1\n          -- if patient has initiated oxygen therapy, and is not currently vented, start a newvent\n          when MechVent = 0 and OxygenTherapy = 1 then 1\n            -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n          when CHARTTIME > DATETIME_ADD(charttime_lag, INTERVAL '8' HOUR)\n            then 1\n        else 0\n        end as newvent\n  -- use the staging table with only vent settings from chart events\n  FROM vd0 ventsettings\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new ventilation\n  -- this results in a monotonic integer assigned to each instance of ventilation\n  , case when MechVent=1 or Extubated = 1 then\n      SUM( newvent )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as ventnum\n  --- now we convert CHARTTIME of ventilator settings into durations\n  from vd1\n)\n-- create the durations for each mechanical ventilation instance\nselect icustay_id\n  -- regenerate ventnum so it's sequential\n  , ROW_NUMBER() over (partition by icustay_id order by ventnum) as ventnum\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n  , DATETIME_DIFF(max(charttime), min(charttime), 'MINUTE')/60 AS duration_hours\nfrom vd2\ngroup by icustay_id, vd2.ventnum\nhaving min(charttime) != max(charttime)\n-- patient had to be mechanically ventilated at least once\n-- i.e. max(mechvent) should be 1\n-- this excludes a frequent situation of NIV/oxygen before intub\n-- in these cases, ventnum=0 and max(mechvent)=0, so they are ignored\nand max(mechvent) = 1\norder by icustay_id, ventnum\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.273844Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.03, "status": "SELECT 3"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3 in 0.03 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.308399Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.315874Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\nalter table \"postgres\".\"public\".\"ventilation_durations\" rename to \"ventilation_durations__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\nalter table \"postgres\".\"public\".\"ventilation_durations\" rename to \"ventilation_durations__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.316167Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.316892Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.320917Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\nalter table \"postgres\".\"public\".\"ventilation_durations__dbt_tmp\" rename to \"ventilation_durations\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\nalter table \"postgres\".\"public\".\"ventilation_durations__dbt_tmp\" rename to \"ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.321140Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.321950Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.324877Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.325083Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.325335Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.327096Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_durations", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_durations\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.329413Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_durations__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_durations\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_durations__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.329901Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.332335Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.335581Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_durations: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.335868Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.ventilation_durations", "execution_time": 0, "index": 90, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": "2022-07-18T00:11:36.248707", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "status": "SELECT 3", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "90 of 107 OK created table model public.ventilation_durations .................. [\u001b[32mSELECT 3\u001b[0m in 0.09s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.336825Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.337244", "node_name": "ventilation_durations", "node_path": "durations/ventilation_durations.sql", "node_started_at": "2022-07-18T00:11:36.248707", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.ventilation_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 3", "code": "SELECT", "rows_affected": 3}, "agate_table": null, "execution_time": 0.08680081367492676, "failures": null, "message": "SELECT 3", "node": {"alias": "ventilation_durations", "build_path": "target/run/mimic/models/durations/ventilation_durations.sql", "checksum": {"checksum": "1818f5196460ca5fd251d3fb5c30e48d95a5a415941fad6209a2c348e44da7d9", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/ventilation_durations.sql", "compiled_sql": "-- This query extracts the duration of mechanical ventilation\n-- The main goal of the query is to aggregate sequential ventilator settings\n-- into single mechanical ventilation \"events\". The start and end time of these\n-- events can then be used for various purposes: calculating the total duration\n-- of mechanical ventilation, cross-checking values (e.g. PaO2:FiO2 on vent), etc\n\n-- The query's logic is roughly:\n--    1) The presence of a mechanical ventilation setting starts a new ventilation event\n--    2) Any instance of a setting in the next 8 hours continues the event\n--    3) Certain elements end the current ventilation event\n--        a) documented extubation ends the current ventilation\n--        b) initiation of non-invasive vent and/or oxygen ends the current vent\n\n-- See the ventilation_classification.sql query for step 1 of the above.\n-- This query has the logic for converting events into durations.\nwith vd0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime which had a mechanical ventilation event\n    , case\n        when MechVent=1 then\n          LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)\n        else null\n      end as charttime_lag\n    , charttime\n    , MechVent\n    , OxygenTherapy\n    , Extubated\n    , SelfExtubated\n  from \"postgres\".\"public\".\"ventilation_classification\"\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime_lag\n      , charttime\n      , MechVent\n      , OxygenTherapy\n      , Extubated\n      , SelfExtubated\n\n      -- if this is a mechanical ventilation event, we calculate the time since the last event\n      , case\n          -- if the current observation indicates mechanical ventilation is present\n          -- calculate the time since the last vent event\n          when MechVent=1 then\n            DATETIME_DIFF(CHARTTIME, charttime_lag, 'MINUTE')/60\n          else null\n        end as ventduration\n\n      , LAG(Extubated,1)\n      OVER\n      (\n      partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n      order by charttime\n      ) as ExtubatedLag\n\n      -- now we determine if the current mech vent event is a \"new\", i.e. they've just been intubated\n      , case\n        -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n          --when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n          when\n            LAG(Extubated,1)\n            OVER\n            (\n            partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n            order by charttime\n            )\n            = 1 then 1\n          -- if patient has initiated oxygen therapy, and is not currently vented, start a newvent\n          when MechVent = 0 and OxygenTherapy = 1 then 1\n            -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n          when CHARTTIME > DATETIME_ADD(charttime_lag, INTERVAL '8' HOUR)\n            then 1\n        else 0\n        end as newvent\n  -- use the staging table with only vent settings from chart events\n  FROM vd0 ventsettings\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new ventilation\n  -- this results in a monotonic integer assigned to each instance of ventilation\n  , case when MechVent=1 or Extubated = 1 then\n      SUM( newvent )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as ventnum\n  --- now we convert CHARTTIME of ventilator settings into durations\n  from vd1\n)\n-- create the durations for each mechanical ventilation instance\nselect icustay_id\n  -- regenerate ventnum so it's sequential\n  , ROW_NUMBER() over (partition by icustay_id order by ventnum) as ventnum\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n  , DATETIME_DIFF(max(charttime), min(charttime), 'MINUTE')/60 AS duration_hours\nfrom vd2\ngroup by icustay_id, vd2.ventnum\nhaving min(charttime) != max(charttime)\n-- patient had to be mechanically ventilated at least once\n-- i.e. max(mechvent) should be 1\n-- this excludes a frequent situation of NIV/oxygen before intub\n-- in these cases, ventnum=0 and max(mechvent)=0, so they are ignored\nand max(mechvent) = 1\norder by icustay_id, ventnum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4926612, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.ventilation_classification"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "ventilation_durations"], "meta": {}, "name": "ventilation_durations", "original_file_path": "models/durations/ventilation_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/ventilation_durations.sql", "raw_sql": "-- This query extracts the duration of mechanical ventilation\n-- The main goal of the query is to aggregate sequential ventilator settings\n-- into single mechanical ventilation \"events\". The start and end time of these\n-- events can then be used for various purposes: calculating the total duration\n-- of mechanical ventilation, cross-checking values (e.g. PaO2:FiO2 on vent), etc\n\n-- The query's logic is roughly:\n--    1) The presence of a mechanical ventilation setting starts a new ventilation event\n--    2) Any instance of a setting in the next 8 hours continues the event\n--    3) Certain elements end the current ventilation event\n--        a) documented extubation ends the current ventilation\n--        b) initiation of non-invasive vent and/or oxygen ends the current vent\n\n-- See the ventilation_classification.sql query for step 1 of the above.\n-- This query has the logic for converting events into durations.\nwith vd0 as\n(\n  select\n    icustay_id\n    -- this carries over the previous charttime which had a mechanical ventilation event\n    , case\n        when MechVent=1 then\n          LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)\n        else null\n      end as charttime_lag\n    , charttime\n    , MechVent\n    , OxygenTherapy\n    , Extubated\n    , SelfExtubated\n  from {{ref('ventilation_classification')}}\n)\n, vd1 as\n(\n  select\n      icustay_id\n      , charttime_lag\n      , charttime\n      , MechVent\n      , OxygenTherapy\n      , Extubated\n      , SelfExtubated\n\n      -- if this is a mechanical ventilation event, we calculate the time since the last event\n      , case\n          -- if the current observation indicates mechanical ventilation is present\n          -- calculate the time since the last vent event\n          when MechVent=1 then\n            DATETIME_DIFF(CHARTTIME, charttime_lag, 'MINUTE')/60\n          else null\n        end as ventduration\n\n      , LAG(Extubated,1)\n      OVER\n      (\n      partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n      order by charttime\n      ) as ExtubatedLag\n\n      -- now we determine if the current mech vent event is a \"new\", i.e. they've just been intubated\n      , case\n        -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n          --when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n          when\n            LAG(Extubated,1)\n            OVER\n            (\n            partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n            order by charttime\n            )\n            = 1 then 1\n          -- if patient has initiated oxygen therapy, and is not currently vented, start a newvent\n          when MechVent = 0 and OxygenTherapy = 1 then 1\n            -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n          when CHARTTIME > DATETIME_ADD(charttime_lag, INTERVAL '8' HOUR)\n            then 1\n        else 0\n        end as newvent\n  -- use the staging table with only vent settings from chart events\n  FROM vd0 ventsettings\n)\n, vd2 as\n(\n  select vd1.*\n  -- create a cumulative sum of the instances of new ventilation\n  -- this results in a monotonic integer assigned to each instance of ventilation\n  , case when MechVent=1 or Extubated = 1 then\n      SUM( newvent )\n      OVER ( partition by icustay_id order by charttime )\n    else null end\n    as ventnum\n  --- now we convert CHARTTIME of ventilator settings into durations\n  from vd1\n)\n-- create the durations for each mechanical ventilation instance\nselect icustay_id\n  -- regenerate ventnum so it's sequential\n  , ROW_NUMBER() over (partition by icustay_id order by ventnum) as ventnum\n  , min(charttime) as starttime\n  , max(charttime) as endtime\n  , DATETIME_DIFF(max(charttime), min(charttime), 'MINUTE')/60 AS duration_hours\nfrom vd2\ngroup by icustay_id, vd2.ventnum\nhaving min(charttime) != max(charttime)\n-- patient had to be mechanically ventilated at least once\n-- i.e. max(mechvent) should be 1\n-- this excludes a frequent situation of NIV/oxygen before intub\n-- in these cases, ventnum=0 and max(mechvent)=0, so they are ignored\nand max(mechvent) = 1\norder by icustay_id, ventnum", "refs": [["ventilation_classification"]], "relation_name": "\"postgres\".\"public\".\"ventilation_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.ventilation_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:36.254433Z", "name": "compile", "started_at": "2022-07-18T00:11:36.250936Z"}, {"completed_at": "2022-07-18T00:11:36.335549Z", "name": "execute", "started_at": "2022-07-18T00:11:36.255151Z"}]}, "unique_id": "model.mimic.ventilation_durations"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.ventilation_durations", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.337427Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": "2022-07-18T00:11:36.337946", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.qsofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.338033Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.qsofa", "index": 91, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": "2022-07-18T00:11:36.337946", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "91 of 107 START table model public.qsofa ....................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.338823Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.340290Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": "2022-07-18T00:11:36.337946", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.qsofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.340633Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.qsofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.340952Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.344475Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.345222Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.qsofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.346518Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.qsofa\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.354949Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.355657Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.355911Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.356113Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.362789Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.363160Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"qsofa__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Quick Sequential Organ Failure Assessment (qSOFA)\n-- This query extracts the quick sequential organ failure assessment.\n-- This score was a recent revision of SOFA, aiming to detect patients at risk of sepsis.\n-- The score is calculated on the first day of each ICU patients' stay - though needn't be.\n-- ------------------------------------------------------------------\n\n-- Reference for qSOFA:\n--    Singer M, et al. The Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n--    Seymour CW, et al. Assessment of Clinical Criteria for Sepsis: For the Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n\n-- Variables used in qSOFA:\n--  GCS, respiratory rate, systolic blood pressure\n\n-- The following views required to run this query:\n--  1) gcsfirstday - generated by gcs-first-day.sql\n--  2) vitalsfirstday - generated by vitals-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith scorecomp as\n(\nselect ie.icustay_id\n  , v.sysbp_min\n  , v.resprate_max\n  , gcs.mingcs\nFROM icustays ie\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  , case\n      when sysbp_min is null then null\n      when sysbp_min   <= 100 then 1\n      else 0 end\n    as sysbp_score\n  , case\n      when mingcs is null then null\n      when mingcs   <= 13 then 1\n      else 0 end\n    as gcs_score\n  , case\n      when resprate_max is null then null\n      when resprate_max   >= 22 then 1\n      else 0 end\n    as resprate_score\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, coalesce(sysbp_score,0)\n + coalesce(gcs_score,0)\n + coalesce(resprate_score,0)\n as qsofa\n, sysbp_score\n, gcs_score\n, resprate_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"qsofa__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Quick Sequential Organ Failure Assessment (qSOFA)\n-- This query extracts the quick sequential organ failure assessment.\n-- This score was a recent revision of SOFA, aiming to detect patients at risk of sepsis.\n-- The score is calculated on the first day of each ICU patients' stay - though needn't be.\n-- ------------------------------------------------------------------\n\n-- Reference for qSOFA:\n--    Singer M, et al. The Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n--    Seymour CW, et al. Assessment of Clinical Criteria for Sepsis: For the Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n\n-- Variables used in qSOFA:\n--  GCS, respiratory rate, systolic blood pressure\n\n-- The following views required to run this query:\n--  1) gcsfirstday - generated by gcs-first-day.sql\n--  2) vitalsfirstday - generated by vitals-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith scorecomp as\n(\nselect ie.icustay_id\n  , v.sysbp_min\n  , v.resprate_max\n  , gcs.mingcs\nFROM icustays ie\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  , case\n      when sysbp_min is null then null\n      when sysbp_min   <= 100 then 1\n      else 0 end\n    as sysbp_score\n  , case\n      when mingcs is null then null\n      when mingcs   <= 13 then 1\n      else 0 end\n    as gcs_score\n  , case\n      when resprate_max is null then null\n      when resprate_max   >= 22 then 1\n      else 0 end\n    as resprate_score\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, coalesce(sysbp_score,0)\n + coalesce(gcs_score,0)\n + coalesce(resprate_score,0)\n as qsofa\n, sysbp_score\n, gcs_score\n, resprate_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.363496Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.16, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.16 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.526620Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.536599Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\nalter table \"postgres\".\"public\".\"qsofa\" rename to \"qsofa__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\nalter table \"postgres\".\"public\".\"qsofa\" rename to \"qsofa__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.536887Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.538160Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.543194Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\nalter table \"postgres\".\"public\".\"qsofa__dbt_tmp\" rename to \"qsofa\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\nalter table \"postgres\".\"public\".\"qsofa__dbt_tmp\" rename to \"qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.543582Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.544408Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.550659Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.550944Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.551254Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.558590Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.qsofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.qsofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.560404Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.qsofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\ndrop table if exists \"postgres\".\"public\".\"qsofa__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.qsofa\"} */\ndrop table if exists \"postgres\".\"public\".\"qsofa__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.560678Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.563508Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.567513Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.qsofa: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.567806Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.qsofa", "execution_time": 0, "index": 91, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": "2022-07-18T00:11:36.337946", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "91 of 107 OK created table model public.qsofa .................................. [\u001b[32mSELECT 61532\u001b[0m in 0.23s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.568705Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.569123", "node_name": "qsofa", "node_path": "severityscores/qsofa.sql", "node_started_at": "2022-07-18T00:11:36.337946", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.qsofa"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.2285783290863037, "failures": null, "message": "SELECT 61532", "node": {"alias": "qsofa", "build_path": "target/run/mimic/models/severityscores/qsofa.sql", "checksum": {"checksum": "8ed1ed1481cc1934a54518fc7d5e956a0fe6c4d95da7faafb4bce5536ff5c684", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/qsofa.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Quick Sequential Organ Failure Assessment (qSOFA)\n-- This query extracts the quick sequential organ failure assessment.\n-- This score was a recent revision of SOFA, aiming to detect patients at risk of sepsis.\n-- The score is calculated on the first day of each ICU patients' stay - though needn't be.\n-- ------------------------------------------------------------------\n\n-- Reference for qSOFA:\n--    Singer M, et al. The Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n--    Seymour CW, et al. Assessment of Clinical Criteria for Sepsis: For the Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n\n-- Variables used in qSOFA:\n--  GCS, respiratory rate, systolic blood pressure\n\n-- The following views required to run this query:\n--  1) gcsfirstday - generated by gcs-first-day.sql\n--  2) vitalsfirstday - generated by vitals-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith scorecomp as\n(\nselect ie.icustay_id\n  , v.sysbp_min\n  , v.resprate_max\n  , gcs.mingcs\nFROM icustays ie\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  , case\n      when sysbp_min is null then null\n      when sysbp_min   <= 100 then 1\n      else 0 end\n    as sysbp_score\n  , case\n      when mingcs is null then null\n      when mingcs   <= 13 then 1\n      else 0 end\n    as gcs_score\n  , case\n      when resprate_max is null then null\n      when resprate_max   >= 22 then 1\n      else 0 end\n    as resprate_score\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, coalesce(sysbp_score,0)\n + coalesce(gcs_score,0)\n + coalesce(resprate_score,0)\n as qsofa\n, sysbp_score\n, gcs_score\n, resprate_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.722088, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.vitals_first_day", "model.mimic.gcs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "qsofa"], "meta": {}, "name": "qsofa", "original_file_path": "models/severityscores/qsofa.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/qsofa.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Quick Sequential Organ Failure Assessment (qSOFA)\n-- This query extracts the quick sequential organ failure assessment.\n-- This score was a recent revision of SOFA, aiming to detect patients at risk of sepsis.\n-- The score is calculated on the first day of each ICU patients' stay - though needn't be.\n-- ------------------------------------------------------------------\n\n-- Reference for qSOFA:\n--    Singer M, et al. The Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n--    Seymour CW, et al. Assessment of Clinical Criteria for Sepsis: For the Third International Consensus Definitions for Sepsis and Septic Shock (Sepsis-3)\n\n-- Variables used in qSOFA:\n--  GCS, respiratory rate, systolic blood pressure\n\n-- The following views required to run this query:\n--  1) gcsfirstday - generated by gcs-first-day.sql\n--  2) vitalsfirstday - generated by vitals-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith scorecomp as\n(\nselect ie.icustay_id\n  , v.sysbp_min\n  , v.resprate_max\n  , gcs.mingcs\nFROM icustays ie\nleft join {{ref('vitals_first_day')}} v\n  on ie.icustay_id = v.icustay_id\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  , case\n      when sysbp_min is null then null\n      when sysbp_min   <= 100 then 1\n      else 0 end\n    as sysbp_score\n  , case\n      when mingcs is null then null\n      when mingcs   <= 13 then 1\n      else 0 end\n    as gcs_score\n  , case\n      when resprate_max is null then null\n      when resprate_max   >= 22 then 1\n      else 0 end\n    as resprate_score\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, coalesce(sysbp_score,0)\n + coalesce(gcs_score,0)\n + coalesce(resprate_score,0)\n as qsofa\n, sysbp_score\n, gcs_score\n, resprate_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["vitals_first_day"], ["gcs_first_day"]], "relation_name": "\"postgres\".\"public\".\"qsofa\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.qsofa", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:36.345139Z", "name": "compile", "started_at": "2022-07-18T00:11:36.340932Z"}, {"completed_at": "2022-07-18T00:11:36.567478Z", "name": "execute", "started_at": "2022-07-18T00:11:36.347086Z"}]}, "unique_id": "model.mimic.qsofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.qsofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.569243Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": "2022-07-18T00:11:36.569503", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.sirs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.569525Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.sirs", "index": 92, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": "2022-07-18T00:11:36.569503", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "92 of 107 START table model public.sirs ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.570503Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.571446Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": "2022-07-18T00:11:36.569503", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.sirs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.571719Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.sirs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.572050Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.575565Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.576466Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.sirs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.576771Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.sirs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.587077Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.587571Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.587867Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.588083Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.593100Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.593362Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\n\n\n  create  table \"postgres\".\"public\".\"sirs__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Systemic inflammatory response syndrome (SIRS) criteria\n-- This query extracts the Systemic inflammatory response syndrome (SIRS) criteria\n-- The criteria quantify the level of inflammatory response of the body\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SIRS:\n--    American College of Chest Physicians/Society of Critical Care Medicine Consensus Conference:\n--    definitions for sepsis and organ failure and guidelines for the use of innovative therapies in sepsis\"\n--    Crit. Care Med. 20 (6): 864\u201374. 1992.\n--    doi:10.1097/00003246-199206000-00025. PMID 1597042.\n\n-- Variables used in SIRS:\n--  Body temperature (min and max)\n--  Heart rate (max)\n--  Respiratory rate (max)\n--  PaCO2 (min)\n--  White blood cell count (min and max)\n--  the presence of greater than 10% immature neutrophils (band forms)\n\n-- The following views required to run this query:\n--  1) vitals_first_day - generated by vitals-first-day.sql\n--  2) labs_first_day - generated by labs-first-day.sql\n--  3) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith bg as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id\n  , min(pco2) as paco2_min\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  where specimen_pred = 'ART'\n  group by bg.icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.tempc_min\n  , v.tempc_max\n  , v.heartrate_max\n  , v.resprate_max\n  , bg.paco2_min\n  , l.wbc_min\n  , l.wbc_max\n  , l.bands_max\nFROM icustays ie\nleft join bg\n on ie.icustay_id = bg.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n\n  , case\n      when tempc_min < 36.0 then 1\n      when tempc_max > 38.0 then 1\n      when tempc_min is null then null\n      else 0\n    end as temp_score\n\n\n  , case\n      when heartrate_max > 90.0  then 1\n      when heartrate_max is null then null\n      else 0\n    end as heartrate_score\n\n  , case\n      when resprate_max > 20.0  then 1\n      when paco2_min < 32.0  then 1\n      when coalesce(resprate_max, paco2_min) is null then null\n      else 0\n    end as resp_score\n\n  , case\n      when wbc_min <  4.0  then 1\n      when wbc_max > 12.0  then 1\n      when bands_max > 10 then 1-- > 10% immature neurophils (band forms)\n      when coalesce(wbc_min, bands_max) is null then null\n      else 0\n    end as wbc_score\n\n  from scorecomp\n)\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(temp_score,0)\n  + coalesce(heartrate_score,0)\n  + coalesce(resp_score,0)\n  + coalesce(wbc_score,0)\n    as sirs\n  , temp_score, heartrate_score, resp_score, wbc_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\n\n\n  create  table \"postgres\".\"public\".\"sirs__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Systemic inflammatory response syndrome (SIRS) criteria\n-- This query extracts the Systemic inflammatory response syndrome (SIRS) criteria\n-- The criteria quantify the level of inflammatory response of the body\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SIRS:\n--    American College of Chest Physicians/Society of Critical Care Medicine Consensus Conference:\n--    definitions for sepsis and organ failure and guidelines for the use of innovative therapies in sepsis\"\n--    Crit. Care Med. 20 (6): 864\u201374. 1992.\n--    doi:10.1097/00003246-199206000-00025. PMID 1597042.\n\n-- Variables used in SIRS:\n--  Body temperature (min and max)\n--  Heart rate (max)\n--  Respiratory rate (max)\n--  PaCO2 (min)\n--  White blood cell count (min and max)\n--  the presence of greater than 10% immature neutrophils (band forms)\n\n-- The following views required to run this query:\n--  1) vitals_first_day - generated by vitals-first-day.sql\n--  2) labs_first_day - generated by labs-first-day.sql\n--  3) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith bg as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id\n  , min(pco2) as paco2_min\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  where specimen_pred = 'ART'\n  group by bg.icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.tempc_min\n  , v.tempc_max\n  , v.heartrate_max\n  , v.resprate_max\n  , bg.paco2_min\n  , l.wbc_min\n  , l.wbc_max\n  , l.bands_max\nFROM icustays ie\nleft join bg\n on ie.icustay_id = bg.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n\n  , case\n      when tempc_min < 36.0 then 1\n      when tempc_max > 38.0 then 1\n      when tempc_min is null then null\n      else 0\n    end as temp_score\n\n\n  , case\n      when heartrate_max > 90.0  then 1\n      when heartrate_max is null then null\n      else 0\n    end as heartrate_score\n\n  , case\n      when resprate_max > 20.0  then 1\n      when paco2_min < 32.0  then 1\n      when coalesce(resprate_max, paco2_min) is null then null\n      else 0\n    end as resp_score\n\n  , case\n      when wbc_min <  4.0  then 1\n      when wbc_max > 12.0  then 1\n      when bands_max > 10 then 1-- > 10% immature neurophils (band forms)\n      when coalesce(wbc_min, bands_max) is null then null\n      else 0\n    end as wbc_score\n\n  from scorecomp\n)\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(temp_score,0)\n  + coalesce(heartrate_score,0)\n  + coalesce(resp_score,0)\n  + coalesce(wbc_score,0)\n    as sirs\n  , temp_score, heartrate_score, resp_score, wbc_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.593722Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.15, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.15 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.739985Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.747302Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\nalter table \"postgres\".\"public\".\"sirs\" rename to \"sirs__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\nalter table \"postgres\".\"public\".\"sirs\" rename to \"sirs__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.747726Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.748874Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.753137Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\nalter table \"postgres\".\"public\".\"sirs__dbt_tmp\" rename to \"sirs\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\nalter table \"postgres\".\"public\".\"sirs__dbt_tmp\" rename to \"sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.753383Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.754393Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.758365Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.758626Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.758857Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.767260Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sirs", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sirs\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.769047Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sirs", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\ndrop table if exists \"postgres\".\"public\".\"sirs__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sirs\"} */\ndrop table if exists \"postgres\".\"public\".\"sirs__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.769275Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.771389Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.775522Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sirs: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.775782Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.sirs", "execution_time": 0, "index": 92, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": "2022-07-18T00:11:36.569503", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "92 of 107 OK created table model public.sirs ................................... [\u001b[32mSELECT 61532\u001b[0m in 0.21s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.776687Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:36.777271", "node_name": "sirs", "node_path": "severityscores/sirs.sql", "node_started_at": "2022-07-18T00:11:36.569503", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.sirs"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.20547032356262207, "failures": null, "message": "SELECT 61532", "node": {"alias": "sirs", "build_path": "target/run/mimic/models/severityscores/sirs.sql", "checksum": {"checksum": "d173d771fe30cd945b016b59c1b20d88c6f7051f5f0747feecd0b22bde136b2a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/sirs.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Systemic inflammatory response syndrome (SIRS) criteria\n-- This query extracts the Systemic inflammatory response syndrome (SIRS) criteria\n-- The criteria quantify the level of inflammatory response of the body\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SIRS:\n--    American College of Chest Physicians/Society of Critical Care Medicine Consensus Conference:\n--    definitions for sepsis and organ failure and guidelines for the use of innovative therapies in sepsis\"\n--    Crit. Care Med. 20 (6): 864\u201374. 1992.\n--    doi:10.1097/00003246-199206000-00025. PMID 1597042.\n\n-- Variables used in SIRS:\n--  Body temperature (min and max)\n--  Heart rate (max)\n--  Respiratory rate (max)\n--  PaCO2 (min)\n--  White blood cell count (min and max)\n--  the presence of greater than 10% immature neutrophils (band forms)\n\n-- The following views required to run this query:\n--  1) vitals_first_day - generated by vitals-first-day.sql\n--  2) labs_first_day - generated by labs-first-day.sql\n--  3) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith bg as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id\n  , min(pco2) as paco2_min\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  where specimen_pred = 'ART'\n  group by bg.icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.tempc_min\n  , v.tempc_max\n  , v.heartrate_max\n  , v.resprate_max\n  , bg.paco2_min\n  , l.wbc_min\n  , l.wbc_max\n  , l.bands_max\nFROM icustays ie\nleft join bg\n on ie.icustay_id = bg.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n\n  , case\n      when tempc_min < 36.0 then 1\n      when tempc_max > 38.0 then 1\n      when tempc_min is null then null\n      else 0\n    end as temp_score\n\n\n  , case\n      when heartrate_max > 90.0  then 1\n      when heartrate_max is null then null\n      else 0\n    end as heartrate_score\n\n  , case\n      when resprate_max > 20.0  then 1\n      when paco2_min < 32.0  then 1\n      when coalesce(resprate_max, paco2_min) is null then null\n      else 0\n    end as resp_score\n\n  , case\n      when wbc_min <  4.0  then 1\n      when wbc_max > 12.0  then 1\n      when bands_max > 10 then 1-- > 10% immature neurophils (band forms)\n      when coalesce(wbc_min, bands_max) is null then null\n      else 0\n    end as wbc_score\n\n  from scorecomp\n)\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(temp_score,0)\n  + coalesce(heartrate_score,0)\n  + coalesce(resp_score,0)\n  + coalesce(wbc_score,0)\n    as sirs\n  , temp_score, heartrate_score, resp_score, wbc_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7253578, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day_arterial", "model.mimic.vitals_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "sirs"], "meta": {}, "name": "sirs", "original_file_path": "models/severityscores/sirs.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/sirs.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Systemic inflammatory response syndrome (SIRS) criteria\n-- This query extracts the Systemic inflammatory response syndrome (SIRS) criteria\n-- The criteria quantify the level of inflammatory response of the body\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SIRS:\n--    American College of Chest Physicians/Society of Critical Care Medicine Consensus Conference:\n--    definitions for sepsis and organ failure and guidelines for the use of innovative therapies in sepsis\"\n--    Crit. Care Med. 20 (6): 864\u201374. 1992.\n--    doi:10.1097/00003246-199206000-00025. PMID 1597042.\n\n-- Variables used in SIRS:\n--  Body temperature (min and max)\n--  Heart rate (max)\n--  Respiratory rate (max)\n--  PaCO2 (min)\n--  White blood cell count (min and max)\n--  the presence of greater than 10% immature neutrophils (band forms)\n\n-- The following views required to run this query:\n--  1) vitals_first_day - generated by vitals-first-day.sql\n--  2) labs_first_day - generated by labs-first-day.sql\n--  3) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith bg as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id\n  , min(pco2) as paco2_min\n  from {{ref('blood_gas_first_day_arterial')}} bg\n  where specimen_pred = 'ART'\n  group by bg.icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.tempc_min\n  , v.tempc_max\n  , v.heartrate_max\n  , v.resprate_max\n  , bg.paco2_min\n  , l.wbc_min\n  , l.wbc_max\n  , l.bands_max\nFROM icustays ie\nleft join bg\n on ie.icustay_id = bg.icustay_id\nleft join {{ref('vitals_first_day')}} v\n  on ie.icustay_id = v.icustay_id\nleft join {{ref('labs_first_day')}} l\n  on ie.icustay_id = l.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n\n  , case\n      when tempc_min < 36.0 then 1\n      when tempc_max > 38.0 then 1\n      when tempc_min is null then null\n      else 0\n    end as temp_score\n\n\n  , case\n      when heartrate_max > 90.0  then 1\n      when heartrate_max is null then null\n      else 0\n    end as heartrate_score\n\n  , case\n      when resprate_max > 20.0  then 1\n      when paco2_min < 32.0  then 1\n      when coalesce(resprate_max, paco2_min) is null then null\n      else 0\n    end as resp_score\n\n  , case\n      when wbc_min <  4.0  then 1\n      when wbc_max > 12.0  then 1\n      when bands_max > 10 then 1-- > 10% immature neurophils (band forms)\n      when coalesce(wbc_min, bands_max) is null then null\n      else 0\n    end as wbc_score\n\n  from scorecomp\n)\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(temp_score,0)\n  + coalesce(heartrate_score,0)\n  + coalesce(resp_score,0)\n  + coalesce(wbc_score,0)\n    as sirs\n  , temp_score, heartrate_score, resp_score, wbc_score\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["blood_gas_first_day_arterial"], ["vitals_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"sirs\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.sirs", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:36.576411Z", "name": "compile", "started_at": "2022-07-18T00:11:36.572027Z"}, {"completed_at": "2022-07-18T00:11:36.775489Z", "name": "execute", "started_at": "2022-07-18T00:11:36.577022Z"}]}, "unique_id": "model.mimic.sirs"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.sirs", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.777445Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": "2022-07-18T00:11:36.778330", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.epinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.778425Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.epinephrine_dose", "index": 93, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": "2022-07-18T00:11:36.778330", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "93 of 107 START table model public.epinephrine_dose ............................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.779682Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.781079Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": "2022-07-18T00:11:36.778330", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.epinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.781330Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.epinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.781806Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.784904Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.785460Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.epinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.785915Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.epinephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.795737Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.797095Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.797760Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.798119Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.805198Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.805535Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"epinephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of epinephrine administration\n\n-- Requires the weightfirstday table\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30044 and wd.weight is null then rate / 80.0 -- super rare to be missing weight... affects 2 patients for 14 rows\n            when itemid = 30044 then rate / wd.weight -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  and cv.icustay_id is not null\n  group by cv.icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"epinephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of epinephrine administration\n\n-- Requires the weightfirstday table\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30044 and wd.weight is null then rate / 80.0 -- super rare to be missing weight... affects 2 patients for 14 rows\n            when itemid = 30044 then rate / wd.weight -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  and cv.icustay_id is not null\n  group by cv.icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:36.805988Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.68, "status": "SELECT 10562"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 10562 in 0.68 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.484452Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.489062Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"epinephrine_dose\" rename to \"epinephrine_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"epinephrine_dose\" rename to \"epinephrine_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.489292Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.490133Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.496230Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"epinephrine_dose__dbt_tmp\" rename to \"epinephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"epinephrine_dose__dbt_tmp\" rename to \"epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.496979Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.498190Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.501345Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.501605Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.501969Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.505705Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.epinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.epinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.508148Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.epinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"epinephrine_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.epinephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"epinephrine_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.508401Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.510556Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.516690Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.epinephrine_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.516949Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.epinephrine_dose", "execution_time": 0, "index": 93, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": "2022-07-18T00:11:36.778330", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "status": "SELECT 10562", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "93 of 107 OK created table model public.epinephrine_dose ....................... [\u001b[32mSELECT 10562\u001b[0m in 0.74s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.517502Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:37.518202", "node_name": "epinephrine_dose", "node_path": "durations/epinephrine_dose.sql", "node_started_at": "2022-07-18T00:11:36.778330", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.epinephrine_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 10562", "code": "SELECT", "rows_affected": 10562}, "agate_table": null, "execution_time": 0.7367081642150879, "failures": null, "message": "SELECT 10562", "node": {"alias": "epinephrine_dose", "build_path": "target/run/mimic/models/durations/epinephrine_dose.sql", "checksum": {"checksum": "21b374f3a5637359c768b1f08c4551432dd4333eab4ca77ace3aeea2f61e9b4c", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/epinephrine_dose.sql", "compiled_sql": "-- This query extracts dose+durations of epinephrine administration\n\n-- Requires the weightfirstday table\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30044 and wd.weight is null then rate / 80.0 -- super rare to be missing weight... affects 2 patients for 14 rows\n            when itemid = 30044 then rate / wd.weight -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  and cv.icustay_id is not null\n  group by cv.icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.4819837, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.weight_durations"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "epinephrine_dose"], "meta": {}, "name": "epinephrine_dose", "original_file_path": "models/durations/epinephrine_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/epinephrine_dose.sql", "raw_sql": "-- This query extracts dose+durations of epinephrine administration\n\n-- Requires the weightfirstday table\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30044,30119,30309) then 1 else 0 end) as vaso -- epinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30044,30119,30309) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid in (30044,30119,30309) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30044 and wd.weight is null then rate / 80.0 -- super rare to be missing weight... affects 2 patients for 14 rows\n            when itemid = 30044 then rate / wd.weight -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as vaso_rate\n    , max(case when itemid in (30044,30119,30309) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join {{ref('weight_durations')}} wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in\n  (\n        30044,30119,30309 -- epinephrine\n  )\n  and cv.icustay_id is not null\n  group by cv.icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221289 -- epinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [["weight_durations"]], "relation_name": "\"postgres\".\"public\".\"epinephrine_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.epinephrine_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:36.785403Z", "name": "compile", "started_at": "2022-07-18T00:11:36.781725Z"}, {"completed_at": "2022-07-18T00:11:37.516660Z", "name": "execute", "started_at": "2022-07-18T00:11:36.786360Z"}]}, "unique_id": "model.mimic.epinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.epinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.518381Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": "2022-07-18T00:11:37.518817", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.heightweight", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.518923Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.heightweight", "index": 94, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": "2022-07-18T00:11:37.518817", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "94 of 107 START table model public.heightweight ................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.519711Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.520481Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": "2022-07-18T00:11:37.518817", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.heightweight", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.520792Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.heightweight", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.521125Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.523592Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.524142Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.heightweight", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.524423Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.heightweight\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.534973Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.536037Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.536382Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.536620Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.542227Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.542565Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\n\n\n  create  table \"postgres\".\"public\".\"heightweight__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Extract height and weight for ICUSTAY_IDs\n-- Description: This query gets the first, minimum, and maximum weight and height\n--        for a single ICUSTAY_ID. It extracts data from the CHARTEVENTS table.\n-- MIMIC version: MIMIC-III v1.4\n-- ------------------------------------------------------------------\n\n-- prep height\nWITH ht_stg AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters, and fix data as needed\n    CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n      THEN\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) < 80\n          THEN c.valuenum * 2.54\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) > 120\n         AND (c.valuenum * 2.54) < 230\n          THEN c.valuenum * 2.54\n        ELSE NULL END\n      ELSE\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum < 80\n          THEN c.valuenum\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum > 120\n         AND c.valuenum < 230\n          THEN c.valuenum\n        ELSE NULL END\n    END AS height\n  FROM chartevents c\n  INNER JOIN patients pt\n    ON c.subject_id = pt.subject_id\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486,  -- Height inches\n    3485, 4188              -- Height cm\n    -- Metavision\n    , 226707 -- Height (measured in inches)\n    -- note we intentionally ignore the below ITEMID in metavision\n    -- these are duplicate data in a different unit\n    -- , 226730 -- Height (cm)\n  )\n)\nSELECT \n  ie.icustay_id,\n  ROUND(CAST(wt.weight_first AS NUMERIC), 2) AS weight_first,\n  ROUND(CAST(wt.weight_min AS NUMERIC), 2) AS weight_min,\n  ROUND(CAST(wt.weight_max AS NUMERIC), 2) AS weight_max,\n  ROUND(CAST(ht.height_first AS NUMERIC), 2) AS height_first,\n  ROUND(CAST(ht.height_min AS NUMERIC), 2) AS height_min,\n  ROUND(CAST(ht.height_max AS NUMERIC), 2) AS height_max\nFROM icustays ie\n-- get weight from weight_durations table\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN weight ELSE NULL END) as weight_first,\n    MIN(weight) AS weight_min,\n    MAX(weight) AS weight_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      weight,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY starttime) as rn\n    FROM \"postgres\".\"public\".\"weight_durations\"\n  ) wt_stg\n  GROUP BY icustay_id\n) wt\n  ON ie.icustay_id = wt.icustay_id\n-- get first/min/max height from above, after filtering bad data\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN height ELSE NULL END) as height_first,\n    MIN(height) AS height_min,\n    MAX(height) AS height_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      height,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY charttime) as rn\n    FROM ht_stg\n  ) ht_stg2\n  GROUP BY icustay_id\n) ht\n  ON ie.icustay_id = ht.icustay_id\nORDER BY icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\n\n\n  create  table \"postgres\".\"public\".\"heightweight__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Extract height and weight for ICUSTAY_IDs\n-- Description: This query gets the first, minimum, and maximum weight and height\n--        for a single ICUSTAY_ID. It extracts data from the CHARTEVENTS table.\n-- MIMIC version: MIMIC-III v1.4\n-- ------------------------------------------------------------------\n\n-- prep height\nWITH ht_stg AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters, and fix data as needed\n    CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n      THEN\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) < 80\n          THEN c.valuenum * 2.54\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) > 120\n         AND (c.valuenum * 2.54) < 230\n          THEN c.valuenum * 2.54\n        ELSE NULL END\n      ELSE\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum < 80\n          THEN c.valuenum\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum > 120\n         AND c.valuenum < 230\n          THEN c.valuenum\n        ELSE NULL END\n    END AS height\n  FROM chartevents c\n  INNER JOIN patients pt\n    ON c.subject_id = pt.subject_id\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486,  -- Height inches\n    3485, 4188              -- Height cm\n    -- Metavision\n    , 226707 -- Height (measured in inches)\n    -- note we intentionally ignore the below ITEMID in metavision\n    -- these are duplicate data in a different unit\n    -- , 226730 -- Height (cm)\n  )\n)\nSELECT \n  ie.icustay_id,\n  ROUND(CAST(wt.weight_first AS NUMERIC), 2) AS weight_first,\n  ROUND(CAST(wt.weight_min AS NUMERIC), 2) AS weight_min,\n  ROUND(CAST(wt.weight_max AS NUMERIC), 2) AS weight_max,\n  ROUND(CAST(ht.height_first AS NUMERIC), 2) AS height_first,\n  ROUND(CAST(ht.height_min AS NUMERIC), 2) AS height_min,\n  ROUND(CAST(ht.height_max AS NUMERIC), 2) AS height_max\nFROM icustays ie\n-- get weight from weight_durations table\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN weight ELSE NULL END) as weight_first,\n    MIN(weight) AS weight_min,\n    MAX(weight) AS weight_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      weight,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY starttime) as rn\n    FROM \"postgres\".\"public\".\"weight_durations\"\n  ) wt_stg\n  GROUP BY icustay_id\n) wt\n  ON ie.icustay_id = wt.icustay_id\n-- get first/min/max height from above, after filtering bad data\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN height ELSE NULL END) as height_first,\n    MIN(height) AS height_min,\n    MAX(height) AS height_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      height,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY charttime) as rn\n    FROM ht_stg\n  ) ht_stg2\n  GROUP BY icustay_id\n) ht\n  ON ie.icustay_id = ht.icustay_id\nORDER BY icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.542851Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.08, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.08 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.623986Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.638030Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\nalter table \"postgres\".\"public\".\"heightweight\" rename to \"heightweight__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\nalter table \"postgres\".\"public\".\"heightweight\" rename to \"heightweight__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.638336Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.639096Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.707969Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\nalter table \"postgres\".\"public\".\"heightweight__dbt_tmp\" rename to \"heightweight\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\nalter table \"postgres\".\"public\".\"heightweight__dbt_tmp\" rename to \"heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.708341Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.709492Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.717185Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.717448Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.717784Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.719167Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.heightweight", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.heightweight\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.722115Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.heightweight", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\ndrop table if exists \"postgres\".\"public\".\"heightweight__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.heightweight\"} */\ndrop table if exists \"postgres\".\"public\".\"heightweight__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.722443Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.725033Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.732432Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.heightweight: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.732859Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.heightweight", "execution_time": 0, "index": 94, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": "2022-07-18T00:11:37.518817", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "94 of 107 OK created table model public.heightweight ........................... [\u001b[32mSELECT 61532\u001b[0m in 0.21s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.733940Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:11:37.734501", "node_name": "heightweight", "node_path": "demographics/heightweight.sql", "node_started_at": "2022-07-18T00:11:37.518817", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.heightweight"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.21335864067077637, "failures": null, "message": "SELECT 61532", "node": {"alias": "heightweight", "build_path": "target/run/mimic/models/demographics/heightweight.sql", "checksum": {"checksum": "0bd1299700db8b5260e80b39b1bfbd4e3758d85b89bd466419e88277cda3e6c4", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/demographics/heightweight.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Extract height and weight for ICUSTAY_IDs\n-- Description: This query gets the first, minimum, and maximum weight and height\n--        for a single ICUSTAY_ID. It extracts data from the CHARTEVENTS table.\n-- MIMIC version: MIMIC-III v1.4\n-- ------------------------------------------------------------------\n\n-- prep height\nWITH ht_stg AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters, and fix data as needed\n    CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n      THEN\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) < 80\n          THEN c.valuenum * 2.54\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) > 120\n         AND (c.valuenum * 2.54) < 230\n          THEN c.valuenum * 2.54\n        ELSE NULL END\n      ELSE\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum < 80\n          THEN c.valuenum\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum > 120\n         AND c.valuenum < 230\n          THEN c.valuenum\n        ELSE NULL END\n    END AS height\n  FROM chartevents c\n  INNER JOIN patients pt\n    ON c.subject_id = pt.subject_id\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486,  -- Height inches\n    3485, 4188              -- Height cm\n    -- Metavision\n    , 226707 -- Height (measured in inches)\n    -- note we intentionally ignore the below ITEMID in metavision\n    -- these are duplicate data in a different unit\n    -- , 226730 -- Height (cm)\n  )\n)\nSELECT \n  ie.icustay_id,\n  ROUND(CAST(wt.weight_first AS NUMERIC), 2) AS weight_first,\n  ROUND(CAST(wt.weight_min AS NUMERIC), 2) AS weight_min,\n  ROUND(CAST(wt.weight_max AS NUMERIC), 2) AS weight_max,\n  ROUND(CAST(ht.height_first AS NUMERIC), 2) AS height_first,\n  ROUND(CAST(ht.height_min AS NUMERIC), 2) AS height_min,\n  ROUND(CAST(ht.height_max AS NUMERIC), 2) AS height_max\nFROM icustays ie\n-- get weight from weight_durations table\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN weight ELSE NULL END) as weight_first,\n    MIN(weight) AS weight_min,\n    MAX(weight) AS weight_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      weight,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY starttime) as rn\n    FROM \"postgres\".\"public\".\"weight_durations\"\n  ) wt_stg\n  GROUP BY icustay_id\n) wt\n  ON ie.icustay_id = wt.icustay_id\n-- get first/min/max height from above, after filtering bad data\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN height ELSE NULL END) as height_first,\n    MIN(height) AS height_min,\n    MAX(height) AS height_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      height,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY charttime) as rn\n    FROM ht_stg\n  ) ht_stg2\n  GROUP BY icustay_id\n) ht\n  ON ie.icustay_id = ht.icustay_id\nORDER BY icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.636081, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.weight_durations"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "demographics", "heightweight"], "meta": {}, "name": "heightweight", "original_file_path": "models/demographics/heightweight.sql", "package_name": "mimic", "patch_path": null, "path": "demographics/heightweight.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Extract height and weight for ICUSTAY_IDs\n-- Description: This query gets the first, minimum, and maximum weight and height\n--        for a single ICUSTAY_ID. It extracts data from the CHARTEVENTS table.\n-- MIMIC version: MIMIC-III v1.4\n-- ------------------------------------------------------------------\n\n-- prep height\nWITH ht_stg AS\n(\n  SELECT \n    c.subject_id, c.icustay_id, c.charttime,\n    -- Ensure that all heights are in centimeters, and fix data as needed\n    CASE\n      WHEN c.itemid IN (920, 1394, 4187, 3486, 226707)\n      THEN\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) < 80\n          THEN c.valuenum * 2.54\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND (c.valuenum * 2.54) > 120\n         AND (c.valuenum * 2.54) < 230\n          THEN c.valuenum * 2.54\n        ELSE NULL END\n      ELSE\n        CASE\n        -- rule for neonates\n        WHEN c.charttime <= DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum < 80\n          THEN c.valuenum\n        -- rule for adults\n        WHEN c.charttime >  DATETIME_ADD(pt.dob, INTERVAL '1 YEAR')\n         AND c.valuenum > 120\n         AND c.valuenum < 230\n          THEN c.valuenum\n        ELSE NULL END\n    END AS height\n  FROM chartevents c\n  INNER JOIN patients pt\n    ON c.subject_id = pt.subject_id\n  WHERE c.valuenum IS NOT NULL\n  AND c.valuenum != 0\n  -- exclude rows marked as error\n  AND COALESCE(c.error, 0) = 0\n  AND c.itemid IN\n  (\n    -- CareVue\n    920, 1394, 4187, 3486,  -- Height inches\n    3485, 4188              -- Height cm\n    -- Metavision\n    , 226707 -- Height (measured in inches)\n    -- note we intentionally ignore the below ITEMID in metavision\n    -- these are duplicate data in a different unit\n    -- , 226730 -- Height (cm)\n  )\n)\nSELECT \n  ie.icustay_id,\n  ROUND(CAST(wt.weight_first AS NUMERIC), 2) AS weight_first,\n  ROUND(CAST(wt.weight_min AS NUMERIC), 2) AS weight_min,\n  ROUND(CAST(wt.weight_max AS NUMERIC), 2) AS weight_max,\n  ROUND(CAST(ht.height_first AS NUMERIC), 2) AS height_first,\n  ROUND(CAST(ht.height_min AS NUMERIC), 2) AS height_min,\n  ROUND(CAST(ht.height_max AS NUMERIC), 2) AS height_max\nFROM icustays ie\n-- get weight from weight_durations table\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN weight ELSE NULL END) as weight_first,\n    MIN(weight) AS weight_min,\n    MAX(weight) AS weight_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      weight,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY starttime) as rn\n    FROM {{ ref('weight_durations') }}\n  ) wt_stg\n  GROUP BY icustay_id\n) wt\n  ON ie.icustay_id = wt.icustay_id\n-- get first/min/max height from above, after filtering bad data\nLEFT JOIN\n(\n  SELECT icustay_id,\n    MIN(CASE WHEN rn = 1 THEN height ELSE NULL END) as height_first,\n    MIN(height) AS height_min,\n    MAX(height) AS height_max\n  FROM\n  (\n    SELECT\n      icustay_id,\n      height,\n      ROW_NUMBER() OVER (PARTITION BY icustay_id ORDER BY charttime) as rn\n    FROM ht_stg\n  ) ht_stg2\n  GROUP BY icustay_id\n) ht\n  ON ie.icustay_id = ht.icustay_id\nORDER BY icustay_id", "refs": [["weight_durations"]], "relation_name": "\"postgres\".\"public\".\"heightweight\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.heightweight", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:37.524084Z", "name": "compile", "started_at": "2022-07-18T00:11:37.521086Z"}, {"completed_at": "2022-07-18T00:11:37.732395Z", "name": "execute", "started_at": "2022-07-18T00:11:37.524657Z"}]}, "unique_id": "model.mimic.heightweight"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.heightweight", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.734667Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": "2022-07-18T00:11:37.735094", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.kdigo_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.735155Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.kdigo_uo", "index": 95, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": "2022-07-18T00:11:37.735094", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "95 of 107 START table model public.kdigo_uo .................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.735806Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.736820Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": "2022-07-18T00:11:37.735094", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.kdigo_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.737000Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.kdigo_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.737262Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.740446Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.740878Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.kdigo_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.741047Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.kdigo_uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.750986Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.751865Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.752220Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.752476Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.759271Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.759739Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_uo__dbt_tmp\"\n  as (\n    with ur_stg as\n(\n  select io.icustay_id, io.charttime\n  -- we have joined each row to all rows preceding within 24 hours\n  -- we can now sum these rows to get total UO over the last 24 hours\n  -- we can use case statements to restrict it to only the last 6/12 hours\n  -- therefore we have three sums:\n  -- 1) over a 6 hour period\n  -- 2) over a 12 hour period\n  -- 3) over a 24 hour period\n\n  -- note that we assume data charted at charttime corresponds to 1 hour of UO\n  -- therefore we use '5' and '11' to restrict the period, rather than 6/12\n  -- this assumption may overestimate UO rate when documentation is done less than hourly\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 5\n      then iosum.VALUE\n    else null end) as urineoutput_6hr\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 11\n      then iosum.VALUE\n    else null end) as urineoutput_12hr\n  -- 24 hours\n  , sum(iosum.VALUE) as urineoutput_24hr\n\n  -- retain the earliest time used for each summation\n  -- this is later used to tabulate rates\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '5 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_6hr\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '11 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_12hr\n  , MIN(iosum.charttime) AS starttime_24hr\n  from \"postgres\".\"public\".\"urine_output\" io\n  -- this join gives you all UO measurements over a 24 hour period\n  left join \"postgres\".\"public\".\"urine_output\" iosum\n    on  io.icustay_id = iosum.icustay_id\n    and io.charttime >= iosum.charttime\n    and io.charttime <= (DATETIME_ADD(iosum.charttime, INTERVAL '23 HOUR'))\n  group by io.icustay_id, io.charttime\n)\n-- calculate hours used to sum UO over\n, ur_stg2 AS\n(\n  select\n    icustay_id\n  , charttime\n  , urineoutput_6hr\n  , urineoutput_12hr\n  , urineoutput_24hr\n  -- calculate time over which we summed UO\n  -- note: adding 1 hour as we assume data charted corresponds to previous hour\n  -- i.e. if documentation is:\n  --  10:00, 100 mL\n  --  11:00, 50 mL\n  -- then this is two hours of documentation, even though (11:00 - 10:00) is 1 hour\n  , ROUND(DATETIME_DIFF(charttime, starttime_6hr, 'HOUR'), 4) + 1 AS uo_tm_6hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_12hr, 'HOUR'), 4) + 1 AS uo_tm_12hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_24hr, 'HOUR'), 4) + 1 AS uo_tm_24hr\n  from ur_stg\n)\nselect\n  ur.icustay_id\n, ur.charttime\n, wd.weight\n, ur.urineoutput_6hr\n, ur.urineoutput_12hr\n, ur.urineoutput_24hr\n, ROUND(CAST((ur.urineoutput_6hr/wd.weight/uo_tm_6hr) AS NUMERIC), 4) AS uo_rt_6hr\n, ROUND(CAST((ur.urineoutput_12hr/wd.weight/uo_tm_12hr) AS NUMERIC), 4) AS uo_rt_12hr\n, ROUND(CAST((ur.urineoutput_24hr/wd.weight/uo_tm_24hr) AS NUMERIC), 4) AS uo_rt_24hr\n-- time of earliest UO measurement that was used to calculate the rate\n, uo_tm_6hr\n, uo_tm_12hr\n, uo_tm_24hr\nfrom ur_stg2 ur\nleft join \"postgres\".\"public\".\"weight_durations\" wd\n  on  ur.icustay_id = wd.icustay_id\n  and ur.charttime >= wd.starttime\n  and ur.charttime <  wd.endtime\norder by icustay_id, charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_uo__dbt_tmp\"\n  as (\n    with ur_stg as\n(\n  select io.icustay_id, io.charttime\n  -- we have joined each row to all rows preceding within 24 hours\n  -- we can now sum these rows to get total UO over the last 24 hours\n  -- we can use case statements to restrict it to only the last 6/12 hours\n  -- therefore we have three sums:\n  -- 1) over a 6 hour period\n  -- 2) over a 12 hour period\n  -- 3) over a 24 hour period\n\n  -- note that we assume data charted at charttime corresponds to 1 hour of UO\n  -- therefore we use '5' and '11' to restrict the period, rather than 6/12\n  -- this assumption may overestimate UO rate when documentation is done less than hourly\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 5\n      then iosum.VALUE\n    else null end) as urineoutput_6hr\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 11\n      then iosum.VALUE\n    else null end) as urineoutput_12hr\n  -- 24 hours\n  , sum(iosum.VALUE) as urineoutput_24hr\n\n  -- retain the earliest time used for each summation\n  -- this is later used to tabulate rates\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '5 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_6hr\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '11 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_12hr\n  , MIN(iosum.charttime) AS starttime_24hr\n  from \"postgres\".\"public\".\"urine_output\" io\n  -- this join gives you all UO measurements over a 24 hour period\n  left join \"postgres\".\"public\".\"urine_output\" iosum\n    on  io.icustay_id = iosum.icustay_id\n    and io.charttime >= iosum.charttime\n    and io.charttime <= (DATETIME_ADD(iosum.charttime, INTERVAL '23 HOUR'))\n  group by io.icustay_id, io.charttime\n)\n-- calculate hours used to sum UO over\n, ur_stg2 AS\n(\n  select\n    icustay_id\n  , charttime\n  , urineoutput_6hr\n  , urineoutput_12hr\n  , urineoutput_24hr\n  -- calculate time over which we summed UO\n  -- note: adding 1 hour as we assume data charted corresponds to previous hour\n  -- i.e. if documentation is:\n  --  10:00, 100 mL\n  --  11:00, 50 mL\n  -- then this is two hours of documentation, even though (11:00 - 10:00) is 1 hour\n  , ROUND(DATETIME_DIFF(charttime, starttime_6hr, 'HOUR'), 4) + 1 AS uo_tm_6hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_12hr, 'HOUR'), 4) + 1 AS uo_tm_12hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_24hr, 'HOUR'), 4) + 1 AS uo_tm_24hr\n  from ur_stg\n)\nselect\n  ur.icustay_id\n, ur.charttime\n, wd.weight\n, ur.urineoutput_6hr\n, ur.urineoutput_12hr\n, ur.urineoutput_24hr\n, ROUND(CAST((ur.urineoutput_6hr/wd.weight/uo_tm_6hr) AS NUMERIC), 4) AS uo_rt_6hr\n, ROUND(CAST((ur.urineoutput_12hr/wd.weight/uo_tm_12hr) AS NUMERIC), 4) AS uo_rt_12hr\n, ROUND(CAST((ur.urineoutput_24hr/wd.weight/uo_tm_24hr) AS NUMERIC), 4) AS uo_rt_24hr\n-- time of earliest UO measurement that was used to calculate the rate\n, uo_tm_6hr\n, uo_tm_12hr\n, uo_tm_24hr\nfrom ur_stg2 ur\nleft join \"postgres\".\"public\".\"weight_durations\" wd\n  on  ur.icustay_id = wd.icustay_id\n  and ur.charttime >= wd.starttime\n  and ur.charttime <  wd.endtime\norder by icustay_id, charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:11:37.760098Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 384.6, "status": "SELECT 3361794"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3361794 in 384.6 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.356403Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.364867Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\nalter table \"postgres\".\"public\".\"kdigo_uo\" rename to \"kdigo_uo__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\nalter table \"postgres\".\"public\".\"kdigo_uo\" rename to \"kdigo_uo__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.365311Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.368891Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.372814Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\nalter table \"postgres\".\"public\".\"kdigo_uo__dbt_tmp\" rename to \"kdigo_uo\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\nalter table \"postgres\".\"public\".\"kdigo_uo__dbt_tmp\" rename to \"kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.373037Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.374134Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.377770Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.378069Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.378270Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.392717Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_uo", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_uo\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.395704Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_uo", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_uo__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_uo\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_uo__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.396009Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.406030Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.409067Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_uo: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.409308Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.kdigo_uo", "execution_time": 384, "index": 95, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": "2022-07-18T00:11:37.735094", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "status": "SELECT 3361794", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "95 of 107 OK created table model public.kdigo_uo ............................... [\u001b[32mSELECT 3361794\u001b[0m in 384.67s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.410424Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:02.410948", "node_name": "kdigo_uo", "node_path": "organfailure/kdigo_uo.sql", "node_started_at": "2022-07-18T00:11:37.735094", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.kdigo_uo"}, "run_result": {"adapter_response": {"_message": "SELECT 3361794", "code": "SELECT", "rows_affected": 3361794}, "agate_table": null, "execution_time": 384.67369198799133, "failures": null, "message": "SELECT 3361794", "node": {"alias": "kdigo_uo", "build_path": "target/run/mimic/models/organfailure/kdigo_uo.sql", "checksum": {"checksum": "6f6df7cd5357403024c6f58c2e5e98e6c33f2f56bd9b065fdc62fe4f7ce014fb", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/kdigo_uo.sql", "compiled_sql": "with ur_stg as\n(\n  select io.icustay_id, io.charttime\n  -- we have joined each row to all rows preceding within 24 hours\n  -- we can now sum these rows to get total UO over the last 24 hours\n  -- we can use case statements to restrict it to only the last 6/12 hours\n  -- therefore we have three sums:\n  -- 1) over a 6 hour period\n  -- 2) over a 12 hour period\n  -- 3) over a 24 hour period\n\n  -- note that we assume data charted at charttime corresponds to 1 hour of UO\n  -- therefore we use '5' and '11' to restrict the period, rather than 6/12\n  -- this assumption may overestimate UO rate when documentation is done less than hourly\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 5\n      then iosum.VALUE\n    else null end) as urineoutput_6hr\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 11\n      then iosum.VALUE\n    else null end) as urineoutput_12hr\n  -- 24 hours\n  , sum(iosum.VALUE) as urineoutput_24hr\n\n  -- retain the earliest time used for each summation\n  -- this is later used to tabulate rates\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '5 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_6hr\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '11 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_12hr\n  , MIN(iosum.charttime) AS starttime_24hr\n  from \"postgres\".\"public\".\"urine_output\" io\n  -- this join gives you all UO measurements over a 24 hour period\n  left join \"postgres\".\"public\".\"urine_output\" iosum\n    on  io.icustay_id = iosum.icustay_id\n    and io.charttime >= iosum.charttime\n    and io.charttime <= (DATETIME_ADD(iosum.charttime, INTERVAL '23 HOUR'))\n  group by io.icustay_id, io.charttime\n)\n-- calculate hours used to sum UO over\n, ur_stg2 AS\n(\n  select\n    icustay_id\n  , charttime\n  , urineoutput_6hr\n  , urineoutput_12hr\n  , urineoutput_24hr\n  -- calculate time over which we summed UO\n  -- note: adding 1 hour as we assume data charted corresponds to previous hour\n  -- i.e. if documentation is:\n  --  10:00, 100 mL\n  --  11:00, 50 mL\n  -- then this is two hours of documentation, even though (11:00 - 10:00) is 1 hour\n  , ROUND(DATETIME_DIFF(charttime, starttime_6hr, 'HOUR'), 4) + 1 AS uo_tm_6hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_12hr, 'HOUR'), 4) + 1 AS uo_tm_12hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_24hr, 'HOUR'), 4) + 1 AS uo_tm_24hr\n  from ur_stg\n)\nselect\n  ur.icustay_id\n, ur.charttime\n, wd.weight\n, ur.urineoutput_6hr\n, ur.urineoutput_12hr\n, ur.urineoutput_24hr\n, ROUND(CAST((ur.urineoutput_6hr/wd.weight/uo_tm_6hr) AS NUMERIC), 4) AS uo_rt_6hr\n, ROUND(CAST((ur.urineoutput_12hr/wd.weight/uo_tm_12hr) AS NUMERIC), 4) AS uo_rt_12hr\n, ROUND(CAST((ur.urineoutput_24hr/wd.weight/uo_tm_24hr) AS NUMERIC), 4) AS uo_rt_24hr\n-- time of earliest UO measurement that was used to calculate the rate\n, uo_tm_6hr\n, uo_tm_12hr\n, uo_tm_24hr\nfrom ur_stg2 ur\nleft join \"postgres\".\"public\".\"weight_durations\" wd\n  on  ur.icustay_id = wd.icustay_id\n  and ur.charttime >= wd.starttime\n  and ur.charttime <  wd.endtime\norder by icustay_id, charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.55247, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.urine_output", "model.mimic.urine_output", "model.mimic.weight_durations"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "kdigo_uo"], "meta": {}, "name": "kdigo_uo", "original_file_path": "models/organfailure/kdigo_uo.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/kdigo_uo.sql", "raw_sql": "with ur_stg as\n(\n  select io.icustay_id, io.charttime\n  -- we have joined each row to all rows preceding within 24 hours\n  -- we can now sum these rows to get total UO over the last 24 hours\n  -- we can use case statements to restrict it to only the last 6/12 hours\n  -- therefore we have three sums:\n  -- 1) over a 6 hour period\n  -- 2) over a 12 hour period\n  -- 3) over a 24 hour period\n\n  -- note that we assume data charted at charttime corresponds to 1 hour of UO\n  -- therefore we use '5' and '11' to restrict the period, rather than 6/12\n  -- this assumption may overestimate UO rate when documentation is done less than hourly\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 5\n      then iosum.VALUE\n    else null end) as urineoutput_6hr\n  , sum(case when DATETIME_DIFF(io.charttime, iosum.charttime, 'HOUR') <= 11\n      then iosum.VALUE\n    else null end) as urineoutput_12hr\n  -- 24 hours\n  , sum(iosum.VALUE) as urineoutput_24hr\n\n  -- retain the earliest time used for each summation\n  -- this is later used to tabulate rates\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '5 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_6hr\n  , MIN(case when io.charttime <= DATETIME_ADD(iosum.charttime, INTERVAL '11 HOUR')\n      then iosum.charttime\n    else null end)\n    AS starttime_12hr\n  , MIN(iosum.charttime) AS starttime_24hr\n  from {{ ref('urine_output') }} io\n  -- this join gives you all UO measurements over a 24 hour period\n  left join {{ ref('urine_output') }} iosum\n    on  io.icustay_id = iosum.icustay_id\n    and io.charttime >= iosum.charttime\n    and io.charttime <= (DATETIME_ADD(iosum.charttime, INTERVAL '23 HOUR'))\n  group by io.icustay_id, io.charttime\n)\n-- calculate hours used to sum UO over\n, ur_stg2 AS\n(\n  select\n    icustay_id\n  , charttime\n  , urineoutput_6hr\n  , urineoutput_12hr\n  , urineoutput_24hr\n  -- calculate time over which we summed UO\n  -- note: adding 1 hour as we assume data charted corresponds to previous hour\n  -- i.e. if documentation is:\n  --  10:00, 100 mL\n  --  11:00, 50 mL\n  -- then this is two hours of documentation, even though (11:00 - 10:00) is 1 hour\n  , ROUND(DATETIME_DIFF(charttime, starttime_6hr, 'HOUR'), 4) + 1 AS uo_tm_6hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_12hr, 'HOUR'), 4) + 1 AS uo_tm_12hr\n  , ROUND(DATETIME_DIFF(charttime, starttime_24hr, 'HOUR'), 4) + 1 AS uo_tm_24hr\n  from ur_stg\n)\nselect\n  ur.icustay_id\n, ur.charttime\n, wd.weight\n, ur.urineoutput_6hr\n, ur.urineoutput_12hr\n, ur.urineoutput_24hr\n, ROUND(CAST((ur.urineoutput_6hr/wd.weight/uo_tm_6hr) AS NUMERIC), 4) AS uo_rt_6hr\n, ROUND(CAST((ur.urineoutput_12hr/wd.weight/uo_tm_12hr) AS NUMERIC), 4) AS uo_rt_12hr\n, ROUND(CAST((ur.urineoutput_24hr/wd.weight/uo_tm_24hr) AS NUMERIC), 4) AS uo_rt_24hr\n-- time of earliest UO measurement that was used to calculate the rate\n, uo_tm_6hr\n, uo_tm_12hr\n, uo_tm_24hr\nfrom ur_stg2 ur\nleft join {{ref('weight_durations')}} wd\n  on  ur.icustay_id = wd.icustay_id\n  and ur.charttime >= wd.starttime\n  and ur.charttime <  wd.endtime\norder by icustay_id, charttime", "refs": [["urine_output"], ["urine_output"], ["weight_durations"]], "relation_name": "\"postgres\".\"public\".\"kdigo_uo\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.kdigo_uo", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:11:37.740839Z", "name": "compile", "started_at": "2022-07-18T00:11:37.737223Z"}, {"completed_at": "2022-07-18T00:18:02.409037Z", "name": "execute", "started_at": "2022-07-18T00:11:37.741182Z"}]}, "unique_id": "model.mimic.kdigo_uo"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.kdigo_uo", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.411164Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": "2022-07-18T00:18:02.411734", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.norepinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.411878Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.norepinephrine_dose", "index": 96, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": "2022-07-18T00:18:02.411734", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "96 of 107 START table model public.norepinephrine_dose ......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.412704Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.414036Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": "2022-07-18T00:18:02.411734", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.norepinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.414676Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.norepinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.415073Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.418345Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.419186Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.norepinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.419691Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.norepinephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.430109Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.430879Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.431149Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.431269Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.436420Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.436688Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"norepinephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of norepinephrine administration\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n  -- case statement determining whether the ITEMID is an instance of vasopressor usage\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30047 and wd.weight is null then rate / 80.0 -- this is rare, only affects a total of ~400 rows\n            when itemid = 30047 then rate / wd.weight -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n          else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in (30047,30120) -- norepinephrine\n  and cv.icustay_id is not null\n  group by cv.icustay_id, cv.charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\n\n\n  create  table \"postgres\".\"public\".\"norepinephrine_dose__dbt_tmp\"\n  as (\n    -- This query extracts dose+durations of norepinephrine administration\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n  -- case statement determining whether the ITEMID is an instance of vasopressor usage\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30047 and wd.weight is null then rate / 80.0 -- this is rare, only affects a total of ~400 rows\n            when itemid = 30047 then rate / wd.weight -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n          else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in (30047,30120) -- norepinephrine\n  and cv.icustay_id is not null\n  group by cv.icustay_id, cv.charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:02.436805Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 9.0, "status": "SELECT 161449"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 161449 in 9.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.434004Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.439900Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_dose\" rename to \"norepinephrine_dose__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_dose\" rename to \"norepinephrine_dose__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.440135Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.441150Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.444608Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_dose__dbt_tmp\" rename to \"norepinephrine_dose\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\nalter table \"postgres\".\"public\".\"norepinephrine_dose__dbt_tmp\" rename to \"norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.444823Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.445554Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.448869Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.449093Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.449214Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.02, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.02 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.464550Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.norepinephrine_dose", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.norepinephrine_dose\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.467804Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.norepinephrine_dose", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"norepinephrine_dose__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.norepinephrine_dose\"} */\ndrop table if exists \"postgres\".\"public\".\"norepinephrine_dose__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.468221Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.471717Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.476052Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.norepinephrine_dose: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.476336Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.norepinephrine_dose", "execution_time": 9, "index": 96, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": "2022-07-18T00:18:02.411734", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "status": "SELECT 161449", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "96 of 107 OK created table model public.norepinephrine_dose .................... [\u001b[32mSELECT 161449\u001b[0m in 9.06s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.477195Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:11.477572", "node_name": "norepinephrine_dose", "node_path": "durations/norepinephrine_dose.sql", "node_started_at": "2022-07-18T00:18:02.411734", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.norepinephrine_dose"}, "run_result": {"adapter_response": {"_message": "SELECT 161449", "code": "SELECT", "rows_affected": 161449}, "agate_table": null, "execution_time": 9.06357455253601, "failures": null, "message": "SELECT 161449", "node": {"alias": "norepinephrine_dose", "build_path": "target/run/mimic/models/durations/norepinephrine_dose.sql", "checksum": {"checksum": "c34df193d97d9f9b95ddafefedca042fa120a926ca3ff8a8249fffc66cbcba86", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/norepinephrine_dose.sql", "compiled_sql": "-- This query extracts dose+durations of norepinephrine administration\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n  -- case statement determining whether the ITEMID is an instance of vasopressor usage\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30047 and wd.weight is null then rate / 80.0 -- this is rare, only affects a total of ~400 rows\n            when itemid = 30047 then rate / wd.weight -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n          else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join \"postgres\".\"public\".\"weight_durations\" wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in (30047,30120) -- norepinephrine\n  and cv.icustay_id is not null\n  group by cv.icustay_id, cv.charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5182197, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.weight_durations"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "norepinephrine_dose"], "meta": {}, "name": "norepinephrine_dose", "original_file_path": "models/durations/norepinephrine_dose.sql", "package_name": "mimic", "patch_path": null, "path": "durations/norepinephrine_dose.sql", "raw_sql": "-- This query extracts dose+durations of norepinephrine administration\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    cv.icustay_id, cv.charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid in (30047,30120) then 1 else 0 end) as vaso -- norepinephrine\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid in (30047,30120) and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n  -- case statement determining whether the ITEMID is an instance of vasopressor usage\n\n    , max(case when itemid in (30047,30120) and rate is not null then 1 else 0 end) as vaso_null\n    , max(case\n            when itemid = 30047 and wd.weight is null then rate / 80.0 -- this is rare, only affects a total of ~400 rows\n            when itemid = 30047 then rate / wd.weight -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n          else null end) as vaso_rate\n    , max(case when itemid in (30047,30120) then amount else null end) as vaso_amount\n\n  FROM inputevents_cv cv\n  left join {{ref('weight_durations')}} wd\n    on cv.icustay_id = wd.icustay_id\n    and cv.charttime between wd.starttime and wd.endtime\n  where itemid in (30047,30120) -- norepinephrine\n  and cv.icustay_id is not null\n  group by cv.icustay_id, cv.charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , vaso_stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by icustay_id, charttime\n\n, vasocv7 as\n(\nselect\n  icustay_id\n  , charttime as starttime\n  , lead(charttime) OVER (partition by icustay_id, vaso_first order by charttime) as endtime\n  , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\n)\n-- table of start/stop times for event\n, vasocv8 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv7\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n-- collapse these start/stop times down if the rate doesn't change\n, vasocv9 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , case\n        when LAG(endtime) OVER (partition by icustay_id order by starttime, endtime) = starttime\n        AND  LAG(vaso_rate) OVER (partition by icustay_id order by starttime, endtime) = vaso_rate\n        THEN 0\n      else 1\n    end as vaso_groups\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv8\n  where endtime is not null\n  and vaso_rate > 0\n  and starttime != endtime\n)\n, vasocv10 as\n(\n  select\n    icustay_id\n    , starttime, endtime\n    , vaso_groups\n    , SUM(vaso_groups) OVER (partition by icustay_id order by starttime, endtime) as vaso_groups_sum\n    , vaso, vaso_rate, vaso_amount, vaso_stop, vaso_start, vaso_first\n  from vasocv9\n)\n, vasocv as\n(\n  select icustay_id\n  , min(starttime) as starttime\n  , max(endtime) as endtime\n  , vaso_groups_sum\n  , vaso_rate\n  , sum(vaso_amount) as vaso_amount\n  from vasocv10\n  group by icustay_id, vaso_groups_sum, vaso_rate\n)\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , rate as vaso_rate\n    , amount as vaso_amount\n    , starttime\n    , endtime\n  from inputevents_mv\n  where itemid = 221906 -- norepinephrine\n  and statusdescription != 'Rewritten' -- only valid orders\n)\n-- now assign this data to every hour of the patient's stay\n-- vaso_amount for carevue is not accurate\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasocv\nUNION ALL\nSELECT icustay_id\n  , starttime, endtime\n  , vaso_rate, vaso_amount\nfrom vasomv\norder by icustay_id, starttime", "refs": [["weight_durations"]], "relation_name": "\"postgres\".\"public\".\"norepinephrine_dose\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.norepinephrine_dose", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:02.419074Z", "name": "compile", "started_at": "2022-07-18T00:18:02.415025Z"}, {"completed_at": "2022-07-18T00:18:11.476016Z", "name": "execute", "started_at": "2022-07-18T00:18:02.420035Z"}]}, "unique_id": "model.mimic.norepinephrine_dose"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.norepinephrine_dose", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.477832Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": "2022-07-18T00:18:11.478297", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.lods"}, "unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.lods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.478382Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.lods", "index": 97, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": "2022-07-18T00:18:11.478297", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.lods"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "97 of 107 START table model public.lods ........................................ [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.479105Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.479913Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": "2022-07-18T00:18:11.478297", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.lods"}, "unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.lods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.480310Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.lods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.480736Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.486836Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.488176Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.lods"}, "unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.lods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.488844Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.lods\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.503997Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.505465Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.506245Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.507118Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.513331Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.514152Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\n\n\n  create  table \"postgres\".\"public\".\"lods__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Logistic Organ Dysfunction Score (LODS)\n-- This query extracts the logistic organ dysfunction system.\n-- This score is a measure of organ failure in a patient.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in LODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, WBC, bilirubin, creatinine, prothrombin time (PT), platelets\n--  ABG: PaO2 with associated FiO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.pt_min\n      , labs.pt_max\n      , labs.platelet_min\n\n      , uo.urineoutput\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when bun_max is null\n        or urineoutput is null\n        or creatinine_max is null\n        then null\n      when urineoutput <   500.0 then 5\n      when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      when urineoutput <   750.0 then 3\n      when bun_max >= 28.0 then 3\n      when urineoutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      when bun_max >= 17.0 then 1\n      when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when pao2fio2_vent_min is null then 0\n      when pao2fio2_vent_min >= 150 then 1\n      when pao2fio2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  -- We have defined the \"standard\" PT as 12 seconds.\n  -- This is an assumption and subsequent analyses may be affected by this assumption.\n  , case\n      when pt_max is null\n        and bilirubin_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      when pt_max > (12+3) then 1\n      when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as LODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\n\n\n  create  table \"postgres\".\"public\".\"lods__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Logistic Organ Dysfunction Score (LODS)\n-- This query extracts the logistic organ dysfunction system.\n-- This score is a measure of organ failure in a patient.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in LODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, WBC, bilirubin, creatinine, prothrombin time (PT), platelets\n--  ABG: PaO2 with associated FiO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.pt_min\n      , labs.pt_max\n      , labs.platelet_min\n\n      , uo.urineoutput\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when bun_max is null\n        or urineoutput is null\n        or creatinine_max is null\n        then null\n      when urineoutput <   500.0 then 5\n      when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      when urineoutput <   750.0 then 3\n      when bun_max >= 28.0 then 3\n      when urineoutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      when bun_max >= 17.0 then 1\n      when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when pao2fio2_vent_min is null then 0\n      when pao2fio2_vent_min >= 150 then 1\n      when pao2fio2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  -- We have defined the \"standard\" PT as 12 seconds.\n  -- This is an assumption and subsequent analyses may be affected by this assumption.\n  , case\n      when pt_max is null\n        and bilirubin_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      when pt_max > (12+3) then 1\n      when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as LODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.514441Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.31, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.31 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.823745Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.829220Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\nalter table \"postgres\".\"public\".\"lods\" rename to \"lods__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\nalter table \"postgres\".\"public\".\"lods\" rename to \"lods__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.829637Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.830938Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.835997Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\nalter table \"postgres\".\"public\".\"lods__dbt_tmp\" rename to \"lods\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\nalter table \"postgres\".\"public\".\"lods__dbt_tmp\" rename to \"lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.836228Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.837076Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.840033Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.840252Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.840539Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.843739Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.lods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.lods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.846176Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.lods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\ndrop table if exists \"postgres\".\"public\".\"lods__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.lods\"} */\ndrop table if exists \"postgres\".\"public\".\"lods__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.846417Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.848535Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.851684Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.lods: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.851938Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.lods", "execution_time": 0, "index": 97, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": "2022-07-18T00:18:11.478297", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.lods"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "97 of 107 OK created table model public.lods ................................... [\u001b[32mSELECT 61532\u001b[0m in 0.37s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.852832Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:11.853300", "node_name": "lods", "node_path": "severityscores/lods.sql", "node_started_at": "2022-07-18T00:18:11.478297", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.lods"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.37303638458251953, "failures": null, "message": "SELECT 61532", "node": {"alias": "lods", "build_path": "target/run/mimic/models/severityscores/lods.sql", "checksum": {"checksum": "6112feed5ff0fa4cb2fe0901243095883d82c7e33f744e70543fd39e92766dfb", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/lods.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Logistic Organ Dysfunction Score (LODS)\n-- This query extracts the logistic organ dysfunction system.\n-- This score is a measure of organ failure in a patient.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in LODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, WBC, bilirubin, creatinine, prothrombin time (PT), platelets\n--  ABG: PaO2 with associated FiO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.pt_min\n      , labs.pt_max\n      , labs.platelet_min\n\n      , uo.urineoutput\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when bun_max is null\n        or urineoutput is null\n        or creatinine_max is null\n        then null\n      when urineoutput <   500.0 then 5\n      when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      when urineoutput <   750.0 then 3\n      when bun_max >= 28.0 then 3\n      when urineoutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      when bun_max >= 17.0 then 1\n      when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when pao2fio2_vent_min is null then 0\n      when pao2fio2_vent_min >= 150 then 1\n      when pao2fio2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  -- We have defined the \"standard\" PT as 12 seconds.\n  -- This is an assumption and subsequent analyses may be affected by this assumption.\n  , case\n      when pt_max is null\n        and bilirubin_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      when pt_max > (12+3) then 1\n      when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as LODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7111683, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day_arterial", "model.mimic.ventilation_durations", "model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.urine_output_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "lods"], "meta": {}, "name": "lods", "original_file_path": "models/severityscores/lods.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/lods.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Logistic Organ Dysfunction Score (LODS)\n-- This query extracts the logistic organ dysfunction system.\n-- This score is a measure of organ failure in a patient.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in LODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, WBC, bilirubin, creatinine, prothrombin time (PT), platelets\n--  ABG: PaO2 with associated FiO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from {{ref('blood_gas_first_day_arterial')}} bg\n  left join {{ref('ventilation_durations')}} vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.pt_min\n      , labs.pt_max\n      , labs.platelet_min\n\n      , uo.urineoutput\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when bun_max is null\n        or urineoutput is null\n        or creatinine_max is null\n        then null\n      when urineoutput <   500.0 then 5\n      when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      when urineoutput <   750.0 then 3\n      when bun_max >= 28.0 then 3\n      when urineoutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      when bun_max >= 17.0 then 1\n      when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when pao2fio2_vent_min is null then 0\n      when pao2fio2_vent_min >= 150 then 1\n      when pao2fio2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  -- We have defined the \"standard\" PT as 12 seconds.\n  -- This is an assumption and subsequent analyses may be affected by this assumption.\n  , case\n      when pt_max is null\n        and bilirubin_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      when pt_max > (12+3) then 1\n      when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as LODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["blood_gas_first_day_arterial"], ["ventilation_durations"], ["gcs_first_day"], ["vitals_first_day"], ["urine_output_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"lods\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.lods", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:11.488081Z", "name": "compile", "started_at": "2022-07-18T00:18:11.480703Z"}, {"completed_at": "2022-07-18T00:18:11.851655Z", "name": "execute", "started_at": "2022-07-18T00:18:11.489372Z"}]}, "unique_id": "model.mimic.lods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.lods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.853496Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": "2022-07-18T00:18:11.854112", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.mlods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.854213Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.mlods", "index": 98, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": "2022-07-18T00:18:11.854112", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "98 of 107 START table model public.mlods ....................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.854967Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.856056Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": "2022-07-18T00:18:11.854112", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.mlods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.856364Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.mlods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.856677Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.861054Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.861788Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.mlods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.862087Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.mlods\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.871493Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.872393Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.872713Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.872991Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.879231Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.879694Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\n\n\n  create  table \"postgres\".\"public\".\"mlods__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Modified Logistic organ dysfunction system (mLODS)\n-- This query extracts a modified version of the logistic organ dysfunction system.\n-- This score was used in the third international definition of sepsis: Sepsis-3.\n-- This score is a measure of organ failure in a patient.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Reference for modified LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in mLODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  LABS: WBC, bilirubin, creatinine, platelets\n--  ABG: PaO2 with associated FiO2\n\n-- Variables *excluded*, that are used in the original LODS:\n--  prothrombin time (PT), blood urea nitrogen, urine output\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and ie.outtime\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , PaO2FiO2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(PaO2FiO2) as PaO2FiO2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.PaO2FiO2_vent_min\n\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.platelet_min\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when creatinine_max is null\n        -- or UrineOutput is null\n        -- or bun_max is null\n        then null\n      -- when UrineOutput <   500.0 then 5\n      -- when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      -- when UrineOutput <   750.0 then 3\n      -- when bun_max >= 28.0 then 3\n      -- when UrineOutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      -- when bun_max >= 17.0 then 1\n      -- when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when PaO2FiO2_vent_min is null then 0\n      when PaO2FiO2_vent_min >= 150 then 1\n      when PaO2FiO2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  , case\n      when bilirubin_max is null\n        -- and pt_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      -- when pt_max > (12+3) then 1\n      -- when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as mLODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\n\n\n  create  table \"postgres\".\"public\".\"mlods__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Modified Logistic organ dysfunction system (mLODS)\n-- This query extracts a modified version of the logistic organ dysfunction system.\n-- This score was used in the third international definition of sepsis: Sepsis-3.\n-- This score is a measure of organ failure in a patient.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Reference for modified LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in mLODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  LABS: WBC, bilirubin, creatinine, platelets\n--  ABG: PaO2 with associated FiO2\n\n-- Variables *excluded*, that are used in the original LODS:\n--  prothrombin time (PT), blood urea nitrogen, urine output\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and ie.outtime\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , PaO2FiO2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(PaO2FiO2) as PaO2FiO2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.PaO2FiO2_vent_min\n\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.platelet_min\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when creatinine_max is null\n        -- or UrineOutput is null\n        -- or bun_max is null\n        then null\n      -- when UrineOutput <   500.0 then 5\n      -- when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      -- when UrineOutput <   750.0 then 3\n      -- when bun_max >= 28.0 then 3\n      -- when UrineOutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      -- when bun_max >= 17.0 then 1\n      -- when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when PaO2FiO2_vent_min is null then 0\n      when PaO2FiO2_vent_min >= 150 then 1\n      when PaO2FiO2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  , case\n      when bilirubin_max is null\n        -- and pt_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      -- when pt_max > (12+3) then 1\n      -- when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as mLODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:11.880176Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.24, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.24 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.121089Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.125484Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\nalter table \"postgres\".\"public\".\"mlods\" rename to \"mlods__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\nalter table \"postgres\".\"public\".\"mlods\" rename to \"mlods__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.125798Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.126566Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.130386Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\nalter table \"postgres\".\"public\".\"mlods__dbt_tmp\" rename to \"mlods\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\nalter table \"postgres\".\"public\".\"mlods__dbt_tmp\" rename to \"mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.130626Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.131329Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.134409Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.134650Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.134863Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.141421Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.mlods", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.mlods\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.143759Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.mlods", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\ndrop table if exists \"postgres\".\"public\".\"mlods__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.mlods\"} */\ndrop table if exists \"postgres\".\"public\".\"mlods__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.143973Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.146123Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.148714Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.mlods: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.149057Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.mlods", "execution_time": 0, "index": 98, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": "2022-07-18T00:18:11.854112", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "98 of 107 OK created table model public.mlods .................................. [\u001b[32mSELECT 61532\u001b[0m in 0.29s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.149817Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:12.150327", "node_name": "mlods", "node_path": "severityscores/mlods.sql", "node_started_at": "2022-07-18T00:18:11.854112", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.mlods"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.293870210647583, "failures": null, "message": "SELECT 61532", "node": {"alias": "mlods", "build_path": "target/run/mimic/models/severityscores/mlods.sql", "checksum": {"checksum": "279484c52f5513b159dec47b19a167d3cc055ccad508fe8d6c13ee0804f7b283", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/mlods.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Modified Logistic organ dysfunction system (mLODS)\n-- This query extracts a modified version of the logistic organ dysfunction system.\n-- This score was used in the third international definition of sepsis: Sepsis-3.\n-- This score is a measure of organ failure in a patient.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Reference for modified LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in mLODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  LABS: WBC, bilirubin, creatinine, platelets\n--  ABG: PaO2 with associated FiO2\n\n-- Variables *excluded*, that are used in the original LODS:\n--  prothrombin time (PT), blood urea nitrogen, urine output\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and ie.outtime\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , PaO2FiO2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(PaO2FiO2) as PaO2FiO2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.PaO2FiO2_vent_min\n\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.platelet_min\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when creatinine_max is null\n        -- or UrineOutput is null\n        -- or bun_max is null\n        then null\n      -- when UrineOutput <   500.0 then 5\n      -- when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      -- when UrineOutput <   750.0 then 3\n      -- when bun_max >= 28.0 then 3\n      -- when UrineOutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      -- when bun_max >= 17.0 then 1\n      -- when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when PaO2FiO2_vent_min is null then 0\n      when PaO2FiO2_vent_min >= 150 then 1\n      when PaO2FiO2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  , case\n      when bilirubin_max is null\n        -- and pt_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      -- when pt_max > (12+3) then 1\n      -- when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as mLODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7004251, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day_arterial", "model.mimic.ventilation_durations", "model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "mlods"], "meta": {}, "name": "mlods", "original_file_path": "models/severityscores/mlods.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/mlods.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Modified Logistic organ dysfunction system (mLODS)\n-- This query extracts a modified version of the logistic organ dysfunction system.\n-- This score was used in the third international definition of sepsis: Sepsis-3.\n-- This score is a measure of organ failure in a patient.\n-- ------------------------------------------------------------------\n\n-- Reference for LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Reference for modified LODS:\n--  Le Gall, J. R., Klar, J., Lemeshow, S., Saulnier, F., Alberti, C., Artigas, A., & Teres, D.\n--  The Logistic Organ Dysfunction system: a new way to assess organ dysfunction in the intensive care unit.\n--  JAMA 276.10 (1996): 802-810.\n\n-- Variables used in mLODS:\n--  GCS\n--  VITALS: Heart rate, systolic blood pressure\n--  FLAGS: ventilation/cpap\n--  LABS: WBC, bilirubin, creatinine, platelets\n--  ABG: PaO2 with associated FiO2\n\n-- Variables *excluded*, that are used in the original LODS:\n--  prothrombin time (PT), blood urea nitrogen, urine output\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and ie.outtime\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , PaO2FiO2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from {{ref('blood_gas_first_day_arterial')}} bg\n  left join {{ref('ventilation_durations')}} vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(PaO2FiO2) as PaO2FiO2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect  ie.subject_id\n      , ie.hadm_id\n      , ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.PaO2FiO2_vent_min\n\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.bilirubin_max\n      , labs.creatinine_max\n      , labs.platelet_min\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get pao2/fio2 ratio\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\n\n-- join to custom tables to get more data....\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n\n  -- neurologic\n  , case\n    when mingcs is null then null\n      when mingcs <  3 then null -- erroneous value/on trach\n      when mingcs <=  5 then 5\n      when mingcs <=  8 then 3\n      when mingcs <= 13 then 1\n    else 0\n  end as neurologic\n\n  -- cardiovascular\n  , case\n      when heartrate_max is null\n      and sysbp_min is null then null\n      when heartrate_min < 30 then 5\n      when sysbp_min < 40 then 5\n      when sysbp_min <  70 then 3\n      when sysbp_max >= 270 then 3\n      when heartrate_max >= 140 then 1\n      when sysbp_max >= 240 then 1\n      when sysbp_min < 90 then 1\n    else 0\n  end as cardiovascular\n\n  -- renal\n  , case\n      when creatinine_max is null\n        -- or UrineOutput is null\n        -- or bun_max is null\n        then null\n      -- when UrineOutput <   500.0 then 5\n      -- when bun_max >= 56.0 then 5\n      when creatinine_max >= 1.60 then 3\n      -- when UrineOutput <   750.0 then 3\n      -- when bun_max >= 28.0 then 3\n      -- when UrineOutput >= 10000.0 then 3\n      when creatinine_max >= 1.20 then 1\n      -- when bun_max >= 17.0 then 1\n      -- when bun_max >= 7.50 then 1\n    else 0\n  end as renal\n\n  -- pulmonary\n  , case\n      when PaO2FiO2_vent_min is null then 0\n      when PaO2FiO2_vent_min >= 150 then 1\n      when PaO2FiO2_vent_min < 150 then 3\n    else null\n  end as pulmonary\n\n  -- hematologic\n  , case\n      when wbc_max is null\n        and platelet_min is null\n          then null\n      when wbc_min <   1.0 then 3\n      when wbc_min <   2.5 then 1\n      when platelet_min < 50.0 then 1\n      when wbc_max >= 50.0 then 1\n    else 0\n  end as hematologic\n\n  -- hepatic\n  , case\n      when bilirubin_max is null\n        -- and pt_max is null\n          then null\n      when bilirubin_max >= 2.0 then 1\n      -- when pt_max > (12+3) then 1\n      -- when pt_min < (12*0.25) then 1\n    else 0\n  end as hepatic\n\nfrom cohort\n)\nselect ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(neurologic,0)\n+ coalesce(cardiovascular,0)\n+ coalesce(renal,0)\n+ coalesce(pulmonary,0)\n+ coalesce(hematologic,0)\n+ coalesce(hepatic,0)\n  as mLODS\n, neurologic\n, cardiovascular\n, renal\n, pulmonary\n, hematologic\n, hepatic\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["blood_gas_first_day_arterial"], ["ventilation_durations"], ["gcs_first_day"], ["vitals_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"mlods\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.mlods", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:11.861717Z", "name": "compile", "started_at": "2022-07-18T00:18:11.856636Z"}, {"completed_at": "2022-07-18T00:18:12.148686Z", "name": "execute", "started_at": "2022-07-18T00:18:11.862312Z"}]}, "unique_id": "model.mimic.mlods"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.mlods", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.150511Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": "2022-07-18T00:18:12.150952", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.sapsii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.151044Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.sapsii", "index": 99, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": "2022-07-18T00:18:12.150952", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "99 of 107 START table model public.sapsii ...................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.151743Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.152514Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": "2022-07-18T00:18:12.150952", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.sapsii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.152848Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.sapsii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.153250Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.159922Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.160777Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.sapsii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.161100Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.sapsii\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.172124Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.173627Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.174193Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.174521Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.180660Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.180997Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\n\n\n  create  table \"postgres\".\"public\".\"sapsii__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score II (SAPS II)\n-- This query extracts the simplified acute physiology score II.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS II:\n--    Le Gall, Jean-Roger, Stanley Lemeshow, and Fabienne Saulnier.\n--    \"A new simplified acute physiology score (SAPS II) based on a European/North American multicenter study.\"\n--    JAMA 270, no. 24 (1993): 2957-2963.\n\n-- Variables used in SAPS II:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: PaO2/FiO2 ratio, blood urea nitrogen, WBC, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  6) blood_gas_arterial_first_day - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n-- extract a flag for surgical service\n-- this combined with \"elective\" FROM admissions table defines elective/non-elective surgery\n, surgflag as\n(\n  select adm.hadm_id\n    , case when lower(curr_service) like '%surg%' then 1 else 0 end as surgical\n    , ROW_NUMBER() over\n    (\n      PARTITION BY adm.HADM_ID\n      ORDER BY TRANSFERTIME\n    ) as serviceOrder\n  FROM admissions adm\n  left join services se\n    on adm.hadm_id = se.hadm_id\n)\n-- icd-9 diagnostic codes are our best source for comorbidity information\n-- unfortunately, they are technically a-causal\n-- however, this shouldn't matter too much for the SAPS II comorbidities\n, comorb as\n(\nselect hadm_id\n-- these are slightly different than elixhauser comorbidities, but based on them\n-- they include some non-comorbid ICD-9 codes (e.g. 20302, relapse of multiple myeloma)\n  , max(CASE\n    when SUBSTR(icd9_code,1,3) BETWEEN '042' AND '044' THEN 1\n  \t\tend) as aids      /* HIV and AIDS */\n  , max(CASE\n    when icd9_code between '20000' and '20238' then 1 -- lymphoma\n    when icd9_code between '20240' and '20248' then 1 -- leukemia\n    when icd9_code between '20250' and '20302' then 1 -- lymphoma\n    when icd9_code between '20310' and '20312' then 1 -- leukemia\n    when icd9_code between '20302' and '20382' then 1 -- lymphoma\n    when icd9_code between '20400' and '20522' then 1 -- chronic leukemia\n    when icd9_code between '20580' and '20702' then 1 -- other myeloid leukemia\n    when icd9_code between '20720' and '20892' then 1 -- other myeloid leukemia\n    when SUBSTR(icd9_code,1,4) = '2386' then 1 -- lymphoma\n    when SUBSTR(icd9_code,1,4) = '2733' then 1 -- lymphoma\n  \t\tend) as hem\n  , max(CASE\n    when SUBSTR(icd9_code,1,4) BETWEEN '1960' AND '1991' THEN 1\n    when icd9_code between '20970' and '20975' then 1\n    when icd9_code = '20979' then 1\n    when icd9_code = '78951' then 1\n  \t\tend) as mets      /* Metastatic cancer */\n  from diagnoses_icd\n  group by hadm_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , uo.urineoutput\n\n      , labs.bun_min\n      , labs.bun_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.potassium_min\n      , labs.potassium_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.bicarbonate_min\n      , labs.bicarbonate_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , gcs.mingcs\n\n      , comorb.aids\n      , comorb.hem\n      , comorb.mets\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 'ScheduledSurgical'\n          when adm.ADMISSION_TYPE != 'ELECTIVE' and sf.surgical = 1\n            then 'UnscheduledSurgical'\n          else 'Medical'\n        end as admissiontype\n\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\nleft join surgflag sf\n  on adm.hadm_id = sf.hadm_id and sf.serviceOrder = 1\nleft join comorb\n  on ie.hadm_id = comorb.hadm_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <  40 then 0\n      when age <  60 then 7\n      when age <  70 then 12\n      when age <  75 then 15\n      when age <  80 then 16\n      when age >= 80 then 18\n    end as age_score\n\n  , case\n      when heartrate_max is null then null\n      when heartrate_min <   40 then 11\n      when heartrate_max >= 160 then 7\n      when heartrate_max >= 120 then 4\n      when heartrate_min  <  70 then 2\n      when  heartrate_max >= 70 and heartrate_max < 120\n        and heartrate_min >= 70 and heartrate_min < 120\n      then 0\n    end as hr_score\n\n  , case\n      when  sysbp_min is null then null\n      when  sysbp_min <   70 then 13\n      when  sysbp_min <  100 then 5\n      when  sysbp_max >= 200 then 2\n      when  sysbp_max >= 100 and sysbp_max < 200\n        and sysbp_min >= 100 and sysbp_min < 200\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_min <  39.0 then 0\n      when tempc_max >= 39.0 then 3\n    end as temp_score\n\n  , case\n      when pao2fio2_vent_min is null then null\n      when pao2fio2_vent_min <  100 then 11\n      when pao2fio2_vent_min <  200 then 9\n      when pao2fio2_vent_min >= 200 then 6\n    end as pao2fio2_score\n\n  , case\n      when urineoutput is null then null\n      when urineoutput <   500.0 then 11\n      when urineoutput <  1000.0 then 4\n      when urineoutput >= 1000.0 then 0\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max <  28.0 then 0\n      when bun_max <  84.0 then 6\n      when bun_max >= 84.0 then 10\n    end as bun_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_min <   1.0 then 12\n      when wbc_max >= 20.0 then 3\n      when wbc_max >=  1.0 and wbc_max < 20.0\n       and wbc_min >=  1.0 and wbc_min < 20.0\n        then 0\n    end as wbc_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_min <  3.0 then 3\n      when potassium_max >= 5.0 then 3\n      when potassium_max >= 3.0 and potassium_max < 5.0\n       and potassium_min >= 3.0 and potassium_min < 5.0\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_min  < 125 then 5\n      when sodium_max >= 145 then 1\n      when sodium_max >= 125 and sodium_max < 145\n       and sodium_min >= 125 and sodium_min < 145\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <  15.0 then 5\n      when bicarbonate_min <  20.0 then 3\n      when bicarbonate_max >= 20.0\n       and bicarbonate_min >= 20.0\n          then 0\n      end as bicarbonate_score\n\n  , case\n      when bilirubin_max is null then null\n      when bilirubin_max  < 4.0 then 0\n      when bilirubin_max  < 6.0 then 4\n      when bilirubin_max >= 6.0 then 9\n      end as bilirubin_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs <  6 then 26\n        when mingcs <  9 then 13\n        when mingcs < 11 then 7\n        when mingcs < 14 then 5\n        when mingcs >= 14\n         and mingcs <= 15\n          then 0\n        end as gcs_score\n\n    , case\n        when aids = 1 then 17\n        when hem  = 1 then 10\n        when mets = 1 then 9\n        else 0\n      end as comorbidity_score\n\n    , case\n        when admissiontype = 'ScheduledSurgical' then 0\n        when admissiontype = 'Medical' then 6\n        when admissiontype = 'UnscheduledSurgical' then 8\n        else null\n      end as admissiontype_score\n\nfrom cohort\n)\n-- Calculate SAPS II here so we can use it in the probability calculation below\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(age_score,0)\n  + coalesce(hr_score,0)\n  + coalesce(sysbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(pao2fio2_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(potassium_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(bicarbonate_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(gcs_score,0)\n  + coalesce(comorbidity_score,0)\n  + coalesce(admissiontype_score,0)\n    as sapsii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, sapsii\n, 1 / (1 + exp(- (-7.7631 + 0.0737*(sapsii) + 0.9971*(ln(sapsii + 1))) )) as sapsii_prob\n, age_score\n, hr_score\n, sysbp_score\n, temp_score\n, pao2fio2_score\n, uo_score\n, bun_score\n, wbc_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, bilirubin_score\n, gcs_score\n, comorbidity_score\n, admissiontype_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\n\n\n  create  table \"postgres\".\"public\".\"sapsii__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score II (SAPS II)\n-- This query extracts the simplified acute physiology score II.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS II:\n--    Le Gall, Jean-Roger, Stanley Lemeshow, and Fabienne Saulnier.\n--    \"A new simplified acute physiology score (SAPS II) based on a European/North American multicenter study.\"\n--    JAMA 270, no. 24 (1993): 2957-2963.\n\n-- Variables used in SAPS II:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: PaO2/FiO2 ratio, blood urea nitrogen, WBC, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  6) blood_gas_arterial_first_day - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n-- extract a flag for surgical service\n-- this combined with \"elective\" FROM admissions table defines elective/non-elective surgery\n, surgflag as\n(\n  select adm.hadm_id\n    , case when lower(curr_service) like '%surg%' then 1 else 0 end as surgical\n    , ROW_NUMBER() over\n    (\n      PARTITION BY adm.HADM_ID\n      ORDER BY TRANSFERTIME\n    ) as serviceOrder\n  FROM admissions adm\n  left join services se\n    on adm.hadm_id = se.hadm_id\n)\n-- icd-9 diagnostic codes are our best source for comorbidity information\n-- unfortunately, they are technically a-causal\n-- however, this shouldn't matter too much for the SAPS II comorbidities\n, comorb as\n(\nselect hadm_id\n-- these are slightly different than elixhauser comorbidities, but based on them\n-- they include some non-comorbid ICD-9 codes (e.g. 20302, relapse of multiple myeloma)\n  , max(CASE\n    when SUBSTR(icd9_code,1,3) BETWEEN '042' AND '044' THEN 1\n  \t\tend) as aids      /* HIV and AIDS */\n  , max(CASE\n    when icd9_code between '20000' and '20238' then 1 -- lymphoma\n    when icd9_code between '20240' and '20248' then 1 -- leukemia\n    when icd9_code between '20250' and '20302' then 1 -- lymphoma\n    when icd9_code between '20310' and '20312' then 1 -- leukemia\n    when icd9_code between '20302' and '20382' then 1 -- lymphoma\n    when icd9_code between '20400' and '20522' then 1 -- chronic leukemia\n    when icd9_code between '20580' and '20702' then 1 -- other myeloid leukemia\n    when icd9_code between '20720' and '20892' then 1 -- other myeloid leukemia\n    when SUBSTR(icd9_code,1,4) = '2386' then 1 -- lymphoma\n    when SUBSTR(icd9_code,1,4) = '2733' then 1 -- lymphoma\n  \t\tend) as hem\n  , max(CASE\n    when SUBSTR(icd9_code,1,4) BETWEEN '1960' AND '1991' THEN 1\n    when icd9_code between '20970' and '20975' then 1\n    when icd9_code = '20979' then 1\n    when icd9_code = '78951' then 1\n  \t\tend) as mets      /* Metastatic cancer */\n  from diagnoses_icd\n  group by hadm_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , uo.urineoutput\n\n      , labs.bun_min\n      , labs.bun_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.potassium_min\n      , labs.potassium_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.bicarbonate_min\n      , labs.bicarbonate_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , gcs.mingcs\n\n      , comorb.aids\n      , comorb.hem\n      , comorb.mets\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 'ScheduledSurgical'\n          when adm.ADMISSION_TYPE != 'ELECTIVE' and sf.surgical = 1\n            then 'UnscheduledSurgical'\n          else 'Medical'\n        end as admissiontype\n\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\nleft join surgflag sf\n  on adm.hadm_id = sf.hadm_id and sf.serviceOrder = 1\nleft join comorb\n  on ie.hadm_id = comorb.hadm_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <  40 then 0\n      when age <  60 then 7\n      when age <  70 then 12\n      when age <  75 then 15\n      when age <  80 then 16\n      when age >= 80 then 18\n    end as age_score\n\n  , case\n      when heartrate_max is null then null\n      when heartrate_min <   40 then 11\n      when heartrate_max >= 160 then 7\n      when heartrate_max >= 120 then 4\n      when heartrate_min  <  70 then 2\n      when  heartrate_max >= 70 and heartrate_max < 120\n        and heartrate_min >= 70 and heartrate_min < 120\n      then 0\n    end as hr_score\n\n  , case\n      when  sysbp_min is null then null\n      when  sysbp_min <   70 then 13\n      when  sysbp_min <  100 then 5\n      when  sysbp_max >= 200 then 2\n      when  sysbp_max >= 100 and sysbp_max < 200\n        and sysbp_min >= 100 and sysbp_min < 200\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_min <  39.0 then 0\n      when tempc_max >= 39.0 then 3\n    end as temp_score\n\n  , case\n      when pao2fio2_vent_min is null then null\n      when pao2fio2_vent_min <  100 then 11\n      when pao2fio2_vent_min <  200 then 9\n      when pao2fio2_vent_min >= 200 then 6\n    end as pao2fio2_score\n\n  , case\n      when urineoutput is null then null\n      when urineoutput <   500.0 then 11\n      when urineoutput <  1000.0 then 4\n      when urineoutput >= 1000.0 then 0\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max <  28.0 then 0\n      when bun_max <  84.0 then 6\n      when bun_max >= 84.0 then 10\n    end as bun_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_min <   1.0 then 12\n      when wbc_max >= 20.0 then 3\n      when wbc_max >=  1.0 and wbc_max < 20.0\n       and wbc_min >=  1.0 and wbc_min < 20.0\n        then 0\n    end as wbc_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_min <  3.0 then 3\n      when potassium_max >= 5.0 then 3\n      when potassium_max >= 3.0 and potassium_max < 5.0\n       and potassium_min >= 3.0 and potassium_min < 5.0\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_min  < 125 then 5\n      when sodium_max >= 145 then 1\n      when sodium_max >= 125 and sodium_max < 145\n       and sodium_min >= 125 and sodium_min < 145\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <  15.0 then 5\n      when bicarbonate_min <  20.0 then 3\n      when bicarbonate_max >= 20.0\n       and bicarbonate_min >= 20.0\n          then 0\n      end as bicarbonate_score\n\n  , case\n      when bilirubin_max is null then null\n      when bilirubin_max  < 4.0 then 0\n      when bilirubin_max  < 6.0 then 4\n      when bilirubin_max >= 6.0 then 9\n      end as bilirubin_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs <  6 then 26\n        when mingcs <  9 then 13\n        when mingcs < 11 then 7\n        when mingcs < 14 then 5\n        when mingcs >= 14\n         and mingcs <= 15\n          then 0\n        end as gcs_score\n\n    , case\n        when aids = 1 then 17\n        when hem  = 1 then 10\n        when mets = 1 then 9\n        else 0\n      end as comorbidity_score\n\n    , case\n        when admissiontype = 'ScheduledSurgical' then 0\n        when admissiontype = 'Medical' then 6\n        when admissiontype = 'UnscheduledSurgical' then 8\n        else null\n      end as admissiontype_score\n\nfrom cohort\n)\n-- Calculate SAPS II here so we can use it in the probability calculation below\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(age_score,0)\n  + coalesce(hr_score,0)\n  + coalesce(sysbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(pao2fio2_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(potassium_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(bicarbonate_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(gcs_score,0)\n  + coalesce(comorbidity_score,0)\n  + coalesce(admissiontype_score,0)\n    as sapsii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, sapsii\n, 1 / (1 + exp(- (-7.7631 + 0.0737*(sapsii) + 0.9971*(ln(sapsii + 1))) )) as sapsii_prob\n, age_score\n, hr_score\n, sysbp_score\n, temp_score\n, pao2fio2_score\n, uo_score\n, bun_score\n, wbc_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, bilirubin_score\n, gcs_score\n, comorbidity_score\n, admissiontype_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:12.181134Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 2.3, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 2.3 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.482826Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.489220Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\nalter table \"postgres\".\"public\".\"sapsii\" rename to \"sapsii__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\nalter table \"postgres\".\"public\".\"sapsii\" rename to \"sapsii__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.489792Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.491021Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.494833Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\nalter table \"postgres\".\"public\".\"sapsii__dbt_tmp\" rename to \"sapsii\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\nalter table \"postgres\".\"public\".\"sapsii__dbt_tmp\" rename to \"sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.495094Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.495839Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.499208Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.499453Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.499657Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.508345Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sapsii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sapsii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.510897Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sapsii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\ndrop table if exists \"postgres\".\"public\".\"sapsii__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sapsii\"} */\ndrop table if exists \"postgres\".\"public\".\"sapsii__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.511127Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.513275Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.516165Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sapsii: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.516439Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.sapsii", "execution_time": 2, "index": 99, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": "2022-07-18T00:18:12.150952", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "99 of 107 OK created table model public.sapsii ................................. [\u001b[32mSELECT 61532\u001b[0m in 2.36s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.517294Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:14.517795", "node_name": "sapsii", "node_path": "severityscores/sapsii.sql", "node_started_at": "2022-07-18T00:18:12.150952", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.sapsii"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 2.364887237548828, "failures": null, "message": "SELECT 61532", "node": {"alias": "sapsii", "build_path": "target/run/mimic/models/severityscores/sapsii.sql", "checksum": {"checksum": "86a9e44e813de5c2ead623e68e023a99d8073ced81af50da215c06cd6f693731", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/sapsii.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score II (SAPS II)\n-- This query extracts the simplified acute physiology score II.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS II:\n--    Le Gall, Jean-Roger, Stanley Lemeshow, and Fabienne Saulnier.\n--    \"A new simplified acute physiology score (SAPS II) based on a European/North American multicenter study.\"\n--    JAMA 270, no. 24 (1993): 2957-2963.\n\n-- Variables used in SAPS II:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: PaO2/FiO2 ratio, blood urea nitrogen, WBC, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  6) blood_gas_arterial_first_day - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n-- extract a flag for surgical service\n-- this combined with \"elective\" FROM admissions table defines elective/non-elective surgery\n, surgflag as\n(\n  select adm.hadm_id\n    , case when lower(curr_service) like '%surg%' then 1 else 0 end as surgical\n    , ROW_NUMBER() over\n    (\n      PARTITION BY adm.HADM_ID\n      ORDER BY TRANSFERTIME\n    ) as serviceOrder\n  FROM admissions adm\n  left join services se\n    on adm.hadm_id = se.hadm_id\n)\n-- icd-9 diagnostic codes are our best source for comorbidity information\n-- unfortunately, they are technically a-causal\n-- however, this shouldn't matter too much for the SAPS II comorbidities\n, comorb as\n(\nselect hadm_id\n-- these are slightly different than elixhauser comorbidities, but based on them\n-- they include some non-comorbid ICD-9 codes (e.g. 20302, relapse of multiple myeloma)\n  , max(CASE\n    when SUBSTR(icd9_code,1,3) BETWEEN '042' AND '044' THEN 1\n  \t\tend) as aids      /* HIV and AIDS */\n  , max(CASE\n    when icd9_code between '20000' and '20238' then 1 -- lymphoma\n    when icd9_code between '20240' and '20248' then 1 -- leukemia\n    when icd9_code between '20250' and '20302' then 1 -- lymphoma\n    when icd9_code between '20310' and '20312' then 1 -- leukemia\n    when icd9_code between '20302' and '20382' then 1 -- lymphoma\n    when icd9_code between '20400' and '20522' then 1 -- chronic leukemia\n    when icd9_code between '20580' and '20702' then 1 -- other myeloid leukemia\n    when icd9_code between '20720' and '20892' then 1 -- other myeloid leukemia\n    when SUBSTR(icd9_code,1,4) = '2386' then 1 -- lymphoma\n    when SUBSTR(icd9_code,1,4) = '2733' then 1 -- lymphoma\n  \t\tend) as hem\n  , max(CASE\n    when SUBSTR(icd9_code,1,4) BETWEEN '1960' AND '1991' THEN 1\n    when icd9_code between '20970' and '20975' then 1\n    when icd9_code = '20979' then 1\n    when icd9_code = '78951' then 1\n  \t\tend) as mets      /* Metastatic cancer */\n  from diagnoses_icd\n  group by hadm_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , uo.urineoutput\n\n      , labs.bun_min\n      , labs.bun_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.potassium_min\n      , labs.potassium_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.bicarbonate_min\n      , labs.bicarbonate_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , gcs.mingcs\n\n      , comorb.aids\n      , comorb.hem\n      , comorb.mets\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 'ScheduledSurgical'\n          when adm.ADMISSION_TYPE != 'ELECTIVE' and sf.surgical = 1\n            then 'UnscheduledSurgical'\n          else 'Medical'\n        end as admissiontype\n\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\nleft join surgflag sf\n  on adm.hadm_id = sf.hadm_id and sf.serviceOrder = 1\nleft join comorb\n  on ie.hadm_id = comorb.hadm_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <  40 then 0\n      when age <  60 then 7\n      when age <  70 then 12\n      when age <  75 then 15\n      when age <  80 then 16\n      when age >= 80 then 18\n    end as age_score\n\n  , case\n      when heartrate_max is null then null\n      when heartrate_min <   40 then 11\n      when heartrate_max >= 160 then 7\n      when heartrate_max >= 120 then 4\n      when heartrate_min  <  70 then 2\n      when  heartrate_max >= 70 and heartrate_max < 120\n        and heartrate_min >= 70 and heartrate_min < 120\n      then 0\n    end as hr_score\n\n  , case\n      when  sysbp_min is null then null\n      when  sysbp_min <   70 then 13\n      when  sysbp_min <  100 then 5\n      when  sysbp_max >= 200 then 2\n      when  sysbp_max >= 100 and sysbp_max < 200\n        and sysbp_min >= 100 and sysbp_min < 200\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_min <  39.0 then 0\n      when tempc_max >= 39.0 then 3\n    end as temp_score\n\n  , case\n      when pao2fio2_vent_min is null then null\n      when pao2fio2_vent_min <  100 then 11\n      when pao2fio2_vent_min <  200 then 9\n      when pao2fio2_vent_min >= 200 then 6\n    end as pao2fio2_score\n\n  , case\n      when urineoutput is null then null\n      when urineoutput <   500.0 then 11\n      when urineoutput <  1000.0 then 4\n      when urineoutput >= 1000.0 then 0\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max <  28.0 then 0\n      when bun_max <  84.0 then 6\n      when bun_max >= 84.0 then 10\n    end as bun_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_min <   1.0 then 12\n      when wbc_max >= 20.0 then 3\n      when wbc_max >=  1.0 and wbc_max < 20.0\n       and wbc_min >=  1.0 and wbc_min < 20.0\n        then 0\n    end as wbc_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_min <  3.0 then 3\n      when potassium_max >= 5.0 then 3\n      when potassium_max >= 3.0 and potassium_max < 5.0\n       and potassium_min >= 3.0 and potassium_min < 5.0\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_min  < 125 then 5\n      when sodium_max >= 145 then 1\n      when sodium_max >= 125 and sodium_max < 145\n       and sodium_min >= 125 and sodium_min < 145\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <  15.0 then 5\n      when bicarbonate_min <  20.0 then 3\n      when bicarbonate_max >= 20.0\n       and bicarbonate_min >= 20.0\n          then 0\n      end as bicarbonate_score\n\n  , case\n      when bilirubin_max is null then null\n      when bilirubin_max  < 4.0 then 0\n      when bilirubin_max  < 6.0 then 4\n      when bilirubin_max >= 6.0 then 9\n      end as bilirubin_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs <  6 then 26\n        when mingcs <  9 then 13\n        when mingcs < 11 then 7\n        when mingcs < 14 then 5\n        when mingcs >= 14\n         and mingcs <= 15\n          then 0\n        end as gcs_score\n\n    , case\n        when aids = 1 then 17\n        when hem  = 1 then 10\n        when mets = 1 then 9\n        else 0\n      end as comorbidity_score\n\n    , case\n        when admissiontype = 'ScheduledSurgical' then 0\n        when admissiontype = 'Medical' then 6\n        when admissiontype = 'UnscheduledSurgical' then 8\n        else null\n      end as admissiontype_score\n\nfrom cohort\n)\n-- Calculate SAPS II here so we can use it in the probability calculation below\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(age_score,0)\n  + coalesce(hr_score,0)\n  + coalesce(sysbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(pao2fio2_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(potassium_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(bicarbonate_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(gcs_score,0)\n  + coalesce(comorbidity_score,0)\n  + coalesce(admissiontype_score,0)\n    as sapsii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, sapsii\n, 1 / (1 + exp(- (-7.7631 + 0.0737*(sapsii) + 0.9971*(ln(sapsii + 1))) )) as sapsii_prob\n, age_score\n, hr_score\n, sysbp_score\n, temp_score\n, pao2fio2_score\n, uo_score\n, bun_score\n, wbc_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, bilirubin_score\n, gcs_score\n, comorbidity_score\n, admissiontype_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7063458, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day_arterial", "model.mimic.ventilation_durations", "model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.urine_output_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "sapsii"], "meta": {}, "name": "sapsii", "original_file_path": "models/severityscores/sapsii.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/sapsii.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score II (SAPS II)\n-- This query extracts the simplified acute physiology score II.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS II:\n--    Le Gall, Jean-Roger, Stanley Lemeshow, and Fabienne Saulnier.\n--    \"A new simplified acute physiology score (SAPS II) based on a European/North American multicenter study.\"\n--    JAMA 270, no. 24 (1993): 2957-2963.\n\n-- Variables used in SAPS II:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: PaO2/FiO2 ratio, blood urea nitrogen, WBC, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_durations - generated by ventilation_durations.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n--  6) blood_gas_arterial_first_day - generated by blood-gas-first-day-arterial.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n    , min(DATETIME_SUB(charttime, INTERVAL '1' HOUR)) as starttime\n    , max(DATETIME_ADD(charttime, INTERVAL '4' HOUR)) as endtime\n    , max(CASE\n          WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n          WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n        else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n-- extract a flag for surgical service\n-- this combined with \"elective\" FROM admissions table defines elective/non-elective surgery\n, surgflag as\n(\n  select adm.hadm_id\n    , case when lower(curr_service) like '%surg%' then 1 else 0 end as surgical\n    , ROW_NUMBER() over\n    (\n      PARTITION BY adm.HADM_ID\n      ORDER BY TRANSFERTIME\n    ) as serviceOrder\n  FROM admissions adm\n  left join services se\n    on adm.hadm_id = se.hadm_id\n)\n-- icd-9 diagnostic codes are our best source for comorbidity information\n-- unfortunately, they are technically a-causal\n-- however, this shouldn't matter too much for the SAPS II comorbidities\n, comorb as\n(\nselect hadm_id\n-- these are slightly different than elixhauser comorbidities, but based on them\n-- they include some non-comorbid ICD-9 codes (e.g. 20302, relapse of multiple myeloma)\n  , max(CASE\n    when SUBSTR(icd9_code,1,3) BETWEEN '042' AND '044' THEN 1\n  \t\tend) as aids      /* HIV and AIDS */\n  , max(CASE\n    when icd9_code between '20000' and '20238' then 1 -- lymphoma\n    when icd9_code between '20240' and '20248' then 1 -- leukemia\n    when icd9_code between '20250' and '20302' then 1 -- lymphoma\n    when icd9_code between '20310' and '20312' then 1 -- leukemia\n    when icd9_code between '20302' and '20382' then 1 -- lymphoma\n    when icd9_code between '20400' and '20522' then 1 -- chronic leukemia\n    when icd9_code between '20580' and '20702' then 1 -- other myeloid leukemia\n    when icd9_code between '20720' and '20892' then 1 -- other myeloid leukemia\n    when SUBSTR(icd9_code,1,4) = '2386' then 1 -- lymphoma\n    when SUBSTR(icd9_code,1,4) = '2733' then 1 -- lymphoma\n  \t\tend) as hem\n  , max(CASE\n    when SUBSTR(icd9_code,1,4) BETWEEN '1960' AND '1991' THEN 1\n    when icd9_code between '20970' and '20975' then 1\n    when icd9_code = '20979' then 1\n    when icd9_code = '78951' then 1\n  \t\tend) as mets      /* Metastatic cancer */\n  from diagnoses_icd\n  group by hadm_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as vent\n  , case when cp.icustay_id is not null then 1 else 0 end as cpap\n  from {{ref('blood_gas_first_day_arterial')}} bg\n  left join {{ref('ventilation_durations')}} vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  left join cpap cp\n    on bg.icustay_id = cp.icustay_id\n    and bg.charttime >= cp.starttime\n    and bg.charttime <= cp.endtime\n)\n, pafi2 as\n(\n  -- get the minimum PaO2/FiO2 ratio *only for ventilated/cpap patients*\n  select icustay_id\n  , min(pao2fio2) as pao2fio2_vent_min\n  from pafi1\n  where vent = 1 or cpap = 1\n  group by icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      -- this value is non-null iff the patient is on vent/cpap\n      , pf.pao2fio2_vent_min\n\n      , uo.urineoutput\n\n      , labs.bun_min\n      , labs.bun_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.potassium_min\n      , labs.potassium_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.bicarbonate_min\n      , labs.bicarbonate_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , gcs.mingcs\n\n      , comorb.aids\n      , comorb.hem\n      , comorb.mets\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 'ScheduledSurgical'\n          when adm.ADMISSION_TYPE != 'ELECTIVE' and sf.surgical = 1\n            then 'UnscheduledSurgical'\n          else 'Medical'\n        end as admissiontype\n\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views\nleft join pafi2 pf\n  on ie.icustay_id = pf.icustay_id\nleft join surgflag sf\n  on adm.hadm_id = sf.hadm_id and sf.serviceOrder = 1\nleft join comorb\n  on ie.hadm_id = comorb.hadm_id\n\n-- join to custom tables to get more data....\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <  40 then 0\n      when age <  60 then 7\n      when age <  70 then 12\n      when age <  75 then 15\n      when age <  80 then 16\n      when age >= 80 then 18\n    end as age_score\n\n  , case\n      when heartrate_max is null then null\n      when heartrate_min <   40 then 11\n      when heartrate_max >= 160 then 7\n      when heartrate_max >= 120 then 4\n      when heartrate_min  <  70 then 2\n      when  heartrate_max >= 70 and heartrate_max < 120\n        and heartrate_min >= 70 and heartrate_min < 120\n      then 0\n    end as hr_score\n\n  , case\n      when  sysbp_min is null then null\n      when  sysbp_min <   70 then 13\n      when  sysbp_min <  100 then 5\n      when  sysbp_max >= 200 then 2\n      when  sysbp_max >= 100 and sysbp_max < 200\n        and sysbp_min >= 100 and sysbp_min < 200\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_min <  39.0 then 0\n      when tempc_max >= 39.0 then 3\n    end as temp_score\n\n  , case\n      when pao2fio2_vent_min is null then null\n      when pao2fio2_vent_min <  100 then 11\n      when pao2fio2_vent_min <  200 then 9\n      when pao2fio2_vent_min >= 200 then 6\n    end as pao2fio2_score\n\n  , case\n      when urineoutput is null then null\n      when urineoutput <   500.0 then 11\n      when urineoutput <  1000.0 then 4\n      when urineoutput >= 1000.0 then 0\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max <  28.0 then 0\n      when bun_max <  84.0 then 6\n      when bun_max >= 84.0 then 10\n    end as bun_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_min <   1.0 then 12\n      when wbc_max >= 20.0 then 3\n      when wbc_max >=  1.0 and wbc_max < 20.0\n       and wbc_min >=  1.0 and wbc_min < 20.0\n        then 0\n    end as wbc_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_min <  3.0 then 3\n      when potassium_max >= 5.0 then 3\n      when potassium_max >= 3.0 and potassium_max < 5.0\n       and potassium_min >= 3.0 and potassium_min < 5.0\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_min  < 125 then 5\n      when sodium_max >= 145 then 1\n      when sodium_max >= 125 and sodium_max < 145\n       and sodium_min >= 125 and sodium_min < 145\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <  15.0 then 5\n      when bicarbonate_min <  20.0 then 3\n      when bicarbonate_max >= 20.0\n       and bicarbonate_min >= 20.0\n          then 0\n      end as bicarbonate_score\n\n  , case\n      when bilirubin_max is null then null\n      when bilirubin_max  < 4.0 then 0\n      when bilirubin_max  < 6.0 then 4\n      when bilirubin_max >= 6.0 then 9\n      end as bilirubin_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs <  6 then 26\n        when mingcs <  9 then 13\n        when mingcs < 11 then 7\n        when mingcs < 14 then 5\n        when mingcs >= 14\n         and mingcs <= 15\n          then 0\n        end as gcs_score\n\n    , case\n        when aids = 1 then 17\n        when hem  = 1 then 10\n        when mets = 1 then 9\n        else 0\n      end as comorbidity_score\n\n    , case\n        when admissiontype = 'ScheduledSurgical' then 0\n        when admissiontype = 'Medical' then 6\n        when admissiontype = 'UnscheduledSurgical' then 8\n        else null\n      end as admissiontype_score\n\nfrom cohort\n)\n-- Calculate SAPS II here so we can use it in the probability calculation below\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(age_score,0)\n  + coalesce(hr_score,0)\n  + coalesce(sysbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(pao2fio2_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(potassium_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(bicarbonate_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(gcs_score,0)\n  + coalesce(comorbidity_score,0)\n  + coalesce(admissiontype_score,0)\n    as sapsii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, sapsii\n, 1 / (1 + exp(- (-7.7631 + 0.0737*(sapsii) + 0.9971*(ln(sapsii + 1))) )) as sapsii_prob\n, age_score\n, hr_score\n, sysbp_score\n, temp_score\n, pao2fio2_score\n, uo_score\n, bun_score\n, wbc_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, bilirubin_score\n, gcs_score\n, comorbidity_score\n, admissiontype_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["blood_gas_first_day_arterial"], ["ventilation_durations"], ["gcs_first_day"], ["vitals_first_day"], ["urine_output_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"sapsii\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.sapsii", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:12.160720Z", "name": "compile", "started_at": "2022-07-18T00:18:12.153198Z"}, {"completed_at": "2022-07-18T00:18:14.516133Z", "name": "execute", "started_at": "2022-07-18T00:18:12.161347Z"}]}, "unique_id": "model.mimic.sapsii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.sapsii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.517984Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": "2022-07-18T00:18:14.518504", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.518584Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.sofa", "index": 100, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": "2022-07-18T00:18:14.518504", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "100 of 107 START table model public.sofa ....................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.519334Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.520108Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": "2022-07-18T00:18:14.518504", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.520545Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.520934Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.527016Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.527753Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.528293Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.sofa\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.546314Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.547033Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.547269Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.547484Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.554190Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.554964Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"sofa__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Sequential Organ Failure Assessment (SOFA)\n-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).\n-- This score is a measure of organ failure for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SOFA:\n--    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendon\u00e7a,\n--    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.\n--    \"The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure.\"\n--    Intensive care medicine 22, no. 7 (1996): 707-710.\n\n-- Variables used in SOFA:\n--  GCS, MAP, FiO2, Ventilation status (sourced FROM chartevents)\n--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced FROM labevents)\n--  Dobutamine, Epinephrine, Norepinephrine (sourced FROM inputevents_mv and INPUTEVENTS_CV)\n--  Urine output (sourced from OUTPUTEVENTS)\n\n-- The following views required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vitals_first_day - generated by vitals-first-day.sql\n--  3) gcs_first_day - generated by gcs-first-day.sql\n--  4) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n--  6) echodata - generated by echo-data.sql\n--  7) ventilation_durations - generated by ventilation_durations.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith wt AS\n(\n  SELECT ie.icustay_id\n    -- ensure weight is measured in kg\n    , avg(CASE\n        WHEN itemid IN (762, 763, 3723, 3580, 226512)\n          THEN valuenum\n        -- convert lbs to kgs\n        WHEN itemid IN (3581)\n          THEN valuenum * 0.45359237\n        WHEN itemid IN (3582)\n          THEN valuenum * 0.0283495231\n        ELSE null\n      END) AS weight\n\n  FROM icustays ie\n  left join chartevents c\n    on ie.icustay_id = c.icustay_id\n  WHERE valuenum IS NOT NULL\n  AND itemid IN\n  (\n    762, 763, 3723, 3580,                     -- Weight Kg\n    3581,                                     -- Weight lb\n    3582,                                     -- Weight oz\n    226512 -- Metavision: Admission Weight (Kg)\n  )\n  AND valuenum != 0\n  and charttime between DATETIME_SUB(ie.intime, INTERVAL '1' DAY) and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (c.error IS NULL OR c.error = 0)\n  group by ie.icustay_id\n)\n-- 5% of patients are missing a weight, but we can impute weight using their echo notes\n, echo2 as(\n  select ie.icustay_id, avg(weight * 0.45359237) as weight\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"echo_data\" echo\n    on ie.hadm_id = echo.hadm_id\n    and echo.charttime > DATETIME_SUB(ie.intime, INTERVAL '7' DAY)\n    and echo.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, vaso_cv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case\n            when itemid = 30047 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n            else null\n          end) as rate_norepinephrine\n\n    , max(case\n            when itemid =  30044 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as rate_epinephrine\n\n    , max(case when itemid in (30043,30307) then rate end) as rate_dopamine\n    , max(case when itemid in (30042,30306) then rate end) as rate_dobutamine\n\n  FROM icustays ie\n  inner join inputevents_cv cv\n    on ie.icustay_id = cv.icustay_id and cv.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  left join wt\n    on ie.icustay_id = wt.icustay_id\n  left join echo2 ec\n    on ie.icustay_id = ec.icustay_id\n  where itemid in (30047,30120,30044,30119,30309,30043,30307,30042,30306)\n  and rate is not null\n  group by ie.icustay_id\n)\n, vaso_mv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 221906 then rate end) as rate_norepinephrine\n    , max(case when itemid = 221289 then rate end) as rate_epinephrine\n    , max(case when itemid = 221662 then rate end) as rate_dopamine\n    , max(case when itemid = 221653 then rate end) as rate_dobutamine\n  FROM icustays ie\n  inner join inputevents_mv mv\n    on ie.icustay_id = mv.icustay_id and mv.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in (221906,221289,221662,221653)\n  -- 'Rewritten' orders are not delivered to the patient\n  and statusdescription != 'Rewritten'\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as isvent\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  order by bg.icustay_id, bg.charttime\n)\n, pafi2 as\n(\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  select icustay_id\n  , min(case when isvent = 0 then pao2fio2 else null end) as pao2fio2_novent_min\n  , min(case when isvent = 1 then pao2fio2 else null end) as pao2fio2_vent_min\n  from pafi1\n  group by icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.meanbp_min\n  , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) as rate_norepinephrine\n  , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) as rate_epinephrine\n  , coalesce(cv.rate_dopamine, mv.rate_dopamine) as rate_dopamine\n  , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) as rate_dobutamine\n\n  , l.creatinine_max\n  , l.bilirubin_max\n  , l.platelet_min\n\n  , pf.pao2fio2_novent_min\n  , pf.pao2fio2_vent_min\n\n  , uo.urineoutput\n\n  , gcs.mingcs\nFROM icustays ie\nleft join vaso_cv cv\n  on ie.icustay_id = cv.icustay_id\nleft join vaso_mv mv\n  on ie.icustay_id = mv.icustay_id\nleft join pafi2 pf\n on ie.icustay_id = pf.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  -- Respiration\n  , case\n      when pao2fio2_vent_min   < 100 then 4\n      when pao2fio2_vent_min   < 200 then 3\n      when pao2fio2_novent_min < 300 then 2\n      when pao2fio2_novent_min < 400 then 1\n      when coalesce(pao2fio2_vent_min, pao2fio2_novent_min) is null then null\n      else 0\n    end as respiration\n\n  -- Coagulation\n  , case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as coagulation\n\n  -- Liver\n  , case\n      -- Bilirubin checks in mg/dL\n        when bilirubin_max >= 12.0 then 4\n        when bilirubin_max >= 6.0  then 3\n        when bilirubin_max >= 2.0  then 2\n        when bilirubin_max >= 1.2  then 1\n        when bilirubin_max is null then null\n        else 0\n      end as liver\n\n  -- Cardiovascular\n  , case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as cardiovascular\n\n  -- Neurological failure (GCS)\n  , case\n      when (mingcs >= 13 and mingcs <= 14) then 1\n      when (mingcs >= 10 and mingcs <= 12) then 2\n      when (mingcs >=  6 and mingcs <=  9) then 3\n      when  mingcs <   6 then 4\n      when  mingcs is null then null\n  else 0 end\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , case\n    when (creatinine_max >= 5.0) then 4\n    when  urineoutput < 200 then 4\n    when (creatinine_max >= 3.5 and creatinine_max < 5.0) then 3\n    when  urineoutput < 500 then 3\n    when (creatinine_max >= 2.0 and creatinine_max < 3.5) then 2\n    when (creatinine_max >= 1.2 and creatinine_max < 2.0) then 1\n    when coalesce(urineoutput, creatinine_max) is null then null\n  else 0 end\n    as renal\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(respiration,0)\n  + coalesce(coagulation,0)\n  + coalesce(liver,0)\n  + coalesce(cardiovascular,0)\n  + coalesce(cns,0)\n  + coalesce(renal,0)\n  as SOFA\n, respiration\n, coagulation\n, liver\n, cardiovascular\n, cns\n, renal\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\n\n\n  create  table \"postgres\".\"public\".\"sofa__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Sequential Organ Failure Assessment (SOFA)\n-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).\n-- This score is a measure of organ failure for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SOFA:\n--    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendon\u00e7a,\n--    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.\n--    \"The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure.\"\n--    Intensive care medicine 22, no. 7 (1996): 707-710.\n\n-- Variables used in SOFA:\n--  GCS, MAP, FiO2, Ventilation status (sourced FROM chartevents)\n--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced FROM labevents)\n--  Dobutamine, Epinephrine, Norepinephrine (sourced FROM inputevents_mv and INPUTEVENTS_CV)\n--  Urine output (sourced from OUTPUTEVENTS)\n\n-- The following views required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vitals_first_day - generated by vitals-first-day.sql\n--  3) gcs_first_day - generated by gcs-first-day.sql\n--  4) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n--  6) echodata - generated by echo-data.sql\n--  7) ventilation_durations - generated by ventilation_durations.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith wt AS\n(\n  SELECT ie.icustay_id\n    -- ensure weight is measured in kg\n    , avg(CASE\n        WHEN itemid IN (762, 763, 3723, 3580, 226512)\n          THEN valuenum\n        -- convert lbs to kgs\n        WHEN itemid IN (3581)\n          THEN valuenum * 0.45359237\n        WHEN itemid IN (3582)\n          THEN valuenum * 0.0283495231\n        ELSE null\n      END) AS weight\n\n  FROM icustays ie\n  left join chartevents c\n    on ie.icustay_id = c.icustay_id\n  WHERE valuenum IS NOT NULL\n  AND itemid IN\n  (\n    762, 763, 3723, 3580,                     -- Weight Kg\n    3581,                                     -- Weight lb\n    3582,                                     -- Weight oz\n    226512 -- Metavision: Admission Weight (Kg)\n  )\n  AND valuenum != 0\n  and charttime between DATETIME_SUB(ie.intime, INTERVAL '1' DAY) and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (c.error IS NULL OR c.error = 0)\n  group by ie.icustay_id\n)\n-- 5% of patients are missing a weight, but we can impute weight using their echo notes\n, echo2 as(\n  select ie.icustay_id, avg(weight * 0.45359237) as weight\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"echo_data\" echo\n    on ie.hadm_id = echo.hadm_id\n    and echo.charttime > DATETIME_SUB(ie.intime, INTERVAL '7' DAY)\n    and echo.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, vaso_cv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case\n            when itemid = 30047 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n            else null\n          end) as rate_norepinephrine\n\n    , max(case\n            when itemid =  30044 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as rate_epinephrine\n\n    , max(case when itemid in (30043,30307) then rate end) as rate_dopamine\n    , max(case when itemid in (30042,30306) then rate end) as rate_dobutamine\n\n  FROM icustays ie\n  inner join inputevents_cv cv\n    on ie.icustay_id = cv.icustay_id and cv.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  left join wt\n    on ie.icustay_id = wt.icustay_id\n  left join echo2 ec\n    on ie.icustay_id = ec.icustay_id\n  where itemid in (30047,30120,30044,30119,30309,30043,30307,30042,30306)\n  and rate is not null\n  group by ie.icustay_id\n)\n, vaso_mv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 221906 then rate end) as rate_norepinephrine\n    , max(case when itemid = 221289 then rate end) as rate_epinephrine\n    , max(case when itemid = 221662 then rate end) as rate_dopamine\n    , max(case when itemid = 221653 then rate end) as rate_dobutamine\n  FROM icustays ie\n  inner join inputevents_mv mv\n    on ie.icustay_id = mv.icustay_id and mv.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in (221906,221289,221662,221653)\n  -- 'Rewritten' orders are not delivered to the patient\n  and statusdescription != 'Rewritten'\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as isvent\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  order by bg.icustay_id, bg.charttime\n)\n, pafi2 as\n(\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  select icustay_id\n  , min(case when isvent = 0 then pao2fio2 else null end) as pao2fio2_novent_min\n  , min(case when isvent = 1 then pao2fio2 else null end) as pao2fio2_vent_min\n  from pafi1\n  group by icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.meanbp_min\n  , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) as rate_norepinephrine\n  , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) as rate_epinephrine\n  , coalesce(cv.rate_dopamine, mv.rate_dopamine) as rate_dopamine\n  , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) as rate_dobutamine\n\n  , l.creatinine_max\n  , l.bilirubin_max\n  , l.platelet_min\n\n  , pf.pao2fio2_novent_min\n  , pf.pao2fio2_vent_min\n\n  , uo.urineoutput\n\n  , gcs.mingcs\nFROM icustays ie\nleft join vaso_cv cv\n  on ie.icustay_id = cv.icustay_id\nleft join vaso_mv mv\n  on ie.icustay_id = mv.icustay_id\nleft join pafi2 pf\n on ie.icustay_id = pf.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  -- Respiration\n  , case\n      when pao2fio2_vent_min   < 100 then 4\n      when pao2fio2_vent_min   < 200 then 3\n      when pao2fio2_novent_min < 300 then 2\n      when pao2fio2_novent_min < 400 then 1\n      when coalesce(pao2fio2_vent_min, pao2fio2_novent_min) is null then null\n      else 0\n    end as respiration\n\n  -- Coagulation\n  , case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as coagulation\n\n  -- Liver\n  , case\n      -- Bilirubin checks in mg/dL\n        when bilirubin_max >= 12.0 then 4\n        when bilirubin_max >= 6.0  then 3\n        when bilirubin_max >= 2.0  then 2\n        when bilirubin_max >= 1.2  then 1\n        when bilirubin_max is null then null\n        else 0\n      end as liver\n\n  -- Cardiovascular\n  , case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as cardiovascular\n\n  -- Neurological failure (GCS)\n  , case\n      when (mingcs >= 13 and mingcs <= 14) then 1\n      when (mingcs >= 10 and mingcs <= 12) then 2\n      when (mingcs >=  6 and mingcs <=  9) then 3\n      when  mingcs <   6 then 4\n      when  mingcs is null then null\n  else 0 end\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , case\n    when (creatinine_max >= 5.0) then 4\n    when  urineoutput < 200 then 4\n    when (creatinine_max >= 3.5 and creatinine_max < 5.0) then 3\n    when  urineoutput < 500 then 3\n    when (creatinine_max >= 2.0 and creatinine_max < 3.5) then 2\n    when (creatinine_max >= 1.2 and creatinine_max < 2.0) then 1\n    when coalesce(urineoutput, creatinine_max) is null then null\n  else 0 end\n    as renal\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(respiration,0)\n  + coalesce(coagulation,0)\n  + coalesce(liver,0)\n  + coalesce(cardiovascular,0)\n  + coalesce(cns,0)\n  + coalesce(renal,0)\n  as SOFA\n, respiration\n, coagulation\n, liver\n, cardiovascular\n, cns\n, renal\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:14.555257Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 6.04, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 6.04 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.591500Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.595915Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\nalter table \"postgres\".\"public\".\"sofa\" rename to \"sofa__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\nalter table \"postgres\".\"public\".\"sofa\" rename to \"sofa__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.596236Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.599594Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.603259Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\nalter table \"postgres\".\"public\".\"sofa__dbt_tmp\" rename to \"sofa\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\nalter table \"postgres\".\"public\".\"sofa__dbt_tmp\" rename to \"sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.603556Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.604334Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.607642Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.607878Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.608102Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.614286Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.sofa", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.sofa\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.616817Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.sofa", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\ndrop table if exists \"postgres\".\"public\".\"sofa__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.sofa\"} */\ndrop table if exists \"postgres\".\"public\".\"sofa__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.617049Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.622154Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.624984Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.sofa: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.625302Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.sofa", "execution_time": 6, "index": 100, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": "2022-07-18T00:18:14.518504", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "100 of 107 OK created table model public.sofa .................................. [\u001b[32mSELECT 61532\u001b[0m in 6.11s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.626444Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:20.627037", "node_name": "sofa", "node_path": "severityscores/sofa.sql", "node_started_at": "2022-07-18T00:18:14.518504", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.sofa"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 6.1063690185546875, "failures": null, "message": "SELECT 61532", "node": {"alias": "sofa", "build_path": "target/run/mimic/models/severityscores/sofa.sql", "checksum": {"checksum": "3c1335d2c5c73b4a68aba1e3c0e0bea7bbde0354aab4be7e37ae0b06a55057b7", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/sofa.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Sequential Organ Failure Assessment (SOFA)\n-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).\n-- This score is a measure of organ failure for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SOFA:\n--    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendon\u00e7a,\n--    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.\n--    \"The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure.\"\n--    Intensive care medicine 22, no. 7 (1996): 707-710.\n\n-- Variables used in SOFA:\n--  GCS, MAP, FiO2, Ventilation status (sourced FROM chartevents)\n--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced FROM labevents)\n--  Dobutamine, Epinephrine, Norepinephrine (sourced FROM inputevents_mv and INPUTEVENTS_CV)\n--  Urine output (sourced from OUTPUTEVENTS)\n\n-- The following views required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vitals_first_day - generated by vitals-first-day.sql\n--  3) gcs_first_day - generated by gcs-first-day.sql\n--  4) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n--  6) echodata - generated by echo-data.sql\n--  7) ventilation_durations - generated by ventilation_durations.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith wt AS\n(\n  SELECT ie.icustay_id\n    -- ensure weight is measured in kg\n    , avg(CASE\n        WHEN itemid IN (762, 763, 3723, 3580, 226512)\n          THEN valuenum\n        -- convert lbs to kgs\n        WHEN itemid IN (3581)\n          THEN valuenum * 0.45359237\n        WHEN itemid IN (3582)\n          THEN valuenum * 0.0283495231\n        ELSE null\n      END) AS weight\n\n  FROM icustays ie\n  left join chartevents c\n    on ie.icustay_id = c.icustay_id\n  WHERE valuenum IS NOT NULL\n  AND itemid IN\n  (\n    762, 763, 3723, 3580,                     -- Weight Kg\n    3581,                                     -- Weight lb\n    3582,                                     -- Weight oz\n    226512 -- Metavision: Admission Weight (Kg)\n  )\n  AND valuenum != 0\n  and charttime between DATETIME_SUB(ie.intime, INTERVAL '1' DAY) and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (c.error IS NULL OR c.error = 0)\n  group by ie.icustay_id\n)\n-- 5% of patients are missing a weight, but we can impute weight using their echo notes\n, echo2 as(\n  select ie.icustay_id, avg(weight * 0.45359237) as weight\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"echo_data\" echo\n    on ie.hadm_id = echo.hadm_id\n    and echo.charttime > DATETIME_SUB(ie.intime, INTERVAL '7' DAY)\n    and echo.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, vaso_cv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case\n            when itemid = 30047 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n            else null\n          end) as rate_norepinephrine\n\n    , max(case\n            when itemid =  30044 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as rate_epinephrine\n\n    , max(case when itemid in (30043,30307) then rate end) as rate_dopamine\n    , max(case when itemid in (30042,30306) then rate end) as rate_dobutamine\n\n  FROM icustays ie\n  inner join inputevents_cv cv\n    on ie.icustay_id = cv.icustay_id and cv.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  left join wt\n    on ie.icustay_id = wt.icustay_id\n  left join echo2 ec\n    on ie.icustay_id = ec.icustay_id\n  where itemid in (30047,30120,30044,30119,30309,30043,30307,30042,30306)\n  and rate is not null\n  group by ie.icustay_id\n)\n, vaso_mv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 221906 then rate end) as rate_norepinephrine\n    , max(case when itemid = 221289 then rate end) as rate_epinephrine\n    , max(case when itemid = 221662 then rate end) as rate_dopamine\n    , max(case when itemid = 221653 then rate end) as rate_dobutamine\n  FROM icustays ie\n  inner join inputevents_mv mv\n    on ie.icustay_id = mv.icustay_id and mv.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in (221906,221289,221662,221653)\n  -- 'Rewritten' orders are not delivered to the patient\n  and statusdescription != 'Rewritten'\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as isvent\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join \"postgres\".\"public\".\"ventilation_durations\" vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  order by bg.icustay_id, bg.charttime\n)\n, pafi2 as\n(\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  select icustay_id\n  , min(case when isvent = 0 then pao2fio2 else null end) as pao2fio2_novent_min\n  , min(case when isvent = 1 then pao2fio2 else null end) as pao2fio2_vent_min\n  from pafi1\n  group by icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.meanbp_min\n  , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) as rate_norepinephrine\n  , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) as rate_epinephrine\n  , coalesce(cv.rate_dopamine, mv.rate_dopamine) as rate_dopamine\n  , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) as rate_dobutamine\n\n  , l.creatinine_max\n  , l.bilirubin_max\n  , l.platelet_min\n\n  , pf.pao2fio2_novent_min\n  , pf.pao2fio2_vent_min\n\n  , uo.urineoutput\n\n  , gcs.mingcs\nFROM icustays ie\nleft join vaso_cv cv\n  on ie.icustay_id = cv.icustay_id\nleft join vaso_mv mv\n  on ie.icustay_id = mv.icustay_id\nleft join pafi2 pf\n on ie.icustay_id = pf.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" v\n  on ie.icustay_id = v.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" l\n  on ie.icustay_id = l.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  -- Respiration\n  , case\n      when pao2fio2_vent_min   < 100 then 4\n      when pao2fio2_vent_min   < 200 then 3\n      when pao2fio2_novent_min < 300 then 2\n      when pao2fio2_novent_min < 400 then 1\n      when coalesce(pao2fio2_vent_min, pao2fio2_novent_min) is null then null\n      else 0\n    end as respiration\n\n  -- Coagulation\n  , case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as coagulation\n\n  -- Liver\n  , case\n      -- Bilirubin checks in mg/dL\n        when bilirubin_max >= 12.0 then 4\n        when bilirubin_max >= 6.0  then 3\n        when bilirubin_max >= 2.0  then 2\n        when bilirubin_max >= 1.2  then 1\n        when bilirubin_max is null then null\n        else 0\n      end as liver\n\n  -- Cardiovascular\n  , case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as cardiovascular\n\n  -- Neurological failure (GCS)\n  , case\n      when (mingcs >= 13 and mingcs <= 14) then 1\n      when (mingcs >= 10 and mingcs <= 12) then 2\n      when (mingcs >=  6 and mingcs <=  9) then 3\n      when  mingcs <   6 then 4\n      when  mingcs is null then null\n  else 0 end\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , case\n    when (creatinine_max >= 5.0) then 4\n    when  urineoutput < 200 then 4\n    when (creatinine_max >= 3.5 and creatinine_max < 5.0) then 3\n    when  urineoutput < 500 then 3\n    when (creatinine_max >= 2.0 and creatinine_max < 3.5) then 2\n    when (creatinine_max >= 1.2 and creatinine_max < 2.0) then 1\n    when coalesce(urineoutput, creatinine_max) is null then null\n  else 0 end\n    as renal\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(respiration,0)\n  + coalesce(coagulation,0)\n  + coalesce(liver,0)\n  + coalesce(cardiovascular,0)\n  + coalesce(cns,0)\n  + coalesce(renal,0)\n  as SOFA\n, respiration\n, coagulation\n, liver\n, cardiovascular\n, cns\n, renal\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7279456, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.echo_data", "model.mimic.blood_gas_first_day_arterial", "model.mimic.ventilation_durations", "model.mimic.vitals_first_day", "model.mimic.labs_first_day", "model.mimic.urine_output_first_day", "model.mimic.gcs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "sofa"], "meta": {}, "name": "sofa", "original_file_path": "models/severityscores/sofa.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/sofa.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Sequential Organ Failure Assessment (SOFA)\n-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).\n-- This score is a measure of organ failure for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SOFA:\n--    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendon\u00e7a,\n--    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.\n--    \"The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure.\"\n--    Intensive care medicine 22, no. 7 (1996): 707-710.\n\n-- Variables used in SOFA:\n--  GCS, MAP, FiO2, Ventilation status (sourced FROM chartevents)\n--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced FROM labevents)\n--  Dobutamine, Epinephrine, Norepinephrine (sourced FROM inputevents_mv and INPUTEVENTS_CV)\n--  Urine output (sourced from OUTPUTEVENTS)\n\n-- The following views required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vitals_first_day - generated by vitals-first-day.sql\n--  3) gcs_first_day - generated by gcs-first-day.sql\n--  4) labs_first_day - generated by labs-first-day.sql\n--  5) blood_gas_first_day_arterial - generated by blood-gas-first-day-arterial.sql\n--  6) echodata - generated by echo-data.sql\n--  7) ventilation_durations - generated by ventilation_durations.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\nwith wt AS\n(\n  SELECT ie.icustay_id\n    -- ensure weight is measured in kg\n    , avg(CASE\n        WHEN itemid IN (762, 763, 3723, 3580, 226512)\n          THEN valuenum\n        -- convert lbs to kgs\n        WHEN itemid IN (3581)\n          THEN valuenum * 0.45359237\n        WHEN itemid IN (3582)\n          THEN valuenum * 0.0283495231\n        ELSE null\n      END) AS weight\n\n  FROM icustays ie\n  left join chartevents c\n    on ie.icustay_id = c.icustay_id\n  WHERE valuenum IS NOT NULL\n  AND itemid IN\n  (\n    762, 763, 3723, 3580,                     -- Weight Kg\n    3581,                                     -- Weight lb\n    3582,                                     -- Weight oz\n    226512 -- Metavision: Admission Weight (Kg)\n  )\n  AND valuenum != 0\n  and charttime between DATETIME_SUB(ie.intime, INTERVAL '1' DAY) and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  -- exclude rows marked as error\n  AND (c.error IS NULL OR c.error = 0)\n  group by ie.icustay_id\n)\n-- 5% of patients are missing a weight, but we can impute weight using their echo notes\n, echo2 as(\n  select ie.icustay_id, avg(weight * 0.45359237) as weight\n  FROM icustays ie\n  left join {{ref('echo_data')}} echo\n    on ie.hadm_id = echo.hadm_id\n    and echo.charttime > DATETIME_SUB(ie.intime, INTERVAL '7' DAY)\n    and echo.charttime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, vaso_cv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case\n            when itemid = 30047 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid = 30120 then rate -- measured in mcgkgmin ** there are clear errors, perhaps actually mcgmin\n            else null\n          end) as rate_norepinephrine\n\n    , max(case\n            when itemid =  30044 then rate / coalesce(wt.weight,ec.weight) -- measured in mcgmin\n            when itemid in (30119,30309) then rate -- measured in mcgkgmin\n            else null\n          end) as rate_epinephrine\n\n    , max(case when itemid in (30043,30307) then rate end) as rate_dopamine\n    , max(case when itemid in (30042,30306) then rate end) as rate_dobutamine\n\n  FROM icustays ie\n  inner join inputevents_cv cv\n    on ie.icustay_id = cv.icustay_id and cv.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  left join wt\n    on ie.icustay_id = wt.icustay_id\n  left join echo2 ec\n    on ie.icustay_id = ec.icustay_id\n  where itemid in (30047,30120,30044,30119,30309,30043,30307,30042,30306)\n  and rate is not null\n  group by ie.icustay_id\n)\n, vaso_mv as\n(\n  select ie.icustay_id\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 221906 then rate end) as rate_norepinephrine\n    , max(case when itemid = 221289 then rate end) as rate_epinephrine\n    , max(case when itemid = 221662 then rate end) as rate_dopamine\n    , max(case when itemid = 221653 then rate end) as rate_dobutamine\n  FROM icustays ie\n  inner join inputevents_mv mv\n    on ie.icustay_id = mv.icustay_id and mv.starttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in (221906,221289,221662,221653)\n  -- 'Rewritten' orders are not delivered to the patient\n  and statusdescription != 'Rewritten'\n  group by ie.icustay_id\n)\n, pafi1 as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  select bg.icustay_id, bg.charttime\n  , pao2fio2\n  , case when vd.icustay_id is not null then 1 else 0 end as isvent\n  from {{ref('blood_gas_first_day_arterial')}} bg\n  left join {{ref('ventilation_durations')}} vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  order by bg.icustay_id, bg.charttime\n)\n, pafi2 as\n(\n  -- because pafi has an interaction between vent/PaO2:FiO2, we need two columns for the score\n  -- it can happen that the lowest unventilated PaO2/FiO2 is 68, but the lowest ventilated PaO2/FiO2 is 120\n  -- in this case, the SOFA score is 3, *not* 4.\n  select icustay_id\n  , min(case when isvent = 0 then pao2fio2 else null end) as pao2fio2_novent_min\n  , min(case when isvent = 1 then pao2fio2 else null end) as pao2fio2_vent_min\n  from pafi1\n  group by icustay_id\n)\n-- Aggregate the components for the score\n, scorecomp as\n(\nselect ie.icustay_id\n  , v.meanbp_min\n  , coalesce(cv.rate_norepinephrine, mv.rate_norepinephrine) as rate_norepinephrine\n  , coalesce(cv.rate_epinephrine, mv.rate_epinephrine) as rate_epinephrine\n  , coalesce(cv.rate_dopamine, mv.rate_dopamine) as rate_dopamine\n  , coalesce(cv.rate_dobutamine, mv.rate_dobutamine) as rate_dobutamine\n\n  , l.creatinine_max\n  , l.bilirubin_max\n  , l.platelet_min\n\n  , pf.pao2fio2_novent_min\n  , pf.pao2fio2_vent_min\n\n  , uo.urineoutput\n\n  , gcs.mingcs\nFROM icustays ie\nleft join vaso_cv cv\n  on ie.icustay_id = cv.icustay_id\nleft join vaso_mv mv\n  on ie.icustay_id = mv.icustay_id\nleft join pafi2 pf\n on ie.icustay_id = pf.icustay_id\nleft join {{ref('vitals_first_day')}} v\n  on ie.icustay_id = v.icustay_id\nleft join {{ref('labs_first_day')}} l\n  on ie.icustay_id = l.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\n)\n, scorecalc as\n(\n  -- Calculate the final score\n  -- note that if the underlying data is missing, the component is null\n  -- eventually these are treated as 0 (normal), but knowing when data is missing is useful for debugging\n  select icustay_id\n  -- Respiration\n  , case\n      when pao2fio2_vent_min   < 100 then 4\n      when pao2fio2_vent_min   < 200 then 3\n      when pao2fio2_novent_min < 300 then 2\n      when pao2fio2_novent_min < 400 then 1\n      when coalesce(pao2fio2_vent_min, pao2fio2_novent_min) is null then null\n      else 0\n    end as respiration\n\n  -- Coagulation\n  , case\n      when platelet_min < 20  then 4\n      when platelet_min < 50  then 3\n      when platelet_min < 100 then 2\n      when platelet_min < 150 then 1\n      when platelet_min is null then null\n      else 0\n    end as coagulation\n\n  -- Liver\n  , case\n      -- Bilirubin checks in mg/dL\n        when bilirubin_max >= 12.0 then 4\n        when bilirubin_max >= 6.0  then 3\n        when bilirubin_max >= 2.0  then 2\n        when bilirubin_max >= 1.2  then 1\n        when bilirubin_max is null then null\n        else 0\n      end as liver\n\n  -- Cardiovascular\n  , case\n      when rate_dopamine > 15 or rate_epinephrine >  0.1 or rate_norepinephrine >  0.1 then 4\n      when rate_dopamine >  5 or rate_epinephrine <= 0.1 or rate_norepinephrine <= 0.1 then 3\n      when rate_dopamine >  0 or rate_dobutamine > 0 then 2\n      when meanbp_min < 70 then 1\n      when coalesce(meanbp_min, rate_dopamine, rate_dobutamine, rate_epinephrine, rate_norepinephrine) is null then null\n      else 0\n    end as cardiovascular\n\n  -- Neurological failure (GCS)\n  , case\n      when (mingcs >= 13 and mingcs <= 14) then 1\n      when (mingcs >= 10 and mingcs <= 12) then 2\n      when (mingcs >=  6 and mingcs <=  9) then 3\n      when  mingcs <   6 then 4\n      when  mingcs is null then null\n  else 0 end\n    as cns\n\n  -- Renal failure - high creatinine or low urine output\n  , case\n    when (creatinine_max >= 5.0) then 4\n    when  urineoutput < 200 then 4\n    when (creatinine_max >= 3.5 and creatinine_max < 5.0) then 3\n    when  urineoutput < 500 then 3\n    when (creatinine_max >= 2.0 and creatinine_max < 3.5) then 2\n    when (creatinine_max >= 1.2 and creatinine_max < 2.0) then 1\n    when coalesce(urineoutput, creatinine_max) is null then null\n  else 0 end\n    as renal\n  from scorecomp\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- Combine all the scores to get SOFA\n  -- Impute 0 if the score is missing\n  , coalesce(respiration,0)\n  + coalesce(coagulation,0)\n  + coalesce(liver,0)\n  + coalesce(cardiovascular,0)\n  + coalesce(cns,0)\n  + coalesce(renal,0)\n  as SOFA\n, respiration\n, coagulation\n, liver\n, cardiovascular\n, cns\n, renal\nFROM icustays ie\nleft join scorecalc s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["echo_data"], ["blood_gas_first_day_arterial"], ["ventilation_durations"], ["vitals_first_day"], ["labs_first_day"], ["urine_output_first_day"], ["gcs_first_day"]], "relation_name": "\"postgres\".\"public\".\"sofa\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.sofa", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:14.527687Z", "name": "compile", "started_at": "2022-07-18T00:18:14.520906Z"}, {"completed_at": "2022-07-18T00:18:20.624950Z", "name": "execute", "started_at": "2022-07-18T00:18:14.528670Z"}]}, "unique_id": "model.mimic.sofa"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.sofa", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.627249Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": "2022-07-18T00:18:20.627890", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.ventilation_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.627980Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.ventilation_first_day", "index": 101, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": "2022-07-18T00:18:20.627890", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "101 of 107 START table model public.ventilation_first_day ...................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.628707Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.629886Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": "2022-07-18T00:18:20.627890", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.ventilation_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.630506Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.ventilation_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.630821Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.634381Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.635377Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.ventilation_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.635909Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.ventilation_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.646980Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.648360Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.648724Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.648983Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.659515Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.659816Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_first_day__dbt_tmp\"\n  as (\n    -- Determines if a patient is ventilated on the first day of their ICU stay.\n-- Creates a table with the result.\n-- Requires the ventilation_durations table, generated by ../ventilation-durations.sql\n\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- if vd.icustay_id is not null, then they have a valid ventilation event\n  -- in this case, we say they are ventilated\n  -- otherwise, they are not\n  , max(case\n      when vd.icustay_id is not null then 1\n    else 0 end) as vent\nFROM icustays ie\nleft join \"postgres\".\"public\".\"ventilation_durations\" vd\n  on ie.icustay_id = vd.icustay_id\n  and\n  (\n    -- ventilation duration overlaps with ICU admission -> vented on admission\n    (vd.starttime <= ie.intime and vd.endtime >= ie.intime)\n    -- ventilation started during the first day\n    OR (vd.starttime >= ie.intime and vd.starttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n  )\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\n\n\n  create  table \"postgres\".\"public\".\"ventilation_first_day__dbt_tmp\"\n  as (\n    -- Determines if a patient is ventilated on the first day of their ICU stay.\n-- Creates a table with the result.\n-- Requires the ventilation_durations table, generated by ../ventilation-durations.sql\n\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- if vd.icustay_id is not null, then they have a valid ventilation event\n  -- in this case, we say they are ventilated\n  -- otherwise, they are not\n  , max(case\n      when vd.icustay_id is not null then 1\n    else 0 end) as vent\nFROM icustays ie\nleft join \"postgres\".\"public\".\"ventilation_durations\" vd\n  on ie.icustay_id = vd.icustay_id\n  and\n  (\n    -- ventilation duration overlaps with ICU admission -> vented on admission\n    (vd.starttime <= ie.intime and vd.endtime >= ie.intime)\n    -- ventilation started during the first day\n    OR (vd.starttime >= ie.intime and vd.starttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n  )\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.660073Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.11, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.11 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.771011Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.777455Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\nalter table \"postgres\".\"public\".\"ventilation_first_day\" rename to \"ventilation_first_day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\nalter table \"postgres\".\"public\".\"ventilation_first_day\" rename to \"ventilation_first_day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.778033Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.779164Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.785709Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\nalter table \"postgres\".\"public\".\"ventilation_first_day__dbt_tmp\" rename to \"ventilation_first_day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\nalter table \"postgres\".\"public\".\"ventilation_first_day__dbt_tmp\" rename to \"ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.786027Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.786909Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.790470Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.790774Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.790998Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.797120Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.ventilation_first_day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.ventilation_first_day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.800948Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.ventilation_first_day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_first_day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.ventilation_first_day\"} */\ndrop table if exists \"postgres\".\"public\".\"ventilation_first_day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.801219Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.804509Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.807809Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.ventilation_first_day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.808070Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.ventilation_first_day", "execution_time": 0, "index": 101, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": "2022-07-18T00:18:20.627890", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "101 of 107 OK created table model public.ventilation_first_day ................. [\u001b[32mSELECT 61532\u001b[0m in 0.18s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.809062Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:20.809543", "node_name": "ventilation_first_day", "node_path": "firstday/ventilation_first_day.sql", "node_started_at": "2022-07-18T00:18:20.627890", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.ventilation_first_day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.17961621284484863, "failures": null, "message": "SELECT 61532", "node": {"alias": "ventilation_first_day", "build_path": "target/run/mimic/models/firstday/ventilation_first_day.sql", "checksum": {"checksum": "d4bc65b2a541ae1dd3021434f7f7147b4ba4863063f70bc9cb8c05817eb48047", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/firstday/ventilation_first_day.sql", "compiled_sql": "-- Determines if a patient is ventilated on the first day of their ICU stay.\n-- Creates a table with the result.\n-- Requires the ventilation_durations table, generated by ../ventilation-durations.sql\n\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- if vd.icustay_id is not null, then they have a valid ventilation event\n  -- in this case, we say they are ventilated\n  -- otherwise, they are not\n  , max(case\n      when vd.icustay_id is not null then 1\n    else 0 end) as vent\nFROM icustays ie\nleft join \"postgres\".\"public\".\"ventilation_durations\" vd\n  on ie.icustay_id = vd.icustay_id\n  and\n  (\n    -- ventilation duration overlaps with ICU admission -> vented on admission\n    (vd.starttime <= ie.intime and vd.endtime >= ie.intime)\n    -- ventilation started during the first day\n    OR (vd.starttime >= ie.intime and vd.starttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n  )\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5379434, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.ventilation_durations"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "firstday", "ventilation_first_day"], "meta": {}, "name": "ventilation_first_day", "original_file_path": "models/firstday/ventilation_first_day.sql", "package_name": "mimic", "patch_path": null, "path": "firstday/ventilation_first_day.sql", "raw_sql": "-- Determines if a patient is ventilated on the first day of their ICU stay.\n-- Creates a table with the result.\n-- Requires the ventilation_durations table, generated by ../ventilation-durations.sql\n\nselect\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- if vd.icustay_id is not null, then they have a valid ventilation event\n  -- in this case, we say they are ventilated\n  -- otherwise, they are not\n  , max(case\n      when vd.icustay_id is not null then 1\n    else 0 end) as vent\nFROM icustays ie\nleft join {{ref('ventilation_durations')}} vd\n  on ie.icustay_id = vd.icustay_id\n  and\n  (\n    -- ventilation duration overlaps with ICU admission -> vented on admission\n    (vd.starttime <= ie.intime and vd.endtime >= ie.intime)\n    -- ventilation started during the first day\n    OR (vd.starttime >= ie.intime and vd.starttime <= DATETIME_ADD(ie.intime, INTERVAL '1' DAY))\n  )\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id", "refs": [["ventilation_durations"]], "relation_name": "\"postgres\".\"public\".\"ventilation_first_day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.ventilation_first_day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:20.635295Z", "name": "compile", "started_at": "2022-07-18T00:18:20.630799Z"}, {"completed_at": "2022-07-18T00:18:20.807780Z", "name": "execute", "started_at": "2022-07-18T00:18:20.636361Z"}]}, "unique_id": "model.mimic.ventilation_first_day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.ventilation_first_day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.809800Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": "2022-07-18T00:18:20.810203", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.kdigo_stages", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.810273Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.kdigo_stages", "index": 102, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": "2022-07-18T00:18:20.810203", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "102 of 107 START table model public.kdigo_stages ............................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.811103Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.812324Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": "2022-07-18T00:18:20.810203", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.kdigo_stages", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.812615Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.kdigo_stages", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.812997Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.818022Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.818744Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.kdigo_stages", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.819049Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.827653Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.828377Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.828639Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.828827Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.836397Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.836788Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI according to KDIGO.\n-- AKI is calculated every time a creatinine or urine output measurement occurs.\n-- Baseline creatinine is defined as the lowest creatinine in the past 7 days.\n\n-- get creatinine stages\nwith cr_stg AS\n(\n  SELECT\n    cr.icustay_id\n    , cr.charttime\n    , cr.creat\n    , case\n        -- 3x baseline\n        when cr.creat >= (cr.creat_low_past_7day*3.0) then 3\n        -- *OR* cr >= 4.0 with associated increase\n        when cr.creat >= 4\n        -- For patients reaching Stage 3 by SCr >4.0 mg/dl\n        -- require that the patient first achieve ... acute increase >= 0.3 within 48 hr\n        -- *or* an increase of >= 1.5 times baseline\n        and (cr.creat_low_past_48hr <= 3.7 OR cr.creat >= (1.5*cr.creat_low_past_7day))\n            then 3 \n        -- TODO: initiation of RRT\n        when cr.creat >= (cr.creat_low_past_7day*2.0) then 2\n        when cr.creat >= (cr.creat_low_past_48hr+0.3) then 1\n        when cr.creat >= (cr.creat_low_past_7day*1.5) then 1\n    else 0 end as aki_stage_creat\n  FROM \"postgres\".\"public\".\"kdigo_creatinine\" cr\n)\n-- stages for UO / creat\n, uo_stg as\n(\n  select\n      uo.icustay_id\n    , uo.charttime\n    , uo.weight\n    , uo.uo_rt_6hr\n    , uo.uo_rt_12hr\n    , uo.uo_rt_24hr\n    -- AKI stages according to urine output\n    , CASE\n        WHEN uo.uo_rt_6hr IS NULL THEN NULL\n        -- require patient to be in ICU for at least 6 hours to stage UO\n        WHEN uo.charttime <= DATETIME_ADD(ie.intime, INTERVAL '6' HOUR) THEN 0\n        -- require the UO rate to be calculated over half the period\n        -- i.e. for uo rate over 24 hours, require documentation at least 12 hr apart\n        WHEN uo.uo_tm_24hr >= 11 AND uo.uo_rt_24hr < 0.3 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr = 0 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr < 0.5 THEN 2\n        WHEN uo.uo_tm_6hr >= 2 AND uo.uo_rt_6hr  < 0.5 THEN 1\n    ELSE 0 END AS aki_stage_uo\n  from \"postgres\".\"public\".\"kdigo_uo\" uo\n  INNER JOIN icustays ie\n    ON uo.icustay_id = ie.icustay_id\n)\n-- get all charttimes documented\n, tm_stg AS\n(\n    SELECT\n      icustay_id, charttime\n    FROM cr_stg\n    UNION DISTINCT\n    SELECT\n      icustay_id, charttime\n    FROM uo_stg\n)\nselect\n    ie.icustay_id\n  , tm.charttime\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage\nFROM icustays ie\n-- get all possible charttimes as listed in tm_stg\nLEFT JOIN tm_stg tm\n  ON ie.icustay_id = tm.icustay_id\nLEFT JOIN cr_stg cr\n  ON ie.icustay_id = cr.icustay_id\n  AND tm.charttime = cr.charttime\nLEFT JOIN uo_stg uo\n  ON ie.icustay_id = uo.icustay_id\n  AND tm.charttime = uo.charttime\norder by ie.icustay_id, tm.charttime\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI according to KDIGO.\n-- AKI is calculated every time a creatinine or urine output measurement occurs.\n-- Baseline creatinine is defined as the lowest creatinine in the past 7 days.\n\n-- get creatinine stages\nwith cr_stg AS\n(\n  SELECT\n    cr.icustay_id\n    , cr.charttime\n    , cr.creat\n    , case\n        -- 3x baseline\n        when cr.creat >= (cr.creat_low_past_7day*3.0) then 3\n        -- *OR* cr >= 4.0 with associated increase\n        when cr.creat >= 4\n        -- For patients reaching Stage 3 by SCr >4.0 mg/dl\n        -- require that the patient first achieve ... acute increase >= 0.3 within 48 hr\n        -- *or* an increase of >= 1.5 times baseline\n        and (cr.creat_low_past_48hr <= 3.7 OR cr.creat >= (1.5*cr.creat_low_past_7day))\n            then 3 \n        -- TODO: initiation of RRT\n        when cr.creat >= (cr.creat_low_past_7day*2.0) then 2\n        when cr.creat >= (cr.creat_low_past_48hr+0.3) then 1\n        when cr.creat >= (cr.creat_low_past_7day*1.5) then 1\n    else 0 end as aki_stage_creat\n  FROM \"postgres\".\"public\".\"kdigo_creatinine\" cr\n)\n-- stages for UO / creat\n, uo_stg as\n(\n  select\n      uo.icustay_id\n    , uo.charttime\n    , uo.weight\n    , uo.uo_rt_6hr\n    , uo.uo_rt_12hr\n    , uo.uo_rt_24hr\n    -- AKI stages according to urine output\n    , CASE\n        WHEN uo.uo_rt_6hr IS NULL THEN NULL\n        -- require patient to be in ICU for at least 6 hours to stage UO\n        WHEN uo.charttime <= DATETIME_ADD(ie.intime, INTERVAL '6' HOUR) THEN 0\n        -- require the UO rate to be calculated over half the period\n        -- i.e. for uo rate over 24 hours, require documentation at least 12 hr apart\n        WHEN uo.uo_tm_24hr >= 11 AND uo.uo_rt_24hr < 0.3 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr = 0 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr < 0.5 THEN 2\n        WHEN uo.uo_tm_6hr >= 2 AND uo.uo_rt_6hr  < 0.5 THEN 1\n    ELSE 0 END AS aki_stage_uo\n  from \"postgres\".\"public\".\"kdigo_uo\" uo\n  INNER JOIN icustays ie\n    ON uo.icustay_id = ie.icustay_id\n)\n-- get all charttimes documented\n, tm_stg AS\n(\n    SELECT\n      icustay_id, charttime\n    FROM cr_stg\n    UNION DISTINCT\n    SELECT\n      icustay_id, charttime\n    FROM uo_stg\n)\nselect\n    ie.icustay_id\n  , tm.charttime\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage\nFROM icustays ie\n-- get all possible charttimes as listed in tm_stg\nLEFT JOIN tm_stg tm\n  ON ie.icustay_id = tm.icustay_id\nLEFT JOIN cr_stg cr\n  ON ie.icustay_id = cr.icustay_id\n  AND tm.charttime = cr.charttime\nLEFT JOIN uo_stg uo\n  ON ie.icustay_id = uo.icustay_id\n  AND tm.charttime = uo.charttime\norder by ie.icustay_id, tm.charttime\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:20.837062Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 7.7, "status": "SELECT 3423326"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 3423326 in 7.7 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.539733Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.546072Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages\" rename to \"kdigo_stages__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages\" rename to \"kdigo_stages__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.546623Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.547850Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.551840Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages__dbt_tmp\" rename to \"kdigo_stages\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages__dbt_tmp\" rename to \"kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.552099Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.552814Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.556074Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.556477Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.556835Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.560643Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.562912Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.563318Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.568508Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.572198Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.572474Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.kdigo_stages", "execution_time": 7, "index": 102, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": "2022-07-18T00:18:20.810203", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "status": "SELECT 3423326", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "102 of 107 OK created table model public.kdigo_stages .......................... [\u001b[32mSELECT 3423326\u001b[0m in 7.76s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.573668Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:28.574284", "node_name": "kdigo_stages", "node_path": "organfailure/kdigo_stages.sql", "node_started_at": "2022-07-18T00:18:20.810203", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages"}, "run_result": {"adapter_response": {"_message": "SELECT 3423326", "code": "SELECT", "rows_affected": 3423326}, "agate_table": null, "execution_time": 7.761392116546631, "failures": null, "message": "SELECT 3423326", "node": {"alias": "kdigo_stages", "build_path": "target/run/mimic/models/organfailure/kdigo_stages.sql", "checksum": {"checksum": "a1ea832868bb7e265661681b0c9e7cfa085c68ec05408feef9f7483b6b657d2a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/kdigo_stages.sql", "compiled_sql": "-- This query checks if the patient had AKI according to KDIGO.\n-- AKI is calculated every time a creatinine or urine output measurement occurs.\n-- Baseline creatinine is defined as the lowest creatinine in the past 7 days.\n\n-- get creatinine stages\nwith cr_stg AS\n(\n  SELECT\n    cr.icustay_id\n    , cr.charttime\n    , cr.creat\n    , case\n        -- 3x baseline\n        when cr.creat >= (cr.creat_low_past_7day*3.0) then 3\n        -- *OR* cr >= 4.0 with associated increase\n        when cr.creat >= 4\n        -- For patients reaching Stage 3 by SCr >4.0 mg/dl\n        -- require that the patient first achieve ... acute increase >= 0.3 within 48 hr\n        -- *or* an increase of >= 1.5 times baseline\n        and (cr.creat_low_past_48hr <= 3.7 OR cr.creat >= (1.5*cr.creat_low_past_7day))\n            then 3 \n        -- TODO: initiation of RRT\n        when cr.creat >= (cr.creat_low_past_7day*2.0) then 2\n        when cr.creat >= (cr.creat_low_past_48hr+0.3) then 1\n        when cr.creat >= (cr.creat_low_past_7day*1.5) then 1\n    else 0 end as aki_stage_creat\n  FROM \"postgres\".\"public\".\"kdigo_creatinine\" cr\n)\n-- stages for UO / creat\n, uo_stg as\n(\n  select\n      uo.icustay_id\n    , uo.charttime\n    , uo.weight\n    , uo.uo_rt_6hr\n    , uo.uo_rt_12hr\n    , uo.uo_rt_24hr\n    -- AKI stages according to urine output\n    , CASE\n        WHEN uo.uo_rt_6hr IS NULL THEN NULL\n        -- require patient to be in ICU for at least 6 hours to stage UO\n        WHEN uo.charttime <= DATETIME_ADD(ie.intime, INTERVAL '6' HOUR) THEN 0\n        -- require the UO rate to be calculated over half the period\n        -- i.e. for uo rate over 24 hours, require documentation at least 12 hr apart\n        WHEN uo.uo_tm_24hr >= 11 AND uo.uo_rt_24hr < 0.3 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr = 0 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr < 0.5 THEN 2\n        WHEN uo.uo_tm_6hr >= 2 AND uo.uo_rt_6hr  < 0.5 THEN 1\n    ELSE 0 END AS aki_stage_uo\n  from \"postgres\".\"public\".\"kdigo_uo\" uo\n  INNER JOIN icustays ie\n    ON uo.icustay_id = ie.icustay_id\n)\n-- get all charttimes documented\n, tm_stg AS\n(\n    SELECT\n      icustay_id, charttime\n    FROM cr_stg\n    UNION DISTINCT\n    SELECT\n      icustay_id, charttime\n    FROM uo_stg\n)\nselect\n    ie.icustay_id\n  , tm.charttime\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage\nFROM icustays ie\n-- get all possible charttimes as listed in tm_stg\nLEFT JOIN tm_stg tm\n  ON ie.icustay_id = tm.icustay_id\nLEFT JOIN cr_stg cr\n  ON ie.icustay_id = cr.icustay_id\n  AND tm.charttime = cr.charttime\nLEFT JOIN uo_stg uo\n  ON ie.icustay_id = uo.icustay_id\n  AND tm.charttime = uo.charttime\norder by ie.icustay_id, tm.charttime", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5556529, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.kdigo_creatinine", "model.mimic.kdigo_uo"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "kdigo_stages"], "meta": {}, "name": "kdigo_stages", "original_file_path": "models/organfailure/kdigo_stages.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/kdigo_stages.sql", "raw_sql": "-- This query checks if the patient had AKI according to KDIGO.\n-- AKI is calculated every time a creatinine or urine output measurement occurs.\n-- Baseline creatinine is defined as the lowest creatinine in the past 7 days.\n\n-- get creatinine stages\nwith cr_stg AS\n(\n  SELECT\n    cr.icustay_id\n    , cr.charttime\n    , cr.creat\n    , case\n        -- 3x baseline\n        when cr.creat >= (cr.creat_low_past_7day*3.0) then 3\n        -- *OR* cr >= 4.0 with associated increase\n        when cr.creat >= 4\n        -- For patients reaching Stage 3 by SCr >4.0 mg/dl\n        -- require that the patient first achieve ... acute increase >= 0.3 within 48 hr\n        -- *or* an increase of >= 1.5 times baseline\n        and (cr.creat_low_past_48hr <= 3.7 OR cr.creat >= (1.5*cr.creat_low_past_7day))\n            then 3 \n        -- TODO: initiation of RRT\n        when cr.creat >= (cr.creat_low_past_7day*2.0) then 2\n        when cr.creat >= (cr.creat_low_past_48hr+0.3) then 1\n        when cr.creat >= (cr.creat_low_past_7day*1.5) then 1\n    else 0 end as aki_stage_creat\n  FROM {{ ref('kdigo_creatinine' )}} cr\n)\n-- stages for UO / creat\n, uo_stg as\n(\n  select\n      uo.icustay_id\n    , uo.charttime\n    , uo.weight\n    , uo.uo_rt_6hr\n    , uo.uo_rt_12hr\n    , uo.uo_rt_24hr\n    -- AKI stages according to urine output\n    , CASE\n        WHEN uo.uo_rt_6hr IS NULL THEN NULL\n        -- require patient to be in ICU for at least 6 hours to stage UO\n        WHEN uo.charttime <= DATETIME_ADD(ie.intime, INTERVAL '6' HOUR) THEN 0\n        -- require the UO rate to be calculated over half the period\n        -- i.e. for uo rate over 24 hours, require documentation at least 12 hr apart\n        WHEN uo.uo_tm_24hr >= 11 AND uo.uo_rt_24hr < 0.3 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr = 0 THEN 3\n        WHEN uo.uo_tm_12hr >= 5 AND uo.uo_rt_12hr < 0.5 THEN 2\n        WHEN uo.uo_tm_6hr >= 2 AND uo.uo_rt_6hr  < 0.5 THEN 1\n    ELSE 0 END AS aki_stage_uo\n  from {{ref('kdigo_uo')}} uo\n  INNER JOIN icustays ie\n    ON uo.icustay_id = ie.icustay_id\n)\n-- get all charttimes documented\n, tm_stg AS\n(\n    SELECT\n      icustay_id, charttime\n    FROM cr_stg\n    UNION DISTINCT\n    SELECT\n      icustay_id, charttime\n    FROM uo_stg\n)\nselect\n    ie.icustay_id\n  , tm.charttime\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage\nFROM icustays ie\n-- get all possible charttimes as listed in tm_stg\nLEFT JOIN tm_stg tm\n  ON ie.icustay_id = tm.icustay_id\nLEFT JOIN cr_stg cr\n  ON ie.icustay_id = cr.icustay_id\n  AND tm.charttime = cr.charttime\nLEFT JOIN uo_stg uo\n  ON ie.icustay_id = uo.icustay_id\n  AND tm.charttime = uo.charttime\norder by ie.icustay_id, tm.charttime", "refs": [["kdigo_creatinine"], ["kdigo_uo"]], "relation_name": "\"postgres\".\"public\".\"kdigo_stages\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.kdigo_stages", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:20.818628Z", "name": "compile", "started_at": "2022-07-18T00:18:20.812948Z"}, {"completed_at": "2022-07-18T00:18:28.572167Z", "name": "execute", "started_at": "2022-07-18T00:18:20.819271Z"}]}, "unique_id": "model.mimic.kdigo_stages"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.kdigo_stages", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.574457Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": "2022-07-18T00:18:28.574965", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.apsiii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.575024Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.apsiii", "index": 103, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": "2022-07-18T00:18:28.574965", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "103 of 107 START table model public.apsiii ..................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.575828Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.577041Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": "2022-07-18T00:18:28.574965", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.apsiii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.577365Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.apsiii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.577839Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.586502Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.587705Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.apsiii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.588140Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.apsiii\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.602844Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.603670Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.603945Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.604167Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.612877Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.613639Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\n\n\n  create  table \"postgres\".\"public\".\"apsiii__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Acute Physiology Score III (APS III)\n-- This query extracts the acute physiology score III.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for APS III:\n--    Knaus WA, Wagner DP, Draper EA, Zimmerman JE, Bergner M, Bastos PG, Sirio CA, Murphy DJ, Lotring T, Damiano A.\n--    The APACHE III prognostic system. Risk prediction of hospital mortality for critically ill hospitalized adults.\n--    Chest Journal. 1991 Dec 1100(6):1619-36.\n\n-- Reference for the equation for calibrating APS III to hospital mortality:\n--    Johnson, A. E. W. (2015). Mortality prediction and acuity assessment in critical care.\n--    University of Oxford, Oxford, UK.\n\n-- Variables used in APS III:\n--  GCS\n--  VITALS: Heart rate, mean blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap, chronic dialysis\n--  IO: urine output\n--  LABS: pao2, A-aDO2, hematocrit, WBC, creatinine\n--        , blood urea nitrogen, sodium, albumin, bilirubin, glucose, pH, pCO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate icustay_ids.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- List of TODO:\n-- The site of temperature is not incorporated. Axillary measurements should be increased by 1 degree.\n-- Unfortunately the data for metavision is not available at the moment.\n--  674 | Temp. Site\n--  224642 | Temperature Site\n\nwith pa as\n(\n  select bg.icustay_id, bg.charttime\n  , po2 as PaO2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.po2 DESC) as rn\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is null -- patient is *not* ventilated\n  -- and fio2 < 50, or if no fio2, assume room air\n  AND coalesce(fio2, fio2_chartevents, 21) < 50\n  AND bg.po2 IS NOT NULL\n)\n, aa as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , bg.aado2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.aado2 DESC) as rn\n  -- row number indicating the highest AaDO2\n  from blood_gas_first_day_arterial bg\n  INNER JOIN ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is not null -- patient is ventilated\n  AND coalesce(fio2, fio2_chartevents) >= 50\n  AND bg.aado2 IS NOT NULL\n)\n-- because ph/pco2 rules are an interaction *within* a blood gas, we calculate them here\n-- the worse score is then taken for the final calculation\n, acidbase as\n(\n  select bg.icustay_id\n  , ph, pco2 as paco2\n  , case\n      when ph is null or pco2 is null then null\n      when ph < 7.20 then\n        case\n          when pco2 < 50 then 12\n          else 4\n        end\n      when ph < 7.30 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 40 then 6\n          when pco2 < 50 then 3\n          else 2\n        end\n      when ph < 7.35 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.45 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.50 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 35 then 0\n          when pco2 < 45 then 2\n          else 12\n        end\n      when ph < 7.60 then\n        case\n          when pco2 < 40 then 3\n          else 12\n        end\n      else -- ph >= 7.60\n        case\n          when pco2 < 25 then 0\n          when pco2 < 40 then 3\n          else 12\n        end\n    end as acidbase_score\n  from blood_gas_first_day_arterial bg\n  where ph is not null and pco2 is not null\n)\n, acidbase_max as\n(\n  select icustay_id, acidbase_score, ph, paco2\n    -- create integer which indexes maximum value of score with 1\n  , ROW_NUMBER() over (partition by icustay_id ORDER BY acidbase_score DESC) as acidbase_rn\n  from acidbase\n)\n-- define acute renal failure (ARF) as:\n--  creatinine >=1.5 mg/dl\n--  and urine output <410 cc/day\n--  and no chronic dialysis\n, arf as\n(\n  select ie.icustay_id\n    , case\n        when labs.creatinine_max >= 1.5\n        and  uo.urineoutput < 410\n        -- acute renal failure is only coded if the patient is not on chronic dialysis\n        -- we use ICD-9 coding of ESRD as a proxy for chronic dialysis\n        and  icd.ckd = 0\n          then 1\n      else 0 end as arf\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"urine_output_first_day\" uo\n    on ie.icustay_id = uo.icustay_id\n  left join \"postgres\".\"public\".\"labs_first_day\" labs\n    on ie.icustay_id = labs.icustay_id\n  left join\n  (\n    select hadm_id\n      , max(case\n          -- severe kidney failure requiring use of dialysis\n          when icd9_code in  ('5854','5855','5856') then 1\n          -- we do not include 5859 as that is sometimes coded for acute-on-chronic ARF\n        else 0 end)\n      as ckd\n    from diagnoses_icd\n    group by hadm_id\n  ) icd\n    on ie.hadm_id = icd.hadm_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , vital.heartrate_min\n      , vital.heartrate_max\n      , vital.meanbp_min\n      , vital.meanbp_max\n      , vital.tempc_min\n      , vital.tempc_max\n      , vital.resprate_min\n      , vital.resprate_max\n\n      , pa.pao2\n      , aa.aado2\n\n      , ab.ph\n      , ab.paco2\n      , ab.acidbase_score\n\n      , labs.hematocrit_min\n      , labs.hematocrit_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.creatinine_min\n      , labs.creatinine_max\n      , labs.bun_min\n      , labs.bun_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.albumin_min\n      , labs.albumin_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , case\n          when labs.glucose_max is null and vital.glucose_max is null\n            then null\n          when labs.glucose_max is null or vital.glucose_max > labs.glucose_max\n            then vital.glucose_max\n          when vital.glucose_max is null or labs.glucose_max > vital.glucose_max\n            then labs.glucose_max\n          else labs.glucose_max -- if equal, just pick labs\n        end as glucose_max\n\n      , case\n          when labs.glucose_min is null and vital.glucose_min is null\n            then null\n          when labs.glucose_min is null or vital.glucose_min < labs.glucose_min\n            then vital.glucose_min\n          when vital.glucose_min is null or labs.glucose_min < vital.glucose_min\n            then labs.glucose_min\n          else labs.glucose_min -- if equal, just pick labs\n        end as glucose_min\n\n      -- , labs.bicarbonate_min\n      -- , labs.bicarbonate_max\n      , vent.vent\n      , uo.urineoutput\n      -- gcs and its components\n      , gcs.mingcs\n      , gcs.gcsmotor, gcs.gcsverbal,  gcs.gcseyes, gcs.endotrachflag\n      -- acute renal failure\n      , arf.arf as arf\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views - the row number filters to 1 row per icustay_id\nleft join pa\n  on  ie.icustay_id = pa.icustay_id\n  and pa.rn = 1\nleft join aa\n  on  ie.icustay_id = aa.icustay_id\n  and aa.rn = 1\nleft join acidbase_max ab\n  on  ie.icustay_id = ab.icustay_id\n  and ab.acidbase_rn = 1\nleft join arf\n  on ie.icustay_id = arf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n-- First, we calculate the score for the minimum values\n, score_min as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n  , case\n      when heartrate_min is null then null\n      when heartrate_min <   40 then 8\n      when heartrate_min <   50 then 5\n      when heartrate_min <  100 then 0\n      when heartrate_min <  110 then 1\n      when heartrate_min <  120 then 5\n      when heartrate_min <  140 then 7\n      when heartrate_min <  155 then 13\n      when heartrate_min >= 155 then 17\n    end as hr_score\n\n  , case\n      when meanbp_min is null then null\n      when meanbp_min <   40 then 23\n      when meanbp_min <   60 then 15\n      when meanbp_min <   70 then 7\n      when meanbp_min <   80 then 6\n      when meanbp_min <  100 then 0\n      when meanbp_min <  120 then 4\n      when meanbp_min <  130 then 7\n      when meanbp_min <  140 then 9\n      when meanbp_min >= 140 then 10\n    end as meanbp_score\n\n  -- TODO: add 1 degree to axillary measurements\n  , case\n      when tempc_min is null then null\n      when tempc_min <  33.0 then 20\n      when tempc_min <  33.5 then 16\n      when tempc_min <  34.0 then 13\n      when tempc_min <  35.0 then 8\n      when tempc_min <  36.0 then 2\n      when tempc_min <  40.0 then 0\n      when tempc_min >= 40.0 then 4\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      -- special case for ventilated patients\n      when vent = 1 and resprate_min < 14 then 0\n      when resprate_min <   6 then 17\n      when resprate_min <  12 then 8\n      when resprate_min <  14 then 7\n      when resprate_min <  25 then 0\n      when resprate_min <  35 then 6\n      when resprate_min <  40 then 9\n      when resprate_min <  50 then 11\n      when resprate_min >= 50 then 18\n    end as resprate_score\n\n  , case\n      when hematocrit_min is null then null\n      when hematocrit_min <   41.0 then 3\n      when hematocrit_min <   50.0 then 0\n      when hematocrit_min >=  50.0 then 3\n    end as hematocrit_score\n\n  , case\n      when wbc_min is null then null\n      when wbc_min <   1.0 then 19\n      when wbc_min <   3.0 then 5\n      when wbc_min <  20.0 then 0\n      when wbc_min <  25.0 then 1\n      when wbc_min >= 25.0 then 5\n    end as wbc_score\n\n  , case\n      when creatinine_min is null then null\n      when arf = 1 and creatinine_min <  1.5 then 0\n      when arf = 1 and creatinine_min >= 1.5 then 10\n      when creatinine_min <   0.5 then 3\n      when creatinine_min <   1.5 then 0\n      when creatinine_min <  1.95 then 4\n      when creatinine_min >= 1.95 then 7\n    end as creatinine_score\n\n  , case\n      when bun_min is null then null\n      when bun_min <  17.0 then 0\n      when bun_min <  20.0 then 2\n      when bun_min <  40.0 then 7\n      when bun_min <  80.0 then 11\n      when bun_min >= 80.0 then 12\n    end as bun_score\n\n  , case\n      when sodium_min is null then null\n      when sodium_min <  120 then 3\n      when sodium_min <  135 then 2\n      when sodium_min <  155 then 0\n      when sodium_min >= 155 then 4\n    end as sodium_score\n\n  , case\n      when albumin_min is null then null\n      when albumin_min <  2.0 then 11\n      when albumin_min <  2.5 then 6\n      when albumin_min <  4.5 then 0\n      when albumin_min >= 4.5 then 4\n    end as albumin_score\n\n  , case\n      when bilirubin_min is null then null\n      when bilirubin_min <  2.0 then 0\n      when bilirubin_min <  3.0 then 5\n      when bilirubin_min <  5.0 then 6\n      when bilirubin_min <  8.0 then 8\n      when bilirubin_min >= 8.0 then 16\n    end as bilirubin_score\n\n  , case\n      when glucose_min is null then null\n      when glucose_min <   40 then 8\n      when glucose_min <   60 then 9\n      when glucose_min <  200 then 0\n      when glucose_min <  350 then 3\n      when glucose_min >= 350 then 5\n    end as glucose_score\n\nfrom cohort\n)\n, score_max as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n    , case\n        when heartrate_max is null then null\n        when heartrate_max <   40 then 8\n        when heartrate_max <   50 then 5\n        when heartrate_max <  100 then 0\n        when heartrate_max <  110 then 1\n        when heartrate_max <  120 then 5\n        when heartrate_max <  140 then 7\n        when heartrate_max <  155 then 13\n        when heartrate_max >= 155 then 17\n      end as hr_score\n\n    , case\n        when meanbp_max is null then null\n        when meanbp_max <   40 then 23\n        when meanbp_max <   60 then 15\n        when meanbp_max <   70 then 7\n        when meanbp_max <   80 then 6\n        when meanbp_max <  100 then 0\n        when meanbp_max <  120 then 4\n        when meanbp_max <  130 then 7\n        when meanbp_max <  140 then 9\n        when meanbp_max >= 140 then 10\n      end as meanbp_score\n\n    -- TODO: add 1 degree to axillary measurements\n    , case\n        when tempc_max is null then null\n        when tempc_max <  33.0 then 20\n        when tempc_max <  33.5 then 16\n        when tempc_max <  34.0 then 13\n        when tempc_max <  35.0 then 8\n        when tempc_max <  36.0 then 2\n        when tempc_max <  40.0 then 0\n        when tempc_max >= 40.0 then 4\n      end as temp_score\n\n    , case\n        when resprate_max is null then null\n        -- special case for ventilated patients\n        when vent = 1 and resprate_max < 14 then 0\n        when resprate_max <   6 then 17\n        when resprate_max <  12 then 8\n        when resprate_max <  14 then 7\n        when resprate_max <  25 then 0\n        when resprate_max <  35 then 6\n        when resprate_max <  40 then 9\n        when resprate_max <  50 then 11\n        when resprate_max >= 50 then 18\n      end as resprate_score\n\n    , case\n        when hematocrit_max is null then null\n        when hematocrit_max <   41.0 then 3\n        when hematocrit_max <   50.0 then 0\n        when hematocrit_max >=  50.0 then 3\n      end as hematocrit_score\n\n    , case\n        when wbc_max is null then null\n        when wbc_max <   1.0 then 19\n        when wbc_max <   3.0 then 5\n        when wbc_max <  20.0 then 0\n        when wbc_max <  25.0 then 1\n        when wbc_max >= 25.0 then 5\n      end as wbc_score\n\n    , case\n        when creatinine_max is null then null\n        when arf = 1 and creatinine_max <  1.5 then 0\n        when arf = 1 and creatinine_max >= 1.5 then 10\n        when creatinine_max <   0.5 then 3\n        when creatinine_max <   1.5 then 0\n        when creatinine_max <  1.95 then 4\n        when creatinine_max >= 1.95 then 7\n      end as creatinine_score\n\n    , case\n        when bun_max is null then null\n        when bun_max <  17.0 then 0\n        when bun_max <  20.0 then 2\n        when bun_max <  40.0 then 7\n        when bun_max <  80.0 then 11\n        when bun_max >= 80.0 then 12\n      end as bun_score\n\n    , case\n        when sodium_max is null then null\n        when sodium_max <  120 then 3\n        when sodium_max <  135 then 2\n        when sodium_max <  155 then 0\n        when sodium_max >= 155 then 4\n      end as sodium_score\n\n    , case\n        when albumin_max is null then null\n        when albumin_max <  2.0 then 11\n        when albumin_max <  2.5 then 6\n        when albumin_max <  4.5 then 0\n        when albumin_max >= 4.5 then 4\n      end as albumin_score\n\n    , case\n        when bilirubin_max is null then null\n        when bilirubin_max <  2.0 then 0\n        when bilirubin_max <  3.0 then 5\n        when bilirubin_max <  5.0 then 6\n        when bilirubin_max <  8.0 then 8\n        when bilirubin_max >= 8.0 then 16\n      end as bilirubin_score\n\n    , case\n        when glucose_max is null then null\n        when glucose_max <   40 then 8\n        when glucose_max <   60 then 9\n        when glucose_max <  200 then 0\n        when glucose_max <  350 then 3\n        when glucose_max >= 350 then 5\n      end as glucose_score\n\nfrom cohort\n)\n-- Combine together the scores for min/max, using the following rules:\n--  1) select the value furthest from a predefined normal value\n--  2) if both equidistant, choose the one which gives a worse score\n--  3) calculate score for acid-base abnormalities as it requires interactions\n-- sometimes the code is a bit redundant, i.e. we know the max would always be furthest from 0\n, scorecomp as\n(\n  select co.*\n  -- The rules for APS III require the definition of a \"worst\" value\n  -- This value is defined as whatever value is furthest from a predefined normal\n  -- e.g., for heart rate, worst is defined as furthest from 75\n  , case\n      when heartrate_max is null then null\n      when abs(heartrate_max-75) > abs(heartrate_min-75)\n        then smax.hr_score\n      when abs(heartrate_max-75) < abs(heartrate_min-75)\n        then smin.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score >= smin.hr_score\n        then smax.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score < smin.hr_score\n        then smin.hr_score\n    end as hr_score\n\n  , case\n      when meanbp_max is null then null\n      when abs(meanbp_max-90) > abs(meanbp_min-90)\n        then smax.meanbp_score\n      when abs(meanbp_max-90) < abs(meanbp_min-90)\n        then smin.meanbp_score\n      -- values are equidistant - pick the larger score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score >= smin.meanbp_score\n        then smax.meanbp_score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score < smin.meanbp_score\n        then smin.meanbp_score\n    end as meanbp_score\n\n  , case\n      when tempc_max is null then null\n      when abs(tempc_max-38) > abs(tempc_min-38)\n        then smax.temp_score\n      when abs(tempc_max-38) < abs(tempc_min-38)\n        then smin.temp_score\n      -- values are equidistant - pick the larger score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score >= smin.temp_score\n        then smax.temp_score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score < smin.temp_score\n        then smin.temp_score\n    end as temp_score\n\n  , case\n      when resprate_max is null then null\n      when abs(resprate_max-19) > abs(resprate_min-19)\n        then smax.resprate_score\n      when abs(resprate_max-19) < abs(resprate_min-19)\n        then smin.resprate_score\n      -- values are equidistant - pick the larger score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score >= smin.resprate_score\n        then smax.resprate_score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score < smin.resprate_score\n        then smin.resprate_score\n    end as resprate_score\n\n  , case\n      when hematocrit_max is null then null\n      when abs(hematocrit_max-45.5) > abs(hematocrit_min-45.5)\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) < abs(hematocrit_min-45.5)\n        then smin.hematocrit_score\n      -- values are equidistant - pick the larger score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score >= smin.hematocrit_score\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score < smin.hematocrit_score\n        then smin.hematocrit_score\n    end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when abs(wbc_max-11.5) > abs(wbc_min-11.5)\n        then smax.wbc_score\n      when abs(wbc_max-11.5) < abs(wbc_min-11.5)\n        then smin.wbc_score\n      -- values are equidistant - pick the larger score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score >= smin.wbc_score\n        then smax.wbc_score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score < smin.wbc_score\n        then smin.wbc_score\n    end as wbc_score\n\n\n  -- For some labs, \"furthest from normal\" doesn't make sense\n  -- e.g. creatinine w/ ARF, the minimum could be 0.3, and the max 1.6\n  -- while the minimum of 0.3 is \"further from 1\", seems like the max should be scored\n\n  , case\n      when creatinine_max is null then null\n      -- if they have arf then use the max to score\n      when arf = 1 then smax.creatinine_score\n      -- otherwise furthest from 1\n      when abs(creatinine_max-1) > abs(creatinine_min-1)\n        then smax.creatinine_score\n      when abs(creatinine_max-1) < abs(creatinine_min-1)\n        then smin.creatinine_score\n      -- values are equidistant\n      when smax.creatinine_score >= smin.creatinine_score\n        then smax.creatinine_score\n      when smax.creatinine_score < smin.creatinine_score\n        then smin.creatinine_score\n    end as creatinine_score\n\n  -- the rule for BUN is the furthest from 0.. equivalent to the max value\n  , case\n      when bun_max is null then null\n      else smax.bun_score\n    end as bun_score\n\n  , case\n      when sodium_max is null then null\n      when abs(sodium_max-145.5) > abs(sodium_min-145.5)\n        then smax.sodium_score\n      when abs(sodium_max-145.5) < abs(sodium_min-145.5)\n        then smin.sodium_score\n      -- values are equidistant - pick the larger score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score >= smin.sodium_score\n        then smax.sodium_score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score < smin.sodium_score\n        then smin.sodium_score\n    end as sodium_score\n\n  , case\n      when albumin_max is null then null\n      when abs(albumin_max-3.5) > abs(albumin_min-3.5)\n        then smax.albumin_score\n      when abs(albumin_max-3.5) < abs(albumin_min-3.5)\n        then smin.albumin_score\n      -- values are equidistant - pick the larger score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score >= smin.albumin_score\n        then smax.albumin_score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score < smin.albumin_score\n        then smin.albumin_score\n    end as albumin_score\n\n  , case\n      when bilirubin_max is null then null\n      else smax.bilirubin_score\n    end as bilirubin_score\n\n  , case\n      when glucose_max is null then null\n      when abs(glucose_max-130) > abs(glucose_min-130)\n        then smax.glucose_score\n      when abs(glucose_max-130) < abs(glucose_min-130)\n        then smin.glucose_score\n      -- values are equidistant - pick the larger score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score >= smin.glucose_score\n        then smax.glucose_score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score < smin.glucose_score\n        then smin.glucose_score\n    end as glucose_score\n\n\n  -- Below are interactions/special cases where only 1 value is important\n  , case\n      when urineoutput is null then null\n      when urineoutput <   400 then 15\n      when urineoutput <   600 then 8\n      when urineoutput <   900 then 7\n      when urineoutput <  1500 then 5\n      when urineoutput <  2000 then 4\n      when urineoutput <  4000 then 0\n      when urineoutput >= 4000 then 1\n  end as uo_score\n\n  , case\n      when endotrachflag = 1\n        -- here they are intubated, so their verbal score is inappropriate\n        -- normally you are supposed to use \"clinical judgement\"\n        -- we don't have that, so we just assume normal (as was done in the original study)\n        then 0\n      when gcseyes = 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 48\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 33\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 16\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor >= 5\n            -- highly unlikely clinical combination\n            then null\n          when gcsverbal >= 4\n            then null\n          end\n      when gcseyes > 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 29\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 24\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 15\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor = 5\n            then 13\n          when gcsverbal in (2,3) and gcsmotor = 6\n            then 10\n          when gcsverbal = 4 and gcsmotor in (1,2,3,4)\n            then 13\n          when gcsverbal = 4 and gcsmotor = 5\n            then 8\n          when gcsverbal = 4 and gcsmotor = 6\n            then 3\n          when gcsverbal = 5 and gcsmotor in (1,2,3,4,5)\n            then 3\n          when gcsverbal = 5 and gcsmotor = 6\n            then 0\n          end\n      else null\n    end as gcs_score\n\n  , case\n      when pao2 is null and aado2 is null\n        then null\n      when pao2 is not null then\n        case\n          when pao2 < 50 then 15\n          when pao2 < 70 then 5\n          when pao2 < 80 then 2\n        else 0 end\n      when aado2 is not null then\n        case\n          when aado2 <  100 then 0\n          when aado2 <  250 then 7\n          when aado2 <  350 then 9\n          when aado2 <  500 then 11\n          when aado2 >= 500 then 14\n        else 0 end\n      end as pao2_aado2_score\n\nfrom cohort co\nleft join score_min smin\n  on co.icustay_id = smin.icustay_id\nleft join score_max smax\n  on co.icustay_id = smax.icustay_id\n)\n-- tabulate the APS III using the scores from the worst values\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(hr_score,0)\n  + coalesce(meanbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(resprate_score,0)\n  + coalesce(pao2_aado2_score,0)\n  + coalesce(hematocrit_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(creatinine_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(albumin_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(glucose_score,0)\n  + coalesce(acidbase_score,0)\n  + coalesce(gcs_score,0)\n    as apsiii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, apsiii\n-- Calculate probability of hospital mortality using equation from Johnson 2014.\n, 1 / (1 + exp(- (-4.4360 + 0.04726*(apsiii) ))) as apsiii_prob\n, hr_score\n, meanbp_score\n, temp_score\n, resprate_score\n, pao2_aado2_score\n, hematocrit_score\n, wbc_score\n, creatinine_score\n, uo_score\n, bun_score\n, sodium_score\n, albumin_score\n, bilirubin_score\n, glucose_score\n, acidbase_score\n, gcs_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\n\n\n  create  table \"postgres\".\"public\".\"apsiii__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Acute Physiology Score III (APS III)\n-- This query extracts the acute physiology score III.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for APS III:\n--    Knaus WA, Wagner DP, Draper EA, Zimmerman JE, Bergner M, Bastos PG, Sirio CA, Murphy DJ, Lotring T, Damiano A.\n--    The APACHE III prognostic system. Risk prediction of hospital mortality for critically ill hospitalized adults.\n--    Chest Journal. 1991 Dec 1100(6):1619-36.\n\n-- Reference for the equation for calibrating APS III to hospital mortality:\n--    Johnson, A. E. W. (2015). Mortality prediction and acuity assessment in critical care.\n--    University of Oxford, Oxford, UK.\n\n-- Variables used in APS III:\n--  GCS\n--  VITALS: Heart rate, mean blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap, chronic dialysis\n--  IO: urine output\n--  LABS: pao2, A-aDO2, hematocrit, WBC, creatinine\n--        , blood urea nitrogen, sodium, albumin, bilirubin, glucose, pH, pCO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate icustay_ids.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- List of TODO:\n-- The site of temperature is not incorporated. Axillary measurements should be increased by 1 degree.\n-- Unfortunately the data for metavision is not available at the moment.\n--  674 | Temp. Site\n--  224642 | Temperature Site\n\nwith pa as\n(\n  select bg.icustay_id, bg.charttime\n  , po2 as PaO2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.po2 DESC) as rn\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is null -- patient is *not* ventilated\n  -- and fio2 < 50, or if no fio2, assume room air\n  AND coalesce(fio2, fio2_chartevents, 21) < 50\n  AND bg.po2 IS NOT NULL\n)\n, aa as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , bg.aado2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.aado2 DESC) as rn\n  -- row number indicating the highest AaDO2\n  from blood_gas_first_day_arterial bg\n  INNER JOIN ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is not null -- patient is ventilated\n  AND coalesce(fio2, fio2_chartevents) >= 50\n  AND bg.aado2 IS NOT NULL\n)\n-- because ph/pco2 rules are an interaction *within* a blood gas, we calculate them here\n-- the worse score is then taken for the final calculation\n, acidbase as\n(\n  select bg.icustay_id\n  , ph, pco2 as paco2\n  , case\n      when ph is null or pco2 is null then null\n      when ph < 7.20 then\n        case\n          when pco2 < 50 then 12\n          else 4\n        end\n      when ph < 7.30 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 40 then 6\n          when pco2 < 50 then 3\n          else 2\n        end\n      when ph < 7.35 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.45 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.50 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 35 then 0\n          when pco2 < 45 then 2\n          else 12\n        end\n      when ph < 7.60 then\n        case\n          when pco2 < 40 then 3\n          else 12\n        end\n      else -- ph >= 7.60\n        case\n          when pco2 < 25 then 0\n          when pco2 < 40 then 3\n          else 12\n        end\n    end as acidbase_score\n  from blood_gas_first_day_arterial bg\n  where ph is not null and pco2 is not null\n)\n, acidbase_max as\n(\n  select icustay_id, acidbase_score, ph, paco2\n    -- create integer which indexes maximum value of score with 1\n  , ROW_NUMBER() over (partition by icustay_id ORDER BY acidbase_score DESC) as acidbase_rn\n  from acidbase\n)\n-- define acute renal failure (ARF) as:\n--  creatinine >=1.5 mg/dl\n--  and urine output <410 cc/day\n--  and no chronic dialysis\n, arf as\n(\n  select ie.icustay_id\n    , case\n        when labs.creatinine_max >= 1.5\n        and  uo.urineoutput < 410\n        -- acute renal failure is only coded if the patient is not on chronic dialysis\n        -- we use ICD-9 coding of ESRD as a proxy for chronic dialysis\n        and  icd.ckd = 0\n          then 1\n      else 0 end as arf\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"urine_output_first_day\" uo\n    on ie.icustay_id = uo.icustay_id\n  left join \"postgres\".\"public\".\"labs_first_day\" labs\n    on ie.icustay_id = labs.icustay_id\n  left join\n  (\n    select hadm_id\n      , max(case\n          -- severe kidney failure requiring use of dialysis\n          when icd9_code in  ('5854','5855','5856') then 1\n          -- we do not include 5859 as that is sometimes coded for acute-on-chronic ARF\n        else 0 end)\n      as ckd\n    from diagnoses_icd\n    group by hadm_id\n  ) icd\n    on ie.hadm_id = icd.hadm_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , vital.heartrate_min\n      , vital.heartrate_max\n      , vital.meanbp_min\n      , vital.meanbp_max\n      , vital.tempc_min\n      , vital.tempc_max\n      , vital.resprate_min\n      , vital.resprate_max\n\n      , pa.pao2\n      , aa.aado2\n\n      , ab.ph\n      , ab.paco2\n      , ab.acidbase_score\n\n      , labs.hematocrit_min\n      , labs.hematocrit_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.creatinine_min\n      , labs.creatinine_max\n      , labs.bun_min\n      , labs.bun_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.albumin_min\n      , labs.albumin_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , case\n          when labs.glucose_max is null and vital.glucose_max is null\n            then null\n          when labs.glucose_max is null or vital.glucose_max > labs.glucose_max\n            then vital.glucose_max\n          when vital.glucose_max is null or labs.glucose_max > vital.glucose_max\n            then labs.glucose_max\n          else labs.glucose_max -- if equal, just pick labs\n        end as glucose_max\n\n      , case\n          when labs.glucose_min is null and vital.glucose_min is null\n            then null\n          when labs.glucose_min is null or vital.glucose_min < labs.glucose_min\n            then vital.glucose_min\n          when vital.glucose_min is null or labs.glucose_min < vital.glucose_min\n            then labs.glucose_min\n          else labs.glucose_min -- if equal, just pick labs\n        end as glucose_min\n\n      -- , labs.bicarbonate_min\n      -- , labs.bicarbonate_max\n      , vent.vent\n      , uo.urineoutput\n      -- gcs and its components\n      , gcs.mingcs\n      , gcs.gcsmotor, gcs.gcsverbal,  gcs.gcseyes, gcs.endotrachflag\n      -- acute renal failure\n      , arf.arf as arf\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views - the row number filters to 1 row per icustay_id\nleft join pa\n  on  ie.icustay_id = pa.icustay_id\n  and pa.rn = 1\nleft join aa\n  on  ie.icustay_id = aa.icustay_id\n  and aa.rn = 1\nleft join acidbase_max ab\n  on  ie.icustay_id = ab.icustay_id\n  and ab.acidbase_rn = 1\nleft join arf\n  on ie.icustay_id = arf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n-- First, we calculate the score for the minimum values\n, score_min as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n  , case\n      when heartrate_min is null then null\n      when heartrate_min <   40 then 8\n      when heartrate_min <   50 then 5\n      when heartrate_min <  100 then 0\n      when heartrate_min <  110 then 1\n      when heartrate_min <  120 then 5\n      when heartrate_min <  140 then 7\n      when heartrate_min <  155 then 13\n      when heartrate_min >= 155 then 17\n    end as hr_score\n\n  , case\n      when meanbp_min is null then null\n      when meanbp_min <   40 then 23\n      when meanbp_min <   60 then 15\n      when meanbp_min <   70 then 7\n      when meanbp_min <   80 then 6\n      when meanbp_min <  100 then 0\n      when meanbp_min <  120 then 4\n      when meanbp_min <  130 then 7\n      when meanbp_min <  140 then 9\n      when meanbp_min >= 140 then 10\n    end as meanbp_score\n\n  -- TODO: add 1 degree to axillary measurements\n  , case\n      when tempc_min is null then null\n      when tempc_min <  33.0 then 20\n      when tempc_min <  33.5 then 16\n      when tempc_min <  34.0 then 13\n      when tempc_min <  35.0 then 8\n      when tempc_min <  36.0 then 2\n      when tempc_min <  40.0 then 0\n      when tempc_min >= 40.0 then 4\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      -- special case for ventilated patients\n      when vent = 1 and resprate_min < 14 then 0\n      when resprate_min <   6 then 17\n      when resprate_min <  12 then 8\n      when resprate_min <  14 then 7\n      when resprate_min <  25 then 0\n      when resprate_min <  35 then 6\n      when resprate_min <  40 then 9\n      when resprate_min <  50 then 11\n      when resprate_min >= 50 then 18\n    end as resprate_score\n\n  , case\n      when hematocrit_min is null then null\n      when hematocrit_min <   41.0 then 3\n      when hematocrit_min <   50.0 then 0\n      when hematocrit_min >=  50.0 then 3\n    end as hematocrit_score\n\n  , case\n      when wbc_min is null then null\n      when wbc_min <   1.0 then 19\n      when wbc_min <   3.0 then 5\n      when wbc_min <  20.0 then 0\n      when wbc_min <  25.0 then 1\n      when wbc_min >= 25.0 then 5\n    end as wbc_score\n\n  , case\n      when creatinine_min is null then null\n      when arf = 1 and creatinine_min <  1.5 then 0\n      when arf = 1 and creatinine_min >= 1.5 then 10\n      when creatinine_min <   0.5 then 3\n      when creatinine_min <   1.5 then 0\n      when creatinine_min <  1.95 then 4\n      when creatinine_min >= 1.95 then 7\n    end as creatinine_score\n\n  , case\n      when bun_min is null then null\n      when bun_min <  17.0 then 0\n      when bun_min <  20.0 then 2\n      when bun_min <  40.0 then 7\n      when bun_min <  80.0 then 11\n      when bun_min >= 80.0 then 12\n    end as bun_score\n\n  , case\n      when sodium_min is null then null\n      when sodium_min <  120 then 3\n      when sodium_min <  135 then 2\n      when sodium_min <  155 then 0\n      when sodium_min >= 155 then 4\n    end as sodium_score\n\n  , case\n      when albumin_min is null then null\n      when albumin_min <  2.0 then 11\n      when albumin_min <  2.5 then 6\n      when albumin_min <  4.5 then 0\n      when albumin_min >= 4.5 then 4\n    end as albumin_score\n\n  , case\n      when bilirubin_min is null then null\n      when bilirubin_min <  2.0 then 0\n      when bilirubin_min <  3.0 then 5\n      when bilirubin_min <  5.0 then 6\n      when bilirubin_min <  8.0 then 8\n      when bilirubin_min >= 8.0 then 16\n    end as bilirubin_score\n\n  , case\n      when glucose_min is null then null\n      when glucose_min <   40 then 8\n      when glucose_min <   60 then 9\n      when glucose_min <  200 then 0\n      when glucose_min <  350 then 3\n      when glucose_min >= 350 then 5\n    end as glucose_score\n\nfrom cohort\n)\n, score_max as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n    , case\n        when heartrate_max is null then null\n        when heartrate_max <   40 then 8\n        when heartrate_max <   50 then 5\n        when heartrate_max <  100 then 0\n        when heartrate_max <  110 then 1\n        when heartrate_max <  120 then 5\n        when heartrate_max <  140 then 7\n        when heartrate_max <  155 then 13\n        when heartrate_max >= 155 then 17\n      end as hr_score\n\n    , case\n        when meanbp_max is null then null\n        when meanbp_max <   40 then 23\n        when meanbp_max <   60 then 15\n        when meanbp_max <   70 then 7\n        when meanbp_max <   80 then 6\n        when meanbp_max <  100 then 0\n        when meanbp_max <  120 then 4\n        when meanbp_max <  130 then 7\n        when meanbp_max <  140 then 9\n        when meanbp_max >= 140 then 10\n      end as meanbp_score\n\n    -- TODO: add 1 degree to axillary measurements\n    , case\n        when tempc_max is null then null\n        when tempc_max <  33.0 then 20\n        when tempc_max <  33.5 then 16\n        when tempc_max <  34.0 then 13\n        when tempc_max <  35.0 then 8\n        when tempc_max <  36.0 then 2\n        when tempc_max <  40.0 then 0\n        when tempc_max >= 40.0 then 4\n      end as temp_score\n\n    , case\n        when resprate_max is null then null\n        -- special case for ventilated patients\n        when vent = 1 and resprate_max < 14 then 0\n        when resprate_max <   6 then 17\n        when resprate_max <  12 then 8\n        when resprate_max <  14 then 7\n        when resprate_max <  25 then 0\n        when resprate_max <  35 then 6\n        when resprate_max <  40 then 9\n        when resprate_max <  50 then 11\n        when resprate_max >= 50 then 18\n      end as resprate_score\n\n    , case\n        when hematocrit_max is null then null\n        when hematocrit_max <   41.0 then 3\n        when hematocrit_max <   50.0 then 0\n        when hematocrit_max >=  50.0 then 3\n      end as hematocrit_score\n\n    , case\n        when wbc_max is null then null\n        when wbc_max <   1.0 then 19\n        when wbc_max <   3.0 then 5\n        when wbc_max <  20.0 then 0\n        when wbc_max <  25.0 then 1\n        when wbc_max >= 25.0 then 5\n      end as wbc_score\n\n    , case\n        when creatinine_max is null then null\n        when arf = 1 and creatinine_max <  1.5 then 0\n        when arf = 1 and creatinine_max >= 1.5 then 10\n        when creatinine_max <   0.5 then 3\n        when creatinine_max <   1.5 then 0\n        when creatinine_max <  1.95 then 4\n        when creatinine_max >= 1.95 then 7\n      end as creatinine_score\n\n    , case\n        when bun_max is null then null\n        when bun_max <  17.0 then 0\n        when bun_max <  20.0 then 2\n        when bun_max <  40.0 then 7\n        when bun_max <  80.0 then 11\n        when bun_max >= 80.0 then 12\n      end as bun_score\n\n    , case\n        when sodium_max is null then null\n        when sodium_max <  120 then 3\n        when sodium_max <  135 then 2\n        when sodium_max <  155 then 0\n        when sodium_max >= 155 then 4\n      end as sodium_score\n\n    , case\n        when albumin_max is null then null\n        when albumin_max <  2.0 then 11\n        when albumin_max <  2.5 then 6\n        when albumin_max <  4.5 then 0\n        when albumin_max >= 4.5 then 4\n      end as albumin_score\n\n    , case\n        when bilirubin_max is null then null\n        when bilirubin_max <  2.0 then 0\n        when bilirubin_max <  3.0 then 5\n        when bilirubin_max <  5.0 then 6\n        when bilirubin_max <  8.0 then 8\n        when bilirubin_max >= 8.0 then 16\n      end as bilirubin_score\n\n    , case\n        when glucose_max is null then null\n        when glucose_max <   40 then 8\n        when glucose_max <   60 then 9\n        when glucose_max <  200 then 0\n        when glucose_max <  350 then 3\n        when glucose_max >= 350 then 5\n      end as glucose_score\n\nfrom cohort\n)\n-- Combine together the scores for min/max, using the following rules:\n--  1) select the value furthest from a predefined normal value\n--  2) if both equidistant, choose the one which gives a worse score\n--  3) calculate score for acid-base abnormalities as it requires interactions\n-- sometimes the code is a bit redundant, i.e. we know the max would always be furthest from 0\n, scorecomp as\n(\n  select co.*\n  -- The rules for APS III require the definition of a \"worst\" value\n  -- This value is defined as whatever value is furthest from a predefined normal\n  -- e.g., for heart rate, worst is defined as furthest from 75\n  , case\n      when heartrate_max is null then null\n      when abs(heartrate_max-75) > abs(heartrate_min-75)\n        then smax.hr_score\n      when abs(heartrate_max-75) < abs(heartrate_min-75)\n        then smin.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score >= smin.hr_score\n        then smax.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score < smin.hr_score\n        then smin.hr_score\n    end as hr_score\n\n  , case\n      when meanbp_max is null then null\n      when abs(meanbp_max-90) > abs(meanbp_min-90)\n        then smax.meanbp_score\n      when abs(meanbp_max-90) < abs(meanbp_min-90)\n        then smin.meanbp_score\n      -- values are equidistant - pick the larger score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score >= smin.meanbp_score\n        then smax.meanbp_score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score < smin.meanbp_score\n        then smin.meanbp_score\n    end as meanbp_score\n\n  , case\n      when tempc_max is null then null\n      when abs(tempc_max-38) > abs(tempc_min-38)\n        then smax.temp_score\n      when abs(tempc_max-38) < abs(tempc_min-38)\n        then smin.temp_score\n      -- values are equidistant - pick the larger score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score >= smin.temp_score\n        then smax.temp_score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score < smin.temp_score\n        then smin.temp_score\n    end as temp_score\n\n  , case\n      when resprate_max is null then null\n      when abs(resprate_max-19) > abs(resprate_min-19)\n        then smax.resprate_score\n      when abs(resprate_max-19) < abs(resprate_min-19)\n        then smin.resprate_score\n      -- values are equidistant - pick the larger score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score >= smin.resprate_score\n        then smax.resprate_score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score < smin.resprate_score\n        then smin.resprate_score\n    end as resprate_score\n\n  , case\n      when hematocrit_max is null then null\n      when abs(hematocrit_max-45.5) > abs(hematocrit_min-45.5)\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) < abs(hematocrit_min-45.5)\n        then smin.hematocrit_score\n      -- values are equidistant - pick the larger score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score >= smin.hematocrit_score\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score < smin.hematocrit_score\n        then smin.hematocrit_score\n    end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when abs(wbc_max-11.5) > abs(wbc_min-11.5)\n        then smax.wbc_score\n      when abs(wbc_max-11.5) < abs(wbc_min-11.5)\n        then smin.wbc_score\n      -- values are equidistant - pick the larger score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score >= smin.wbc_score\n        then smax.wbc_score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score < smin.wbc_score\n        then smin.wbc_score\n    end as wbc_score\n\n\n  -- For some labs, \"furthest from normal\" doesn't make sense\n  -- e.g. creatinine w/ ARF, the minimum could be 0.3, and the max 1.6\n  -- while the minimum of 0.3 is \"further from 1\", seems like the max should be scored\n\n  , case\n      when creatinine_max is null then null\n      -- if they have arf then use the max to score\n      when arf = 1 then smax.creatinine_score\n      -- otherwise furthest from 1\n      when abs(creatinine_max-1) > abs(creatinine_min-1)\n        then smax.creatinine_score\n      when abs(creatinine_max-1) < abs(creatinine_min-1)\n        then smin.creatinine_score\n      -- values are equidistant\n      when smax.creatinine_score >= smin.creatinine_score\n        then smax.creatinine_score\n      when smax.creatinine_score < smin.creatinine_score\n        then smin.creatinine_score\n    end as creatinine_score\n\n  -- the rule for BUN is the furthest from 0.. equivalent to the max value\n  , case\n      when bun_max is null then null\n      else smax.bun_score\n    end as bun_score\n\n  , case\n      when sodium_max is null then null\n      when abs(sodium_max-145.5) > abs(sodium_min-145.5)\n        then smax.sodium_score\n      when abs(sodium_max-145.5) < abs(sodium_min-145.5)\n        then smin.sodium_score\n      -- values are equidistant - pick the larger score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score >= smin.sodium_score\n        then smax.sodium_score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score < smin.sodium_score\n        then smin.sodium_score\n    end as sodium_score\n\n  , case\n      when albumin_max is null then null\n      when abs(albumin_max-3.5) > abs(albumin_min-3.5)\n        then smax.albumin_score\n      when abs(albumin_max-3.5) < abs(albumin_min-3.5)\n        then smin.albumin_score\n      -- values are equidistant - pick the larger score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score >= smin.albumin_score\n        then smax.albumin_score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score < smin.albumin_score\n        then smin.albumin_score\n    end as albumin_score\n\n  , case\n      when bilirubin_max is null then null\n      else smax.bilirubin_score\n    end as bilirubin_score\n\n  , case\n      when glucose_max is null then null\n      when abs(glucose_max-130) > abs(glucose_min-130)\n        then smax.glucose_score\n      when abs(glucose_max-130) < abs(glucose_min-130)\n        then smin.glucose_score\n      -- values are equidistant - pick the larger score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score >= smin.glucose_score\n        then smax.glucose_score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score < smin.glucose_score\n        then smin.glucose_score\n    end as glucose_score\n\n\n  -- Below are interactions/special cases where only 1 value is important\n  , case\n      when urineoutput is null then null\n      when urineoutput <   400 then 15\n      when urineoutput <   600 then 8\n      when urineoutput <   900 then 7\n      when urineoutput <  1500 then 5\n      when urineoutput <  2000 then 4\n      when urineoutput <  4000 then 0\n      when urineoutput >= 4000 then 1\n  end as uo_score\n\n  , case\n      when endotrachflag = 1\n        -- here they are intubated, so their verbal score is inappropriate\n        -- normally you are supposed to use \"clinical judgement\"\n        -- we don't have that, so we just assume normal (as was done in the original study)\n        then 0\n      when gcseyes = 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 48\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 33\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 16\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor >= 5\n            -- highly unlikely clinical combination\n            then null\n          when gcsverbal >= 4\n            then null\n          end\n      when gcseyes > 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 29\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 24\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 15\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor = 5\n            then 13\n          when gcsverbal in (2,3) and gcsmotor = 6\n            then 10\n          when gcsverbal = 4 and gcsmotor in (1,2,3,4)\n            then 13\n          when gcsverbal = 4 and gcsmotor = 5\n            then 8\n          when gcsverbal = 4 and gcsmotor = 6\n            then 3\n          when gcsverbal = 5 and gcsmotor in (1,2,3,4,5)\n            then 3\n          when gcsverbal = 5 and gcsmotor = 6\n            then 0\n          end\n      else null\n    end as gcs_score\n\n  , case\n      when pao2 is null and aado2 is null\n        then null\n      when pao2 is not null then\n        case\n          when pao2 < 50 then 15\n          when pao2 < 70 then 5\n          when pao2 < 80 then 2\n        else 0 end\n      when aado2 is not null then\n        case\n          when aado2 <  100 then 0\n          when aado2 <  250 then 7\n          when aado2 <  350 then 9\n          when aado2 <  500 then 11\n          when aado2 >= 500 then 14\n        else 0 end\n      end as pao2_aado2_score\n\nfrom cohort co\nleft join score_min smin\n  on co.icustay_id = smin.icustay_id\nleft join score_max smax\n  on co.icustay_id = smax.icustay_id\n)\n-- tabulate the APS III using the scores from the worst values\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(hr_score,0)\n  + coalesce(meanbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(resprate_score,0)\n  + coalesce(pao2_aado2_score,0)\n  + coalesce(hematocrit_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(creatinine_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(albumin_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(glucose_score,0)\n  + coalesce(acidbase_score,0)\n  + coalesce(gcs_score,0)\n    as apsiii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, apsiii\n-- Calculate probability of hospital mortality using equation from Johnson 2014.\n, 1 / (1 + exp(- (-4.4360 + 0.04726*(apsiii) ))) as apsiii_prob\n, hr_score\n, meanbp_score\n, temp_score\n, resprate_score\n, pao2_aado2_score\n, hematocrit_score\n, wbc_score\n, creatinine_score\n, uo_score\n, bun_score\n, sodium_score\n, albumin_score\n, bilirubin_score\n, glucose_score\n, acidbase_score\n, gcs_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:28.614030Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 4.07, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 4.07 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.679750Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.687575Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\nalter table \"postgres\".\"public\".\"apsiii\" rename to \"apsiii__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\nalter table \"postgres\".\"public\".\"apsiii\" rename to \"apsiii__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.688057Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.690023Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.696200Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\nalter table \"postgres\".\"public\".\"apsiii__dbt_tmp\" rename to \"apsiii\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\nalter table \"postgres\".\"public\".\"apsiii__dbt_tmp\" rename to \"apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.696435Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.697295Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.700530Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.700857Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.701185Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.704963Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.apsiii", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.apsiii\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.707614Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.apsiii", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\ndrop table if exists \"postgres\".\"public\".\"apsiii__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.apsiii\"} */\ndrop table if exists \"postgres\".\"public\".\"apsiii__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.707858Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.710977Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.714119Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.apsiii: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.714403Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.apsiii", "execution_time": 4, "index": 103, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": "2022-07-18T00:18:28.574965", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "103 of 107 OK created table model public.apsiii ................................ [\u001b[32mSELECT 61532\u001b[0m in 4.14s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.715448Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:32.716007", "node_name": "apsiii", "node_path": "severityscores/apsiii.sql", "node_started_at": "2022-07-18T00:18:28.574965", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.apsiii"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 4.138588905334473, "failures": null, "message": "SELECT 61532", "node": {"alias": "apsiii", "build_path": "target/run/mimic/models/severityscores/apsiii.sql", "checksum": {"checksum": "833853966056b462af735227e8b7e01d00d2447299bb14f32b69c0d9b5932e20", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/apsiii.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Acute Physiology Score III (APS III)\n-- This query extracts the acute physiology score III.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for APS III:\n--    Knaus WA, Wagner DP, Draper EA, Zimmerman JE, Bergner M, Bastos PG, Sirio CA, Murphy DJ, Lotring T, Damiano A.\n--    The APACHE III prognostic system. Risk prediction of hospital mortality for critically ill hospitalized adults.\n--    Chest Journal. 1991 Dec 1100(6):1619-36.\n\n-- Reference for the equation for calibrating APS III to hospital mortality:\n--    Johnson, A. E. W. (2015). Mortality prediction and acuity assessment in critical care.\n--    University of Oxford, Oxford, UK.\n\n-- Variables used in APS III:\n--  GCS\n--  VITALS: Heart rate, mean blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap, chronic dialysis\n--  IO: urine output\n--  LABS: pao2, A-aDO2, hematocrit, WBC, creatinine\n--        , blood urea nitrogen, sodium, albumin, bilirubin, glucose, pH, pCO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate icustay_ids.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- List of TODO:\n-- The site of temperature is not incorporated. Axillary measurements should be increased by 1 degree.\n-- Unfortunately the data for metavision is not available at the moment.\n--  674 | Temp. Site\n--  224642 | Temperature Site\n\nwith pa as\n(\n  select bg.icustay_id, bg.charttime\n  , po2 as PaO2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.po2 DESC) as rn\n  from \"postgres\".\"public\".\"blood_gas_first_day_arterial\" bg\n  left join ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is null -- patient is *not* ventilated\n  -- and fio2 < 50, or if no fio2, assume room air\n  AND coalesce(fio2, fio2_chartevents, 21) < 50\n  AND bg.po2 IS NOT NULL\n)\n, aa as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , bg.aado2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.aado2 DESC) as rn\n  -- row number indicating the highest AaDO2\n  from blood_gas_first_day_arterial bg\n  INNER JOIN ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is not null -- patient is ventilated\n  AND coalesce(fio2, fio2_chartevents) >= 50\n  AND bg.aado2 IS NOT NULL\n)\n-- because ph/pco2 rules are an interaction *within* a blood gas, we calculate them here\n-- the worse score is then taken for the final calculation\n, acidbase as\n(\n  select bg.icustay_id\n  , ph, pco2 as paco2\n  , case\n      when ph is null or pco2 is null then null\n      when ph < 7.20 then\n        case\n          when pco2 < 50 then 12\n          else 4\n        end\n      when ph < 7.30 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 40 then 6\n          when pco2 < 50 then 3\n          else 2\n        end\n      when ph < 7.35 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.45 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.50 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 35 then 0\n          when pco2 < 45 then 2\n          else 12\n        end\n      when ph < 7.60 then\n        case\n          when pco2 < 40 then 3\n          else 12\n        end\n      else -- ph >= 7.60\n        case\n          when pco2 < 25 then 0\n          when pco2 < 40 then 3\n          else 12\n        end\n    end as acidbase_score\n  from blood_gas_first_day_arterial bg\n  where ph is not null and pco2 is not null\n)\n, acidbase_max as\n(\n  select icustay_id, acidbase_score, ph, paco2\n    -- create integer which indexes maximum value of score with 1\n  , ROW_NUMBER() over (partition by icustay_id ORDER BY acidbase_score DESC) as acidbase_rn\n  from acidbase\n)\n-- define acute renal failure (ARF) as:\n--  creatinine >=1.5 mg/dl\n--  and urine output <410 cc/day\n--  and no chronic dialysis\n, arf as\n(\n  select ie.icustay_id\n    , case\n        when labs.creatinine_max >= 1.5\n        and  uo.urineoutput < 410\n        -- acute renal failure is only coded if the patient is not on chronic dialysis\n        -- we use ICD-9 coding of ESRD as a proxy for chronic dialysis\n        and  icd.ckd = 0\n          then 1\n      else 0 end as arf\n  FROM icustays ie\n  left join \"postgres\".\"public\".\"urine_output_first_day\" uo\n    on ie.icustay_id = uo.icustay_id\n  left join \"postgres\".\"public\".\"labs_first_day\" labs\n    on ie.icustay_id = labs.icustay_id\n  left join\n  (\n    select hadm_id\n      , max(case\n          -- severe kidney failure requiring use of dialysis\n          when icd9_code in  ('5854','5855','5856') then 1\n          -- we do not include 5859 as that is sometimes coded for acute-on-chronic ARF\n        else 0 end)\n      as ckd\n    from diagnoses_icd\n    group by hadm_id\n  ) icd\n    on ie.hadm_id = icd.hadm_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , vital.heartrate_min\n      , vital.heartrate_max\n      , vital.meanbp_min\n      , vital.meanbp_max\n      , vital.tempc_min\n      , vital.tempc_max\n      , vital.resprate_min\n      , vital.resprate_max\n\n      , pa.pao2\n      , aa.aado2\n\n      , ab.ph\n      , ab.paco2\n      , ab.acidbase_score\n\n      , labs.hematocrit_min\n      , labs.hematocrit_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.creatinine_min\n      , labs.creatinine_max\n      , labs.bun_min\n      , labs.bun_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.albumin_min\n      , labs.albumin_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , case\n          when labs.glucose_max is null and vital.glucose_max is null\n            then null\n          when labs.glucose_max is null or vital.glucose_max > labs.glucose_max\n            then vital.glucose_max\n          when vital.glucose_max is null or labs.glucose_max > vital.glucose_max\n            then labs.glucose_max\n          else labs.glucose_max -- if equal, just pick labs\n        end as glucose_max\n\n      , case\n          when labs.glucose_min is null and vital.glucose_min is null\n            then null\n          when labs.glucose_min is null or vital.glucose_min < labs.glucose_min\n            then vital.glucose_min\n          when vital.glucose_min is null or labs.glucose_min < vital.glucose_min\n            then labs.glucose_min\n          else labs.glucose_min -- if equal, just pick labs\n        end as glucose_min\n\n      -- , labs.bicarbonate_min\n      -- , labs.bicarbonate_max\n      , vent.vent\n      , uo.urineoutput\n      -- gcs and its components\n      , gcs.mingcs\n      , gcs.gcsmotor, gcs.gcsverbal,  gcs.gcseyes, gcs.endotrachflag\n      -- acute renal failure\n      , arf.arf as arf\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views - the row number filters to 1 row per icustay_id\nleft join pa\n  on  ie.icustay_id = pa.icustay_id\n  and pa.rn = 1\nleft join aa\n  on  ie.icustay_id = aa.icustay_id\n  and aa.rn = 1\nleft join acidbase_max ab\n  on  ie.icustay_id = ab.icustay_id\n  and ab.acidbase_rn = 1\nleft join arf\n  on ie.icustay_id = arf.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n-- First, we calculate the score for the minimum values\n, score_min as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n  , case\n      when heartrate_min is null then null\n      when heartrate_min <   40 then 8\n      when heartrate_min <   50 then 5\n      when heartrate_min <  100 then 0\n      when heartrate_min <  110 then 1\n      when heartrate_min <  120 then 5\n      when heartrate_min <  140 then 7\n      when heartrate_min <  155 then 13\n      when heartrate_min >= 155 then 17\n    end as hr_score\n\n  , case\n      when meanbp_min is null then null\n      when meanbp_min <   40 then 23\n      when meanbp_min <   60 then 15\n      when meanbp_min <   70 then 7\n      when meanbp_min <   80 then 6\n      when meanbp_min <  100 then 0\n      when meanbp_min <  120 then 4\n      when meanbp_min <  130 then 7\n      when meanbp_min <  140 then 9\n      when meanbp_min >= 140 then 10\n    end as meanbp_score\n\n  -- TODO: add 1 degree to axillary measurements\n  , case\n      when tempc_min is null then null\n      when tempc_min <  33.0 then 20\n      when tempc_min <  33.5 then 16\n      when tempc_min <  34.0 then 13\n      when tempc_min <  35.0 then 8\n      when tempc_min <  36.0 then 2\n      when tempc_min <  40.0 then 0\n      when tempc_min >= 40.0 then 4\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      -- special case for ventilated patients\n      when vent = 1 and resprate_min < 14 then 0\n      when resprate_min <   6 then 17\n      when resprate_min <  12 then 8\n      when resprate_min <  14 then 7\n      when resprate_min <  25 then 0\n      when resprate_min <  35 then 6\n      when resprate_min <  40 then 9\n      when resprate_min <  50 then 11\n      when resprate_min >= 50 then 18\n    end as resprate_score\n\n  , case\n      when hematocrit_min is null then null\n      when hematocrit_min <   41.0 then 3\n      when hematocrit_min <   50.0 then 0\n      when hematocrit_min >=  50.0 then 3\n    end as hematocrit_score\n\n  , case\n      when wbc_min is null then null\n      when wbc_min <   1.0 then 19\n      when wbc_min <   3.0 then 5\n      when wbc_min <  20.0 then 0\n      when wbc_min <  25.0 then 1\n      when wbc_min >= 25.0 then 5\n    end as wbc_score\n\n  , case\n      when creatinine_min is null then null\n      when arf = 1 and creatinine_min <  1.5 then 0\n      when arf = 1 and creatinine_min >= 1.5 then 10\n      when creatinine_min <   0.5 then 3\n      when creatinine_min <   1.5 then 0\n      when creatinine_min <  1.95 then 4\n      when creatinine_min >= 1.95 then 7\n    end as creatinine_score\n\n  , case\n      when bun_min is null then null\n      when bun_min <  17.0 then 0\n      when bun_min <  20.0 then 2\n      when bun_min <  40.0 then 7\n      when bun_min <  80.0 then 11\n      when bun_min >= 80.0 then 12\n    end as bun_score\n\n  , case\n      when sodium_min is null then null\n      when sodium_min <  120 then 3\n      when sodium_min <  135 then 2\n      when sodium_min <  155 then 0\n      when sodium_min >= 155 then 4\n    end as sodium_score\n\n  , case\n      when albumin_min is null then null\n      when albumin_min <  2.0 then 11\n      when albumin_min <  2.5 then 6\n      when albumin_min <  4.5 then 0\n      when albumin_min >= 4.5 then 4\n    end as albumin_score\n\n  , case\n      when bilirubin_min is null then null\n      when bilirubin_min <  2.0 then 0\n      when bilirubin_min <  3.0 then 5\n      when bilirubin_min <  5.0 then 6\n      when bilirubin_min <  8.0 then 8\n      when bilirubin_min >= 8.0 then 16\n    end as bilirubin_score\n\n  , case\n      when glucose_min is null then null\n      when glucose_min <   40 then 8\n      when glucose_min <   60 then 9\n      when glucose_min <  200 then 0\n      when glucose_min <  350 then 3\n      when glucose_min >= 350 then 5\n    end as glucose_score\n\nfrom cohort\n)\n, score_max as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n    , case\n        when heartrate_max is null then null\n        when heartrate_max <   40 then 8\n        when heartrate_max <   50 then 5\n        when heartrate_max <  100 then 0\n        when heartrate_max <  110 then 1\n        when heartrate_max <  120 then 5\n        when heartrate_max <  140 then 7\n        when heartrate_max <  155 then 13\n        when heartrate_max >= 155 then 17\n      end as hr_score\n\n    , case\n        when meanbp_max is null then null\n        when meanbp_max <   40 then 23\n        when meanbp_max <   60 then 15\n        when meanbp_max <   70 then 7\n        when meanbp_max <   80 then 6\n        when meanbp_max <  100 then 0\n        when meanbp_max <  120 then 4\n        when meanbp_max <  130 then 7\n        when meanbp_max <  140 then 9\n        when meanbp_max >= 140 then 10\n      end as meanbp_score\n\n    -- TODO: add 1 degree to axillary measurements\n    , case\n        when tempc_max is null then null\n        when tempc_max <  33.0 then 20\n        when tempc_max <  33.5 then 16\n        when tempc_max <  34.0 then 13\n        when tempc_max <  35.0 then 8\n        when tempc_max <  36.0 then 2\n        when tempc_max <  40.0 then 0\n        when tempc_max >= 40.0 then 4\n      end as temp_score\n\n    , case\n        when resprate_max is null then null\n        -- special case for ventilated patients\n        when vent = 1 and resprate_max < 14 then 0\n        when resprate_max <   6 then 17\n        when resprate_max <  12 then 8\n        when resprate_max <  14 then 7\n        when resprate_max <  25 then 0\n        when resprate_max <  35 then 6\n        when resprate_max <  40 then 9\n        when resprate_max <  50 then 11\n        when resprate_max >= 50 then 18\n      end as resprate_score\n\n    , case\n        when hematocrit_max is null then null\n        when hematocrit_max <   41.0 then 3\n        when hematocrit_max <   50.0 then 0\n        when hematocrit_max >=  50.0 then 3\n      end as hematocrit_score\n\n    , case\n        when wbc_max is null then null\n        when wbc_max <   1.0 then 19\n        when wbc_max <   3.0 then 5\n        when wbc_max <  20.0 then 0\n        when wbc_max <  25.0 then 1\n        when wbc_max >= 25.0 then 5\n      end as wbc_score\n\n    , case\n        when creatinine_max is null then null\n        when arf = 1 and creatinine_max <  1.5 then 0\n        when arf = 1 and creatinine_max >= 1.5 then 10\n        when creatinine_max <   0.5 then 3\n        when creatinine_max <   1.5 then 0\n        when creatinine_max <  1.95 then 4\n        when creatinine_max >= 1.95 then 7\n      end as creatinine_score\n\n    , case\n        when bun_max is null then null\n        when bun_max <  17.0 then 0\n        when bun_max <  20.0 then 2\n        when bun_max <  40.0 then 7\n        when bun_max <  80.0 then 11\n        when bun_max >= 80.0 then 12\n      end as bun_score\n\n    , case\n        when sodium_max is null then null\n        when sodium_max <  120 then 3\n        when sodium_max <  135 then 2\n        when sodium_max <  155 then 0\n        when sodium_max >= 155 then 4\n      end as sodium_score\n\n    , case\n        when albumin_max is null then null\n        when albumin_max <  2.0 then 11\n        when albumin_max <  2.5 then 6\n        when albumin_max <  4.5 then 0\n        when albumin_max >= 4.5 then 4\n      end as albumin_score\n\n    , case\n        when bilirubin_max is null then null\n        when bilirubin_max <  2.0 then 0\n        when bilirubin_max <  3.0 then 5\n        when bilirubin_max <  5.0 then 6\n        when bilirubin_max <  8.0 then 8\n        when bilirubin_max >= 8.0 then 16\n      end as bilirubin_score\n\n    , case\n        when glucose_max is null then null\n        when glucose_max <   40 then 8\n        when glucose_max <   60 then 9\n        when glucose_max <  200 then 0\n        when glucose_max <  350 then 3\n        when glucose_max >= 350 then 5\n      end as glucose_score\n\nfrom cohort\n)\n-- Combine together the scores for min/max, using the following rules:\n--  1) select the value furthest from a predefined normal value\n--  2) if both equidistant, choose the one which gives a worse score\n--  3) calculate score for acid-base abnormalities as it requires interactions\n-- sometimes the code is a bit redundant, i.e. we know the max would always be furthest from 0\n, scorecomp as\n(\n  select co.*\n  -- The rules for APS III require the definition of a \"worst\" value\n  -- This value is defined as whatever value is furthest from a predefined normal\n  -- e.g., for heart rate, worst is defined as furthest from 75\n  , case\n      when heartrate_max is null then null\n      when abs(heartrate_max-75) > abs(heartrate_min-75)\n        then smax.hr_score\n      when abs(heartrate_max-75) < abs(heartrate_min-75)\n        then smin.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score >= smin.hr_score\n        then smax.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score < smin.hr_score\n        then smin.hr_score\n    end as hr_score\n\n  , case\n      when meanbp_max is null then null\n      when abs(meanbp_max-90) > abs(meanbp_min-90)\n        then smax.meanbp_score\n      when abs(meanbp_max-90) < abs(meanbp_min-90)\n        then smin.meanbp_score\n      -- values are equidistant - pick the larger score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score >= smin.meanbp_score\n        then smax.meanbp_score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score < smin.meanbp_score\n        then smin.meanbp_score\n    end as meanbp_score\n\n  , case\n      when tempc_max is null then null\n      when abs(tempc_max-38) > abs(tempc_min-38)\n        then smax.temp_score\n      when abs(tempc_max-38) < abs(tempc_min-38)\n        then smin.temp_score\n      -- values are equidistant - pick the larger score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score >= smin.temp_score\n        then smax.temp_score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score < smin.temp_score\n        then smin.temp_score\n    end as temp_score\n\n  , case\n      when resprate_max is null then null\n      when abs(resprate_max-19) > abs(resprate_min-19)\n        then smax.resprate_score\n      when abs(resprate_max-19) < abs(resprate_min-19)\n        then smin.resprate_score\n      -- values are equidistant - pick the larger score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score >= smin.resprate_score\n        then smax.resprate_score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score < smin.resprate_score\n        then smin.resprate_score\n    end as resprate_score\n\n  , case\n      when hematocrit_max is null then null\n      when abs(hematocrit_max-45.5) > abs(hematocrit_min-45.5)\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) < abs(hematocrit_min-45.5)\n        then smin.hematocrit_score\n      -- values are equidistant - pick the larger score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score >= smin.hematocrit_score\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score < smin.hematocrit_score\n        then smin.hematocrit_score\n    end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when abs(wbc_max-11.5) > abs(wbc_min-11.5)\n        then smax.wbc_score\n      when abs(wbc_max-11.5) < abs(wbc_min-11.5)\n        then smin.wbc_score\n      -- values are equidistant - pick the larger score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score >= smin.wbc_score\n        then smax.wbc_score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score < smin.wbc_score\n        then smin.wbc_score\n    end as wbc_score\n\n\n  -- For some labs, \"furthest from normal\" doesn't make sense\n  -- e.g. creatinine w/ ARF, the minimum could be 0.3, and the max 1.6\n  -- while the minimum of 0.3 is \"further from 1\", seems like the max should be scored\n\n  , case\n      when creatinine_max is null then null\n      -- if they have arf then use the max to score\n      when arf = 1 then smax.creatinine_score\n      -- otherwise furthest from 1\n      when abs(creatinine_max-1) > abs(creatinine_min-1)\n        then smax.creatinine_score\n      when abs(creatinine_max-1) < abs(creatinine_min-1)\n        then smin.creatinine_score\n      -- values are equidistant\n      when smax.creatinine_score >= smin.creatinine_score\n        then smax.creatinine_score\n      when smax.creatinine_score < smin.creatinine_score\n        then smin.creatinine_score\n    end as creatinine_score\n\n  -- the rule for BUN is the furthest from 0.. equivalent to the max value\n  , case\n      when bun_max is null then null\n      else smax.bun_score\n    end as bun_score\n\n  , case\n      when sodium_max is null then null\n      when abs(sodium_max-145.5) > abs(sodium_min-145.5)\n        then smax.sodium_score\n      when abs(sodium_max-145.5) < abs(sodium_min-145.5)\n        then smin.sodium_score\n      -- values are equidistant - pick the larger score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score >= smin.sodium_score\n        then smax.sodium_score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score < smin.sodium_score\n        then smin.sodium_score\n    end as sodium_score\n\n  , case\n      when albumin_max is null then null\n      when abs(albumin_max-3.5) > abs(albumin_min-3.5)\n        then smax.albumin_score\n      when abs(albumin_max-3.5) < abs(albumin_min-3.5)\n        then smin.albumin_score\n      -- values are equidistant - pick the larger score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score >= smin.albumin_score\n        then smax.albumin_score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score < smin.albumin_score\n        then smin.albumin_score\n    end as albumin_score\n\n  , case\n      when bilirubin_max is null then null\n      else smax.bilirubin_score\n    end as bilirubin_score\n\n  , case\n      when glucose_max is null then null\n      when abs(glucose_max-130) > abs(glucose_min-130)\n        then smax.glucose_score\n      when abs(glucose_max-130) < abs(glucose_min-130)\n        then smin.glucose_score\n      -- values are equidistant - pick the larger score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score >= smin.glucose_score\n        then smax.glucose_score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score < smin.glucose_score\n        then smin.glucose_score\n    end as glucose_score\n\n\n  -- Below are interactions/special cases where only 1 value is important\n  , case\n      when urineoutput is null then null\n      when urineoutput <   400 then 15\n      when urineoutput <   600 then 8\n      when urineoutput <   900 then 7\n      when urineoutput <  1500 then 5\n      when urineoutput <  2000 then 4\n      when urineoutput <  4000 then 0\n      when urineoutput >= 4000 then 1\n  end as uo_score\n\n  , case\n      when endotrachflag = 1\n        -- here they are intubated, so their verbal score is inappropriate\n        -- normally you are supposed to use \"clinical judgement\"\n        -- we don't have that, so we just assume normal (as was done in the original study)\n        then 0\n      when gcseyes = 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 48\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 33\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 16\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor >= 5\n            -- highly unlikely clinical combination\n            then null\n          when gcsverbal >= 4\n            then null\n          end\n      when gcseyes > 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 29\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 24\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 15\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor = 5\n            then 13\n          when gcsverbal in (2,3) and gcsmotor = 6\n            then 10\n          when gcsverbal = 4 and gcsmotor in (1,2,3,4)\n            then 13\n          when gcsverbal = 4 and gcsmotor = 5\n            then 8\n          when gcsverbal = 4 and gcsmotor = 6\n            then 3\n          when gcsverbal = 5 and gcsmotor in (1,2,3,4,5)\n            then 3\n          when gcsverbal = 5 and gcsmotor = 6\n            then 0\n          end\n      else null\n    end as gcs_score\n\n  , case\n      when pao2 is null and aado2 is null\n        then null\n      when pao2 is not null then\n        case\n          when pao2 < 50 then 15\n          when pao2 < 70 then 5\n          when pao2 < 80 then 2\n        else 0 end\n      when aado2 is not null then\n        case\n          when aado2 <  100 then 0\n          when aado2 <  250 then 7\n          when aado2 <  350 then 9\n          when aado2 <  500 then 11\n          when aado2 >= 500 then 14\n        else 0 end\n      end as pao2_aado2_score\n\nfrom cohort co\nleft join score_min smin\n  on co.icustay_id = smin.icustay_id\nleft join score_max smax\n  on co.icustay_id = smax.icustay_id\n)\n-- tabulate the APS III using the scores from the worst values\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(hr_score,0)\n  + coalesce(meanbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(resprate_score,0)\n  + coalesce(pao2_aado2_score,0)\n  + coalesce(hematocrit_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(creatinine_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(albumin_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(glucose_score,0)\n  + coalesce(acidbase_score,0)\n  + coalesce(gcs_score,0)\n    as apsiii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, apsiii\n-- Calculate probability of hospital mortality using equation from Johnson 2014.\n, 1 / (1 + exp(- (-4.4360 + 0.04726*(apsiii) ))) as apsiii_prob\n, hr_score\n, meanbp_score\n, temp_score\n, resprate_score\n, pao2_aado2_score\n, hematocrit_score\n, wbc_score\n, creatinine_score\n, uo_score\n, bun_score\n, sodium_score\n, albumin_score\n, bilirubin_score\n, glucose_score\n, acidbase_score\n, gcs_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.703282, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.blood_gas_first_day_arterial", "model.mimic.urine_output_first_day", "model.mimic.labs_first_day", "model.mimic.ventilation_first_day", "model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.urine_output_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "apsiii"], "meta": {}, "name": "apsiii", "original_file_path": "models/severityscores/apsiii.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/apsiii.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Acute Physiology Score III (APS III)\n-- This query extracts the acute physiology score III.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for APS III:\n--    Knaus WA, Wagner DP, Draper EA, Zimmerman JE, Bergner M, Bastos PG, Sirio CA, Murphy DJ, Lotring T, Damiano A.\n--    The APACHE III prognostic system. Risk prediction of hospital mortality for critically ill hospitalized adults.\n--    Chest Journal. 1991 Dec 1100(6):1619-36.\n\n-- Reference for the equation for calibrating APS III to hospital mortality:\n--    Johnson, A. E. W. (2015). Mortality prediction and acuity assessment in critical care.\n--    University of Oxford, Oxford, UK.\n\n-- Variables used in APS III:\n--  GCS\n--  VITALS: Heart rate, mean blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap, chronic dialysis\n--  IO: urine output\n--  LABS: pao2, A-aDO2, hematocrit, WBC, creatinine\n--        , blood urea nitrogen, sodium, albumin, bilirubin, glucose, pH, pCO2\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) ventilation_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate icustay_ids.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- List of TODO:\n-- The site of temperature is not incorporated. Axillary measurements should be increased by 1 degree.\n-- Unfortunately the data for metavision is not available at the moment.\n--  674 | Temp. Site\n--  224642 | Temperature Site\n\nwith pa as\n(\n  select bg.icustay_id, bg.charttime\n  , po2 as PaO2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.po2 DESC) as rn\n  from {{ ref('blood_gas_first_day_arterial')}} bg\n  left join ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is null -- patient is *not* ventilated\n  -- and fio2 < 50, or if no fio2, assume room air\n  AND coalesce(fio2, fio2_chartevents, 21) < 50\n  AND bg.po2 IS NOT NULL\n)\n, aa as\n(\n  -- join blood gas to ventilation durations to determine if patient was vent\n  -- also join to cpap table for the same purpose\n  select bg.icustay_id, bg.charttime\n  , bg.aado2\n  , ROW_NUMBER() over (partition by bg.icustay_id ORDER BY bg.aado2 DESC) as rn\n  -- row number indicating the highest AaDO2\n  from blood_gas_first_day_arterial bg\n  INNER JOIN ventilation_durations vd\n    on bg.icustay_id = vd.icustay_id\n    and bg.charttime >= vd.starttime\n    and bg.charttime <= vd.endtime\n  WHERE vd.icustay_id is not null -- patient is ventilated\n  AND coalesce(fio2, fio2_chartevents) >= 50\n  AND bg.aado2 IS NOT NULL\n)\n-- because ph/pco2 rules are an interaction *within* a blood gas, we calculate them here\n-- the worse score is then taken for the final calculation\n, acidbase as\n(\n  select bg.icustay_id\n  , ph, pco2 as paco2\n  , case\n      when ph is null or pco2 is null then null\n      when ph < 7.20 then\n        case\n          when pco2 < 50 then 12\n          else 4\n        end\n      when ph < 7.30 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 40 then 6\n          when pco2 < 50 then 3\n          else 2\n        end\n      when ph < 7.35 then\n        case\n          when pco2 < 30 then 9\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.45 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 45 then 0\n          else 1\n        end\n      when ph < 7.50 then\n        case\n          when pco2 < 30 then 5\n          when pco2 < 35 then 0\n          when pco2 < 45 then 2\n          else 12\n        end\n      when ph < 7.60 then\n        case\n          when pco2 < 40 then 3\n          else 12\n        end\n      else -- ph >= 7.60\n        case\n          when pco2 < 25 then 0\n          when pco2 < 40 then 3\n          else 12\n        end\n    end as acidbase_score\n  from blood_gas_first_day_arterial bg\n  where ph is not null and pco2 is not null\n)\n, acidbase_max as\n(\n  select icustay_id, acidbase_score, ph, paco2\n    -- create integer which indexes maximum value of score with 1\n  , ROW_NUMBER() over (partition by icustay_id ORDER BY acidbase_score DESC) as acidbase_rn\n  from acidbase\n)\n-- define acute renal failure (ARF) as:\n--  creatinine >=1.5 mg/dl\n--  and urine output <410 cc/day\n--  and no chronic dialysis\n, arf as\n(\n  select ie.icustay_id\n    , case\n        when labs.creatinine_max >= 1.5\n        and  uo.urineoutput < 410\n        -- acute renal failure is only coded if the patient is not on chronic dialysis\n        -- we use ICD-9 coding of ESRD as a proxy for chronic dialysis\n        and  icd.ckd = 0\n          then 1\n      else 0 end as arf\n  FROM icustays ie\n  left join {{ref('urine_output_first_day')}} uo\n    on ie.icustay_id = uo.icustay_id\n  left join {{ref('labs_first_day')}} labs\n    on ie.icustay_id = labs.icustay_id\n  left join\n  (\n    select hadm_id\n      , max(case\n          -- severe kidney failure requiring use of dialysis\n          when icd9_code in  ('5854','5855','5856') then 1\n          -- we do not include 5859 as that is sometimes coded for acute-on-chronic ARF\n        else 0 end)\n      as ckd\n    from diagnoses_icd\n    group by hadm_id\n  ) icd\n    on ie.hadm_id = icd.hadm_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      , vital.heartrate_min\n      , vital.heartrate_max\n      , vital.meanbp_min\n      , vital.meanbp_max\n      , vital.tempc_min\n      , vital.tempc_max\n      , vital.resprate_min\n      , vital.resprate_max\n\n      , pa.pao2\n      , aa.aado2\n\n      , ab.ph\n      , ab.paco2\n      , ab.acidbase_score\n\n      , labs.hematocrit_min\n      , labs.hematocrit_max\n      , labs.wbc_min\n      , labs.wbc_max\n      , labs.creatinine_min\n      , labs.creatinine_max\n      , labs.bun_min\n      , labs.bun_max\n      , labs.sodium_min\n      , labs.sodium_max\n      , labs.albumin_min\n      , labs.albumin_max\n      , labs.bilirubin_min\n      , labs.bilirubin_max\n\n      , case\n          when labs.glucose_max is null and vital.glucose_max is null\n            then null\n          when labs.glucose_max is null or vital.glucose_max > labs.glucose_max\n            then vital.glucose_max\n          when vital.glucose_max is null or labs.glucose_max > vital.glucose_max\n            then labs.glucose_max\n          else labs.glucose_max -- if equal, just pick labs\n        end as glucose_max\n\n      , case\n          when labs.glucose_min is null and vital.glucose_min is null\n            then null\n          when labs.glucose_min is null or vital.glucose_min < labs.glucose_min\n            then vital.glucose_min\n          when vital.glucose_min is null or labs.glucose_min < vital.glucose_min\n            then labs.glucose_min\n          else labs.glucose_min -- if equal, just pick labs\n        end as glucose_min\n\n      -- , labs.bicarbonate_min\n      -- , labs.bicarbonate_max\n      , vent.vent\n      , uo.urineoutput\n      -- gcs and its components\n      , gcs.mingcs\n      , gcs.gcsmotor, gcs.gcsverbal,  gcs.gcseyes, gcs.endotrachflag\n      -- acute renal failure\n      , arf.arf as arf\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above views - the row number filters to 1 row per icustay_id\nleft join pa\n  on  ie.icustay_id = pa.icustay_id\n  and pa.rn = 1\nleft join aa\n  on  ie.icustay_id = aa.icustay_id\n  and aa.rn = 1\nleft join acidbase_max ab\n  on  ie.icustay_id = ab.icustay_id\n  and ab.acidbase_rn = 1\nleft join arf\n  on ie.icustay_id = arf.icustay_id\n\n-- join to custom tables to get more data....\nleft join {{ref('ventilation_first_day')}} vent\n  on ie.icustay_id = vent.icustay_id\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\n)\n-- First, we calculate the score for the minimum values\n, score_min as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n  , case\n      when heartrate_min is null then null\n      when heartrate_min <   40 then 8\n      when heartrate_min <   50 then 5\n      when heartrate_min <  100 then 0\n      when heartrate_min <  110 then 1\n      when heartrate_min <  120 then 5\n      when heartrate_min <  140 then 7\n      when heartrate_min <  155 then 13\n      when heartrate_min >= 155 then 17\n    end as hr_score\n\n  , case\n      when meanbp_min is null then null\n      when meanbp_min <   40 then 23\n      when meanbp_min <   60 then 15\n      when meanbp_min <   70 then 7\n      when meanbp_min <   80 then 6\n      when meanbp_min <  100 then 0\n      when meanbp_min <  120 then 4\n      when meanbp_min <  130 then 7\n      when meanbp_min <  140 then 9\n      when meanbp_min >= 140 then 10\n    end as meanbp_score\n\n  -- TODO: add 1 degree to axillary measurements\n  , case\n      when tempc_min is null then null\n      when tempc_min <  33.0 then 20\n      when tempc_min <  33.5 then 16\n      when tempc_min <  34.0 then 13\n      when tempc_min <  35.0 then 8\n      when tempc_min <  36.0 then 2\n      when tempc_min <  40.0 then 0\n      when tempc_min >= 40.0 then 4\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      -- special case for ventilated patients\n      when vent = 1 and resprate_min < 14 then 0\n      when resprate_min <   6 then 17\n      when resprate_min <  12 then 8\n      when resprate_min <  14 then 7\n      when resprate_min <  25 then 0\n      when resprate_min <  35 then 6\n      when resprate_min <  40 then 9\n      when resprate_min <  50 then 11\n      when resprate_min >= 50 then 18\n    end as resprate_score\n\n  , case\n      when hematocrit_min is null then null\n      when hematocrit_min <   41.0 then 3\n      when hematocrit_min <   50.0 then 0\n      when hematocrit_min >=  50.0 then 3\n    end as hematocrit_score\n\n  , case\n      when wbc_min is null then null\n      when wbc_min <   1.0 then 19\n      when wbc_min <   3.0 then 5\n      when wbc_min <  20.0 then 0\n      when wbc_min <  25.0 then 1\n      when wbc_min >= 25.0 then 5\n    end as wbc_score\n\n  , case\n      when creatinine_min is null then null\n      when arf = 1 and creatinine_min <  1.5 then 0\n      when arf = 1 and creatinine_min >= 1.5 then 10\n      when creatinine_min <   0.5 then 3\n      when creatinine_min <   1.5 then 0\n      when creatinine_min <  1.95 then 4\n      when creatinine_min >= 1.95 then 7\n    end as creatinine_score\n\n  , case\n      when bun_min is null then null\n      when bun_min <  17.0 then 0\n      when bun_min <  20.0 then 2\n      when bun_min <  40.0 then 7\n      when bun_min <  80.0 then 11\n      when bun_min >= 80.0 then 12\n    end as bun_score\n\n  , case\n      when sodium_min is null then null\n      when sodium_min <  120 then 3\n      when sodium_min <  135 then 2\n      when sodium_min <  155 then 0\n      when sodium_min >= 155 then 4\n    end as sodium_score\n\n  , case\n      when albumin_min is null then null\n      when albumin_min <  2.0 then 11\n      when albumin_min <  2.5 then 6\n      when albumin_min <  4.5 then 0\n      when albumin_min >= 4.5 then 4\n    end as albumin_score\n\n  , case\n      when bilirubin_min is null then null\n      when bilirubin_min <  2.0 then 0\n      when bilirubin_min <  3.0 then 5\n      when bilirubin_min <  5.0 then 6\n      when bilirubin_min <  8.0 then 8\n      when bilirubin_min >= 8.0 then 16\n    end as bilirubin_score\n\n  , case\n      when glucose_min is null then null\n      when glucose_min <   40 then 8\n      when glucose_min <   60 then 9\n      when glucose_min <  200 then 0\n      when glucose_min <  350 then 3\n      when glucose_min >= 350 then 5\n    end as glucose_score\n\nfrom cohort\n)\n, score_max as\n(\n  select cohort.subject_id, cohort.hadm_id, cohort.icustay_id\n    , case\n        when heartrate_max is null then null\n        when heartrate_max <   40 then 8\n        when heartrate_max <   50 then 5\n        when heartrate_max <  100 then 0\n        when heartrate_max <  110 then 1\n        when heartrate_max <  120 then 5\n        when heartrate_max <  140 then 7\n        when heartrate_max <  155 then 13\n        when heartrate_max >= 155 then 17\n      end as hr_score\n\n    , case\n        when meanbp_max is null then null\n        when meanbp_max <   40 then 23\n        when meanbp_max <   60 then 15\n        when meanbp_max <   70 then 7\n        when meanbp_max <   80 then 6\n        when meanbp_max <  100 then 0\n        when meanbp_max <  120 then 4\n        when meanbp_max <  130 then 7\n        when meanbp_max <  140 then 9\n        when meanbp_max >= 140 then 10\n      end as meanbp_score\n\n    -- TODO: add 1 degree to axillary measurements\n    , case\n        when tempc_max is null then null\n        when tempc_max <  33.0 then 20\n        when tempc_max <  33.5 then 16\n        when tempc_max <  34.0 then 13\n        when tempc_max <  35.0 then 8\n        when tempc_max <  36.0 then 2\n        when tempc_max <  40.0 then 0\n        when tempc_max >= 40.0 then 4\n      end as temp_score\n\n    , case\n        when resprate_max is null then null\n        -- special case for ventilated patients\n        when vent = 1 and resprate_max < 14 then 0\n        when resprate_max <   6 then 17\n        when resprate_max <  12 then 8\n        when resprate_max <  14 then 7\n        when resprate_max <  25 then 0\n        when resprate_max <  35 then 6\n        when resprate_max <  40 then 9\n        when resprate_max <  50 then 11\n        when resprate_max >= 50 then 18\n      end as resprate_score\n\n    , case\n        when hematocrit_max is null then null\n        when hematocrit_max <   41.0 then 3\n        when hematocrit_max <   50.0 then 0\n        when hematocrit_max >=  50.0 then 3\n      end as hematocrit_score\n\n    , case\n        when wbc_max is null then null\n        when wbc_max <   1.0 then 19\n        when wbc_max <   3.0 then 5\n        when wbc_max <  20.0 then 0\n        when wbc_max <  25.0 then 1\n        when wbc_max >= 25.0 then 5\n      end as wbc_score\n\n    , case\n        when creatinine_max is null then null\n        when arf = 1 and creatinine_max <  1.5 then 0\n        when arf = 1 and creatinine_max >= 1.5 then 10\n        when creatinine_max <   0.5 then 3\n        when creatinine_max <   1.5 then 0\n        when creatinine_max <  1.95 then 4\n        when creatinine_max >= 1.95 then 7\n      end as creatinine_score\n\n    , case\n        when bun_max is null then null\n        when bun_max <  17.0 then 0\n        when bun_max <  20.0 then 2\n        when bun_max <  40.0 then 7\n        when bun_max <  80.0 then 11\n        when bun_max >= 80.0 then 12\n      end as bun_score\n\n    , case\n        when sodium_max is null then null\n        when sodium_max <  120 then 3\n        when sodium_max <  135 then 2\n        when sodium_max <  155 then 0\n        when sodium_max >= 155 then 4\n      end as sodium_score\n\n    , case\n        when albumin_max is null then null\n        when albumin_max <  2.0 then 11\n        when albumin_max <  2.5 then 6\n        when albumin_max <  4.5 then 0\n        when albumin_max >= 4.5 then 4\n      end as albumin_score\n\n    , case\n        when bilirubin_max is null then null\n        when bilirubin_max <  2.0 then 0\n        when bilirubin_max <  3.0 then 5\n        when bilirubin_max <  5.0 then 6\n        when bilirubin_max <  8.0 then 8\n        when bilirubin_max >= 8.0 then 16\n      end as bilirubin_score\n\n    , case\n        when glucose_max is null then null\n        when glucose_max <   40 then 8\n        when glucose_max <   60 then 9\n        when glucose_max <  200 then 0\n        when glucose_max <  350 then 3\n        when glucose_max >= 350 then 5\n      end as glucose_score\n\nfrom cohort\n)\n-- Combine together the scores for min/max, using the following rules:\n--  1) select the value furthest from a predefined normal value\n--  2) if both equidistant, choose the one which gives a worse score\n--  3) calculate score for acid-base abnormalities as it requires interactions\n-- sometimes the code is a bit redundant, i.e. we know the max would always be furthest from 0\n, scorecomp as\n(\n  select co.*\n  -- The rules for APS III require the definition of a \"worst\" value\n  -- This value is defined as whatever value is furthest from a predefined normal\n  -- e.g., for heart rate, worst is defined as furthest from 75\n  , case\n      when heartrate_max is null then null\n      when abs(heartrate_max-75) > abs(heartrate_min-75)\n        then smax.hr_score\n      when abs(heartrate_max-75) < abs(heartrate_min-75)\n        then smin.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score >= smin.hr_score\n        then smax.hr_score\n      when abs(heartrate_max-75) = abs(heartrate_min-75)\n      and  smax.hr_score < smin.hr_score\n        then smin.hr_score\n    end as hr_score\n\n  , case\n      when meanbp_max is null then null\n      when abs(meanbp_max-90) > abs(meanbp_min-90)\n        then smax.meanbp_score\n      when abs(meanbp_max-90) < abs(meanbp_min-90)\n        then smin.meanbp_score\n      -- values are equidistant - pick the larger score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score >= smin.meanbp_score\n        then smax.meanbp_score\n      when abs(meanbp_max-90) = abs(meanbp_min-90)\n      and  smax.meanbp_score < smin.meanbp_score\n        then smin.meanbp_score\n    end as meanbp_score\n\n  , case\n      when tempc_max is null then null\n      when abs(tempc_max-38) > abs(tempc_min-38)\n        then smax.temp_score\n      when abs(tempc_max-38) < abs(tempc_min-38)\n        then smin.temp_score\n      -- values are equidistant - pick the larger score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score >= smin.temp_score\n        then smax.temp_score\n      when abs(tempc_max-38) = abs(tempc_min-38)\n      and  smax.temp_score < smin.temp_score\n        then smin.temp_score\n    end as temp_score\n\n  , case\n      when resprate_max is null then null\n      when abs(resprate_max-19) > abs(resprate_min-19)\n        then smax.resprate_score\n      when abs(resprate_max-19) < abs(resprate_min-19)\n        then smin.resprate_score\n      -- values are equidistant - pick the larger score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score >= smin.resprate_score\n        then smax.resprate_score\n      when abs(resprate_max-19) = abs(resprate_max-19)\n      and  smax.resprate_score < smin.resprate_score\n        then smin.resprate_score\n    end as resprate_score\n\n  , case\n      when hematocrit_max is null then null\n      when abs(hematocrit_max-45.5) > abs(hematocrit_min-45.5)\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) < abs(hematocrit_min-45.5)\n        then smin.hematocrit_score\n      -- values are equidistant - pick the larger score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score >= smin.hematocrit_score\n        then smax.hematocrit_score\n      when abs(hematocrit_max-45.5) = abs(hematocrit_max-45.5)\n      and  smax.hematocrit_score < smin.hematocrit_score\n        then smin.hematocrit_score\n    end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when abs(wbc_max-11.5) > abs(wbc_min-11.5)\n        then smax.wbc_score\n      when abs(wbc_max-11.5) < abs(wbc_min-11.5)\n        then smin.wbc_score\n      -- values are equidistant - pick the larger score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score >= smin.wbc_score\n        then smax.wbc_score\n      when abs(wbc_max-11.5) = abs(wbc_max-11.5)\n      and  smax.wbc_score < smin.wbc_score\n        then smin.wbc_score\n    end as wbc_score\n\n\n  -- For some labs, \"furthest from normal\" doesn't make sense\n  -- e.g. creatinine w/ ARF, the minimum could be 0.3, and the max 1.6\n  -- while the minimum of 0.3 is \"further from 1\", seems like the max should be scored\n\n  , case\n      when creatinine_max is null then null\n      -- if they have arf then use the max to score\n      when arf = 1 then smax.creatinine_score\n      -- otherwise furthest from 1\n      when abs(creatinine_max-1) > abs(creatinine_min-1)\n        then smax.creatinine_score\n      when abs(creatinine_max-1) < abs(creatinine_min-1)\n        then smin.creatinine_score\n      -- values are equidistant\n      when smax.creatinine_score >= smin.creatinine_score\n        then smax.creatinine_score\n      when smax.creatinine_score < smin.creatinine_score\n        then smin.creatinine_score\n    end as creatinine_score\n\n  -- the rule for BUN is the furthest from 0.. equivalent to the max value\n  , case\n      when bun_max is null then null\n      else smax.bun_score\n    end as bun_score\n\n  , case\n      when sodium_max is null then null\n      when abs(sodium_max-145.5) > abs(sodium_min-145.5)\n        then smax.sodium_score\n      when abs(sodium_max-145.5) < abs(sodium_min-145.5)\n        then smin.sodium_score\n      -- values are equidistant - pick the larger score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score >= smin.sodium_score\n        then smax.sodium_score\n      when abs(sodium_max-145.5) = abs(sodium_max-145.5)\n      and  smax.sodium_score < smin.sodium_score\n        then smin.sodium_score\n    end as sodium_score\n\n  , case\n      when albumin_max is null then null\n      when abs(albumin_max-3.5) > abs(albumin_min-3.5)\n        then smax.albumin_score\n      when abs(albumin_max-3.5) < abs(albumin_min-3.5)\n        then smin.albumin_score\n      -- values are equidistant - pick the larger score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score >= smin.albumin_score\n        then smax.albumin_score\n      when abs(albumin_max-3.5) = abs(albumin_max-3.5)\n      and  smax.albumin_score < smin.albumin_score\n        then smin.albumin_score\n    end as albumin_score\n\n  , case\n      when bilirubin_max is null then null\n      else smax.bilirubin_score\n    end as bilirubin_score\n\n  , case\n      when glucose_max is null then null\n      when abs(glucose_max-130) > abs(glucose_min-130)\n        then smax.glucose_score\n      when abs(glucose_max-130) < abs(glucose_min-130)\n        then smin.glucose_score\n      -- values are equidistant - pick the larger score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score >= smin.glucose_score\n        then smax.glucose_score\n      when abs(glucose_max-130) = abs(glucose_max-130)\n      and  smax.glucose_score < smin.glucose_score\n        then smin.glucose_score\n    end as glucose_score\n\n\n  -- Below are interactions/special cases where only 1 value is important\n  , case\n      when urineoutput is null then null\n      when urineoutput <   400 then 15\n      when urineoutput <   600 then 8\n      when urineoutput <   900 then 7\n      when urineoutput <  1500 then 5\n      when urineoutput <  2000 then 4\n      when urineoutput <  4000 then 0\n      when urineoutput >= 4000 then 1\n  end as uo_score\n\n  , case\n      when endotrachflag = 1\n        -- here they are intubated, so their verbal score is inappropriate\n        -- normally you are supposed to use \"clinical judgement\"\n        -- we don't have that, so we just assume normal (as was done in the original study)\n        then 0\n      when gcseyes = 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 48\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 33\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 16\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor >= 5\n            -- highly unlikely clinical combination\n            then null\n          when gcsverbal >= 4\n            then null\n          end\n      when gcseyes > 1\n        then case\n          when gcsverbal = 1 and gcsmotor in (1,2)\n            then 29\n          when gcsverbal = 1 and gcsmotor in (3,4)\n            then 24\n          when gcsverbal = 1 and gcsmotor in (5,6)\n            then 15\n          when gcsverbal in (2,3) and gcsmotor in (1,2)\n            then 29\n          when gcsverbal in (2,3) and gcsmotor in (3,4)\n            then 24\n          when gcsverbal in (2,3) and gcsmotor = 5\n            then 13\n          when gcsverbal in (2,3) and gcsmotor = 6\n            then 10\n          when gcsverbal = 4 and gcsmotor in (1,2,3,4)\n            then 13\n          when gcsverbal = 4 and gcsmotor = 5\n            then 8\n          when gcsverbal = 4 and gcsmotor = 6\n            then 3\n          when gcsverbal = 5 and gcsmotor in (1,2,3,4,5)\n            then 3\n          when gcsverbal = 5 and gcsmotor = 6\n            then 0\n          end\n      else null\n    end as gcs_score\n\n  , case\n      when pao2 is null and aado2 is null\n        then null\n      when pao2 is not null then\n        case\n          when pao2 < 50 then 15\n          when pao2 < 70 then 5\n          when pao2 < 80 then 2\n        else 0 end\n      when aado2 is not null then\n        case\n          when aado2 <  100 then 0\n          when aado2 <  250 then 7\n          when aado2 <  350 then 9\n          when aado2 <  500 then 11\n          when aado2 >= 500 then 14\n        else 0 end\n      end as pao2_aado2_score\n\nfrom cohort co\nleft join score_min smin\n  on co.icustay_id = smin.icustay_id\nleft join score_max smax\n  on co.icustay_id = smax.icustay_id\n)\n-- tabulate the APS III using the scores from the worst values\n, score as\n(\n  select s.*\n  -- coalesce statements impute normal score of zero if data element is missing\n  , coalesce(hr_score,0)\n  + coalesce(meanbp_score,0)\n  + coalesce(temp_score,0)\n  + coalesce(resprate_score,0)\n  + coalesce(pao2_aado2_score,0)\n  + coalesce(hematocrit_score,0)\n  + coalesce(wbc_score,0)\n  + coalesce(creatinine_score,0)\n  + coalesce(uo_score,0)\n  + coalesce(bun_score,0)\n  + coalesce(sodium_score,0)\n  + coalesce(albumin_score,0)\n  + coalesce(bilirubin_score,0)\n  + coalesce(glucose_score,0)\n  + coalesce(acidbase_score,0)\n  + coalesce(gcs_score,0)\n    as apsiii\n  from scorecomp s\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n, apsiii\n-- Calculate probability of hospital mortality using equation from Johnson 2014.\n, 1 / (1 + exp(- (-4.4360 + 0.04726*(apsiii) ))) as apsiii_prob\n, hr_score\n, meanbp_score\n, temp_score\n, resprate_score\n, pao2_aado2_score\n, hematocrit_score\n, wbc_score\n, creatinine_score\n, uo_score\n, bun_score\n, sodium_score\n, albumin_score\n, bilirubin_score\n, glucose_score\n, acidbase_score\n, gcs_score\nFROM icustays ie\nleft join score s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["blood_gas_first_day_arterial"], ["urine_output_first_day"], ["labs_first_day"], ["ventilation_first_day"], ["gcs_first_day"], ["vitals_first_day"], ["urine_output_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"apsiii\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.apsiii", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:28.587605Z", "name": "compile", "started_at": "2022-07-18T00:18:28.577801Z"}, {"completed_at": "2022-07-18T00:18:32.714088Z", "name": "execute", "started_at": "2022-07-18T00:18:28.588410Z"}]}, "unique_id": "model.mimic.apsiii"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.apsiii", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.716189Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": "2022-07-18T00:18:32.716891", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.716961Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.oasis", "index": 104, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": "2022-07-18T00:18:32.716891", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "104 of 107 START table model public.oasis ...................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.717473Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.718485Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": "2022-07-18T00:18:32.716891", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.719145Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.719459Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.723518Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.724584Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.724964Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.oasis\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.734403Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.735153Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.735431Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.735643Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.744401Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.744674Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\n\n\n  create  table \"postgres\".\"public\".\"oasis__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (oasis)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced FROM chartevents)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced FROM admissions and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced FROM admissions and ICUSTAYS)\n--  Age (sourced FROM patients)\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n\nwith surgflag as\n(\n  select ie.icustay_id\n    , max(case\n        when lower(curr_service) like '%surg%' then 1\n        when curr_service = 'ORTHO' then 1\n    else 0 end) as surgical\n  FROM icustays ie\n  left join services se\n    on ie.hadm_id = se.hadm_id\n    and se.transfertime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n      , adm.deathtime\n      -- , DATETIME_DIFF(ie.intime, adm.admittime, MINUTE) as preiculos\n      , EXTRACT(MINUTE FROM ie.intime-adm.admittime) as preiculos\n      , EXTRACT(YEAR FROM ie.intime-pat.dob) as age\n      -- , DATETIME_DIFF(ie.intime, pat.dob, `YEAR`) as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.meanbp_max\n      , vital.meanbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 1\n          when adm.ADMISSION_TYPE is null or sf.surgical is null\n            then null\n          else 0\n        end as electivesurgery\n\n      -- age group\n      , case\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 1 then 'neonate'\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 15 then 'middle'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 1 then 'neonate'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 15 then 'middle'\n        else 'adult' end as icustay_age_group\n\n      -- mortality flags\n      , case\n          when adm.deathtime between ie.intime and ie.outtime\n            then 1\n          when adm.deathtime <= ie.intime -- sometimes there are typographical errors in the death date\n            then 1\n          when adm.dischtime <= ie.outtime and adm.discharge_location = 'DEAD/EXPIRED'\n            then 1\n          else 0 end\n        as icustay_expire_flag\n      , adm.hospital_expire_flag\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\nleft join surgflag sf\n  on ie.icustay_id = sf.icustay_id\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\n)\n, scorecomp as\n(\nselect co.subject_id, co.hadm_id, co.icustay_id\n, co.icustay_age_group\n, co.icustay_expire_flag\n, co.hospital_expire_flag\n\n-- Below code calculates the component scores needed for oasis\n, case when preiculos is null then null\n     when preiculos < 10.2 then 5\n     when preiculos < 297 then 3\n     when preiculos < 1440 then 0\n     when preiculos < 18708 then 1\n     else 2 end as preiculos_score\n,  case when age is null then null\n      when age < 24 then 0\n      when age <= 53 then 3\n      when age <= 77 then 6\n      when age <= 89 then 9\n      when age >= 90 then 7\n      else 0 end as age_score\n,  case when mingcs is null then null\n      when mingcs <= 7 then 10\n      when mingcs < 14 then 4\n      when mingcs = 14 then 3\n      else 0 end as gcs_score\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then 6\n      when heartrate_min < 33 then 4\n      when heartrate_max >= 107 and heartrate_max <= 125 then 3\n      when heartrate_max >= 89 and heartrate_max <= 106 then 1\n      else 0 end as heartrate_score\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then 4\n      when meanbp_min < 51 then 3\n      when meanbp_max > 143.44 then 3\n      when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n      else 0 end as meanbp_score\n,  case when resprate_min is null then null\n      when resprate_min <   6 then 10\n      when resprate_max >  44 then  9\n      when resprate_max >  30 then  6\n      when resprate_max >  22 then  1\n      when resprate_min <  13 then 1 else 0\n      end as resprate_score\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then 6\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n      when tempc_min < 33.22 then 3\n      when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n      else 0 end as temp_score\n,  case when UrineOutput is null then null\n      when UrineOutput < 671.09 then 10\n      when UrineOutput > 6896.80 then 8\n      when UrineOutput >= 671.09\n       and UrineOutput <= 1426.99 then 5\n      when UrineOutput >= 1427.00\n       and UrineOutput <= 2544.14 then 1\n      else 0 end as urineoutput_score\n,  case when mechvent is null then null\n      when mechvent = 1 then 9\n      else 0 end as mechvent_score\n,  case when electivesurgery is null then null\n      when electivesurgery = 1 then 0\n      else 6 end as electivesurgery_score\n\n\n-- The below code gives the component associated with each score\n-- This is not needed to calculate oasis, but provided for user convenience.\n-- If both the min/max are in the normal range (score of 0), then the average value is stored.\n, preiculos\n, age\n, mingcs as gcs\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then heartrate_max\n      when heartrate_min < 33 then heartrate_min\n      when heartrate_max >= 107 and heartrate_max <= 125 then heartrate_max\n      when heartrate_max >= 89 and heartrate_max <= 106 then heartrate_max\n      else (heartrate_min+heartrate_max)/2 end as heartrate\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then meanbp_min\n      when meanbp_min < 51 then meanbp_min\n      when meanbp_max > 143.44 then meanbp_max\n      when meanbp_min >= 51 and meanbp_min < 61.33 then meanbp_min\n      else (meanbp_min+meanbp_max)/2 end as meanbp\n,  case when resprate_min is null then null\n      when resprate_min <   6 then resprate_min\n      when resprate_max >  44 then resprate_max\n      when resprate_max >  30 then resprate_max\n      when resprate_max >  22 then resprate_max\n      when resprate_min <  13 then resprate_min\n      else (resprate_min+resprate_max)/2 end as resprate\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then tempc_max\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then tempc_min\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then tempc_max\n      when tempc_min < 33.22 then tempc_min\n      when tempc_min > 35.93 and tempc_min <= 36.39 then tempc_min\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then tempc_max\n      else (tempc_min+tempc_max)/2 end as temp\n,  UrineOutput\n,  mechvent\n,  electivesurgery\nfrom cohort co\n)\n, score as\n(\nselect s.*\n    , coalesce(age_score,0)\n    + coalesce(preiculos_score,0)\n    + coalesce(gcs_score,0)\n    + coalesce(heartrate_score,0)\n    + coalesce(meanbp_score,0)\n    + coalesce(resprate_score,0)\n    + coalesce(temp_score,0)\n    + coalesce(urineoutput_score,0)\n    + coalesce(mechvent_score,0)\n    + coalesce(electivesurgery_score,0)\n    as oasis\nfrom scorecomp s\n)\nselect\n  subject_id, hadm_id, icustay_id\n  , icustay_age_group\n  , hospital_expire_flag\n  , icustay_expire_flag\n  , oasis\n  -- Calculate the probability of in-hospital mortality\n  , 1 / (1 + exp(- (-6.1746 + 0.1275*(oasis) ))) as oasis_PROB\n  , age, age_score\n  , preiculos, preiculos_score\n  , gcs, gcs_score\n  , heartrate, heartrate_score\n  , meanbp, meanbp_score\n  , resprate, resprate_score\n  , temp, temp_score\n  , urineoutput, urineoutput_score\n  , mechvent, mechvent_score\n  , electivesurgery, electivesurgery_score\nfrom score\norder by icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\n\n\n  create  table \"postgres\".\"public\".\"oasis__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (oasis)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced FROM chartevents)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced FROM admissions and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced FROM admissions and ICUSTAYS)\n--  Age (sourced FROM patients)\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n\nwith surgflag as\n(\n  select ie.icustay_id\n    , max(case\n        when lower(curr_service) like '%surg%' then 1\n        when curr_service = 'ORTHO' then 1\n    else 0 end) as surgical\n  FROM icustays ie\n  left join services se\n    on ie.hadm_id = se.hadm_id\n    and se.transfertime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n      , adm.deathtime\n      -- , DATETIME_DIFF(ie.intime, adm.admittime, MINUTE) as preiculos\n      , EXTRACT(MINUTE FROM ie.intime-adm.admittime) as preiculos\n      , EXTRACT(YEAR FROM ie.intime-pat.dob) as age\n      -- , DATETIME_DIFF(ie.intime, pat.dob, `YEAR`) as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.meanbp_max\n      , vital.meanbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 1\n          when adm.ADMISSION_TYPE is null or sf.surgical is null\n            then null\n          else 0\n        end as electivesurgery\n\n      -- age group\n      , case\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 1 then 'neonate'\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 15 then 'middle'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 1 then 'neonate'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 15 then 'middle'\n        else 'adult' end as icustay_age_group\n\n      -- mortality flags\n      , case\n          when adm.deathtime between ie.intime and ie.outtime\n            then 1\n          when adm.deathtime <= ie.intime -- sometimes there are typographical errors in the death date\n            then 1\n          when adm.dischtime <= ie.outtime and adm.discharge_location = 'DEAD/EXPIRED'\n            then 1\n          else 0 end\n        as icustay_expire_flag\n      , adm.hospital_expire_flag\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\nleft join surgflag sf\n  on ie.icustay_id = sf.icustay_id\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\n)\n, scorecomp as\n(\nselect co.subject_id, co.hadm_id, co.icustay_id\n, co.icustay_age_group\n, co.icustay_expire_flag\n, co.hospital_expire_flag\n\n-- Below code calculates the component scores needed for oasis\n, case when preiculos is null then null\n     when preiculos < 10.2 then 5\n     when preiculos < 297 then 3\n     when preiculos < 1440 then 0\n     when preiculos < 18708 then 1\n     else 2 end as preiculos_score\n,  case when age is null then null\n      when age < 24 then 0\n      when age <= 53 then 3\n      when age <= 77 then 6\n      when age <= 89 then 9\n      when age >= 90 then 7\n      else 0 end as age_score\n,  case when mingcs is null then null\n      when mingcs <= 7 then 10\n      when mingcs < 14 then 4\n      when mingcs = 14 then 3\n      else 0 end as gcs_score\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then 6\n      when heartrate_min < 33 then 4\n      when heartrate_max >= 107 and heartrate_max <= 125 then 3\n      when heartrate_max >= 89 and heartrate_max <= 106 then 1\n      else 0 end as heartrate_score\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then 4\n      when meanbp_min < 51 then 3\n      when meanbp_max > 143.44 then 3\n      when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n      else 0 end as meanbp_score\n,  case when resprate_min is null then null\n      when resprate_min <   6 then 10\n      when resprate_max >  44 then  9\n      when resprate_max >  30 then  6\n      when resprate_max >  22 then  1\n      when resprate_min <  13 then 1 else 0\n      end as resprate_score\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then 6\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n      when tempc_min < 33.22 then 3\n      when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n      else 0 end as temp_score\n,  case when UrineOutput is null then null\n      when UrineOutput < 671.09 then 10\n      when UrineOutput > 6896.80 then 8\n      when UrineOutput >= 671.09\n       and UrineOutput <= 1426.99 then 5\n      when UrineOutput >= 1427.00\n       and UrineOutput <= 2544.14 then 1\n      else 0 end as urineoutput_score\n,  case when mechvent is null then null\n      when mechvent = 1 then 9\n      else 0 end as mechvent_score\n,  case when electivesurgery is null then null\n      when electivesurgery = 1 then 0\n      else 6 end as electivesurgery_score\n\n\n-- The below code gives the component associated with each score\n-- This is not needed to calculate oasis, but provided for user convenience.\n-- If both the min/max are in the normal range (score of 0), then the average value is stored.\n, preiculos\n, age\n, mingcs as gcs\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then heartrate_max\n      when heartrate_min < 33 then heartrate_min\n      when heartrate_max >= 107 and heartrate_max <= 125 then heartrate_max\n      when heartrate_max >= 89 and heartrate_max <= 106 then heartrate_max\n      else (heartrate_min+heartrate_max)/2 end as heartrate\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then meanbp_min\n      when meanbp_min < 51 then meanbp_min\n      when meanbp_max > 143.44 then meanbp_max\n      when meanbp_min >= 51 and meanbp_min < 61.33 then meanbp_min\n      else (meanbp_min+meanbp_max)/2 end as meanbp\n,  case when resprate_min is null then null\n      when resprate_min <   6 then resprate_min\n      when resprate_max >  44 then resprate_max\n      when resprate_max >  30 then resprate_max\n      when resprate_max >  22 then resprate_max\n      when resprate_min <  13 then resprate_min\n      else (resprate_min+resprate_max)/2 end as resprate\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then tempc_max\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then tempc_min\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then tempc_max\n      when tempc_min < 33.22 then tempc_min\n      when tempc_min > 35.93 and tempc_min <= 36.39 then tempc_min\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then tempc_max\n      else (tempc_min+tempc_max)/2 end as temp\n,  UrineOutput\n,  mechvent\n,  electivesurgery\nfrom cohort co\n)\n, score as\n(\nselect s.*\n    , coalesce(age_score,0)\n    + coalesce(preiculos_score,0)\n    + coalesce(gcs_score,0)\n    + coalesce(heartrate_score,0)\n    + coalesce(meanbp_score,0)\n    + coalesce(resprate_score,0)\n    + coalesce(temp_score,0)\n    + coalesce(urineoutput_score,0)\n    + coalesce(mechvent_score,0)\n    + coalesce(electivesurgery_score,0)\n    as oasis\nfrom scorecomp s\n)\nselect\n  subject_id, hadm_id, icustay_id\n  , icustay_age_group\n  , hospital_expire_flag\n  , icustay_expire_flag\n  , oasis\n  -- Calculate the probability of in-hospital mortality\n  , 1 / (1 + exp(- (-6.1746 + 0.1275*(oasis) ))) as oasis_PROB\n  , age, age_score\n  , preiculos, preiculos_score\n  , gcs, gcs_score\n  , heartrate, heartrate_score\n  , meanbp, meanbp_score\n  , resprate, resprate_score\n  , temp, temp_score\n  , urineoutput, urineoutput_score\n  , mechvent, mechvent_score\n  , electivesurgery, electivesurgery_score\nfrom score\norder by icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:32.745066Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 1.1, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 1.1 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.847046Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.852977Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\nalter table \"postgres\".\"public\".\"oasis\" rename to \"oasis__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\nalter table \"postgres\".\"public\".\"oasis\" rename to \"oasis__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.853618Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.855335Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.860688Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\nalter table \"postgres\".\"public\".\"oasis__dbt_tmp\" rename to \"oasis\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\nalter table \"postgres\".\"public\".\"oasis__dbt_tmp\" rename to \"oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.860925Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.861468Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.864455Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.864674Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.865051Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.878127Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.oasis", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.oasis\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.881202Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.oasis", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\ndrop table if exists \"postgres\".\"public\".\"oasis__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.oasis\"} */\ndrop table if exists \"postgres\".\"public\".\"oasis__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.881480Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.884445Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.889218Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.oasis: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.889859Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.oasis", "execution_time": 1, "index": 104, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": "2022-07-18T00:18:32.716891", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "104 of 107 OK created table model public.oasis ................................. [\u001b[32mSELECT 61532\u001b[0m in 1.17s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.891114Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:33.891699", "node_name": "oasis", "node_path": "severityscores/oasis.sql", "node_started_at": "2022-07-18T00:18:32.716891", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.oasis"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 1.172760248184204, "failures": null, "message": "SELECT 61532", "node": {"alias": "oasis", "build_path": "target/run/mimic/models/severityscores/oasis.sql", "checksum": {"checksum": "58f24157470781b10bbef75830786a37dfb77476761765c9419ea3a73ae4b9ec", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/oasis.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (oasis)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced FROM chartevents)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced FROM admissions and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced FROM admissions and ICUSTAYS)\n--  Age (sourced FROM patients)\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n\nwith surgflag as\n(\n  select ie.icustay_id\n    , max(case\n        when lower(curr_service) like '%surg%' then 1\n        when curr_service = 'ORTHO' then 1\n    else 0 end) as surgical\n  FROM icustays ie\n  left join services se\n    on ie.hadm_id = se.hadm_id\n    and se.transfertime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n      , adm.deathtime\n      -- , DATETIME_DIFF(ie.intime, adm.admittime, MINUTE) as preiculos\n      , EXTRACT(MINUTE FROM ie.intime-adm.admittime) as preiculos\n      , EXTRACT(YEAR FROM ie.intime-pat.dob) as age\n      -- , DATETIME_DIFF(ie.intime, pat.dob, `YEAR`) as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.meanbp_max\n      , vital.meanbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 1\n          when adm.ADMISSION_TYPE is null or sf.surgical is null\n            then null\n          else 0\n        end as electivesurgery\n\n      -- age group\n      , case\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 1 then 'neonate'\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 15 then 'middle'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 1 then 'neonate'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 15 then 'middle'\n        else 'adult' end as icustay_age_group\n\n      -- mortality flags\n      , case\n          when adm.deathtime between ie.intime and ie.outtime\n            then 1\n          when adm.deathtime <= ie.intime -- sometimes there are typographical errors in the death date\n            then 1\n          when adm.dischtime <= ie.outtime and adm.discharge_location = 'DEAD/EXPIRED'\n            then 1\n          else 0 end\n        as icustay_expire_flag\n      , adm.hospital_expire_flag\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\nleft join surgflag sf\n  on ie.icustay_id = sf.icustay_id\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\n)\n, scorecomp as\n(\nselect co.subject_id, co.hadm_id, co.icustay_id\n, co.icustay_age_group\n, co.icustay_expire_flag\n, co.hospital_expire_flag\n\n-- Below code calculates the component scores needed for oasis\n, case when preiculos is null then null\n     when preiculos < 10.2 then 5\n     when preiculos < 297 then 3\n     when preiculos < 1440 then 0\n     when preiculos < 18708 then 1\n     else 2 end as preiculos_score\n,  case when age is null then null\n      when age < 24 then 0\n      when age <= 53 then 3\n      when age <= 77 then 6\n      when age <= 89 then 9\n      when age >= 90 then 7\n      else 0 end as age_score\n,  case when mingcs is null then null\n      when mingcs <= 7 then 10\n      when mingcs < 14 then 4\n      when mingcs = 14 then 3\n      else 0 end as gcs_score\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then 6\n      when heartrate_min < 33 then 4\n      when heartrate_max >= 107 and heartrate_max <= 125 then 3\n      when heartrate_max >= 89 and heartrate_max <= 106 then 1\n      else 0 end as heartrate_score\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then 4\n      when meanbp_min < 51 then 3\n      when meanbp_max > 143.44 then 3\n      when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n      else 0 end as meanbp_score\n,  case when resprate_min is null then null\n      when resprate_min <   6 then 10\n      when resprate_max >  44 then  9\n      when resprate_max >  30 then  6\n      when resprate_max >  22 then  1\n      when resprate_min <  13 then 1 else 0\n      end as resprate_score\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then 6\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n      when tempc_min < 33.22 then 3\n      when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n      else 0 end as temp_score\n,  case when UrineOutput is null then null\n      when UrineOutput < 671.09 then 10\n      when UrineOutput > 6896.80 then 8\n      when UrineOutput >= 671.09\n       and UrineOutput <= 1426.99 then 5\n      when UrineOutput >= 1427.00\n       and UrineOutput <= 2544.14 then 1\n      else 0 end as urineoutput_score\n,  case when mechvent is null then null\n      when mechvent = 1 then 9\n      else 0 end as mechvent_score\n,  case when electivesurgery is null then null\n      when electivesurgery = 1 then 0\n      else 6 end as electivesurgery_score\n\n\n-- The below code gives the component associated with each score\n-- This is not needed to calculate oasis, but provided for user convenience.\n-- If both the min/max are in the normal range (score of 0), then the average value is stored.\n, preiculos\n, age\n, mingcs as gcs\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then heartrate_max\n      when heartrate_min < 33 then heartrate_min\n      when heartrate_max >= 107 and heartrate_max <= 125 then heartrate_max\n      when heartrate_max >= 89 and heartrate_max <= 106 then heartrate_max\n      else (heartrate_min+heartrate_max)/2 end as heartrate\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then meanbp_min\n      when meanbp_min < 51 then meanbp_min\n      when meanbp_max > 143.44 then meanbp_max\n      when meanbp_min >= 51 and meanbp_min < 61.33 then meanbp_min\n      else (meanbp_min+meanbp_max)/2 end as meanbp\n,  case when resprate_min is null then null\n      when resprate_min <   6 then resprate_min\n      when resprate_max >  44 then resprate_max\n      when resprate_max >  30 then resprate_max\n      when resprate_max >  22 then resprate_max\n      when resprate_min <  13 then resprate_min\n      else (resprate_min+resprate_max)/2 end as resprate\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then tempc_max\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then tempc_min\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then tempc_max\n      when tempc_min < 33.22 then tempc_min\n      when tempc_min > 35.93 and tempc_min <= 36.39 then tempc_min\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then tempc_max\n      else (tempc_min+tempc_max)/2 end as temp\n,  UrineOutput\n,  mechvent\n,  electivesurgery\nfrom cohort co\n)\n, score as\n(\nselect s.*\n    , coalesce(age_score,0)\n    + coalesce(preiculos_score,0)\n    + coalesce(gcs_score,0)\n    + coalesce(heartrate_score,0)\n    + coalesce(meanbp_score,0)\n    + coalesce(resprate_score,0)\n    + coalesce(temp_score,0)\n    + coalesce(urineoutput_score,0)\n    + coalesce(mechvent_score,0)\n    + coalesce(electivesurgery_score,0)\n    as oasis\nfrom scorecomp s\n)\nselect\n  subject_id, hadm_id, icustay_id\n  , icustay_age_group\n  , hospital_expire_flag\n  , icustay_expire_flag\n  , oasis\n  -- Calculate the probability of in-hospital mortality\n  , 1 / (1 + exp(- (-6.1746 + 0.1275*(oasis) ))) as oasis_PROB\n  , age, age_score\n  , preiculos, preiculos_score\n  , gcs, gcs_score\n  , heartrate, heartrate_score\n  , meanbp, meanbp_score\n  , resprate, resprate_score\n  , temp, temp_score\n  , urineoutput, urineoutput_score\n  , mechvent, mechvent_score\n  , electivesurgery, electivesurgery_score\nfrom score\norder by icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7157285, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.urine_output_first_day", "model.mimic.ventilation_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "oasis"], "meta": {}, "name": "oasis", "original_file_path": "models/severityscores/oasis.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/oasis.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Oxford Acute Severity of Illness Score (oasis)\n-- This query extracts the Oxford acute severity of illness score.\n-- This score is a measure of severity of illness for patients in the ICU.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for OASIS:\n--    Johnson, Alistair EW, Andrew A. Kramer, and Gari D. Clifford.\n--    \"A new severity of illness scale using a subset of acute physiology and chronic health evaluation data elements shows comparable predictive accuracy*.\"\n--    Critical care medicine 41, no. 7 (2013): 1711-1718.\n\n-- Variables used in OASIS:\n--  Heart rate, GCS, MAP, Temperature, Respiratory rate, Ventilation status (sourced FROM chartevents)\n--  Urine output (sourced from OUTPUTEVENTS)\n--  Elective surgery (sourced FROM admissions and SERVICES)\n--  Pre-ICU in-hospital length of stay (sourced FROM admissions and ICUSTAYS)\n--  Age (sourced FROM patients)\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n\n\n-- Regarding missing values:\n--  The ventilation flag is always 0/1. It cannot be missing, since VENT=0 if no data is found for vent settings.\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n\nwith surgflag as\n(\n  select ie.icustay_id\n    , max(case\n        when lower(curr_service) like '%surg%' then 1\n        when curr_service = 'ORTHO' then 1\n    else 0 end) as surgical\n  FROM icustays ie\n  left join services se\n    on ie.hadm_id = se.hadm_id\n    and se.transfertime < DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n      , adm.deathtime\n      -- , DATETIME_DIFF(ie.intime, adm.admittime, MINUTE) as preiculos\n      , EXTRACT(MINUTE FROM ie.intime-adm.admittime) as preiculos\n      , EXTRACT(YEAR FROM ie.intime-pat.dob) as age\n      -- , DATETIME_DIFF(ie.intime, pat.dob, `YEAR`) as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.meanbp_max\n      , vital.meanbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , case\n          when adm.ADMISSION_TYPE = 'ELECTIVE' and sf.surgical = 1\n            then 1\n          when adm.ADMISSION_TYPE is null or sf.surgical is null\n            then null\n          else 0\n        end as electivesurgery\n\n      -- age group\n      , case\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 1 then 'neonate'\n        when DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') <= 15 then 'middle'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 1 then 'neonate'\n        -- when EXTRACT(YEAR FROM ie.intime-pat.dob) <= 15 then 'middle'\n        else 'adult' end as icustay_age_group\n\n      -- mortality flags\n      , case\n          when adm.deathtime between ie.intime and ie.outtime\n            then 1\n          when adm.deathtime <= ie.intime -- sometimes there are typographical errors in the death date\n            then 1\n          when adm.dischtime <= ie.outtime and adm.discharge_location = 'DEAD/EXPIRED'\n            then 1\n          else 0 end\n        as icustay_expire_flag\n      , adm.hospital_expire_flag\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\nleft join surgflag sf\n  on ie.icustay_id = sf.icustay_id\n-- join to custom tables to get more data....\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('ventilation_first_day')}} vent\n  on ie.icustay_id = vent.icustay_id\n)\n, scorecomp as\n(\nselect co.subject_id, co.hadm_id, co.icustay_id\n, co.icustay_age_group\n, co.icustay_expire_flag\n, co.hospital_expire_flag\n\n-- Below code calculates the component scores needed for oasis\n, case when preiculos is null then null\n     when preiculos < 10.2 then 5\n     when preiculos < 297 then 3\n     when preiculos < 1440 then 0\n     when preiculos < 18708 then 1\n     else 2 end as preiculos_score\n,  case when age is null then null\n      when age < 24 then 0\n      when age <= 53 then 3\n      when age <= 77 then 6\n      when age <= 89 then 9\n      when age >= 90 then 7\n      else 0 end as age_score\n,  case when mingcs is null then null\n      when mingcs <= 7 then 10\n      when mingcs < 14 then 4\n      when mingcs = 14 then 3\n      else 0 end as gcs_score\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then 6\n      when heartrate_min < 33 then 4\n      when heartrate_max >= 107 and heartrate_max <= 125 then 3\n      when heartrate_max >= 89 and heartrate_max <= 106 then 1\n      else 0 end as heartrate_score\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then 4\n      when meanbp_min < 51 then 3\n      when meanbp_max > 143.44 then 3\n      when meanbp_min >= 51 and meanbp_min < 61.33 then 2\n      else 0 end as meanbp_score\n,  case when resprate_min is null then null\n      when resprate_min <   6 then 10\n      when resprate_max >  44 then  9\n      when resprate_max >  30 then  6\n      when resprate_max >  22 then  1\n      when resprate_min <  13 then 1 else 0\n      end as resprate_score\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then 6\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then 4\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then 4\n      when tempc_min < 33.22 then 3\n      when tempc_min > 35.93 and tempc_min <= 36.39 then 2\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then 2\n      else 0 end as temp_score\n,  case when UrineOutput is null then null\n      when UrineOutput < 671.09 then 10\n      when UrineOutput > 6896.80 then 8\n      when UrineOutput >= 671.09\n       and UrineOutput <= 1426.99 then 5\n      when UrineOutput >= 1427.00\n       and UrineOutput <= 2544.14 then 1\n      else 0 end as urineoutput_score\n,  case when mechvent is null then null\n      when mechvent = 1 then 9\n      else 0 end as mechvent_score\n,  case when electivesurgery is null then null\n      when electivesurgery = 1 then 0\n      else 6 end as electivesurgery_score\n\n\n-- The below code gives the component associated with each score\n-- This is not needed to calculate oasis, but provided for user convenience.\n-- If both the min/max are in the normal range (score of 0), then the average value is stored.\n, preiculos\n, age\n, mingcs as gcs\n,  case when heartrate_max is null then null\n      when heartrate_max > 125 then heartrate_max\n      when heartrate_min < 33 then heartrate_min\n      when heartrate_max >= 107 and heartrate_max <= 125 then heartrate_max\n      when heartrate_max >= 89 and heartrate_max <= 106 then heartrate_max\n      else (heartrate_min+heartrate_max)/2 end as heartrate\n,  case when meanbp_min is null then null\n      when meanbp_min < 20.65 then meanbp_min\n      when meanbp_min < 51 then meanbp_min\n      when meanbp_max > 143.44 then meanbp_max\n      when meanbp_min >= 51 and meanbp_min < 61.33 then meanbp_min\n      else (meanbp_min+meanbp_max)/2 end as meanbp\n,  case when resprate_min is null then null\n      when resprate_min <   6 then resprate_min\n      when resprate_max >  44 then resprate_max\n      when resprate_max >  30 then resprate_max\n      when resprate_max >  22 then resprate_max\n      when resprate_min <  13 then resprate_min\n      else (resprate_min+resprate_max)/2 end as resprate\n,  case when tempc_max is null then null\n      when tempc_max > 39.88 then tempc_max\n      when tempc_min >= 33.22 and tempc_min <= 35.93 then tempc_min\n      when tempc_max >= 33.22 and tempc_max <= 35.93 then tempc_max\n      when tempc_min < 33.22 then tempc_min\n      when tempc_min > 35.93 and tempc_min <= 36.39 then tempc_min\n      when tempc_max >= 36.89 and tempc_max <= 39.88 then tempc_max\n      else (tempc_min+tempc_max)/2 end as temp\n,  UrineOutput\n,  mechvent\n,  electivesurgery\nfrom cohort co\n)\n, score as\n(\nselect s.*\n    , coalesce(age_score,0)\n    + coalesce(preiculos_score,0)\n    + coalesce(gcs_score,0)\n    + coalesce(heartrate_score,0)\n    + coalesce(meanbp_score,0)\n    + coalesce(resprate_score,0)\n    + coalesce(temp_score,0)\n    + coalesce(urineoutput_score,0)\n    + coalesce(mechvent_score,0)\n    + coalesce(electivesurgery_score,0)\n    as oasis\nfrom scorecomp s\n)\nselect\n  subject_id, hadm_id, icustay_id\n  , icustay_age_group\n  , hospital_expire_flag\n  , icustay_expire_flag\n  , oasis\n  -- Calculate the probability of in-hospital mortality\n  , 1 / (1 + exp(- (-6.1746 + 0.1275*(oasis) ))) as oasis_PROB\n  , age, age_score\n  , preiculos, preiculos_score\n  , gcs, gcs_score\n  , heartrate, heartrate_score\n  , meanbp, meanbp_score\n  , resprate, resprate_score\n  , temp, temp_score\n  , urineoutput, urineoutput_score\n  , mechvent, mechvent_score\n  , electivesurgery, electivesurgery_score\nfrom score\norder by icustay_id", "refs": [["gcs_first_day"], ["vitals_first_day"], ["urine_output_first_day"], ["ventilation_first_day"]], "relation_name": "\"postgres\".\"public\".\"oasis\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.oasis", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:32.724469Z", "name": "compile", "started_at": "2022-07-18T00:18:32.719434Z"}, {"completed_at": "2022-07-18T00:18:33.889160Z", "name": "execute", "started_at": "2022-07-18T00:18:32.725118Z"}]}, "unique_id": "model.mimic.oasis"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.oasis", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.891871Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": "2022-07-18T00:18:33.892497", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.saps"}, "unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.saps", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.892573Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.saps", "index": 105, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": "2022-07-18T00:18:33.892497", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.saps"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "105 of 107 START table model public.saps ....................................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.893095Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.893895Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": "2022-07-18T00:18:33.892497", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.saps"}, "unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.saps", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.894222Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.saps", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.894628Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.899569Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.900292Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.saps"}, "unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.saps", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.900645Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.saps\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.912015Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.912779Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.913055Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.913198Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.919053Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.919359Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\n\n\n  create  table \"postgres\".\"public\".\"saps__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score (SAPS)\n-- This query extracts the simplified acute physiology score.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS:\n--    Jean-Roger Le Gall, Philippe Loirat, Annick Alperovitch, Paul Glaser, Claude Granthil,\n--    Daniel Mathieu, Philippe Mercier, Remi Thomas, and Daniel Villers.\n--    \"A simplified acute physiology score for ICU patients.\"\n--    Critical care medicine 12, no. 11 (1984): 975-977.\n\n-- Variables used in SAPS:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, hematocrit, WBC, glucose, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n  , max(CASE\n        WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n        WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n      else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      , coalesce(vital.glucose_max, labs.glucose_max) as glucose_max\n      , coalesce(vital.glucose_min, labs.glucose_min) as glucose_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.hematocrit_max\n      , labs.hematocrit_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.sodium_max\n      , labs.sodium_min\n      , labs.potassium_max\n      , labs.potassium_min\n      , labs.bicarbonate_max\n      , labs.bicarbonate_min\n\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , cp.cpap\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get CPAP\nleft join cpap cp\n  on ie.icustay_id = cp.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <= 45 then 0\n      when age <= 55 then 1\n      when age <= 65 then 2\n      when age <= 75 then 3\n      when age >  75 then 4\n    end as age_score\n  , case\n      when heartrate_max is null then null\n      when heartrate_max >= 180 then 4\n      when heartrate_min < 40 then 4\n      when heartrate_max >= 140 then 3\n      when heartrate_min <= 54 then 3\n      when heartrate_max >= 110 then 2\n      when heartrate_min <= 69 then 2\n      when heartrate_max >= 70 and heartrate_max <= 109\n        and heartrate_min >= 70 and heartrate_min <= 109\n      then 0\n    end as hr_score\n  , case\n      when sysbp_min is null then null\n      when sysbp_max >= 190 then 4\n      when sysbp_min < 55 then 4\n      when sysbp_max >= 150 then 2\n      when sysbp_min <= 79 then 2\n      when sysbp_max >= 80 and sysbp_max <= 149\n        and sysbp_min >= 80 and sysbp_min <= 149\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_max >= 41.0 then 4\n      when tempc_min <  30.0 then 4\n      when tempc_max >= 39.0 then 3\n      when tempc_min <= 31.9  then 3\n      when tempc_min <= 33.9  then 2\n      when tempc_max >  38.4 then 1\n      when tempc_min <  36.0  then 1\n      when tempc_max >= 36.0 and tempc_max <= 38.4\n       and tempc_min >= 36.0 and tempc_min <= 38.4\n        then 0\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      when resprate_max >= 50 then 4\n      when resprate_min <  6 then 4\n      when resprate_max >= 35 then 3\n      when resprate_min <= 9 then 2\n      when resprate_max >= 25 then 1\n      when resprate_min <= 11 then 1\n      when  resprate_max >= 12 and resprate_max <= 24\n        and resprate_min >= 12 and resprate_min <= 24\n          then 0\n      end as resp_score\n\n  , case\n      when coalesce(mechvent,cpap) is null then null\n      when cpap = 1 then 3\n      when mechvent = 1 then 3\n      else 0\n    end as vent_score\n\n  , case\n      when UrineOutput is null then null\n      when UrineOutput >  5000.0 then 2\n      when UrineOutput >= 3500.0 then 1\n      when UrineOutput >=  700.0 then 0\n      when UrineOutput >=  500.0 then 2\n      when UrineOutput >=  200.0 then 3\n      when UrineOutput <   200.0 then 4\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max >= 55.0 then 4\n      when bun_max >= 36.0 then 3\n      when bun_max >= 29.0 then 2\n      when bun_max >= 7.50 then 1\n      when bun_min < 3.5 then 1\n      when  bun_max >= 3.5 and bun_max < 7.5\n        and bun_min >= 3.5 and bun_min < 7.5\n          then 0\n    end as bun_score\n\n  , case\n      when hematocrit_max is null then null\n      when hematocrit_max >= 60.0 then 4\n      when hematocrit_min <  20.0 then 4\n      when hematocrit_max >= 50.0 then 2\n      when hematocrit_min < 30.0 then 2\n      when hematocrit_max >= 46.0 then 1\n      when  hematocrit_max >= 30.0 and hematocrit_max < 46.0\n        and hematocrit_min >= 30.0 and hematocrit_min < 46.0\n          then 0\n      end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_max >= 40.0 then 4\n      when wbc_min <   1.0 then 4\n      when wbc_max >= 20.0 then 2\n      when wbc_min <   3.0 then 2\n      when wbc_max >= 15.0 then 1\n      when wbc_max >=  3.0 and wbc_max < 15.0\n       and wbc_min >=  3.0 and wbc_min < 15.0\n        then 0\n    end as wbc_score\n\n  , case\n      when glucose_max is null then null\n      when glucose_max >= 44.5 then 4\n      when glucose_min <   1.6 then 4\n      when glucose_max >= 27.8 then 3\n      when glucose_min <   2.8 then 3\n      when glucose_min <   3.9 then 2\n      when glucose_max >= 14.0 then 1\n      when glucose_max >=  3.9 and glucose_max < 14.0\n       and glucose_min >=  3.9 and glucose_min < 14.0\n        then 0\n      end as glucose_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_max >= 7.0 then 4\n      when potassium_min <  2.5 then 4\n      when potassium_max >= 6.0 then 3\n      when potassium_min <  3.0 then 2\n      when potassium_max >= 5.5 then 1\n      when potassium_min <  3.5 then 1\n      when potassium_max >= 3.5 and potassium_max < 5.5\n       and potassium_min >= 3.5 and potassium_min < 5.5\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_max >= 180 then 4\n      when sodium_min  < 110 then 4\n      when sodium_max >= 161 then 3\n      when sodium_min  < 120 then 3\n      when sodium_max >= 156 then 2\n      when sodium_min  < 130 then 2\n      when sodium_max >= 151 then 1\n      when sodium_max >= 130 and sodium_max < 151\n       and sodium_min >= 130 and sodium_min < 151\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <   5.0 then 4\n      when bicarbonate_max >= 40.0 then 3\n      when bicarbonate_min <  10.0 then 3\n      when bicarbonate_max >= 30.0 then 1\n      when bicarbonate_min <  20.0 then 1\n      when bicarbonate_max >= 20.0 and bicarbonate_max < 30.0\n       and bicarbonate_min >= 20.0 and bicarbonate_min < 30.0\n          then 0\n      end as bicarbonate_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs =  3 then 4\n        when mingcs <  7 then 3\n        when mingcs < 10 then 2\n        when mingcs < 13 then 1\n        when mingcs >= 13\n         and mingcs <= 15\n          then 0\n        end as gcs_score\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(age_score,0)\n+ coalesce(hr_score,0)\n+ coalesce(sysbp_score,0)\n+ coalesce(resp_score,0)\n+ coalesce(temp_score,0)\n+ coalesce(uo_score,0)\n+ coalesce(vent_score,0)\n+ coalesce(bun_score,0)\n+ coalesce(hematocrit_score,0)\n+ coalesce(wbc_score,0)\n+ coalesce(glucose_score,0)\n+ coalesce(potassium_score,0)\n+ coalesce(sodium_score,0)\n+ coalesce(bicarbonate_score,0)\n+ coalesce(gcs_score,0)\n  as SAPS\n, age_score\n, hr_score\n, sysbp_score\n, resp_score\n, temp_score\n, uo_score\n, vent_score\n, bun_score\n, hematocrit_score\n, wbc_score\n, glucose_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, gcs_score\n\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\n\n\n  create  table \"postgres\".\"public\".\"saps__dbt_tmp\"\n  as (\n    -- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score (SAPS)\n-- This query extracts the simplified acute physiology score.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS:\n--    Jean-Roger Le Gall, Philippe Loirat, Annick Alperovitch, Paul Glaser, Claude Granthil,\n--    Daniel Mathieu, Philippe Mercier, Remi Thomas, and Daniel Villers.\n--    \"A simplified acute physiology score for ICU patients.\"\n--    Critical care medicine 12, no. 11 (1984): 975-977.\n\n-- Variables used in SAPS:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, hematocrit, WBC, glucose, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n  , max(CASE\n        WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n        WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n      else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      , coalesce(vital.glucose_max, labs.glucose_max) as glucose_max\n      , coalesce(vital.glucose_min, labs.glucose_min) as glucose_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.hematocrit_max\n      , labs.hematocrit_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.sodium_max\n      , labs.sodium_min\n      , labs.potassium_max\n      , labs.potassium_min\n      , labs.bicarbonate_max\n      , labs.bicarbonate_min\n\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , cp.cpap\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get CPAP\nleft join cpap cp\n  on ie.icustay_id = cp.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <= 45 then 0\n      when age <= 55 then 1\n      when age <= 65 then 2\n      when age <= 75 then 3\n      when age >  75 then 4\n    end as age_score\n  , case\n      when heartrate_max is null then null\n      when heartrate_max >= 180 then 4\n      when heartrate_min < 40 then 4\n      when heartrate_max >= 140 then 3\n      when heartrate_min <= 54 then 3\n      when heartrate_max >= 110 then 2\n      when heartrate_min <= 69 then 2\n      when heartrate_max >= 70 and heartrate_max <= 109\n        and heartrate_min >= 70 and heartrate_min <= 109\n      then 0\n    end as hr_score\n  , case\n      when sysbp_min is null then null\n      when sysbp_max >= 190 then 4\n      when sysbp_min < 55 then 4\n      when sysbp_max >= 150 then 2\n      when sysbp_min <= 79 then 2\n      when sysbp_max >= 80 and sysbp_max <= 149\n        and sysbp_min >= 80 and sysbp_min <= 149\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_max >= 41.0 then 4\n      when tempc_min <  30.0 then 4\n      when tempc_max >= 39.0 then 3\n      when tempc_min <= 31.9  then 3\n      when tempc_min <= 33.9  then 2\n      when tempc_max >  38.4 then 1\n      when tempc_min <  36.0  then 1\n      when tempc_max >= 36.0 and tempc_max <= 38.4\n       and tempc_min >= 36.0 and tempc_min <= 38.4\n        then 0\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      when resprate_max >= 50 then 4\n      when resprate_min <  6 then 4\n      when resprate_max >= 35 then 3\n      when resprate_min <= 9 then 2\n      when resprate_max >= 25 then 1\n      when resprate_min <= 11 then 1\n      when  resprate_max >= 12 and resprate_max <= 24\n        and resprate_min >= 12 and resprate_min <= 24\n          then 0\n      end as resp_score\n\n  , case\n      when coalesce(mechvent,cpap) is null then null\n      when cpap = 1 then 3\n      when mechvent = 1 then 3\n      else 0\n    end as vent_score\n\n  , case\n      when UrineOutput is null then null\n      when UrineOutput >  5000.0 then 2\n      when UrineOutput >= 3500.0 then 1\n      when UrineOutput >=  700.0 then 0\n      when UrineOutput >=  500.0 then 2\n      when UrineOutput >=  200.0 then 3\n      when UrineOutput <   200.0 then 4\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max >= 55.0 then 4\n      when bun_max >= 36.0 then 3\n      when bun_max >= 29.0 then 2\n      when bun_max >= 7.50 then 1\n      when bun_min < 3.5 then 1\n      when  bun_max >= 3.5 and bun_max < 7.5\n        and bun_min >= 3.5 and bun_min < 7.5\n          then 0\n    end as bun_score\n\n  , case\n      when hematocrit_max is null then null\n      when hematocrit_max >= 60.0 then 4\n      when hematocrit_min <  20.0 then 4\n      when hematocrit_max >= 50.0 then 2\n      when hematocrit_min < 30.0 then 2\n      when hematocrit_max >= 46.0 then 1\n      when  hematocrit_max >= 30.0 and hematocrit_max < 46.0\n        and hematocrit_min >= 30.0 and hematocrit_min < 46.0\n          then 0\n      end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_max >= 40.0 then 4\n      when wbc_min <   1.0 then 4\n      when wbc_max >= 20.0 then 2\n      when wbc_min <   3.0 then 2\n      when wbc_max >= 15.0 then 1\n      when wbc_max >=  3.0 and wbc_max < 15.0\n       and wbc_min >=  3.0 and wbc_min < 15.0\n        then 0\n    end as wbc_score\n\n  , case\n      when glucose_max is null then null\n      when glucose_max >= 44.5 then 4\n      when glucose_min <   1.6 then 4\n      when glucose_max >= 27.8 then 3\n      when glucose_min <   2.8 then 3\n      when glucose_min <   3.9 then 2\n      when glucose_max >= 14.0 then 1\n      when glucose_max >=  3.9 and glucose_max < 14.0\n       and glucose_min >=  3.9 and glucose_min < 14.0\n        then 0\n      end as glucose_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_max >= 7.0 then 4\n      when potassium_min <  2.5 then 4\n      when potassium_max >= 6.0 then 3\n      when potassium_min <  3.0 then 2\n      when potassium_max >= 5.5 then 1\n      when potassium_min <  3.5 then 1\n      when potassium_max >= 3.5 and potassium_max < 5.5\n       and potassium_min >= 3.5 and potassium_min < 5.5\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_max >= 180 then 4\n      when sodium_min  < 110 then 4\n      when sodium_max >= 161 then 3\n      when sodium_min  < 120 then 3\n      when sodium_max >= 156 then 2\n      when sodium_min  < 130 then 2\n      when sodium_max >= 151 then 1\n      when sodium_max >= 130 and sodium_max < 151\n       and sodium_min >= 130 and sodium_min < 151\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <   5.0 then 4\n      when bicarbonate_max >= 40.0 then 3\n      when bicarbonate_min <  10.0 then 3\n      when bicarbonate_max >= 30.0 then 1\n      when bicarbonate_min <  20.0 then 1\n      when bicarbonate_max >= 20.0 and bicarbonate_max < 30.0\n       and bicarbonate_min >= 20.0 and bicarbonate_min < 30.0\n          then 0\n      end as bicarbonate_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs =  3 then 4\n        when mingcs <  7 then 3\n        when mingcs < 10 then 2\n        when mingcs < 13 then 1\n        when mingcs >= 13\n         and mingcs <= 15\n          then 0\n        end as gcs_score\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(age_score,0)\n+ coalesce(hr_score,0)\n+ coalesce(sysbp_score,0)\n+ coalesce(resp_score,0)\n+ coalesce(temp_score,0)\n+ coalesce(uo_score,0)\n+ coalesce(vent_score,0)\n+ coalesce(bun_score,0)\n+ coalesce(hematocrit_score,0)\n+ coalesce(wbc_score,0)\n+ coalesce(glucose_score,0)\n+ coalesce(potassium_score,0)\n+ coalesce(sodium_score,0)\n+ coalesce(bicarbonate_score,0)\n+ coalesce(gcs_score,0)\n  as SAPS\n, age_score\n, hr_score\n, sysbp_score\n, resp_score\n, temp_score\n, uo_score\n, vent_score\n, bun_score\n, hematocrit_score\n, wbc_score\n, glucose_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, gcs_score\n\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:33.919659Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.53, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.53 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.451311Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.458519Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\nalter table \"postgres\".\"public\".\"saps\" rename to \"saps__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\nalter table \"postgres\".\"public\".\"saps\" rename to \"saps__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.458761Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.459600Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.463877Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\nalter table \"postgres\".\"public\".\"saps__dbt_tmp\" rename to \"saps\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\nalter table \"postgres\".\"public\".\"saps__dbt_tmp\" rename to \"saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.464101Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.465022Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.467993Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.468242Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.468607Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.475560Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.saps", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.saps\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.478477Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.saps", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\ndrop table if exists \"postgres\".\"public\".\"saps__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.saps\"} */\ndrop table if exists \"postgres\".\"public\".\"saps__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.478707Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.480844Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.483769Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.saps: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.484020Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.saps", "execution_time": 0, "index": 105, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": "2022-07-18T00:18:33.892497", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.saps"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "105 of 107 OK created table model public.saps .................................. [\u001b[32mSELECT 61532\u001b[0m in 0.59s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.485056Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:34.485456", "node_name": "saps", "node_path": "severityscores/saps.sql", "node_started_at": "2022-07-18T00:18:33.892497", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.saps"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.5914669036865234, "failures": null, "message": "SELECT 61532", "node": {"alias": "saps", "build_path": "target/run/mimic/models/severityscores/saps.sql", "checksum": {"checksum": "8c651af45538fdfc0745f49104a00906a7e3d6af38add38f25a0cacc8229cfda", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/severityscores/saps.sql", "compiled_sql": "-- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score (SAPS)\n-- This query extracts the simplified acute physiology score.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS:\n--    Jean-Roger Le Gall, Philippe Loirat, Annick Alperovitch, Paul Glaser, Claude Granthil,\n--    Daniel Mathieu, Philippe Mercier, Remi Thomas, and Daniel Villers.\n--    \"A simplified acute physiology score for ICU patients.\"\n--    Critical care medicine 12, no. 11 (1984): 975-977.\n\n-- Variables used in SAPS:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, hematocrit, WBC, glucose, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n  , max(CASE\n        WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n        WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n      else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      , coalesce(vital.glucose_max, labs.glucose_max) as glucose_max\n      , coalesce(vital.glucose_min, labs.glucose_min) as glucose_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.hematocrit_max\n      , labs.hematocrit_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.sodium_max\n      , labs.sodium_min\n      , labs.potassium_max\n      , labs.potassium_min\n      , labs.bicarbonate_max\n      , labs.bicarbonate_min\n\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , cp.cpap\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get CPAP\nleft join cpap cp\n  on ie.icustay_id = cp.icustay_id\n\n-- join to custom tables to get more data....\nleft join \"postgres\".\"public\".\"gcs_first_day\" gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join \"postgres\".\"public\".\"vitals_first_day\" vital\n  on ie.icustay_id = vital.icustay_id\nleft join \"postgres\".\"public\".\"urine_output_first_day\" uo\n  on ie.icustay_id = uo.icustay_id\nleft join \"postgres\".\"public\".\"ventilation_first_day\" vent\n  on ie.icustay_id = vent.icustay_id\nleft join \"postgres\".\"public\".\"labs_first_day\" labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <= 45 then 0\n      when age <= 55 then 1\n      when age <= 65 then 2\n      when age <= 75 then 3\n      when age >  75 then 4\n    end as age_score\n  , case\n      when heartrate_max is null then null\n      when heartrate_max >= 180 then 4\n      when heartrate_min < 40 then 4\n      when heartrate_max >= 140 then 3\n      when heartrate_min <= 54 then 3\n      when heartrate_max >= 110 then 2\n      when heartrate_min <= 69 then 2\n      when heartrate_max >= 70 and heartrate_max <= 109\n        and heartrate_min >= 70 and heartrate_min <= 109\n      then 0\n    end as hr_score\n  , case\n      when sysbp_min is null then null\n      when sysbp_max >= 190 then 4\n      when sysbp_min < 55 then 4\n      when sysbp_max >= 150 then 2\n      when sysbp_min <= 79 then 2\n      when sysbp_max >= 80 and sysbp_max <= 149\n        and sysbp_min >= 80 and sysbp_min <= 149\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_max >= 41.0 then 4\n      when tempc_min <  30.0 then 4\n      when tempc_max >= 39.0 then 3\n      when tempc_min <= 31.9  then 3\n      when tempc_min <= 33.9  then 2\n      when tempc_max >  38.4 then 1\n      when tempc_min <  36.0  then 1\n      when tempc_max >= 36.0 and tempc_max <= 38.4\n       and tempc_min >= 36.0 and tempc_min <= 38.4\n        then 0\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      when resprate_max >= 50 then 4\n      when resprate_min <  6 then 4\n      when resprate_max >= 35 then 3\n      when resprate_min <= 9 then 2\n      when resprate_max >= 25 then 1\n      when resprate_min <= 11 then 1\n      when  resprate_max >= 12 and resprate_max <= 24\n        and resprate_min >= 12 and resprate_min <= 24\n          then 0\n      end as resp_score\n\n  , case\n      when coalesce(mechvent,cpap) is null then null\n      when cpap = 1 then 3\n      when mechvent = 1 then 3\n      else 0\n    end as vent_score\n\n  , case\n      when UrineOutput is null then null\n      when UrineOutput >  5000.0 then 2\n      when UrineOutput >= 3500.0 then 1\n      when UrineOutput >=  700.0 then 0\n      when UrineOutput >=  500.0 then 2\n      when UrineOutput >=  200.0 then 3\n      when UrineOutput <   200.0 then 4\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max >= 55.0 then 4\n      when bun_max >= 36.0 then 3\n      when bun_max >= 29.0 then 2\n      when bun_max >= 7.50 then 1\n      when bun_min < 3.5 then 1\n      when  bun_max >= 3.5 and bun_max < 7.5\n        and bun_min >= 3.5 and bun_min < 7.5\n          then 0\n    end as bun_score\n\n  , case\n      when hematocrit_max is null then null\n      when hematocrit_max >= 60.0 then 4\n      when hematocrit_min <  20.0 then 4\n      when hematocrit_max >= 50.0 then 2\n      when hematocrit_min < 30.0 then 2\n      when hematocrit_max >= 46.0 then 1\n      when  hematocrit_max >= 30.0 and hematocrit_max < 46.0\n        and hematocrit_min >= 30.0 and hematocrit_min < 46.0\n          then 0\n      end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_max >= 40.0 then 4\n      when wbc_min <   1.0 then 4\n      when wbc_max >= 20.0 then 2\n      when wbc_min <   3.0 then 2\n      when wbc_max >= 15.0 then 1\n      when wbc_max >=  3.0 and wbc_max < 15.0\n       and wbc_min >=  3.0 and wbc_min < 15.0\n        then 0\n    end as wbc_score\n\n  , case\n      when glucose_max is null then null\n      when glucose_max >= 44.5 then 4\n      when glucose_min <   1.6 then 4\n      when glucose_max >= 27.8 then 3\n      when glucose_min <   2.8 then 3\n      when glucose_min <   3.9 then 2\n      when glucose_max >= 14.0 then 1\n      when glucose_max >=  3.9 and glucose_max < 14.0\n       and glucose_min >=  3.9 and glucose_min < 14.0\n        then 0\n      end as glucose_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_max >= 7.0 then 4\n      when potassium_min <  2.5 then 4\n      when potassium_max >= 6.0 then 3\n      when potassium_min <  3.0 then 2\n      when potassium_max >= 5.5 then 1\n      when potassium_min <  3.5 then 1\n      when potassium_max >= 3.5 and potassium_max < 5.5\n       and potassium_min >= 3.5 and potassium_min < 5.5\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_max >= 180 then 4\n      when sodium_min  < 110 then 4\n      when sodium_max >= 161 then 3\n      when sodium_min  < 120 then 3\n      when sodium_max >= 156 then 2\n      when sodium_min  < 130 then 2\n      when sodium_max >= 151 then 1\n      when sodium_max >= 130 and sodium_max < 151\n       and sodium_min >= 130 and sodium_min < 151\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <   5.0 then 4\n      when bicarbonate_max >= 40.0 then 3\n      when bicarbonate_min <  10.0 then 3\n      when bicarbonate_max >= 30.0 then 1\n      when bicarbonate_min <  20.0 then 1\n      when bicarbonate_max >= 20.0 and bicarbonate_max < 30.0\n       and bicarbonate_min >= 20.0 and bicarbonate_min < 30.0\n          then 0\n      end as bicarbonate_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs =  3 then 4\n        when mingcs <  7 then 3\n        when mingcs < 10 then 2\n        when mingcs < 13 then 1\n        when mingcs >= 13\n         and mingcs <= 15\n          then 0\n        end as gcs_score\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(age_score,0)\n+ coalesce(hr_score,0)\n+ coalesce(sysbp_score,0)\n+ coalesce(resp_score,0)\n+ coalesce(temp_score,0)\n+ coalesce(uo_score,0)\n+ coalesce(vent_score,0)\n+ coalesce(bun_score,0)\n+ coalesce(hematocrit_score,0)\n+ coalesce(wbc_score,0)\n+ coalesce(glucose_score,0)\n+ coalesce(potassium_score,0)\n+ coalesce(sodium_score,0)\n+ coalesce(bicarbonate_score,0)\n+ coalesce(gcs_score,0)\n  as SAPS\n, age_score\n, hr_score\n, sysbp_score\n, resp_score\n, temp_score\n, uo_score\n, vent_score\n, bun_score\n, hematocrit_score\n, wbc_score\n, glucose_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, gcs_score\n\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.7192729, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.gcs_first_day", "model.mimic.vitals_first_day", "model.mimic.urine_output_first_day", "model.mimic.ventilation_first_day", "model.mimic.labs_first_day"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "severityscores", "saps"], "meta": {}, "name": "saps", "original_file_path": "models/severityscores/saps.sql", "package_name": "mimic", "patch_path": null, "path": "severityscores/saps.sql", "raw_sql": "-- ------------------------------------------------------------------\n-- Title: Simplified Acute Physiology Score (SAPS)\n-- This query extracts the simplified acute physiology score.\n-- This score is a measure of patient severity of illness.\n-- The score is calculated on the first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SAPS:\n--    Jean-Roger Le Gall, Philippe Loirat, Annick Alperovitch, Paul Glaser, Claude Granthil,\n--    Daniel Mathieu, Philippe Mercier, Remi Thomas, and Daniel Villers.\n--    \"A simplified acute physiology score for ICU patients.\"\n--    Critical care medicine 12, no. 11 (1984): 975-977.\n\n-- Variables used in SAPS:\n--  Age, GCS\n--  VITALS: Heart rate, systolic blood pressure, temperature, respiration rate\n--  FLAGS: ventilation/cpap\n--  IO: urine output\n--  LABS: blood urea nitrogen, hematocrit, WBC, glucose, potassium, sodium, HCO3\n\n-- The following views are required to run this query:\n--  1) urine_output_first_day - generated by urine-output-first-day.sql\n--  2) vent_first_day - generated by ventilated-first-day.sql\n--  3) vitals_first_day - generated by vitals-first-day.sql\n--  4) gcs_first_day - generated by gcs-first-day.sql\n--  5) labs_first_day - generated by labs-first-day.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n\n-- extract CPAP from the \"Oxygen Delivery Device\" fields\nwith cpap as\n(\n  select ie.icustay_id\n  , max(CASE\n        WHEN lower(ce.value) LIKE '%cpap%' THEN 1\n        WHEN lower(ce.value) LIKE '%bipap mask%' THEN 1\n      else 0 end) as cpap\n  FROM icustays ie\n  inner join chartevents ce\n    on ie.icustay_id = ce.icustay_id\n    and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n  where itemid in\n  (\n    -- TODO: when metavision data import fixed, check the values in 226732 match the value clause below\n    467, 469, 226732\n  )\n  and (lower(ce.value) LIKE '%cpap%' or lower(ce.value) LIKE '%bipap mask%')\n  -- exclude rows marked as error\n  AND (ce.error IS NULL OR ce.error = 0)\n  group by ie.icustay_id\n)\n, cohort as\n(\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n      , ie.intime\n      , ie.outtime\n\n      -- the casts ensure the result is numeric.. we could equally extract EPOCH from the interval\n      -- however this code works in Oracle and Postgres\n      , DATETIME_DIFF(ie.intime, pat.dob, 'YEAR') as age\n      , gcs.mingcs\n      , vital.heartrate_max\n      , vital.heartrate_min\n      , vital.sysbp_max\n      , vital.sysbp_min\n      , vital.resprate_max\n      , vital.resprate_min\n      , vital.tempc_max\n      , vital.tempc_min\n\n      , coalesce(vital.glucose_max, labs.glucose_max) as glucose_max\n      , coalesce(vital.glucose_min, labs.glucose_min) as glucose_min\n\n      , labs.bun_max\n      , labs.bun_min\n      , labs.hematocrit_max\n      , labs.hematocrit_min\n      , labs.wbc_max\n      , labs.wbc_min\n      , labs.sodium_max\n      , labs.sodium_min\n      , labs.potassium_max\n      , labs.potassium_min\n      , labs.bicarbonate_max\n      , labs.bicarbonate_min\n\n      , vent.vent as mechvent\n      , uo.urineoutput\n\n      , cp.cpap\n\nFROM icustays ie\ninner join admissions adm\n  on ie.hadm_id = adm.hadm_id\ninner join patients pat\n  on ie.subject_id = pat.subject_id\n\n-- join to above view to get CPAP\nleft join cpap cp\n  on ie.icustay_id = cp.icustay_id\n\n-- join to custom tables to get more data....\nleft join {{ref('gcs_first_day')}} gcs\n  on ie.icustay_id = gcs.icustay_id\nleft join {{ref('vitals_first_day')}} vital\n  on ie.icustay_id = vital.icustay_id\nleft join {{ref('urine_output_first_day')}} uo\n  on ie.icustay_id = uo.icustay_id\nleft join {{ref('ventilation_first_day')}} vent\n  on ie.icustay_id = vent.icustay_id\nleft join {{ref('labs_first_day')}} labs\n  on ie.icustay_id = labs.icustay_id\n)\n, scorecomp as\n(\nselect\n  cohort.*\n  -- Below code calculates the component scores needed for SAPS\n  , case\n      when age is null then null\n      when age <= 45 then 0\n      when age <= 55 then 1\n      when age <= 65 then 2\n      when age <= 75 then 3\n      when age >  75 then 4\n    end as age_score\n  , case\n      when heartrate_max is null then null\n      when heartrate_max >= 180 then 4\n      when heartrate_min < 40 then 4\n      when heartrate_max >= 140 then 3\n      when heartrate_min <= 54 then 3\n      when heartrate_max >= 110 then 2\n      when heartrate_min <= 69 then 2\n      when heartrate_max >= 70 and heartrate_max <= 109\n        and heartrate_min >= 70 and heartrate_min <= 109\n      then 0\n    end as hr_score\n  , case\n      when sysbp_min is null then null\n      when sysbp_max >= 190 then 4\n      when sysbp_min < 55 then 4\n      when sysbp_max >= 150 then 2\n      when sysbp_min <= 79 then 2\n      when sysbp_max >= 80 and sysbp_max <= 149\n        and sysbp_min >= 80 and sysbp_min <= 149\n        then 0\n    end as sysbp_score\n\n  , case\n      when tempc_max is null then null\n      when tempc_max >= 41.0 then 4\n      when tempc_min <  30.0 then 4\n      when tempc_max >= 39.0 then 3\n      when tempc_min <= 31.9  then 3\n      when tempc_min <= 33.9  then 2\n      when tempc_max >  38.4 then 1\n      when tempc_min <  36.0  then 1\n      when tempc_max >= 36.0 and tempc_max <= 38.4\n       and tempc_min >= 36.0 and tempc_min <= 38.4\n        then 0\n    end as temp_score\n\n  , case\n      when resprate_min is null then null\n      when resprate_max >= 50 then 4\n      when resprate_min <  6 then 4\n      when resprate_max >= 35 then 3\n      when resprate_min <= 9 then 2\n      when resprate_max >= 25 then 1\n      when resprate_min <= 11 then 1\n      when  resprate_max >= 12 and resprate_max <= 24\n        and resprate_min >= 12 and resprate_min <= 24\n          then 0\n      end as resp_score\n\n  , case\n      when coalesce(mechvent,cpap) is null then null\n      when cpap = 1 then 3\n      when mechvent = 1 then 3\n      else 0\n    end as vent_score\n\n  , case\n      when UrineOutput is null then null\n      when UrineOutput >  5000.0 then 2\n      when UrineOutput >= 3500.0 then 1\n      when UrineOutput >=  700.0 then 0\n      when UrineOutput >=  500.0 then 2\n      when UrineOutput >=  200.0 then 3\n      when UrineOutput <   200.0 then 4\n    end as uo_score\n\n  , case\n      when bun_max is null then null\n      when bun_max >= 55.0 then 4\n      when bun_max >= 36.0 then 3\n      when bun_max >= 29.0 then 2\n      when bun_max >= 7.50 then 1\n      when bun_min < 3.5 then 1\n      when  bun_max >= 3.5 and bun_max < 7.5\n        and bun_min >= 3.5 and bun_min < 7.5\n          then 0\n    end as bun_score\n\n  , case\n      when hematocrit_max is null then null\n      when hematocrit_max >= 60.0 then 4\n      when hematocrit_min <  20.0 then 4\n      when hematocrit_max >= 50.0 then 2\n      when hematocrit_min < 30.0 then 2\n      when hematocrit_max >= 46.0 then 1\n      when  hematocrit_max >= 30.0 and hematocrit_max < 46.0\n        and hematocrit_min >= 30.0 and hematocrit_min < 46.0\n          then 0\n      end as hematocrit_score\n\n  , case\n      when wbc_max is null then null\n      when wbc_max >= 40.0 then 4\n      when wbc_min <   1.0 then 4\n      when wbc_max >= 20.0 then 2\n      when wbc_min <   3.0 then 2\n      when wbc_max >= 15.0 then 1\n      when wbc_max >=  3.0 and wbc_max < 15.0\n       and wbc_min >=  3.0 and wbc_min < 15.0\n        then 0\n    end as wbc_score\n\n  , case\n      when glucose_max is null then null\n      when glucose_max >= 44.5 then 4\n      when glucose_min <   1.6 then 4\n      when glucose_max >= 27.8 then 3\n      when glucose_min <   2.8 then 3\n      when glucose_min <   3.9 then 2\n      when glucose_max >= 14.0 then 1\n      when glucose_max >=  3.9 and glucose_max < 14.0\n       and glucose_min >=  3.9 and glucose_min < 14.0\n        then 0\n      end as glucose_score\n\n  , case\n      when potassium_max is null then null\n      when potassium_max >= 7.0 then 4\n      when potassium_min <  2.5 then 4\n      when potassium_max >= 6.0 then 3\n      when potassium_min <  3.0 then 2\n      when potassium_max >= 5.5 then 1\n      when potassium_min <  3.5 then 1\n      when potassium_max >= 3.5 and potassium_max < 5.5\n       and potassium_min >= 3.5 and potassium_min < 5.5\n        then 0\n      end as potassium_score\n\n  , case\n      when sodium_max is null then null\n      when sodium_max >= 180 then 4\n      when sodium_min  < 110 then 4\n      when sodium_max >= 161 then 3\n      when sodium_min  < 120 then 3\n      when sodium_max >= 156 then 2\n      when sodium_min  < 130 then 2\n      when sodium_max >= 151 then 1\n      when sodium_max >= 130 and sodium_max < 151\n       and sodium_min >= 130 and sodium_min < 151\n        then 0\n      end as sodium_score\n\n  , case\n      when bicarbonate_max is null then null\n      when bicarbonate_min <   5.0 then 4\n      when bicarbonate_max >= 40.0 then 3\n      when bicarbonate_min <  10.0 then 3\n      when bicarbonate_max >= 30.0 then 1\n      when bicarbonate_min <  20.0 then 1\n      when bicarbonate_max >= 20.0 and bicarbonate_max < 30.0\n       and bicarbonate_min >= 20.0 and bicarbonate_min < 30.0\n          then 0\n      end as bicarbonate_score\n\n   , case\n      when mingcs is null then null\n        when mingcs <  3 then null -- erroneous value/on trach\n        when mingcs =  3 then 4\n        when mingcs <  7 then 3\n        when mingcs < 10 then 2\n        when mingcs < 13 then 1\n        when mingcs >= 13\n         and mingcs <= 15\n          then 0\n        end as gcs_score\nfrom cohort\n)\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n-- coalesce statements impute normal score of zero if data element is missing\n, coalesce(age_score,0)\n+ coalesce(hr_score,0)\n+ coalesce(sysbp_score,0)\n+ coalesce(resp_score,0)\n+ coalesce(temp_score,0)\n+ coalesce(uo_score,0)\n+ coalesce(vent_score,0)\n+ coalesce(bun_score,0)\n+ coalesce(hematocrit_score,0)\n+ coalesce(wbc_score,0)\n+ coalesce(glucose_score,0)\n+ coalesce(potassium_score,0)\n+ coalesce(sodium_score,0)\n+ coalesce(bicarbonate_score,0)\n+ coalesce(gcs_score,0)\n  as SAPS\n, age_score\n, hr_score\n, sysbp_score\n, resp_score\n, temp_score\n, uo_score\n, vent_score\n, bun_score\n, hematocrit_score\n, wbc_score\n, glucose_score\n, potassium_score\n, sodium_score\n, bicarbonate_score\n, gcs_score\n\nFROM icustays ie\nleft join scorecomp s\n  on ie.icustay_id = s.icustay_id\norder by ie.icustay_id", "refs": [["gcs_first_day"], ["vitals_first_day"], ["urine_output_first_day"], ["ventilation_first_day"], ["labs_first_day"]], "relation_name": "\"postgres\".\"public\".\"saps\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.saps", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:33.900201Z", "name": "compile", "started_at": "2022-07-18T00:18:33.894594Z"}, {"completed_at": "2022-07-18T00:18:34.483740Z", "name": "execute", "started_at": "2022-07-18T00:18:33.900912Z"}]}, "unique_id": "model.mimic.saps"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.saps", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.485752Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": "2022-07-18T00:18:34.486240", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.kdigo_stages_48hr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.486400Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.kdigo_stages_48hr", "index": 106, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": "2022-07-18T00:18:34.486240", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "106 of 107 START table model public.kdigo_stages_48hr .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.487052Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.487910Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": "2022-07-18T00:18:34.486240", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.kdigo_stages_48hr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.488347Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.kdigo_stages_48hr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.488771Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.494910Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.495960Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.kdigo_stages_48hr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.496254Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages_48hr\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.506091Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.507194Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.507451Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.507687Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.513549Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.513972Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI during the first 48 hours of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_48hr\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_48hr\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI during the first 48 hours of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_48hr\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_48hr\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:34.514250Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.64, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.64 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.155689Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.160434Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_48hr\" rename to \"kdigo_stages_48hr__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_48hr\" rename to \"kdigo_stages_48hr__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.160652Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.161478Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.169450Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_tmp\" rename to \"kdigo_stages_48hr\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_tmp\" rename to \"kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.170494Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.172451Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.177478Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.178107Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.178558Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.180029Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_48hr\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.182235Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_48hr", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_48hr\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages_48hr__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.182474Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.185329Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.191234Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_48hr: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.191599Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.kdigo_stages_48hr", "execution_time": 0, "index": 106, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": "2022-07-18T00:18:34.486240", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "106 of 107 OK created table model public.kdigo_stages_48hr ..................... [\u001b[32mSELECT 61532\u001b[0m in 0.70s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.192697Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:35.193464", "node_name": "kdigo_stages_48hr", "node_path": "organfailure/kdigo_stages_48hr.sql", "node_started_at": "2022-07-18T00:18:34.486240", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_48hr"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.704796552658081, "failures": null, "message": "SELECT 61532", "node": {"alias": "kdigo_stages_48hr", "build_path": "target/run/mimic/models/organfailure/kdigo_stages_48hr.sql", "checksum": {"checksum": "b6a23e2f2d64eeb461d7ea6498aca958c257582014013850d65676af4c044d97", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/kdigo_stages_48hr.sql", "compiled_sql": "-- This query checks if the patient had AKI during the first 48 hours of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_48hr\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_48hr\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.566072, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.kdigo_stages", "model.mimic.kdigo_stages"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "kdigo_stages_48hr"], "meta": {}, "name": "kdigo_stages_48hr", "original_file_path": "models/organfailure/kdigo_stages_48hr.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/kdigo_stages_48hr.sql", "raw_sql": "-- This query checks if the patient had AKI during the first 48 hours of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN {{ref('kdigo_stages') }} k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN {{ ref('kdigo_stages') }} k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') <= 48\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_48hr\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_48hr\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id", "refs": [["kdigo_stages"], ["kdigo_stages"]], "relation_name": "\"postgres\".\"public\".\"kdigo_stages_48hr\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.kdigo_stages_48hr", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:34.495887Z", "name": "compile", "started_at": "2022-07-18T00:18:34.488746Z"}, {"completed_at": "2022-07-18T00:18:35.191200Z", "name": "execute", "started_at": "2022-07-18T00:18:34.496548Z"}]}, "unique_id": "model.mimic.kdigo_stages_48hr"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.kdigo_stages_48hr", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.193921Z", "type": "log_line"}
{"code": "Q023", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": "2022-07-18T00:18:35.194575", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began running node model.mimic.kdigo_stages_7day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.194673Z", "type": "log_line"}
{"code": "Q033", "data": {"description": "table model public.kdigo_stages_7day", "index": 107, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": "2022-07-18T00:18:35.194575", "node_status": "started", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "107 of 107 START table model public.kdigo_stages_7day .......................... [RUN]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.195383Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.196100Z", "type": "log_line"}
{"code": "Q030", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": "2022-07-18T00:18:35.194575", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began compiling node model.mimic.kdigo_stages_7day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.196297Z", "type": "log_line"}
{"code": "Q027", "data": {"unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Compiling model.mimic.kdigo_stages_7day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.196668Z", "type": "log_line"}
{"code": "Q028", "data": {"unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing injected SQL for node \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.199945Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.200519Z", "type": "log_line"}
{"code": "Q031", "data": {"node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": null, "node_status": "executing", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Began executing node model.mimic.kdigo_stages_7day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.200809Z", "type": "log_line"}
{"code": "M012", "data": {"msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages_7day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Writing runtime SQL for node \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.211450Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.212134Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: BEGIN", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.212453Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.212731Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.219841Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.220879Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages_7day__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI during the first 7 days of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_7day\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_7day\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id\n  );"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\n\n\n  create  table \"postgres\".\"public\".\"kdigo_stages_7day__dbt_tmp\"\n  as (\n    -- This query checks if the patient had AKI during the first 7 days of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_7day\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_7day\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id\n  );", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.221342Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.54, "status": "SELECT 61532"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: SELECT 61532 in 0.54 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.763737Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.768222Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_7day\" rename to \"kdigo_stages_7day__dbt_backup\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_7day\" rename to \"kdigo_stages_7day__dbt_backup\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.768515Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.769770Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.774026Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_7day__dbt_tmp\" rename to \"kdigo_stages_7day\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\nalter table \"postgres\".\"public\".\"kdigo_stages_7day__dbt_tmp\" rename to \"kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.774264Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.775134Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.778492Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.778787Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: COMMIT", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.779047Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.782296Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.kdigo_stages_7day\"", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.785015Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.kdigo_stages_7day", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages_7day__dbt_backup\" cascade"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.kdigo_stages_7day\"} */\ndrop table if exists \"postgres\".\"public\".\"kdigo_stages_7day__dbt_backup\" cascade", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.785228Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.787538Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.790425Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On model.mimic.kdigo_stages_7day: Close", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.790685Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.kdigo_stages_7day", "execution_time": 0, "index": 107, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": "2022-07-18T00:18:35.194575", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "status": "SELECT 61532", "total": 107}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "107 of 107 OK created table model public.kdigo_stages_7day ..................... [\u001b[32mSELECT 61532\u001b[0m in 0.60s]", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.791735Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-07-18T00:18:35.792317", "node_name": "kdigo_stages_7day", "node_path": "organfailure/kdigo_stages_7day.sql", "node_started_at": "2022-07-18T00:18:35.194575", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.kdigo_stages_7day"}, "run_result": {"adapter_response": {"_message": "SELECT 61532", "code": "SELECT", "rows_affected": 61532}, "agate_table": null, "execution_time": 0.5956683158874512, "failures": null, "message": "SELECT 61532", "node": {"alias": "kdigo_stages_7day", "build_path": "target/run/mimic/models/organfailure/kdigo_stages_7day.sql", "checksum": {"checksum": "13066042ced790942b1539d64da2de152254506a101034dd558aae59ee628f1a", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/organfailure/kdigo_stages_7day.sql", "compiled_sql": "-- This query checks if the patient had AKI during the first 7 days of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN \"postgres\".\"public\".\"kdigo_stages\" k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_7day\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_7day\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1657876846.5630305, "database": "postgres", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": ["model.mimic.kdigo_stages", "model.mimic.kdigo_stages"]}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "organfailure", "kdigo_stages_7day"], "meta": {}, "name": "kdigo_stages_7day", "original_file_path": "models/organfailure/kdigo_stages_7day.sql", "package_name": "mimic", "patch_path": null, "path": "organfailure/kdigo_stages_7day.sql", "raw_sql": "-- This query checks if the patient had AKI during the first 7 days of their ICU\n-- stay according to the KDIGO guideline.\n-- https://kdigo.org/wp-content/uploads/2016/10/KDIGO-2012-AKI-Guideline-English.pdf\n\n-- get the worst staging of creatinine in the first 48 hours\nWITH cr_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.creat\n    , k.aki_stage_creat\n    , ROW_NUMBER() OVER (PARTITION BY k.icustay_id ORDER BY k.aki_stage_creat DESC, k.creat DESC) AS rn\n  FROM icustays ie\n  INNER JOIN {{ ref('kdigo_stages')}} k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_creat IS NOT NULL\n)\n-- get the worst staging of urine output in the first 48 hours\n, uo_aki AS\n(\n  SELECT\n    k.icustay_id\n    , k.charttime\n    , k.uo_rt_6hr, k.uo_rt_12hr, k.uo_rt_24hr\n    , k.aki_stage_uo\n    , ROW_NUMBER() OVER \n    (\n      PARTITION BY k.icustay_id\n      ORDER BY k.aki_stage_uo DESC, k.uo_rt_24hr DESC, k.uo_rt_12hr DESC, k.uo_rt_6hr DESC\n    ) AS rn\n  FROM icustays ie\n  INNER JOIN {{ ref('kdigo_stages')}} k\n    ON ie.icustay_id = k.icustay_id\n  WHERE DATETIME_DIFF(k.charttime, ie.intime, 'HOUR') > -6\n  AND DATETIME_DIFF(k.charttime, ie.intime, 'DAY') <= 7\n  AND k.aki_stage_uo IS NOT NULL\n)\n-- final table is aki_stage, include worst cr/uo for convenience\nselect\n    ie.icustay_id\n  , cr.charttime as charttime_creat\n  , cr.creat\n  , cr.aki_stage_creat\n  , uo.charttime as charttime_uo\n  , uo.uo_rt_6hr\n  , uo.uo_rt_12hr\n  , uo.uo_rt_24hr\n  , uo.aki_stage_uo\n\n  -- Classify AKI using both creatinine/urine output criteria\n  , GREATEST(\n      COALESCE(cr.aki_stage_creat, 0),\n      COALESCE(uo.aki_stage_uo, 0)\n    ) AS aki_stage_7day\n  , CASE WHEN cr.aki_stage_creat > 0 OR uo.aki_stage_uo > 0 THEN 1 ELSE 0 END AS aki_7day\n\nFROM icustays ie\nLEFT JOIN cr_aki cr\n  ON ie.icustay_id = cr.icustay_id\n  AND cr.rn = 1\nLEFT JOIN uo_aki uo\n  ON ie.icustay_id = uo.icustay_id\n  AND uo.rn = 1\norder by ie.icustay_id", "refs": [["kdigo_stages"], ["kdigo_stages"]], "relation_name": "\"postgres\".\"public\".\"kdigo_stages_7day\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.kdigo_stages_7day", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-07-18T00:18:35.200447Z", "name": "compile", "started_at": "2022-07-18T00:18:35.196614Z"}, {"completed_at": "2022-07-18T00:18:35.790394Z", "name": "execute", "started_at": "2022-07-18T00:18:35.201010Z"}]}, "unique_id": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.kdigo_stages_7day", "pid": 109348, "thread_name": "Thread-1", "ts": "2022-07-18T00:18:35.792527Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.795458Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.796061Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: BEGIN", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.796416Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "closed"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state closed", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.796790Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.01, "status": "BEGIN"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: BEGIN in 0.01 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.802905Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: COMMIT", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.803200Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"master\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.803671Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "master", "sql": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: COMMIT", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.804022Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.804916Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "On master: Close", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.805324Z", "type": "log_line"}
{"code": "E040", "data": {"execution": " in 548.49s", "stat_line": "107 table models"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "Finished running 107 table models in 548.49s.", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.806641Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "master"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Connection 'master' was properly closed.", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.807410Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "model.mimic.kdigo_stages_7day"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "debug", "log_version": 2, "msg": "Connection 'model.mimic.kdigo_stages_7day' was properly closed.", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.807932Z", "type": "log_line"}
{"code": "Z030", "data": {"keyboard_interrupt": false, "num_errors": 3, "num_warnings": 0}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "\u001b[31mCompleted with 3 errors and 0 warnings:\u001b[0m", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.828136Z", "type": "log_line"}
{"code": "Z028", "data": {"msg": "Database Error in model icustay_days (models/cookbook/icustay_days.sql)"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "\u001b[33mDatabase Error in model icustay_days (models/cookbook/icustay_days.sql)\u001b[0m", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.829246Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  syntax error at or near \"DROP\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  syntax error at or near \"DROP\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.829797Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  LINE 29: DROP MATERIALIZED VIEW icustay_days;"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  LINE 29: DROP MATERIALIZED VIEW icustay_days;", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.830660Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "           ^"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "           ^", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.831257Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  compiled SQL at target/run/mimic/models/cookbook/icustay_days.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  compiled SQL at target/run/mimic/models/cookbook/icustay_days.sql", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.831994Z", "type": "log_line"}
{"code": "Z028", "data": {"msg": "Database Error in model pivoted_sofa (models/pivot/pivoted_sofa.sql)"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "\u001b[33mDatabase Error in model pivoted_sofa (models/pivot/pivoted_sofa.sql)\u001b[0m", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.832805Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  syntax error at or near \"\ufeffwith\""}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  syntax error at or near \"\ufeffwith\"", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.833211Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  LINE 6:     \ufeffwith co as"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  LINE 6:     \ufeffwith co as", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.833412Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "              ^"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "              ^", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.833976Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  compiled SQL at target/run/mimic/models/pivot/pivoted_sofa.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  compiled SQL at target/run/mimic/models/pivot/pivoted_sofa.sql", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.834542Z", "type": "log_line"}
{"code": "Z028", "data": {"msg": "Database Error in model pivoted_oasis (models/pivot/pivoted_oasis.sql)"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "\u001b[33mDatabase Error in model pivoted_oasis (models/pivot/pivoted_oasis.sql)\u001b[0m", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.835827Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  relation \"surgflag\" does not exist"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  relation \"surgflag\" does not exist", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.836946Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  LINE 145:   left join surgflag sf"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  LINE 145:   left join surgflag sf", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.837520Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "                        ^"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "                        ^", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.838790Z", "type": "log_line"}
{"code": "Z029", "data": {"msg": "  compiled SQL at target/run/mimic/models/pivot/pivoted_oasis.sql"}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "error", "log_version": 2, "msg": "  compiled SQL at target/run/mimic/models/pivot/pivoted_oasis.sql", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.840049Z", "type": "log_line"}
{"code": "Z023", "data": {"stats": {"error": 3, "pass": 104, "skip": 0, "total": 107, "warn": 0}}, "invocation_id": "7c4c3ecd-5c14-4600-9281-0e21ba30ba00", "level": "info", "log_version": 2, "msg": "Done. PASS=104 WARN=0 ERROR=3 SKIP=0 TOTAL=107", "pid": 109348, "thread_name": "MainThread", "ts": "2022-07-18T00:18:35.842219Z", "type": "log_line"}
{"code": "A001", "data": {"v": "=1.1.1"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "info", "log_version": 2, "msg": "Running with dbt=1.1.1", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:43.905752Z", "type": "log_line"}
{"code": "A002", "data": {"args": {"event_buffer_size": 100000, "indirect_selection": "eager", "log_format": "json", "no_print": false, "partial_parse": true, "printer_width": 80, "profiles_dir": "/home/ceci/.dbt", "quiet": false, "rpc_method": "run", "select": ["cookbook"], "send_anonymous_usage_stats": true, "static_parser": true, "use_colors": true, "version_check": true, "which": "run", "write_json": true}}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "running dbt with arguments {'log_format': 'json', 'write_json': True, 'use_colors': True, 'printer_width': 80, 'version_check': True, 'partial_parse': True, 'static_parser': True, 'profiles_dir': '/home/ceci/.dbt', 'send_anonymous_usage_stats': True, 'event_buffer_size': 100000, 'quiet': False, 'no_print': False, 'select': ['cookbook'], 'which': 'run', 'rpc_method': 'run', 'indirect_selection': 'eager'}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:43.906147Z", "type": "log_line"}
{"code": "A003", "data": {"user_state": "tracking"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Tracking: tracking", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:43.906284Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3280>]}"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc387e3280>]}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:43.912840Z", "type": "log_line"}
{"code": "I040", "data": {"added": 0, "changed": 0, "deleted": 0}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.027807Z", "type": "log_line"}
{"code": "I017", "data": {}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled, no changes found, skipping parsing", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.028147Z", "type": "log_line"}
{"code": "Z046", "data": {"log_fmt": "[\u001b[33mWARNING\u001b[0m]: {}", "msg": "Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.example\n- models.mimic.diagnosis\n"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "warn", "log_version": 2, "msg": "[\u001b[33mWARNING\u001b[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.example\n- models.mimic.diagnosis\n", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.030533Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38808040>]}"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38808040>]}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.040456Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3a68af10>]}"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3a68af10>]}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.056673Z", "type": "log_line"}
{"code": "W006", "data": {"stat_line": "107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "info", "log_version": 2, "msg": "Found 107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.057277Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3882d280>]}"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7dd5117e-7564-4916-b878-d80b083e6d1d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3882d280>]}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.057697Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"master\"", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.061453Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"list_postgres\"", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.063657Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"list_postgres\"", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.074538Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "list_postgres", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  "}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "On list_postgres: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  ", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.075030Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "init"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state init", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.075446Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Got an error when attempting to open a postgres connection: 'connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n'", "name": "Postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Got an error when attempting to open a postgres connection: 'connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n'", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.076646Z", "type": "log_line"}
{"code": "E001", "data": {"args": ["/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  "], "base_msg": "Error running SQL: {}", "name": "Postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Error running SQL: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  ", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.077103Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Rolling back transaction.", "name": "Postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Rolling back transaction.", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.077347Z", "type": "log_line"}
{"code": "E001", "data": {"args": ["macro list_schemas"], "base_msg": "Error running SQL: {}", "name": "Postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Error running SQL: macro list_schemas", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.077732Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Rolling back transaction.", "name": "Postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Rolling back transaction.", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.077970Z", "type": "log_line"}
{"code": "E011", "data": {"conn_name": "list_postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "On list_postgres: No close available on handle", "pid": 7486, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:08:44.078295Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "master"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Connection 'master' was properly closed.", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.079185Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "list_postgres"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Connection 'list_postgres' was properly closed.", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.079425Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38849310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38821dc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3a678ac0>]}"}, "invocation_id": "7dd5117e-7564-4916-b878-d80b083e6d1d", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38849310>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc38821dc0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fdc3a678ac0>]}", "pid": 7486, "thread_name": "MainThread", "ts": "2022-07-18T03:08:44.079948Z", "type": "log_line"}
{"code": "A001", "data": {"v": "=1.1.1"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "info", "log_version": 2, "msg": "Running with dbt=1.1.1", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.832200Z", "type": "log_line"}
{"code": "A002", "data": {"args": {"event_buffer_size": 100000, "indirect_selection": "eager", "log_format": "json", "no_print": false, "partial_parse": true, "printer_width": 80, "profiles_dir": "/home/ceci/.dbt", "quiet": false, "rpc_method": "run", "send_anonymous_usage_stats": true, "static_parser": true, "use_colors": true, "version_check": true, "which": "run", "write_json": true}}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "running dbt with arguments {'log_format': 'json', 'write_json': True, 'use_colors': True, 'printer_width': 80, 'version_check': True, 'partial_parse': True, 'static_parser': True, 'profiles_dir': '/home/ceci/.dbt', 'send_anonymous_usage_stats': True, 'event_buffer_size': 100000, 'quiet': False, 'no_print': False, 'which': 'run', 'rpc_method': 'run', 'indirect_selection': 'eager'}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.833022Z", "type": "log_line"}
{"code": "A003", "data": {"user_state": "tracking"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Tracking: tracking", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.833268Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff2b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff2e0>]}"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff2b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60ff2e0>]}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.840555Z", "type": "log_line"}
{"code": "I040", "data": {"added": 0, "changed": 0, "deleted": 0}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.938124Z", "type": "log_line"}
{"code": "I017", "data": {}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Partial parsing enabled, no changes found, skipping parsing", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.938537Z", "type": "log_line"}
{"code": "Z046", "data": {"log_fmt": "[\u001b[33mWARNING\u001b[0m]: {}", "msg": "Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.diagnosis\n- models.mimic.example\n"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "warn", "log_version": 2, "msg": "[\u001b[33mWARNING\u001b[0m]: Configuration paths exist in your dbt_project.yml file which do not apply to any resources.\nThere are 2 unused configuration paths:\n- models.mimic.diagnosis\n- models.mimic.example\n", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.942204Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c616ad00>]}"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c616ad00>]}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.951923Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8cc96cca0>]}"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8cc96cca0>]}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.972247Z", "type": "log_line"}
{"code": "W006", "data": {"stat_line": "107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "info", "log_version": 2, "msg": "Found 107 models, 0 tests, 0 snapshots, 0 analyses, 167 macros, 0 operations, 0 seed files, 0 sources, 0 exposures, 0 metrics", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.972738Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60fffa0>]}"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bff52047-460d-4b89-86a5-f61eebd95e32', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c60fffa0>]}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.973070Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "master", "conn_type": "postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"master\"", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:17.980866Z", "type": "log_line"}
{"code": "E005", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Acquiring new postgres connection \"list_postgres\"", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:17.986759Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "list_postgres", "conn_type": "postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"list_postgres\"", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:17.997212Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "list_postgres", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  "}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "On list_postgres: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  ", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:17.998086Z", "type": "log_line"}
{"code": "E037", "data": {"connection_state": "init"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Opening a new connection, currently in state init", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:17.998697Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Got an error when attempting to open a postgres connection: 'connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n'", "name": "Postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Got an error when attempting to open a postgres connection: 'connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n'", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:17.999908Z", "type": "log_line"}
{"code": "E001", "data": {"args": ["/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  "], "base_msg": "Error running SQL: {}", "name": "Postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Error running SQL: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"connection_name\": \"list_postgres\"} */\n\n    select distinct nspname from pg_namespace\n  ", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:18.000451Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Rolling back transaction.", "name": "Postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Rolling back transaction.", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:18.001085Z", "type": "log_line"}
{"code": "E001", "data": {"args": ["macro list_schemas"], "base_msg": "Error running SQL: {}", "name": "Postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Error running SQL: macro list_schemas", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:18.001608Z", "type": "log_line"}
{"code": "E001", "data": {"args": [], "base_msg": "Rolling back transaction.", "name": "Postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Postgres adapter: Rolling back transaction.", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:18.001834Z", "type": "log_line"}
{"code": "E011", "data": {"conn_name": "list_postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "On list_postgres: No close available on handle", "pid": 7594, "thread_name": "ThreadPoolExecutor-0_0", "ts": "2022-07-18T03:09:18.002123Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "master"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Connection 'master' was properly closed.", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:18.003858Z", "type": "log_line"}
{"code": "E008", "data": {"conn_name": "list_postgres"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Connection 'list_postgres' was properly closed.", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:18.004542Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c797e1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c7fabd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c7f9ac70>]}"}, "invocation_id": "bff52047-460d-4b89-86a5-f61eebd95e32", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c797e1f0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c7fabd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fe8c7f9ac70>]}", "pid": 7594, "thread_name": "MainThread", "ts": "2022-07-18T03:09:18.005424Z", "type": "log_line"}
