{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.736488Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"mimic\".\"public\".\"milrinone_durations__dbt_tmp\" rename to \"milrinone_durations\""}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\nalter table \"mimic\".\"public\".\"milrinone_durations__dbt_tmp\" rename to \"milrinone_durations\"", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.736758Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "ALTER TABLE"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "SQL status: ALTER TABLE in 0.0 seconds", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.737872Z", "type": "log_line"}
{"code": "E018", "data": {"conn_name": "model.mimic.milrinone_durations"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: COMMIT", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.742702Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.743056Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "COMMIT"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: COMMIT", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.743294Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "COMMIT"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "SQL status: COMMIT in 0.0 seconds", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.746382Z", "type": "log_line"}
{"code": "E015", "data": {"conn_name": "model.mimic.milrinone_durations", "conn_type": "postgres"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "Using postgres connection \"model.mimic.milrinone_durations\"", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.748647Z", "type": "log_line"}
{"code": "E016", "data": {"conn_name": "model.mimic.milrinone_durations", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\ndrop table if exists \"mimic\".\"public\".\"milrinone_durations__dbt_backup\" cascade"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: /* {\"app\": \"dbt\", \"dbt_version\": \"1.1.1\", \"profile_name\": \"mimic\", \"target_name\": \"dev\", \"node_id\": \"model.mimic.milrinone_durations\"} */\ndrop table if exists \"mimic\".\"public\".\"milrinone_durations__dbt_backup\" cascade", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.748879Z", "type": "log_line"}
{"code": "E017", "data": {"elapsed": 0.0, "status": "DROP TABLE"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "SQL status: DROP TABLE in 0.0 seconds", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.751190Z", "type": "log_line"}
{"code": "Z010", "data": {}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "finished collecting timing info", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.755454Z", "type": "log_line"}
{"code": "E010", "data": {"conn_name": "model.mimic.milrinone_durations"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "On model.mimic.milrinone_durations: Close", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.755824Z", "type": "log_line"}
{"code": "Z040", "data": {"kwargs": "{'category': 'dbt', 'action': 'run_model', 'label': '18be2160-e110-4ab9-ac08-d1d9dc739d97', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f008376aca0>]}"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '18be2160-e110-4ab9-ac08-d1d9dc739d97', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f008376aca0>]}", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.756793Z", "type": "log_line"}
{"code": "Q012", "data": {"description": "table model public.milrinone_durations", "execution_time": 0, "index": 44, "node_info": {"materialized": "table", "node_finished_at": null, "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-08-02T09:53:00.976726", "node_status": "compiling", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "status": "SELECT 1183", "total": 107}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "info", "log_version": 2, "msg": "44 of 107 OK created table model public.milrinone_durations .................... [\u001b[32mSELECT 1183\u001b[0m in 0.78s]", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.757225Z", "type": "log_line"}
{"code": "Q024", "data": {"node_info": {"materialized": "table", "node_finished_at": "2022-08-02T09:53:01.757870", "node_name": "milrinone_durations", "node_path": "durations/milrinone_durations.sql", "node_started_at": "2022-08-02T09:53:00.976726", "node_status": "success", "resource_type": "model", "unique_id": "model.mimic.milrinone_durations"}, "run_result": {"adapter_response": {"_message": "SELECT 1183", "code": "SELECT", "rows_affected": 1183}, "agate_table": null, "execution_time": 0.7783527374267578, "failures": null, "message": "SELECT 1183", "node": {"alias": "milrinone_durations", "build_path": "target/run/mimic/models/durations/milrinone_durations.sql", "checksum": {"checksum": "de72a370a9b322a2f7547be6c61aba0a9ccbc41cf90b3eabb0b30915b86e00fd", "name": "sha256"}, "columns": {}, "compiled": true, "compiled_path": "target/compiled/mimic/models/durations/milrinone_durations.sql", "compiled_sql": "-- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "config": {"alias": null, "column_types": {}, "database": null, "enabled": true, "full_refresh": null, "materialized": "table", "meta": {}, "on_schema_change": "ignore", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "schema": null, "tags": [], "unique_key": null}, "created_at": 1658942123.0848498, "database": "mimic", "deferred": false, "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "docs": {"show": true}, "extra_ctes": [], "extra_ctes_injected": true, "fqn": ["mimic", "durations", "milrinone_durations"], "meta": {}, "name": "milrinone_durations", "original_file_path": "models/durations/milrinone_durations.sql", "package_name": "mimic", "patch_path": null, "path": "durations/milrinone_durations.sql", "raw_sql": "-- This query extracts durations of milrinone administration\n-- Consecutive administrations are numbered 1, 2, ...\n-- Total time on the drug can be calculated from this table by grouping using ICUSTAY_ID\n\n-- Get drug administration data from CareVue first\nwith vasocv1 as\n(\n  select\n    icustay_id, charttime\n    -- case statement determining whether the ITEMID is an instance of vasopressor usage\n    , max(case when itemid = 30125 then 1 else 0 end) as vaso -- milrinone\n\n    -- the 'stopped' column indicates if a vasopressor has been disconnected\n    , max(case when itemid = 30125 and (stopped = 'Stopped' OR stopped like 'D/C%') then 1\n          else 0 end) as vaso_stopped\n\n    , max(case when itemid = 30125 and rate is not null then 1 else 0 end) as vaso_null\n    , max(case when itemid = 30125 then rate else null end) as vaso_rate\n    , max(case when itemid = 30125 then amount else null end) as vaso_amount\n\n  FROM inputevents_cv\n  where itemid = 30125 -- milrinone\n  group by icustay_id, charttime\n)\n, vasocv2 as\n(\n  select v.*\n    , sum(vaso_null) over (partition by icustay_id order by charttime) as vaso_partition\n  from\n    vasocv1 v\n)\n, vasocv3 as\n(\n  select v.*\n    , first_value(vaso_rate) over (partition by icustay_id, vaso_partition order by charttime) as vaso_prevrate_ifnull\n  from\n    vasocv2 v\n)\n, vasocv4 as\n(\nselect\n    icustay_id\n    , charttime\n    -- , (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) AS delta\n\n    , vaso\n    , vaso_rate\n    , vaso_amount\n    , vaso_stopped\n    , vaso_prevrate_ifnull\n\n    -- We define start time here\n    , case\n        when vaso = 0 then null\n\n        -- if this is the first instance of the vasoactive drug\n        when vaso_rate > 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso, vaso_null\n          order by charttime\n          )\n          is null\n          then 1\n\n        -- you often get a string of 0s\n        -- we decide not to set these as 1, just because it makes vasonum sequential\n        when vaso_rate = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- sometimes you get a string of NULL, associated with 0 volumes\n        -- same reason as before, we decide not to set these as 1\n        -- vaso_prevrate_ifnull is equal to the previous value *iff* the current value is null\n        when vaso_prevrate_ifnull = 0 and\n          LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 0\n          then 0\n\n        -- If the last recorded rate was 0, newvaso = 1\n        when LAG(vaso_prevrate_ifnull,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) = 0\n          then 1\n\n        -- If the last recorded vaso was D/C'd, newvaso = 1\n        when\n          LAG(vaso_stopped,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          )\n          = 1 then 1\n\n        -- ** not sure if the below is needed\n        --when (CHARTTIME - (LAG(CHARTTIME, 1) OVER (partition by icustay_id, vaso order by charttime))) > (interval '4 hours') then 1\n      else null\n      end as vaso_start\n\nFROM\n  vasocv3\n)\n-- propagate start/stop flags forward in time\n, vasocv5 as\n(\n  select v.*\n    , SUM(vaso_start) OVER (partition by icustay_id, vaso order by charttime) as vaso_first\nFROM\n  vasocv4 v\n)\n, vasocv6 as\n(\n  select v.*\n    -- We define end time here\n    , case\n        when vaso = 0\n          then null\n\n        -- If the recorded vaso was D/C'd, this is an end time\n        when vaso_stopped = 1\n          then vaso_first\n\n        -- If the rate is zero, this is the end time\n        when vaso_rate = 0\n          then vaso_first\n\n        -- the last row in the table is always a potential end time\n        -- this captures patients who die/are discharged while on vasopressors\n        -- in principle, this could add an extra end time for the vasopressor\n        -- however, since we later group on vaso_start, any extra end times are ignored\n        when LEAD(CHARTTIME,1)\n          OVER\n          (\n          partition by icustay_id, vaso\n          order by charttime\n          ) is null\n          then vaso_first\n\n        else null\n        end as vaso_stop\n    from vasocv5 v\n)\n\n-- -- if you want to look at the results of the table before grouping:\n-- select\n--   icustay_id, charttime, vaso, vaso_rate, vaso_amount\n--     , case when vaso_stopped = 1 then 'Y' else '' end as stopped\n--     , vaso_start\n--     , vaso_first\n--     , vaso_stop\n-- from vasocv6 order by charttime\n\n\n, vasocv as\n(\n-- below groups together vasopressor administrations into groups\nselect\n  icustay_id\n  -- the first non-null rate is considered the starttime\n  , min(case when vaso_rate is not null then charttime else null end) as starttime\n  -- the *first* time the first/last flags agree is the stop time for this duration\n  , min(case when vaso_first = vaso_stop then charttime else null end) as endtime\nfrom vasocv6\nwhere\n  vaso_first is not null -- bogus data\nand\n  vaso_first != 0 -- sometimes *only* a rate of 0 appears, i.e. the drug is never actually delivered\nand\n  icustay_id is not null -- there are data for \"floating\" admissions, we don't worry about these\ngroup by icustay_id, vaso_first\nhaving -- ensure start time is not the same as end time\n min(charttime) != min(case when vaso_first = vaso_stop then charttime else null end)\nand\n  max(vaso_rate) > 0 -- if the rate was always 0 or null, we consider it not a real drug delivery\n)\n\n-- now we extract the associated data for metavision patients\n, vasomv as\n(\n  select\n    icustay_id, linkorderid\n    , min(starttime) as starttime, max(endtime) as endtime\n  FROM inputevents_mv\n  where itemid = 221986 -- milrinone\n  and statusdescription != 'Rewritten' -- only valid orders\n  group by icustay_id, linkorderid\n)\n\nselect\n  icustay_id\n  -- generate a sequential integer for convenience\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasocv\n\nUNION ALL\n\nselect\n  icustay_id\n  , ROW_NUMBER() over (partition by icustay_id order by starttime) as vasonum\n  , starttime, endtime\n  , DATETIME_DIFF(endtime, starttime, 'HOUR') AS duration_hours\n  -- add durations\nfrom\n  vasomv\n\norder by icustay_id, vasonum", "refs": [], "relation_name": "\"mimic\".\"public\".\"milrinone_durations\"", "resource_type": "model", "root_path": "/home/ceci/Desktop/mimic-dbt", "schema": "public", "sources": [], "tags": [], "unique_id": "model.mimic.milrinone_durations", "unrendered_config": {"materialized": "table"}}, "status": "success", "thread_id": "Thread-1", "timing": [{"completed_at": "2022-08-02T09:53:00.981860Z", "name": "compile", "started_at": "2022-08-02T09:53:00.979479Z"}, {"completed_at": "2022-08-02T09:53:01.755411Z", "name": "execute", "started_at": "2022-08-02T09:53:00.982602Z"}]}, "unique_id": "model.mimic.milrinone_durations"}, "invocation_id": "18be2160-e110-4ab9-ac08-d1d9dc739d97", "level": "debug", "log_version": 2, "msg": "Finished running node model.mimic.milrinone_durations", "pid": 37477, "thread_name": "Thread-1", "ts": "2022-08-02T09:53:01.758074Z", "type": "log_line"}
